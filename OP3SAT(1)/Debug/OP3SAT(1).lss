
OP3SAT(1).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003908  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000110  20000000  00003908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000028b4  20000110  00003a18  00020110  2**2
                  ALLOC
  3 .stack        00002004  200029c4  000062cc  00020110  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003568b  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005fd3  00000000  00000000  0005581c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001856d  00000000  00000000  0005b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001788  00000000  00000000  00073d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000018e8  00000000  00000000  000754e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017a62  00000000  00000000  00076dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b737  00000000  00000000  0008e82e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068e77  00000000  00000000  000a9f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003c80  00000000  00000000  00112ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 49 00 20 1d 01 00 00 19 01 00 00 19 01 00 00     .I. ............
	...
      2c:	9d 1f 00 00 00 00 00 00 00 00 00 00 51 20 00 00     ............Q ..
      3c:	95 20 00 00 19 01 00 00 19 01 00 00 19 01 00 00     . ..............
      4c:	19 01 00 00 29 12 00 00 4d 13 00 00 19 01 00 00     ....)...M.......
      5c:	19 01 00 00 19 01 00 00 19 01 00 00 f1 15 00 00     ................
      6c:	19 01 00 00 19 01 00 00 49 1c 00 00 5d 1c 00 00     ........I...]...
      7c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      8c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      9c:	19 01 00 00 19 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000110 	.word	0x20000110
      c4:	00000000 	.word	0x00000000
      c8:	00003908 	.word	0x00003908

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000114 	.word	0x20000114
      f8:	00003908 	.word	0x00003908
      fc:	00003908 	.word	0x00003908
     100:	00000000 	.word	0x00000000

00000104 <atmel_start_init>:
     104:	b510      	push	{r4, lr}
     106:	4b02      	ldr	r3, [pc, #8]	; (110 <atmel_start_init+0xc>)
     108:	4798      	blx	r3
     10a:	4b02      	ldr	r3, [pc, #8]	; (114 <atmel_start_init+0x10>)
     10c:	4798      	blx	r3
     10e:	bd10      	pop	{r4, pc}
     110:	00000509 	.word	0x00000509
     114:	00001d39 	.word	0x00001d39

00000118 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     118:	e7fe      	b.n	118 <Dummy_Handler>
	...

0000011c <Reset_Handler>:
{
     11c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     11e:	4a12      	ldr	r2, [pc, #72]	; (168 <Reset_Handler+0x4c>)
     120:	4b12      	ldr	r3, [pc, #72]	; (16c <Reset_Handler+0x50>)
     122:	429a      	cmp	r2, r3
     124:	d009      	beq.n	13a <Reset_Handler+0x1e>
     126:	4b11      	ldr	r3, [pc, #68]	; (16c <Reset_Handler+0x50>)
     128:	4a0f      	ldr	r2, [pc, #60]	; (168 <Reset_Handler+0x4c>)
     12a:	e003      	b.n	134 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     12c:	6811      	ldr	r1, [r2, #0]
     12e:	6019      	str	r1, [r3, #0]
     130:	3304      	adds	r3, #4
     132:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     134:	490e      	ldr	r1, [pc, #56]	; (170 <Reset_Handler+0x54>)
     136:	428b      	cmp	r3, r1
     138:	d3f8      	bcc.n	12c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <Reset_Handler+0x58>)
     13c:	e002      	b.n	144 <Reset_Handler+0x28>
                *pDest++ = 0;
     13e:	2200      	movs	r2, #0
     140:	601a      	str	r2, [r3, #0]
     142:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4a0c      	ldr	r2, [pc, #48]	; (178 <Reset_Handler+0x5c>)
     146:	4293      	cmp	r3, r2
     148:	d3f9      	bcc.n	13e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14a:	4a0c      	ldr	r2, [pc, #48]	; (17c <Reset_Handler+0x60>)
     14c:	21ff      	movs	r1, #255	; 0xff
     14e:	4b0c      	ldr	r3, [pc, #48]	; (180 <Reset_Handler+0x64>)
     150:	438b      	bics	r3, r1
     152:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     154:	4a0b      	ldr	r2, [pc, #44]	; (184 <Reset_Handler+0x68>)
     156:	6851      	ldr	r1, [r2, #4]
     158:	2380      	movs	r3, #128	; 0x80
     15a:	430b      	orrs	r3, r1
     15c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <Reset_Handler+0x6c>)
     160:	4798      	blx	r3
        main();
     162:	4b0a      	ldr	r3, [pc, #40]	; (18c <Reset_Handler+0x70>)
     164:	4798      	blx	r3
     166:	e7fe      	b.n	166 <Reset_Handler+0x4a>
     168:	00003908 	.word	0x00003908
     16c:	20000000 	.word	0x20000000
     170:	20000110 	.word	0x20000110
     174:	20000110 	.word	0x20000110
     178:	200029c4 	.word	0x200029c4
     17c:	e000ed00 	.word	0xe000ed00
     180:	00000000 	.word	0x00000000
     184:	41004000 	.word	0x41004000
     188:	000035d5 	.word	0x000035d5
     18c:	00001cd5 	.word	0x00001cd5

00000190 <PTC_0_clock_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     190:	4a04      	ldr	r2, [pc, #16]	; (1a4 <PTC_0_clock_init+0x14>)
     192:	6a11      	ldr	r1, [r2, #32]
     194:	2380      	movs	r3, #128	; 0x80
     196:	031b      	lsls	r3, r3, #12
     198:	430b      	orrs	r3, r1
     19a:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <PTC_0_clock_init+0x18>)
     19e:	4b03      	ldr	r3, [pc, #12]	; (1ac <PTC_0_clock_init+0x1c>)
     1a0:	805a      	strh	r2, [r3, #2]
 */
static void PTC_0_clock_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, PTC);
	_gclk_enable_channel(PTC_GCLK_ID, CONF_GCLK_PTC_SRC);
}
     1a2:	4770      	bx	lr
     1a4:	40000400 	.word	0x40000400
     1a8:	0000401b 	.word	0x0000401b
     1ac:	40000c00 	.word	0x40000c00

000001b0 <TIMER_0_init>:
{
     1b0:	b510      	push	{r4, lr}
     1b2:	4a08      	ldr	r2, [pc, #32]	; (1d4 <TIMER_0_init+0x24>)
     1b4:	6a11      	ldr	r1, [r2, #32]
     1b6:	2380      	movs	r3, #128	; 0x80
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	430b      	orrs	r3, r1
     1bc:	6213      	str	r3, [r2, #32]
     1be:	4a06      	ldr	r2, [pc, #24]	; (1d8 <TIMER_0_init+0x28>)
     1c0:	4b06      	ldr	r3, [pc, #24]	; (1dc <TIMER_0_init+0x2c>)
     1c2:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC1, _tc_get_timer());
     1c4:	4b06      	ldr	r3, [pc, #24]	; (1e0 <TIMER_0_init+0x30>)
     1c6:	4798      	blx	r3
     1c8:	0002      	movs	r2, r0
     1ca:	4906      	ldr	r1, [pc, #24]	; (1e4 <TIMER_0_init+0x34>)
     1cc:	4806      	ldr	r0, [pc, #24]	; (1e8 <TIMER_0_init+0x38>)
     1ce:	4b07      	ldr	r3, [pc, #28]	; (1ec <TIMER_0_init+0x3c>)
     1d0:	4798      	blx	r3
}
     1d2:	bd10      	pop	{r4, pc}
     1d4:	40000400 	.word	0x40000400
     1d8:	00004013 	.word	0x00004013
     1dc:	40000c00 	.word	0x40000c00
     1e0:	00001c41 	.word	0x00001c41
     1e4:	42002400 	.word	0x42002400
     1e8:	200029a0 	.word	0x200029a0
     1ec:	00000a29 	.word	0x00000a29

000001f0 <ADC_0_CLOCK_init>:
     1f0:	4a04      	ldr	r2, [pc, #16]	; (204 <ADC_0_CLOCK_init+0x14>)
     1f2:	6a11      	ldr	r1, [r2, #32]
     1f4:	2380      	movs	r3, #128	; 0x80
     1f6:	025b      	lsls	r3, r3, #9
     1f8:	430b      	orrs	r3, r1
     1fa:	6213      	str	r3, [r2, #32]
     1fc:	4a02      	ldr	r2, [pc, #8]	; (208 <ADC_0_CLOCK_init+0x18>)
     1fe:	4b03      	ldr	r3, [pc, #12]	; (20c <ADC_0_CLOCK_init+0x1c>)
     200:	805a      	strh	r2, [r3, #2]
}
     202:	4770      	bx	lr
     204:	40000400 	.word	0x40000400
     208:	00004017 	.word	0x00004017
     20c:	40000c00 	.word	0x40000c00

00000210 <ADC_0_init>:
{
     210:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     212:	4b04      	ldr	r3, [pc, #16]	; (224 <ADC_0_init+0x14>)
     214:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     216:	2200      	movs	r2, #0
     218:	4903      	ldr	r1, [pc, #12]	; (228 <ADC_0_init+0x18>)
     21a:	4804      	ldr	r0, [pc, #16]	; (22c <ADC_0_init+0x1c>)
     21c:	4b04      	ldr	r3, [pc, #16]	; (230 <ADC_0_init+0x20>)
     21e:	4798      	blx	r3
}
     220:	bd10      	pop	{r4, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	000001f1 	.word	0x000001f1
     228:	42004000 	.word	0x42004000
     22c:	20002978 	.word	0x20002978
     230:	000005d1 	.word	0x000005d1

00000234 <EXTERNAL_IRQ_0_init>:
{
     234:	b510      	push	{r4, lr}
     236:	4a03      	ldr	r2, [pc, #12]	; (244 <EXTERNAL_IRQ_0_init+0x10>)
     238:	4b03      	ldr	r3, [pc, #12]	; (248 <EXTERNAL_IRQ_0_init+0x14>)
     23a:	805a      	strh	r2, [r3, #2]
	ext_irq_init();
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <EXTERNAL_IRQ_0_init+0x18>)
     23e:	4798      	blx	r3
}
     240:	bd10      	pop	{r4, pc}
     242:	46c0      	nop			; (mov r8, r8)
     244:	00004003 	.word	0x00004003
     248:	40000c00 	.word	0x40000c00
     24c:	000006ed 	.word	0x000006ed

00000250 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     250:	4a02      	ldr	r2, [pc, #8]	; (25c <FLASH_0_CLOCK_init+0xc>)
     252:	69d3      	ldr	r3, [r2, #28]
     254:	2104      	movs	r1, #4
     256:	430b      	orrs	r3, r1
     258:	61d3      	str	r3, [r2, #28]
}
     25a:	4770      	bx	lr
     25c:	40000400 	.word	0x40000400

00000260 <FLASH_0_init>:
{
     260:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     262:	4b03      	ldr	r3, [pc, #12]	; (270 <FLASH_0_init+0x10>)
     264:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     266:	4903      	ldr	r1, [pc, #12]	; (274 <FLASH_0_init+0x14>)
     268:	4803      	ldr	r0, [pc, #12]	; (278 <FLASH_0_init+0x18>)
     26a:	4b04      	ldr	r3, [pc, #16]	; (27c <FLASH_0_init+0x1c>)
     26c:	4798      	blx	r3
}
     26e:	bd10      	pop	{r4, pc}
     270:	00000251 	.word	0x00000251
     274:	41004000 	.word	0x41004000
     278:	20002958 	.word	0x20002958
     27c:	00000739 	.word	0x00000739

00000280 <SPI_0_PORT_init>:
{
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	46ce      	mov	lr, r9
     284:	4647      	mov	r7, r8
     286:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     288:	22c0      	movs	r2, #192	; 0xc0
     28a:	05d2      	lsls	r2, r2, #23
     28c:	2401      	movs	r4, #1
     28e:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     290:	6094      	str	r4, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     292:	4b25      	ldr	r3, [pc, #148]	; (328 <SPI_0_PORT_init+0xa8>)
     294:	4925      	ldr	r1, [pc, #148]	; (32c <SPI_0_PORT_init+0xac>)
     296:	6299      	str	r1, [r3, #40]	; 0x28
     298:	27c0      	movs	r7, #192	; 0xc0
     29a:	063f      	lsls	r7, r7, #24
     29c:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	2040      	movs	r0, #64	; 0x40
     2a0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a2:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a4:	2501      	movs	r5, #1
     2a6:	4329      	orrs	r1, r5
     2a8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2aa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2ac:	2630      	movs	r6, #48	; 0x30
     2ae:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2b0:	3831      	subs	r0, #49	; 0x31
     2b2:	4681      	mov	r9, r0
     2b4:	4381      	bics	r1, r0
     2b6:	4688      	mov	r8, r1
	tmp |= PORT_PMUX_PMUXE(data);
     2b8:	2103      	movs	r1, #3
     2ba:	468c      	mov	ip, r1
     2bc:	4661      	mov	r1, ip
     2be:	4640      	mov	r0, r8
     2c0:	4308      	orrs	r0, r1
     2c2:	b2c1      	uxtb	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2c4:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c6:	2102      	movs	r1, #2
     2c8:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2ca:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4918      	ldr	r1, [pc, #96]	; (330 <SPI_0_PORT_init+0xb0>)
     2ce:	6299      	str	r1, [r3, #40]	; 0x28
     2d0:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	2741      	movs	r7, #65	; 0x41
     2d4:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d6:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2d8:	4329      	orrs	r1, r5
     2da:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2de:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2e0:	3f32      	subs	r7, #50	; 0x32
     2e2:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     2e4:	2730      	movs	r7, #48	; 0x30
     2e6:	4339      	orrs	r1, r7
     2e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ea:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2ec:	2180      	movs	r1, #128	; 0x80
     2ee:	02c9      	lsls	r1, r1, #11
     2f0:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2f2:	4a10      	ldr	r2, [pc, #64]	; (334 <SPI_0_PORT_init+0xb4>)
     2f4:	629a      	str	r2, [r3, #40]	; 0x28
     2f6:	4a10      	ldr	r2, [pc, #64]	; (338 <SPI_0_PORT_init+0xb8>)
     2f8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2fa:	2152      	movs	r1, #82	; 0x52
     2fc:	5c5a      	ldrb	r2, [r3, r1]
     2fe:	3e2c      	subs	r6, #44	; 0x2c
     300:	43b2      	bics	r2, r6
     302:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     304:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     306:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     308:	432a      	orrs	r2, r5
     30a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     30e:	3919      	subs	r1, #25
     310:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     312:	4648      	mov	r0, r9
     314:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     316:	2002      	movs	r0, #2
     318:	4302      	orrs	r2, r0
     31a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31c:	545a      	strb	r2, [r3, r1]
}
     31e:	bc0c      	pop	{r2, r3}
     320:	4690      	mov	r8, r2
     322:	4699      	mov	r9, r3
     324:	bdf0      	pop	{r4, r5, r6, r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	41004400 	.word	0x41004400
     32c:	40000001 	.word	0x40000001
     330:	40000002 	.word	0x40000002
     334:	40020000 	.word	0x40020000
     338:	c0020004 	.word	0xc0020004

0000033c <SPI_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     33c:	4a04      	ldr	r2, [pc, #16]	; (350 <SPI_0_CLOCK_init+0x14>)
     33e:	6a13      	ldr	r3, [r2, #32]
     340:	2108      	movs	r1, #8
     342:	430b      	orrs	r3, r1
     344:	6213      	str	r3, [r2, #32]
     346:	4a03      	ldr	r2, [pc, #12]	; (354 <SPI_0_CLOCK_init+0x18>)
     348:	4b03      	ldr	r3, [pc, #12]	; (358 <SPI_0_CLOCK_init+0x1c>)
     34a:	805a      	strh	r2, [r3, #2]
}
     34c:	4770      	bx	lr
     34e:	46c0      	nop			; (mov r8, r8)
     350:	40000400 	.word	0x40000400
     354:	0000400e 	.word	0x0000400e
     358:	40000c00 	.word	0x40000c00

0000035c <SPI_0_init>:
{
     35c:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     35e:	4b04      	ldr	r3, [pc, #16]	; (370 <SPI_0_init+0x14>)
     360:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     362:	4904      	ldr	r1, [pc, #16]	; (374 <SPI_0_init+0x18>)
     364:	4804      	ldr	r0, [pc, #16]	; (378 <SPI_0_init+0x1c>)
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <SPI_0_init+0x20>)
     368:	4798      	blx	r3
	SPI_0_PORT_init();
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <SPI_0_init+0x24>)
     36c:	4798      	blx	r3
}
     36e:	bd10      	pop	{r4, pc}
     370:	0000033d 	.word	0x0000033d
     374:	42000c00 	.word	0x42000c00
     378:	20002988 	.word	0x20002988
     37c:	00000855 	.word	0x00000855
     380:	00000281 	.word	0x00000281

00000384 <SERIAL_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SERIAL_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2120      	movs	r1, #32
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SERIAL_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SERIAL_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004010 	.word	0x00004010
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SERIAL_PORT_init>:
{
     3a4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a6:	4b0f      	ldr	r3, [pc, #60]	; (3e4 <SERIAL_PORT_init+0x40>)
     3a8:	2258      	movs	r2, #88	; 0x58
     3aa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ac:	2501      	movs	r5, #1
     3ae:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b0:	2401      	movs	r4, #1
     3b2:	4321      	orrs	r1, r4
     3b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b8:	203c      	movs	r0, #60	; 0x3c
     3ba:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3bc:	3a49      	subs	r2, #73	; 0x49
     3be:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c0:	2202      	movs	r2, #2
     3c2:	4311      	orrs	r1, r2
     3c4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	2159      	movs	r1, #89	; 0x59
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	394a      	subs	r1, #74	; 0x4a
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	2120      	movs	r1, #32
     3dc:	430a      	orrs	r2, r1
     3de:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e0:	541a      	strb	r2, [r3, r0]
}
     3e2:	bd30      	pop	{r4, r5, pc}
     3e4:	41004400 	.word	0x41004400

000003e8 <SERIAL_init>:
{
     3e8:	b510      	push	{r4, lr}
     3ea:	b082      	sub	sp, #8
	SERIAL_CLOCK_init();
     3ec:	4b06      	ldr	r3, [pc, #24]	; (408 <SERIAL_init+0x20>)
     3ee:	4798      	blx	r3
	usart_async_init(&SERIAL, SERCOM3, SERIAL_buffer, SERIAL_BUFFER_SIZE, (void *)NULL);
     3f0:	2300      	movs	r3, #0
     3f2:	9300      	str	r3, [sp, #0]
     3f4:	3310      	adds	r3, #16
     3f6:	4a05      	ldr	r2, [pc, #20]	; (40c <SERIAL_init+0x24>)
     3f8:	4905      	ldr	r1, [pc, #20]	; (410 <SERIAL_init+0x28>)
     3fa:	4806      	ldr	r0, [pc, #24]	; (414 <SERIAL_init+0x2c>)
     3fc:	4c06      	ldr	r4, [pc, #24]	; (418 <SERIAL_init+0x30>)
     3fe:	47a0      	blx	r4
	SERIAL_PORT_init();
     400:	4b06      	ldr	r3, [pc, #24]	; (41c <SERIAL_init+0x34>)
     402:	4798      	blx	r3
}
     404:	b002      	add	sp, #8
     406:	bd10      	pop	{r4, pc}
     408:	00000385 	.word	0x00000385
     40c:	2000012c 	.word	0x2000012c
     410:	42001400 	.word	0x42001400
     414:	200028ec 	.word	0x200028ec
     418:	00000bd9 	.word	0x00000bd9
     41c:	000003a5 	.word	0x000003a5

00000420 <delay_driver_init>:
{
     420:	b510      	push	{r4, lr}
	delay_init(SysTick);
     422:	4802      	ldr	r0, [pc, #8]	; (42c <delay_driver_init+0xc>)
     424:	4b02      	ldr	r3, [pc, #8]	; (430 <delay_driver_init+0x10>)
     426:	4798      	blx	r3
}
     428:	bd10      	pop	{r4, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	e000e010 	.word	0xe000e010
     430:	00000675 	.word	0x00000675

00000434 <PWM_0_CLOCK_init>:
     434:	4a04      	ldr	r2, [pc, #16]	; (448 <PWM_0_CLOCK_init+0x14>)
     436:	6a11      	ldr	r1, [r2, #32]
     438:	2380      	movs	r3, #128	; 0x80
     43a:	005b      	lsls	r3, r3, #1
     43c:	430b      	orrs	r3, r1
     43e:	6213      	str	r3, [r2, #32]
     440:	4a02      	ldr	r2, [pc, #8]	; (44c <PWM_0_CLOCK_init+0x18>)
     442:	4b03      	ldr	r3, [pc, #12]	; (450 <PWM_0_CLOCK_init+0x1c>)
     444:	805a      	strh	r2, [r3, #2]
}
     446:	4770      	bx	lr
     448:	40000400 	.word	0x40000400
     44c:	00004013 	.word	0x00004013
     450:	40000c00 	.word	0x40000c00

00000454 <PWM_0_init>:
{
     454:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <PWM_0_init+0x18>)
     458:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     45a:	4b05      	ldr	r3, [pc, #20]	; (470 <PWM_0_init+0x1c>)
     45c:	4798      	blx	r3
     45e:	0002      	movs	r2, r0
     460:	4904      	ldr	r1, [pc, #16]	; (474 <PWM_0_init+0x20>)
     462:	4805      	ldr	r0, [pc, #20]	; (478 <PWM_0_init+0x24>)
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <PWM_0_init+0x28>)
     466:	4798      	blx	r3
}
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	00000435 	.word	0x00000435
     470:	00001c45 	.word	0x00001c45
     474:	42002000 	.word	0x42002000
     478:	2000293c 	.word	0x2000293c
     47c:	0000080d 	.word	0x0000080d

00000480 <AC_0_CLOCK_init>:
     480:	4a05      	ldr	r2, [pc, #20]	; (498 <AC_0_CLOCK_init+0x18>)
     482:	6a11      	ldr	r1, [r2, #32]
     484:	2380      	movs	r3, #128	; 0x80
     486:	029b      	lsls	r3, r3, #10
     488:	430b      	orrs	r3, r1
     48a:	6213      	str	r3, [r2, #32]
     48c:	4b03      	ldr	r3, [pc, #12]	; (49c <AC_0_CLOCK_init+0x1c>)
     48e:	4a04      	ldr	r2, [pc, #16]	; (4a0 <AC_0_CLOCK_init+0x20>)
     490:	805a      	strh	r2, [r3, #2]
     492:	4a04      	ldr	r2, [pc, #16]	; (4a4 <AC_0_CLOCK_init+0x24>)
     494:	805a      	strh	r2, [r3, #2]
}
     496:	4770      	bx	lr
     498:	40000400 	.word	0x40000400
     49c:	40000c00 	.word	0x40000c00
     4a0:	00004018 	.word	0x00004018
     4a4:	00004019 	.word	0x00004019

000004a8 <AC_0_init>:
{
     4a8:	b510      	push	{r4, lr}
	AC_0_CLOCK_init();
     4aa:	4b03      	ldr	r3, [pc, #12]	; (4b8 <AC_0_init+0x10>)
     4ac:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     4ae:	4903      	ldr	r1, [pc, #12]	; (4bc <AC_0_init+0x14>)
     4b0:	4803      	ldr	r0, [pc, #12]	; (4c0 <AC_0_init+0x18>)
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <AC_0_init+0x1c>)
     4b4:	4798      	blx	r3
}
     4b6:	bd10      	pop	{r4, pc}
     4b8:	00000481 	.word	0x00000481
     4bc:	42004400 	.word	0x42004400
     4c0:	20002974 	.word	0x20002974
     4c4:	00000599 	.word	0x00000599

000004c8 <DAC_0_CLOCK_init>:
     4c8:	4a04      	ldr	r2, [pc, #16]	; (4dc <DAC_0_CLOCK_init+0x14>)
     4ca:	6a11      	ldr	r1, [r2, #32]
     4cc:	2380      	movs	r3, #128	; 0x80
     4ce:	02db      	lsls	r3, r3, #11
     4d0:	430b      	orrs	r3, r1
     4d2:	6213      	str	r3, [r2, #32]
     4d4:	4a02      	ldr	r2, [pc, #8]	; (4e0 <DAC_0_CLOCK_init+0x18>)
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <DAC_0_CLOCK_init+0x1c>)
     4d8:	805a      	strh	r2, [r3, #2]
}
     4da:	4770      	bx	lr
     4dc:	40000400 	.word	0x40000400
     4e0:	0000401a 	.word	0x0000401a
     4e4:	40000c00 	.word	0x40000c00

000004e8 <DAC_0_init>:
{
     4e8:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     4ea:	4b03      	ldr	r3, [pc, #12]	; (4f8 <DAC_0_init+0x10>)
     4ec:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     4ee:	4903      	ldr	r1, [pc, #12]	; (4fc <DAC_0_init+0x14>)
     4f0:	4803      	ldr	r0, [pc, #12]	; (500 <DAC_0_init+0x18>)
     4f2:	4b04      	ldr	r3, [pc, #16]	; (504 <DAC_0_init+0x1c>)
     4f4:	4798      	blx	r3
}
     4f6:	bd10      	pop	{r4, pc}
     4f8:	000004c9 	.word	0x000004c9
     4fc:	42004800 	.word	0x42004800
     500:	2000297c 	.word	0x2000297c
     504:	00000625 	.word	0x00000625

00000508 <system_init>:

void system_init(void)
{
     508:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     50a:	4b15      	ldr	r3, [pc, #84]	; (560 <system_init+0x58>)
     50c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50e:	22c0      	movs	r2, #192	; 0xc0
     510:	05d2      	lsls	r2, r2, #23
     512:	2180      	movs	r1, #128	; 0x80
     514:	01c9      	lsls	r1, r1, #7
     516:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     518:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51a:	4b12      	ldr	r3, [pc, #72]	; (564 <system_init+0x5c>)
     51c:	4812      	ldr	r0, [pc, #72]	; (568 <system_init+0x60>)
     51e:	6298      	str	r0, [r3, #40]	; 0x28
     520:	20c0      	movs	r0, #192	; 0xc0
     522:	0600      	lsls	r0, r0, #24
     524:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     526:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     528:	214e      	movs	r1, #78	; 0x4e
     52a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     52c:	2001      	movs	r0, #1
     52e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     530:	545a      	strb	r2, [r3, r1]
	// <true"> High
	0);
	
	gpio_set_pin_function(BLINK, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     532:	4b0e      	ldr	r3, [pc, #56]	; (56c <system_init+0x64>)
     534:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     536:	4b0e      	ldr	r3, [pc, #56]	; (570 <system_init+0x68>)
     538:	4798      	blx	r3

	FLASH_0_init();
     53a:	4b0e      	ldr	r3, [pc, #56]	; (574 <system_init+0x6c>)
     53c:	4798      	blx	r3

	SPI_0_init();
     53e:	4b0e      	ldr	r3, [pc, #56]	; (578 <system_init+0x70>)
     540:	4798      	blx	r3
	SERIAL_init();
     542:	4b0e      	ldr	r3, [pc, #56]	; (57c <system_init+0x74>)
     544:	4798      	blx	r3

	delay_driver_init();
     546:	4b0e      	ldr	r3, [pc, #56]	; (580 <system_init+0x78>)
     548:	4798      	blx	r3

	PWM_0_init();
     54a:	4b0e      	ldr	r3, [pc, #56]	; (584 <system_init+0x7c>)
     54c:	4798      	blx	r3

	TIMER_0_init();
     54e:	4b0e      	ldr	r3, [pc, #56]	; (588 <system_init+0x80>)
     550:	4798      	blx	r3
	AC_0_init();
     552:	4b0e      	ldr	r3, [pc, #56]	; (58c <system_init+0x84>)
     554:	4798      	blx	r3

	DAC_0_init();
     556:	4b0e      	ldr	r3, [pc, #56]	; (590 <system_init+0x88>)
     558:	4798      	blx	r3

	PTC_0_clock_init();
     55a:	4b0e      	ldr	r3, [pc, #56]	; (594 <system_init+0x8c>)
     55c:	4798      	blx	r3
}
     55e:	bd10      	pop	{r4, pc}
     560:	000010f9 	.word	0x000010f9
     564:	41004400 	.word	0x41004400
     568:	40004000 	.word	0x40004000
     56c:	00000211 	.word	0x00000211
     570:	00000235 	.word	0x00000235
     574:	00000261 	.word	0x00000261
     578:	0000035d 	.word	0x0000035d
     57c:	000003e9 	.word	0x000003e9
     580:	00000421 	.word	0x00000421
     584:	00000455 	.word	0x00000455
     588:	000001b1 	.word	0x000001b1
     58c:	000004a9 	.word	0x000004a9
     590:	000004e9 	.word	0x000004e9
     594:	00000191 	.word	0x00000191

00000598 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	0004      	movs	r4, r0
     59c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     59e:	2800      	cmp	r0, #0
     5a0:	d00d      	beq.n	5be <ac_sync_init+0x26>
     5a2:	2900      	cmp	r1, #0
     5a4:	d009      	beq.n	5ba <ac_sync_init+0x22>
     5a6:	2001      	movs	r0, #1
     5a8:	2231      	movs	r2, #49	; 0x31
     5aa:	4906      	ldr	r1, [pc, #24]	; (5c4 <ac_sync_init+0x2c>)
     5ac:	4b06      	ldr	r3, [pc, #24]	; (5c8 <ac_sync_init+0x30>)
     5ae:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
     5b0:	0029      	movs	r1, r5
     5b2:	0020      	movs	r0, r4
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <ac_sync_init+0x34>)
     5b6:	4798      	blx	r3
}
     5b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5ba:	2000      	movs	r0, #0
     5bc:	e7f4      	b.n	5a8 <ac_sync_init+0x10>
     5be:	2000      	movs	r0, #0
     5c0:	e7f2      	b.n	5a8 <ac_sync_init+0x10>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	00003640 	.word	0x00003640
     5c8:	00000d19 	.word	0x00000d19
     5cc:	00000f3d 	.word	0x00000f3d

000005d0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5d6:	2800      	cmp	r0, #0
     5d8:	d00d      	beq.n	5f6 <adc_sync_init+0x26>
     5da:	2900      	cmp	r1, #0
     5dc:	d009      	beq.n	5f2 <adc_sync_init+0x22>
     5de:	2001      	movs	r0, #1
     5e0:	2239      	movs	r2, #57	; 0x39
     5e2:	4906      	ldr	r1, [pc, #24]	; (5fc <adc_sync_init+0x2c>)
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <adc_sync_init+0x30>)
     5e6:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     5e8:	0029      	movs	r1, r5
     5ea:	0020      	movs	r0, r4
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <adc_sync_init+0x34>)
     5ee:	4798      	blx	r3
}
     5f0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5f2:	2000      	movs	r0, #0
     5f4:	e7f4      	b.n	5e0 <adc_sync_init+0x10>
     5f6:	2000      	movs	r0, #0
     5f8:	e7f2      	b.n	5e0 <adc_sync_init+0x10>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	0000365c 	.word	0x0000365c
     600:	00000d19 	.word	0x00000d19
     604:	000010b5 	.word	0x000010b5

00000608 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     608:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     60c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     60e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     610:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     614:	4770      	bx	lr

00000616 <atomic_leave_critical>:
     616:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     61a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     61c:	f383 8810 	msr	PRIMASK, r3
}
     620:	4770      	bx	lr
	...

00000624 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0004      	movs	r4, r0
     628:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     62a:	2800      	cmp	r0, #0
     62c:	d010      	beq.n	650 <dac_sync_init+0x2c>
     62e:	2900      	cmp	r1, #0
     630:	d00c      	beq.n	64c <dac_sync_init+0x28>
     632:	2001      	movs	r0, #1
     634:	2232      	movs	r2, #50	; 0x32
     636:	490c      	ldr	r1, [pc, #48]	; (668 <dac_sync_init+0x44>)
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <dac_sync_init+0x48>)
     63a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     63c:	0029      	movs	r1, r5
     63e:	0020      	movs	r0, r4
     640:	4b0b      	ldr	r3, [pc, #44]	; (670 <dac_sync_init+0x4c>)
     642:	4798      	blx	r3
	if (rc) {
     644:	2800      	cmp	r0, #0
     646:	d10e      	bne.n	666 <dac_sync_init+0x42>
     648:	2300      	movs	r3, #0
     64a:	e00a      	b.n	662 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     64c:	2000      	movs	r0, #0
     64e:	e7f1      	b.n	634 <dac_sync_init+0x10>
     650:	2000      	movs	r0, #0
     652:	e7ef      	b.n	634 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     654:	00da      	lsls	r2, r3, #3
     656:	18a2      	adds	r2, r4, r2
     658:	2100      	movs	r1, #0
     65a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     65c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     65e:	3301      	adds	r3, #1
     660:	b2db      	uxtb	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	d0f6      	beq.n	654 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     666:	bd70      	pop	{r4, r5, r6, pc}
     668:	00003678 	.word	0x00003678
     66c:	00000d19 	.word	0x00000d19
     670:	0000116d 	.word	0x0000116d

00000674 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     674:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     676:	4b02      	ldr	r3, [pc, #8]	; (680 <delay_init+0xc>)
     678:	6018      	str	r0, [r3, #0]
     67a:	4b02      	ldr	r3, [pc, #8]	; (684 <delay_init+0x10>)
     67c:	4798      	blx	r3
}
     67e:	bd10      	pop	{r4, pc}
     680:	2000013c 	.word	0x2000013c
     684:	00001919 	.word	0x00001919

00000688 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     688:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <delay_ms+0x14>)
     68c:	681c      	ldr	r4, [r3, #0]
     68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <delay_ms+0x18>)
     690:	4798      	blx	r3
     692:	0001      	movs	r1, r0
     694:	0020      	movs	r0, r4
     696:	4b03      	ldr	r3, [pc, #12]	; (6a4 <delay_ms+0x1c>)
     698:	4798      	blx	r3
}
     69a:	bd10      	pop	{r4, pc}
     69c:	2000013c 	.word	0x2000013c
     6a0:	000010ed 	.word	0x000010ed
     6a4:	00001925 	.word	0x00001925

000006a8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     6a8:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     6aa:	2501      	movs	r5, #1
     6ac:	2400      	movs	r4, #0

	while (upper >= lower) {
     6ae:	e007      	b.n	6c0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     6b0:	4a0d      	ldr	r2, [pc, #52]	; (6e8 <process_ext_irq+0x40>)
     6b2:	58b3      	ldr	r3, [r6, r2]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d000      	beq.n	6ba <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     6b8:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     6ba:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     6bc:	3a01      	subs	r2, #1
     6be:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     6c0:	42ac      	cmp	r4, r5
     6c2:	d8fa      	bhi.n	6ba <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     6c4:	192b      	adds	r3, r5, r4
     6c6:	105b      	asrs	r3, r3, #1
     6c8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     6ca:	2a00      	cmp	r2, #0
     6cc:	d1f5      	bne.n	6ba <process_ext_irq+0x12>
     6ce:	21ff      	movs	r1, #255	; 0xff
     6d0:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     6d2:	00de      	lsls	r6, r3, #3
     6d4:	4904      	ldr	r1, [pc, #16]	; (6e8 <process_ext_irq+0x40>)
     6d6:	1989      	adds	r1, r1, r6
     6d8:	6849      	ldr	r1, [r1, #4]
     6da:	4281      	cmp	r1, r0
     6dc:	d0e8      	beq.n	6b0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     6de:	d2ed      	bcs.n	6bc <process_ext_irq+0x14>
			lower = middle + 1;
     6e0:	3201      	adds	r2, #1
     6e2:	b2d4      	uxtb	r4, r2
     6e4:	e7ec      	b.n	6c0 <process_ext_irq+0x18>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	20000140 	.word	0x20000140

000006ec <ext_irq_init>:
{
     6ec:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     6ee:	2300      	movs	r3, #0
     6f0:	2b00      	cmp	r3, #0
     6f2:	d003      	beq.n	6fc <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     6f4:	4807      	ldr	r0, [pc, #28]	; (714 <ext_irq_init+0x28>)
     6f6:	4b08      	ldr	r3, [pc, #32]	; (718 <ext_irq_init+0x2c>)
     6f8:	4798      	blx	r3
}
     6fa:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     6fc:	4a07      	ldr	r2, [pc, #28]	; (71c <ext_irq_init+0x30>)
     6fe:	00d9      	lsls	r1, r3, #3
     700:	1850      	adds	r0, r2, r1
     702:	2401      	movs	r4, #1
     704:	4264      	negs	r4, r4
     706:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     708:	2000      	movs	r0, #0
     70a:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     70c:	3301      	adds	r3, #1
     70e:	b29b      	uxth	r3, r3
     710:	e7ee      	b.n	6f0 <ext_irq_init+0x4>
     712:	46c0      	nop			; (mov r8, r8)
     714:	000006a9 	.word	0x000006a9
     718:	00001199 	.word	0x00001199
     71c:	20000140 	.word	0x20000140

00000720 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     720:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     722:	6943      	ldr	r3, [r0, #20]
     724:	2b00      	cmp	r3, #0
     726:	d000      	beq.n	72a <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     728:	4798      	blx	r3
	}
}
     72a:	bd10      	pop	{r4, pc}

0000072c <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     72c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     72e:	6983      	ldr	r3, [r0, #24]
     730:	2b00      	cmp	r3, #0
     732:	d000      	beq.n	736 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     734:	4798      	blx	r3
	}
}
     736:	bd10      	pop	{r4, pc}

00000738 <flash_init>:
{
     738:	b570      	push	{r4, r5, r6, lr}
     73a:	0004      	movs	r4, r0
     73c:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     73e:	2800      	cmp	r0, #0
     740:	d013      	beq.n	76a <flash_init+0x32>
     742:	2900      	cmp	r1, #0
     744:	d00f      	beq.n	766 <flash_init+0x2e>
     746:	2001      	movs	r0, #1
     748:	2238      	movs	r2, #56	; 0x38
     74a:	4909      	ldr	r1, [pc, #36]	; (770 <flash_init+0x38>)
     74c:	4b09      	ldr	r3, [pc, #36]	; (774 <flash_init+0x3c>)
     74e:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     750:	0029      	movs	r1, r5
     752:	0020      	movs	r0, r4
     754:	4b08      	ldr	r3, [pc, #32]	; (778 <flash_init+0x40>)
     756:	4798      	blx	r3
	if (rc) {
     758:	2800      	cmp	r0, #0
     75a:	d103      	bne.n	764 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     75c:	4b07      	ldr	r3, [pc, #28]	; (77c <flash_init+0x44>)
     75e:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <flash_init+0x48>)
     762:	6063      	str	r3, [r4, #4]
}
     764:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     766:	2000      	movs	r0, #0
     768:	e7ee      	b.n	748 <flash_init+0x10>
     76a:	2000      	movs	r0, #0
     76c:	e7ec      	b.n	748 <flash_init+0x10>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00003694 	.word	0x00003694
     774:	00000d19 	.word	0x00000d19
     778:	000012ed 	.word	0x000012ed
     77c:	00000721 	.word	0x00000721
     780:	0000072d 	.word	0x0000072d

00000784 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     784:	b570      	push	{r4, r5, r6, lr}
     786:	0004      	movs	r4, r0
     788:	000d      	movs	r5, r1
     78a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     78c:	2800      	cmp	r0, #0
     78e:	d00e      	beq.n	7ae <io_write+0x2a>
     790:	2900      	cmp	r1, #0
     792:	d00a      	beq.n	7aa <io_write+0x26>
     794:	2001      	movs	r0, #1
     796:	2234      	movs	r2, #52	; 0x34
     798:	4906      	ldr	r1, [pc, #24]	; (7b4 <io_write+0x30>)
     79a:	4b07      	ldr	r3, [pc, #28]	; (7b8 <io_write+0x34>)
     79c:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     79e:	6823      	ldr	r3, [r4, #0]
     7a0:	0032      	movs	r2, r6
     7a2:	0029      	movs	r1, r5
     7a4:	0020      	movs	r0, r4
     7a6:	4798      	blx	r3
}
     7a8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     7aa:	2000      	movs	r0, #0
     7ac:	e7f3      	b.n	796 <io_write+0x12>
     7ae:	2000      	movs	r0, #0
     7b0:	e7f1      	b.n	796 <io_write+0x12>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	000036ac 	.word	0x000036ac
     7b8:	00000d19 	.word	0x00000d19

000007bc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7bc:	b570      	push	{r4, r5, r6, lr}
     7be:	0004      	movs	r4, r0
     7c0:	000d      	movs	r5, r1
     7c2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     7c4:	2800      	cmp	r0, #0
     7c6:	d00e      	beq.n	7e6 <io_read+0x2a>
     7c8:	2900      	cmp	r1, #0
     7ca:	d00a      	beq.n	7e2 <io_read+0x26>
     7cc:	2001      	movs	r0, #1
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	4906      	ldr	r1, [pc, #24]	; (7ec <io_read+0x30>)
     7d2:	4b07      	ldr	r3, [pc, #28]	; (7f0 <io_read+0x34>)
     7d4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     7d6:	6863      	ldr	r3, [r4, #4]
     7d8:	0032      	movs	r2, r6
     7da:	0029      	movs	r1, r5
     7dc:	0020      	movs	r0, r4
     7de:	4798      	blx	r3
}
     7e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     7e2:	2000      	movs	r0, #0
     7e4:	e7f3      	b.n	7ce <io_read+0x12>
     7e6:	2000      	movs	r0, #0
     7e8:	e7f1      	b.n	7ce <io_read+0x12>
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	000036ac 	.word	0x000036ac
     7f0:	00000d19 	.word	0x00000d19

000007f4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     7f4:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     7f6:	6943      	ldr	r3, [r0, #20]
     7f8:	2b00      	cmp	r3, #0
     7fa:	d000      	beq.n	7fe <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     7fc:	4798      	blx	r3
	}
}
     7fe:	bd10      	pop	{r4, pc}

00000800 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     800:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     802:	6983      	ldr	r3, [r0, #24]
     804:	2b00      	cmp	r3, #0
     806:	d000      	beq.n	80a <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     808:	4798      	blx	r3
	}
}
     80a:	bd10      	pop	{r4, pc}

0000080c <pwm_init>:
{
     80c:	b570      	push	{r4, r5, r6, lr}
     80e:	0004      	movs	r4, r0
     810:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     812:	2800      	cmp	r0, #0
     814:	d012      	beq.n	83c <pwm_init+0x30>
     816:	2900      	cmp	r1, #0
     818:	d00e      	beq.n	838 <pwm_init+0x2c>
     81a:	2001      	movs	r0, #1
     81c:	2233      	movs	r2, #51	; 0x33
     81e:	4908      	ldr	r1, [pc, #32]	; (840 <pwm_init+0x34>)
     820:	4b08      	ldr	r3, [pc, #32]	; (844 <pwm_init+0x38>)
     822:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     824:	0029      	movs	r1, r5
     826:	0020      	movs	r0, r4
     828:	4b07      	ldr	r3, [pc, #28]	; (848 <pwm_init+0x3c>)
     82a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     82c:	4b07      	ldr	r3, [pc, #28]	; (84c <pwm_init+0x40>)
     82e:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     830:	4b07      	ldr	r3, [pc, #28]	; (850 <pwm_init+0x44>)
     832:	6063      	str	r3, [r4, #4]
}
     834:	2000      	movs	r0, #0
     836:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     838:	2000      	movs	r0, #0
     83a:	e7ef      	b.n	81c <pwm_init+0x10>
     83c:	2000      	movs	r0, #0
     83e:	e7ed      	b.n	81c <pwm_init+0x10>
     840:	000036c0 	.word	0x000036c0
     844:	00000d19 	.word	0x00000d19
     848:	00001b4d 	.word	0x00001b4d
     84c:	000007f5 	.word	0x000007f5
     850:	00000801 	.word	0x00000801

00000854 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     854:	b570      	push	{r4, r5, r6, lr}
     856:	0004      	movs	r4, r0
     858:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     85a:	2800      	cmp	r0, #0
     85c:	d017      	beq.n	88e <spi_m_sync_init+0x3a>
     85e:	2900      	cmp	r1, #0
     860:	d013      	beq.n	88a <spi_m_sync_init+0x36>
     862:	2001      	movs	r0, #1
     864:	2240      	movs	r2, #64	; 0x40
     866:	490b      	ldr	r1, [pc, #44]	; (894 <spi_m_sync_init+0x40>)
     868:	4b0b      	ldr	r3, [pc, #44]	; (898 <spi_m_sync_init+0x44>)
     86a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     86c:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     86e:	1d20      	adds	r0, r4, #4
     870:	0029      	movs	r1, r5
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <spi_m_sync_init+0x48>)
     874:	4798      	blx	r3

	if (rc < 0) {
     876:	2800      	cmp	r0, #0
     878:	db06      	blt.n	888 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <spi_m_sync_init+0x4c>)
     87c:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <spi_m_sync_init+0x50>)
     880:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     882:	4b09      	ldr	r3, [pc, #36]	; (8a8 <spi_m_sync_init+0x54>)
     884:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     886:	2000      	movs	r0, #0
}
     888:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     88a:	2000      	movs	r0, #0
     88c:	e7ea      	b.n	864 <spi_m_sync_init+0x10>
     88e:	2000      	movs	r0, #0
     890:	e7e8      	b.n	864 <spi_m_sync_init+0x10>
     892:	46c0      	nop			; (mov r8, r8)
     894:	000036d8 	.word	0x000036d8
     898:	00000d19 	.word	0x00000d19
     89c:	00001605 	.word	0x00001605
     8a0:	ffff8000 	.word	0xffff8000
     8a4:	00000931 	.word	0x00000931
     8a8:	000008f5 	.word	0x000008f5

000008ac <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     8ac:	b530      	push	{r4, r5, lr}
     8ae:	b087      	sub	sp, #28
     8b0:	0004      	movs	r4, r0
     8b2:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     8b4:	2800      	cmp	r0, #0
     8b6:	d015      	beq.n	8e4 <spi_m_sync_transfer+0x38>
     8b8:	2900      	cmp	r1, #0
     8ba:	d011      	beq.n	8e0 <spi_m_sync_transfer+0x34>
     8bc:	2001      	movs	r0, #1
     8be:	22b3      	movs	r2, #179	; 0xb3
     8c0:	4909      	ldr	r1, [pc, #36]	; (8e8 <spi_m_sync_transfer+0x3c>)
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <spi_m_sync_transfer+0x40>)
     8c4:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     8c6:	682b      	ldr	r3, [r5, #0]
     8c8:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     8ca:	686b      	ldr	r3, [r5, #4]
     8cc:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     8ce:	68ab      	ldr	r3, [r5, #8]
     8d0:	9301      	str	r3, [sp, #4]
     8d2:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     8d4:	1d20      	adds	r0, r4, #4
     8d6:	a903      	add	r1, sp, #12
     8d8:	4b05      	ldr	r3, [pc, #20]	; (8f0 <spi_m_sync_transfer+0x44>)
     8da:	4798      	blx	r3
}
     8dc:	b007      	add	sp, #28
     8de:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     8e0:	2000      	movs	r0, #0
     8e2:	e7ec      	b.n	8be <spi_m_sync_transfer+0x12>
     8e4:	2000      	movs	r0, #0
     8e6:	e7ea      	b.n	8be <spi_m_sync_transfer+0x12>
     8e8:	000036d8 	.word	0x000036d8
     8ec:	00000d19 	.word	0x00000d19
     8f0:	000017c1 	.word	0x000017c1

000008f4 <_spi_m_sync_io_write>:
{
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	b084      	sub	sp, #16
     8f8:	0004      	movs	r4, r0
     8fa:	000e      	movs	r6, r1
     8fc:	0015      	movs	r5, r2
	ASSERT(io);
     8fe:	1e43      	subs	r3, r0, #1
     900:	4198      	sbcs	r0, r3
     902:	b2c0      	uxtb	r0, r0
     904:	22a3      	movs	r2, #163	; 0xa3
     906:	4907      	ldr	r1, [pc, #28]	; (924 <_spi_m_sync_io_write+0x30>)
     908:	4b07      	ldr	r3, [pc, #28]	; (928 <_spi_m_sync_io_write+0x34>)
     90a:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     90c:	0020      	movs	r0, r4
     90e:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     910:	2300      	movs	r3, #0
     912:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     914:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     916:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     918:	a901      	add	r1, sp, #4
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <_spi_m_sync_io_write+0x38>)
     91c:	4798      	blx	r3
}
     91e:	b004      	add	sp, #16
     920:	bd70      	pop	{r4, r5, r6, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	000036d8 	.word	0x000036d8
     928:	00000d19 	.word	0x00000d19
     92c:	000008ad 	.word	0x000008ad

00000930 <_spi_m_sync_io_read>:
{
     930:	b570      	push	{r4, r5, r6, lr}
     932:	b084      	sub	sp, #16
     934:	0004      	movs	r4, r0
     936:	000e      	movs	r6, r1
     938:	0015      	movs	r5, r2
	ASSERT(io);
     93a:	1e43      	subs	r3, r0, #1
     93c:	4198      	sbcs	r0, r3
     93e:	b2c0      	uxtb	r0, r0
     940:	2287      	movs	r2, #135	; 0x87
     942:	4907      	ldr	r1, [pc, #28]	; (960 <_spi_m_sync_io_read+0x30>)
     944:	4b07      	ldr	r3, [pc, #28]	; (964 <_spi_m_sync_io_read+0x34>)
     946:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     948:	0020      	movs	r0, r4
     94a:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     94c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     94e:	2300      	movs	r3, #0
     950:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     952:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     954:	a901      	add	r1, sp, #4
     956:	4b04      	ldr	r3, [pc, #16]	; (968 <_spi_m_sync_io_read+0x38>)
     958:	4798      	blx	r3
}
     95a:	b004      	add	sp, #16
     95c:	bd70      	pop	{r4, r5, r6, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	000036d8 	.word	0x000036d8
     964:	00000d19 	.word	0x00000d19
     968:	000008ad 	.word	0x000008ad

0000096c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     96e:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     970:	2e00      	cmp	r6, #0
     972:	d002      	beq.n	97a <timer_add_timer_task+0xe>
     974:	0033      	movs	r3, r6
     976:	2500      	movs	r5, #0
     978:	e00c      	b.n	994 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     97a:	4b10      	ldr	r3, [pc, #64]	; (9bc <timer_add_timer_task+0x50>)
     97c:	4798      	blx	r3
		return;
     97e:	e018      	b.n	9b2 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     980:	689f      	ldr	r7, [r3, #8]
     982:	46bc      	mov	ip, r7
     984:	4464      	add	r4, ip
     986:	1aa4      	subs	r4, r4, r2
     988:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     98a:	688f      	ldr	r7, [r1, #8]
     98c:	42bc      	cmp	r4, r7
     98e:	d20b      	bcs.n	9a8 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     990:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     992:	681b      	ldr	r3, [r3, #0]
     994:	2b00      	cmp	r3, #0
     996:	d007      	beq.n	9a8 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     998:	685c      	ldr	r4, [r3, #4]
     99a:	4294      	cmp	r4, r2
     99c:	d8f0      	bhi.n	980 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     99e:	1aa4      	subs	r4, r4, r2
     9a0:	689f      	ldr	r7, [r3, #8]
     9a2:	46bc      	mov	ip, r7
     9a4:	4464      	add	r4, ip
     9a6:	e7f0      	b.n	98a <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     9a8:	42b3      	cmp	r3, r6
     9aa:	d003      	beq.n	9b4 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     9ac:	0028      	movs	r0, r5
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <timer_add_timer_task+0x54>)
     9b0:	4798      	blx	r3
	}
}
     9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     9b4:	4b01      	ldr	r3, [pc, #4]	; (9bc <timer_add_timer_task+0x50>)
     9b6:	4798      	blx	r3
     9b8:	e7fb      	b.n	9b2 <timer_add_timer_task+0x46>
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	00000d39 	.word	0x00000d39
     9c0:	00000d65 	.word	0x00000d65

000009c4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c6:	0005      	movs	r5, r0
     9c8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     9ca:	6903      	ldr	r3, [r0, #16]
     9cc:	1c5e      	adds	r6, r3, #1
     9ce:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     9d0:	7e03      	ldrb	r3, [r0, #24]
     9d2:	07db      	lsls	r3, r3, #31
     9d4:	d402      	bmi.n	9dc <timer_process_counted+0x18>
     9d6:	7e03      	ldrb	r3, [r0, #24]
     9d8:	079b      	lsls	r3, r3, #30
     9da:	d50a      	bpl.n	9f2 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     9dc:	7e2b      	ldrb	r3, [r5, #24]
     9de:	2202      	movs	r2, #2
     9e0:	4313      	orrs	r3, r2
     9e2:	b2db      	uxtb	r3, r3
     9e4:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9e8:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     9ea:	68e3      	ldr	r3, [r4, #12]
     9ec:	0020      	movs	r0, r4
     9ee:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     9f0:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     9f2:	2c00      	cmp	r4, #0
     9f4:	d0f7      	beq.n	9e6 <timer_process_counted+0x22>
     9f6:	6863      	ldr	r3, [r4, #4]
     9f8:	1af3      	subs	r3, r6, r3
     9fa:	68a2      	ldr	r2, [r4, #8]
     9fc:	4293      	cmp	r3, r2
     9fe:	d3f2      	bcc.n	9e6 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     a00:	002f      	movs	r7, r5
     a02:	3714      	adds	r7, #20
     a04:	0038      	movs	r0, r7
     a06:	4b06      	ldr	r3, [pc, #24]	; (a20 <timer_process_counted+0x5c>)
     a08:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     a0a:	7c23      	ldrb	r3, [r4, #16]
     a0c:	2b01      	cmp	r3, #1
     a0e:	d1eb      	bne.n	9e8 <timer_process_counted+0x24>
			tmp->time_label = time;
     a10:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     a12:	0032      	movs	r2, r6
     a14:	0021      	movs	r1, r4
     a16:	0038      	movs	r0, r7
     a18:	4b02      	ldr	r3, [pc, #8]	; (a24 <timer_process_counted+0x60>)
     a1a:	4798      	blx	r3
     a1c:	e7e4      	b.n	9e8 <timer_process_counted+0x24>
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00000d6d 	.word	0x00000d6d
     a24:	0000096d 	.word	0x0000096d

00000a28 <timer_init>:
{
     a28:	b570      	push	{r4, r5, r6, lr}
     a2a:	0004      	movs	r4, r0
     a2c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     a2e:	2800      	cmp	r0, #0
     a30:	d012      	beq.n	a58 <timer_init+0x30>
     a32:	2900      	cmp	r1, #0
     a34:	d00e      	beq.n	a54 <timer_init+0x2c>
     a36:	2001      	movs	r0, #1
     a38:	223b      	movs	r2, #59	; 0x3b
     a3a:	4908      	ldr	r1, [pc, #32]	; (a5c <timer_init+0x34>)
     a3c:	4b08      	ldr	r3, [pc, #32]	; (a60 <timer_init+0x38>)
     a3e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     a40:	0029      	movs	r1, r5
     a42:	0020      	movs	r0, r4
     a44:	4b07      	ldr	r3, [pc, #28]	; (a64 <timer_init+0x3c>)
     a46:	4798      	blx	r3
	descr->time                           = 0;
     a48:	2300      	movs	r3, #0
     a4a:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     a4c:	4b06      	ldr	r3, [pc, #24]	; (a68 <timer_init+0x40>)
     a4e:	6023      	str	r3, [r4, #0]
}
     a50:	2000      	movs	r0, #0
     a52:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     a54:	2000      	movs	r0, #0
     a56:	e7ef      	b.n	a38 <timer_init+0x10>
     a58:	2000      	movs	r0, #0
     a5a:	e7ed      	b.n	a38 <timer_init+0x10>
     a5c:	000036f4 	.word	0x000036f4
     a60:	00000d19 	.word	0x00000d19
     a64:	00001a29 	.word	0x00001a29
     a68:	000009c5 	.word	0x000009c5

00000a6c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     a6c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a6e:	3808      	subs	r0, #8

	descr->stat = 0;
     a70:	2300      	movs	r3, #0
     a72:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     a74:	6a43      	ldr	r3, [r0, #36]	; 0x24
     a76:	2b00      	cmp	r3, #0
     a78:	d000      	beq.n	a7c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     a7a:	4798      	blx	r3
	}
}
     a7c:	bd10      	pop	{r4, pc}

00000a7e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     a7e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a80:	3808      	subs	r0, #8

	descr->stat = 0;
     a82:	2300      	movs	r3, #0
     a84:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     a86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     a88:	2b00      	cmp	r3, #0
     a8a:	d000      	beq.n	a8e <usart_error+0x10>
		descr->usart_cb.error(descr);
     a8c:	4798      	blx	r3
	}
}
     a8e:	bd10      	pop	{r4, pc}

00000a90 <usart_fill_rx_buffer>:
{
     a90:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a92:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     a94:	302c      	adds	r0, #44	; 0x2c
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <usart_fill_rx_buffer+0x18>)
     a98:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     a9a:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a9c:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     a9e:	2b00      	cmp	r3, #0
     aa0:	d001      	beq.n	aa6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     aa2:	0020      	movs	r0, r4
     aa4:	4798      	blx	r3
}
     aa6:	bd10      	pop	{r4, pc}
     aa8:	00000e19 	.word	0x00000e19

00000aac <usart_async_write>:
{
     aac:	b570      	push	{r4, r5, r6, lr}
     aae:	0004      	movs	r4, r0
     ab0:	000e      	movs	r6, r1
     ab2:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     ab4:	2800      	cmp	r0, #0
     ab6:	d01d      	beq.n	af4 <usart_async_write+0x48>
     ab8:	2900      	cmp	r1, #0
     aba:	d01d      	beq.n	af8 <usart_async_write+0x4c>
     abc:	2a00      	cmp	r2, #0
     abe:	d11d      	bne.n	afc <usart_async_write+0x50>
     ac0:	2000      	movs	r0, #0
     ac2:	223c      	movs	r2, #60	; 0x3c
     ac4:	32ff      	adds	r2, #255	; 0xff
     ac6:	4910      	ldr	r1, [pc, #64]	; (b08 <usart_async_write+0x5c>)
     ac8:	4b10      	ldr	r3, [pc, #64]	; (b0c <usart_async_write+0x60>)
     aca:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     acc:	2344      	movs	r3, #68	; 0x44
     ace:	5ae2      	ldrh	r2, [r4, r3]
     ad0:	3308      	adds	r3, #8
     ad2:	5ae3      	ldrh	r3, [r4, r3]
     ad4:	429a      	cmp	r2, r3
     ad6:	d113      	bne.n	b00 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     ad8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     ada:	234c      	movs	r3, #76	; 0x4c
     adc:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     ade:	2200      	movs	r2, #0
     ae0:	3b08      	subs	r3, #8
     ae2:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     ae4:	3b43      	subs	r3, #67	; 0x43
     ae6:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     ae8:	0020      	movs	r0, r4
     aea:	3008      	adds	r0, #8
     aec:	4b08      	ldr	r3, [pc, #32]	; (b10 <usart_async_write+0x64>)
     aee:	4798      	blx	r3
	return (int32_t)length;
     af0:	0028      	movs	r0, r5
}
     af2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     af4:	2000      	movs	r0, #0
     af6:	e7e4      	b.n	ac2 <usart_async_write+0x16>
     af8:	2000      	movs	r0, #0
     afa:	e7e2      	b.n	ac2 <usart_async_write+0x16>
     afc:	2001      	movs	r0, #1
     afe:	e7e0      	b.n	ac2 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     b00:	201c      	movs	r0, #28
     b02:	4240      	negs	r0, r0
     b04:	e7f5      	b.n	af2 <usart_async_write+0x46>
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	0000370c 	.word	0x0000370c
     b0c:	00000d19 	.word	0x00000d19
     b10:	0000157f 	.word	0x0000157f

00000b14 <usart_process_byte_sent>:
{
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     b18:	0002      	movs	r2, r0
     b1a:	3a08      	subs	r2, #8
     b1c:	2344      	movs	r3, #68	; 0x44
     b1e:	5ad3      	ldrh	r3, [r2, r3]
     b20:	214c      	movs	r1, #76	; 0x4c
     b22:	5a52      	ldrh	r2, [r2, r1]
     b24:	4293      	cmp	r3, r2
     b26:	d00d      	beq.n	b44 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     b28:	0002      	movs	r2, r0
     b2a:	6c01      	ldr	r1, [r0, #64]	; 0x40
     b2c:	3a08      	subs	r2, #8
     b2e:	1c5d      	adds	r5, r3, #1
     b30:	2044      	movs	r0, #68	; 0x44
     b32:	5215      	strh	r5, [r2, r0]
     b34:	5cc9      	ldrb	r1, [r1, r3]
     b36:	0020      	movs	r0, r4
     b38:	4b04      	ldr	r3, [pc, #16]	; (b4c <usart_process_byte_sent+0x38>)
     b3a:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     b3c:	0020      	movs	r0, r4
     b3e:	4b04      	ldr	r3, [pc, #16]	; (b50 <usart_process_byte_sent+0x3c>)
     b40:	4798      	blx	r3
}
     b42:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     b44:	4b03      	ldr	r3, [pc, #12]	; (b54 <usart_process_byte_sent+0x40>)
     b46:	4798      	blx	r3
}
     b48:	e7fb      	b.n	b42 <usart_process_byte_sent+0x2e>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00001577 	.word	0x00001577
     b50:	0000157f 	.word	0x0000157f
     b54:	00001587 	.word	0x00001587

00000b58 <usart_async_read>:
{
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	b085      	sub	sp, #20
     b5c:	0004      	movs	r4, r0
     b5e:	000d      	movs	r5, r1
     b60:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     b62:	2800      	cmp	r0, #0
     b64:	d017      	beq.n	b96 <usart_async_read+0x3e>
     b66:	2900      	cmp	r1, #0
     b68:	d017      	beq.n	b9a <usart_async_read+0x42>
     b6a:	2a00      	cmp	r2, #0
     b6c:	d117      	bne.n	b9e <usart_async_read+0x46>
     b6e:	2000      	movs	r0, #0
     b70:	22ac      	movs	r2, #172	; 0xac
     b72:	0052      	lsls	r2, r2, #1
     b74:	4912      	ldr	r1, [pc, #72]	; (bc0 <usart_async_read+0x68>)
     b76:	4b13      	ldr	r3, [pc, #76]	; (bc4 <usart_async_read+0x6c>)
     b78:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b7a:	a803      	add	r0, sp, #12
     b7c:	4b12      	ldr	r3, [pc, #72]	; (bc8 <usart_async_read+0x70>)
     b7e:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b80:	3434      	adds	r4, #52	; 0x34
     b82:	0020      	movs	r0, r4
     b84:	9401      	str	r4, [sp, #4]
     b86:	4b11      	ldr	r3, [pc, #68]	; (bcc <usart_async_read+0x74>)
     b88:	4798      	blx	r3
     b8a:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     b8c:	a803      	add	r0, sp, #12
     b8e:	4b10      	ldr	r3, [pc, #64]	; (bd0 <usart_async_read+0x78>)
     b90:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b92:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     b94:	e00b      	b.n	bae <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     b96:	2000      	movs	r0, #0
     b98:	e7ea      	b.n	b70 <usart_async_read+0x18>
     b9a:	2000      	movs	r0, #0
     b9c:	e7e8      	b.n	b70 <usart_async_read+0x18>
     b9e:	2001      	movs	r0, #1
     ba0:	e7e6      	b.n	b70 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     ba2:	3401      	adds	r4, #1
     ba4:	b2a4      	uxth	r4, r4
     ba6:	1869      	adds	r1, r5, r1
     ba8:	9801      	ldr	r0, [sp, #4]
     baa:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <usart_async_read+0x7c>)
     bac:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     bae:	0021      	movs	r1, r4
     bb0:	42a7      	cmp	r7, r4
     bb2:	d901      	bls.n	bb8 <usart_async_read+0x60>
     bb4:	42b4      	cmp	r4, r6
     bb6:	d3f4      	bcc.n	ba2 <usart_async_read+0x4a>
}
     bb8:	0020      	movs	r0, r4
     bba:	b005      	add	sp, #20
     bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	0000370c 	.word	0x0000370c
     bc4:	00000d19 	.word	0x00000d19
     bc8:	00000609 	.word	0x00000609
     bcc:	00000e59 	.word	0x00000e59
     bd0:	00000617 	.word	0x00000617
     bd4:	00000dcd 	.word	0x00000dcd

00000bd8 <usart_async_init>:
{
     bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bda:	0004      	movs	r4, r0
     bdc:	000d      	movs	r5, r1
     bde:	0016      	movs	r6, r2
     be0:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     be2:	2800      	cmp	r0, #0
     be4:	d026      	beq.n	c34 <usart_async_init+0x5c>
     be6:	2900      	cmp	r1, #0
     be8:	d026      	beq.n	c38 <usart_async_init+0x60>
     bea:	2a00      	cmp	r2, #0
     bec:	d026      	beq.n	c3c <usart_async_init+0x64>
     bee:	2b00      	cmp	r3, #0
     bf0:	d126      	bne.n	c40 <usart_async_init+0x68>
     bf2:	2000      	movs	r0, #0
     bf4:	223a      	movs	r2, #58	; 0x3a
     bf6:	4915      	ldr	r1, [pc, #84]	; (c4c <usart_async_init+0x74>)
     bf8:	4b15      	ldr	r3, [pc, #84]	; (c50 <usart_async_init+0x78>)
     bfa:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     bfc:	0020      	movs	r0, r4
     bfe:	3034      	adds	r0, #52	; 0x34
     c00:	003a      	movs	r2, r7
     c02:	0031      	movs	r1, r6
     c04:	4b13      	ldr	r3, [pc, #76]	; (c54 <usart_async_init+0x7c>)
     c06:	4798      	blx	r3
     c08:	2800      	cmp	r0, #0
     c0a:	d11b      	bne.n	c44 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     c0c:	0020      	movs	r0, r4
     c0e:	3008      	adds	r0, #8
     c10:	0029      	movs	r1, r5
     c12:	4b11      	ldr	r3, [pc, #68]	; (c58 <usart_async_init+0x80>)
     c14:	4798      	blx	r3
	if (init_status) {
     c16:	2800      	cmp	r0, #0
     c18:	d10b      	bne.n	c32 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     c1a:	4b10      	ldr	r3, [pc, #64]	; (c5c <usart_async_init+0x84>)
     c1c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     c1e:	4b10      	ldr	r3, [pc, #64]	; (c60 <usart_async_init+0x88>)
     c20:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     c22:	4b10      	ldr	r3, [pc, #64]	; (c64 <usart_async_init+0x8c>)
     c24:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     c26:	4b10      	ldr	r3, [pc, #64]	; (c68 <usart_async_init+0x90>)
     c28:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     c2a:	4b10      	ldr	r3, [pc, #64]	; (c6c <usart_async_init+0x94>)
     c2c:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     c2e:	4b10      	ldr	r3, [pc, #64]	; (c70 <usart_async_init+0x98>)
     c30:	6163      	str	r3, [r4, #20]
}
     c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c34:	2000      	movs	r0, #0
     c36:	e7dd      	b.n	bf4 <usart_async_init+0x1c>
     c38:	2000      	movs	r0, #0
     c3a:	e7db      	b.n	bf4 <usart_async_init+0x1c>
     c3c:	2000      	movs	r0, #0
     c3e:	e7d9      	b.n	bf4 <usart_async_init+0x1c>
     c40:	2001      	movs	r0, #1
     c42:	e7d7      	b.n	bf4 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     c44:	200d      	movs	r0, #13
     c46:	4240      	negs	r0, r0
     c48:	e7f3      	b.n	c32 <usart_async_init+0x5a>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	0000370c 	.word	0x0000370c
     c50:	00000d19 	.word	0x00000d19
     c54:	00000d81 	.word	0x00000d81
     c58:	000014d9 	.word	0x000014d9
     c5c:	00000b59 	.word	0x00000b59
     c60:	00000aad 	.word	0x00000aad
     c64:	00000b15 	.word	0x00000b15
     c68:	00000a91 	.word	0x00000a91
     c6c:	00000a6d 	.word	0x00000a6d
     c70:	00000a7f 	.word	0x00000a7f

00000c74 <usart_async_enable>:
{
     c74:	b510      	push	{r4, lr}
     c76:	0004      	movs	r4, r0
	ASSERT(descr);
     c78:	1e43      	subs	r3, r0, #1
     c7a:	4198      	sbcs	r0, r3
     c7c:	b2c0      	uxtb	r0, r0
     c7e:	2261      	movs	r2, #97	; 0x61
     c80:	4904      	ldr	r1, [pc, #16]	; (c94 <usart_async_enable+0x20>)
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <usart_async_enable+0x24>)
     c84:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     c86:	0020      	movs	r0, r4
     c88:	3008      	adds	r0, #8
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <usart_async_enable+0x28>)
     c8c:	4798      	blx	r3
}
     c8e:	2000      	movs	r0, #0
     c90:	bd10      	pop	{r4, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	0000370c 	.word	0x0000370c
     c98:	00000d19 	.word	0x00000d19
     c9c:	00001565 	.word	0x00001565

00000ca0 <usart_async_register_callback>:
{
     ca0:	b570      	push	{r4, r5, r6, lr}
     ca2:	0005      	movs	r5, r0
     ca4:	000e      	movs	r6, r1
     ca6:	0014      	movs	r4, r2
	ASSERT(descr);
     ca8:	1e43      	subs	r3, r0, #1
     caa:	4198      	sbcs	r0, r3
     cac:	b2c0      	uxtb	r0, r0
     cae:	2283      	movs	r2, #131	; 0x83
     cb0:	4916      	ldr	r1, [pc, #88]	; (d0c <usart_async_register_callback+0x6c>)
     cb2:	4b17      	ldr	r3, [pc, #92]	; (d10 <usart_async_register_callback+0x70>)
     cb4:	4798      	blx	r3
	switch (type) {
     cb6:	2e01      	cmp	r6, #1
     cb8:	d011      	beq.n	cde <usart_async_register_callback+0x3e>
     cba:	2e00      	cmp	r6, #0
     cbc:	d004      	beq.n	cc8 <usart_async_register_callback+0x28>
     cbe:	2e02      	cmp	r6, #2
     cc0:	d018      	beq.n	cf4 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     cc2:	200d      	movs	r0, #13
     cc4:	4240      	negs	r0, r0
     cc6:	e009      	b.n	cdc <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     cc8:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     cca:	1e62      	subs	r2, r4, #1
     ccc:	4194      	sbcs	r4, r2
     cce:	b2e2      	uxtb	r2, r4
     cd0:	0028      	movs	r0, r5
     cd2:	3008      	adds	r0, #8
     cd4:	2101      	movs	r1, #1
     cd6:	4b0f      	ldr	r3, [pc, #60]	; (d14 <usart_async_register_callback+0x74>)
     cd8:	4798      	blx	r3
	return ERR_NONE;
     cda:	2000      	movs	r0, #0
}
     cdc:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     cde:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     ce0:	1e62      	subs	r2, r4, #1
     ce2:	4194      	sbcs	r4, r2
     ce4:	b2e2      	uxtb	r2, r4
     ce6:	0028      	movs	r0, r5
     ce8:	3008      	adds	r0, #8
     cea:	2102      	movs	r1, #2
     cec:	4b09      	ldr	r3, [pc, #36]	; (d14 <usart_async_register_callback+0x74>)
     cee:	4798      	blx	r3
	return ERR_NONE;
     cf0:	2000      	movs	r0, #0
		break;
     cf2:	e7f3      	b.n	cdc <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     cf4:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     cf6:	1e62      	subs	r2, r4, #1
     cf8:	4194      	sbcs	r4, r2
     cfa:	b2e2      	uxtb	r2, r4
     cfc:	0028      	movs	r0, r5
     cfe:	3008      	adds	r0, #8
     d00:	2103      	movs	r1, #3
     d02:	4b04      	ldr	r3, [pc, #16]	; (d14 <usart_async_register_callback+0x74>)
     d04:	4798      	blx	r3
	return ERR_NONE;
     d06:	2000      	movs	r0, #0
		break;
     d08:	e7e8      	b.n	cdc <usart_async_register_callback+0x3c>
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	0000370c 	.word	0x0000370c
     d10:	00000d19 	.word	0x00000d19
     d14:	00001591 	.word	0x00001591

00000d18 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     d18:	2800      	cmp	r0, #0
     d1a:	d100      	bne.n	d1e <assert+0x6>
		__asm("BKPT #0");
     d1c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     d1e:	4770      	bx	lr

00000d20 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     d20:	6803      	ldr	r3, [r0, #0]
     d22:	2b00      	cmp	r3, #0
     d24:	d003      	beq.n	d2e <is_list_element+0xe>
		if (it == element) {
     d26:	428b      	cmp	r3, r1
     d28:	d003      	beq.n	d32 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	e7f9      	b.n	d22 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     d2e:	2000      	movs	r0, #0
}
     d30:	4770      	bx	lr
			return true;
     d32:	2001      	movs	r0, #1
     d34:	e7fc      	b.n	d30 <is_list_element+0x10>
	...

00000d38 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	0004      	movs	r4, r0
     d3c:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     d3e:	4b06      	ldr	r3, [pc, #24]	; (d58 <list_insert_as_head+0x20>)
     d40:	4798      	blx	r3
     d42:	2301      	movs	r3, #1
     d44:	4058      	eors	r0, r3
     d46:	b2c0      	uxtb	r0, r0
     d48:	2239      	movs	r2, #57	; 0x39
     d4a:	4904      	ldr	r1, [pc, #16]	; (d5c <list_insert_as_head+0x24>)
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <list_insert_as_head+0x28>)
     d4e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     d50:	6823      	ldr	r3, [r4, #0]
     d52:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     d54:	6025      	str	r5, [r4, #0]
}
     d56:	bd70      	pop	{r4, r5, r6, pc}
     d58:	00000d21 	.word	0x00000d21
     d5c:	0000372c 	.word	0x0000372c
     d60:	00000d19 	.word	0x00000d19

00000d64 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     d64:	6803      	ldr	r3, [r0, #0]
     d66:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     d68:	6001      	str	r1, [r0, #0]
}
     d6a:	4770      	bx	lr

00000d6c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     d6c:	6803      	ldr	r3, [r0, #0]
     d6e:	2b00      	cmp	r3, #0
     d70:	d003      	beq.n	d7a <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     d72:	681a      	ldr	r2, [r3, #0]
     d74:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     d76:	0018      	movs	r0, r3
	}

	return NULL;
}
     d78:	4770      	bx	lr
	return NULL;
     d7a:	2000      	movs	r0, #0
     d7c:	e7fc      	b.n	d78 <list_remove_head+0xc>
	...

00000d80 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     d80:	b570      	push	{r4, r5, r6, lr}
     d82:	0004      	movs	r4, r0
     d84:	000e      	movs	r6, r1
     d86:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     d88:	2800      	cmp	r0, #0
     d8a:	d012      	beq.n	db2 <ringbuffer_init+0x32>
     d8c:	2900      	cmp	r1, #0
     d8e:	d012      	beq.n	db6 <ringbuffer_init+0x36>
     d90:	2a00      	cmp	r2, #0
     d92:	d112      	bne.n	dba <ringbuffer_init+0x3a>
     d94:	2000      	movs	r0, #0
     d96:	2228      	movs	r2, #40	; 0x28
     d98:	490a      	ldr	r1, [pc, #40]	; (dc4 <ringbuffer_init+0x44>)
     d9a:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <ringbuffer_init+0x48>)
     d9c:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     d9e:	1e6b      	subs	r3, r5, #1
     da0:	422b      	tst	r3, r5
     da2:	d10c      	bne.n	dbe <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     da4:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     da6:	2300      	movs	r3, #0
     da8:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     daa:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     dac:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     dae:	2000      	movs	r0, #0
}
     db0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     db2:	2000      	movs	r0, #0
     db4:	e7ef      	b.n	d96 <ringbuffer_init+0x16>
     db6:	2000      	movs	r0, #0
     db8:	e7ed      	b.n	d96 <ringbuffer_init+0x16>
     dba:	2001      	movs	r0, #1
     dbc:	e7eb      	b.n	d96 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     dbe:	200d      	movs	r0, #13
     dc0:	4240      	negs	r0, r0
     dc2:	e7f5      	b.n	db0 <ringbuffer_init+0x30>
     dc4:	0000374c 	.word	0x0000374c
     dc8:	00000d19 	.word	0x00000d19

00000dcc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     dcc:	b570      	push	{r4, r5, r6, lr}
     dce:	0004      	movs	r4, r0
     dd0:	000d      	movs	r5, r1
	ASSERT(rb && data);
     dd2:	2800      	cmp	r0, #0
     dd4:	d016      	beq.n	e04 <ringbuffer_get+0x38>
     dd6:	2900      	cmp	r1, #0
     dd8:	d012      	beq.n	e00 <ringbuffer_get+0x34>
     dda:	2001      	movs	r0, #1
     ddc:	2240      	movs	r2, #64	; 0x40
     dde:	490c      	ldr	r1, [pc, #48]	; (e10 <ringbuffer_get+0x44>)
     de0:	4b0c      	ldr	r3, [pc, #48]	; (e14 <ringbuffer_get+0x48>)
     de2:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     de4:	68a3      	ldr	r3, [r4, #8]
     de6:	68e2      	ldr	r2, [r4, #12]
     de8:	429a      	cmp	r2, r3
     dea:	d00d      	beq.n	e08 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     dec:	6862      	ldr	r2, [r4, #4]
     dee:	4013      	ands	r3, r2
     df0:	6822      	ldr	r2, [r4, #0]
     df2:	5cd3      	ldrb	r3, [r2, r3]
     df4:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     df6:	68a3      	ldr	r3, [r4, #8]
     df8:	3301      	adds	r3, #1
     dfa:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     dfc:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     dfe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     e00:	2000      	movs	r0, #0
     e02:	e7eb      	b.n	ddc <ringbuffer_get+0x10>
     e04:	2000      	movs	r0, #0
     e06:	e7e9      	b.n	ddc <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     e08:	200a      	movs	r0, #10
     e0a:	4240      	negs	r0, r0
     e0c:	e7f7      	b.n	dfe <ringbuffer_get+0x32>
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	0000374c 	.word	0x0000374c
     e14:	00000d19 	.word	0x00000d19

00000e18 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     e18:	b570      	push	{r4, r5, r6, lr}
     e1a:	0004      	movs	r4, r0
     e1c:	000d      	movs	r5, r1
	ASSERT(rb);
     e1e:	1e43      	subs	r3, r0, #1
     e20:	4198      	sbcs	r0, r3
     e22:	b2c0      	uxtb	r0, r0
     e24:	2251      	movs	r2, #81	; 0x51
     e26:	490a      	ldr	r1, [pc, #40]	; (e50 <ringbuffer_put+0x38>)
     e28:	4b0a      	ldr	r3, [pc, #40]	; (e54 <ringbuffer_put+0x3c>)
     e2a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     e2c:	6863      	ldr	r3, [r4, #4]
     e2e:	68e2      	ldr	r2, [r4, #12]
     e30:	4013      	ands	r3, r2
     e32:	6822      	ldr	r2, [r4, #0]
     e34:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     e36:	68e3      	ldr	r3, [r4, #12]
     e38:	68a2      	ldr	r2, [r4, #8]
     e3a:	1a9a      	subs	r2, r3, r2
     e3c:	6861      	ldr	r1, [r4, #4]
     e3e:	428a      	cmp	r2, r1
     e40:	d901      	bls.n	e46 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     e42:	1a59      	subs	r1, r3, r1
     e44:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     e46:	3301      	adds	r3, #1
     e48:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     e4a:	2000      	movs	r0, #0
     e4c:	bd70      	pop	{r4, r5, r6, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	0000374c 	.word	0x0000374c
     e54:	00000d19 	.word	0x00000d19

00000e58 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     e58:	b510      	push	{r4, lr}
     e5a:	0004      	movs	r4, r0
	ASSERT(rb);
     e5c:	1e43      	subs	r3, r0, #1
     e5e:	4198      	sbcs	r0, r3
     e60:	b2c0      	uxtb	r0, r0
     e62:	2267      	movs	r2, #103	; 0x67
     e64:	4903      	ldr	r1, [pc, #12]	; (e74 <ringbuffer_num+0x1c>)
     e66:	4b04      	ldr	r3, [pc, #16]	; (e78 <ringbuffer_num+0x20>)
     e68:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     e6a:	68e0      	ldr	r0, [r4, #12]
     e6c:	68a3      	ldr	r3, [r4, #8]
     e6e:	1ac0      	subs	r0, r0, r3
}
     e70:	bd10      	pop	{r4, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	0000374c 	.word	0x0000374c
     e78:	00000d19 	.word	0x00000d19

00000e7c <_get_ac_cfg>:
		hri_ac_write_CTRLB_reg(hw, AC_CTRLB_START1);
	}
}

static const struct _ac_cfg *_get_ac_cfg(void *hw)
{
     e7c:	b510      	push	{r4, lr}
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
     e7e:	2300      	movs	r3, #0
     e80:	2b00      	cmp	r3, #0
     e82:	d001      	beq.n	e88 <_get_ac_cfg+0xc>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
     e84:	2000      	movs	r0, #0
}
     e86:	bd10      	pop	{r4, pc}
		if (_cfgs[i].hw == hw) {
     e88:	009a      	lsls	r2, r3, #2
     e8a:	18d2      	adds	r2, r2, r3
     e8c:	0091      	lsls	r1, r2, #2
     e8e:	4a05      	ldr	r2, [pc, #20]	; (ea4 <_get_ac_cfg+0x28>)
     e90:	588a      	ldr	r2, [r1, r2]
     e92:	4282      	cmp	r2, r0
     e94:	d002      	beq.n	e9c <_get_ac_cfg+0x20>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
     e96:	3301      	adds	r3, #1
     e98:	b2db      	uxtb	r3, r3
     e9a:	e7f1      	b.n	e80 <_get_ac_cfg+0x4>
			return &(_cfgs[i]);
     e9c:	4801      	ldr	r0, [pc, #4]	; (ea4 <_get_ac_cfg+0x28>)
     e9e:	1840      	adds	r0, r0, r1
     ea0:	e7f1      	b.n	e86 <_get_ac_cfg+0xa>
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	00003770 	.word	0x00003770

00000ea8 <_ac_init>:
{
     ea8:	b510      	push	{r4, lr}
     eaa:	0004      	movs	r4, r0
	ASSERT(hw);
     eac:	1e43      	subs	r3, r0, #1
     eae:	4198      	sbcs	r0, r3
     eb0:	b2c0      	uxtb	r0, r0
     eb2:	22fa      	movs	r2, #250	; 0xfa
     eb4:	491e      	ldr	r1, [pc, #120]	; (f30 <_ac_init+0x88>)
     eb6:	4b1f      	ldr	r3, [pc, #124]	; (f34 <_ac_init+0x8c>)
     eb8:	4798      	blx	r3
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
     eba:	0020      	movs	r0, r4
     ebc:	4b1e      	ldr	r3, [pc, #120]	; (f38 <_ac_init+0x90>)
     ebe:	4798      	blx	r3
	if (cfg == NULL) {
     ec0:	2800      	cmp	r0, #0
     ec2:	d031      	beq.n	f28 <_ac_init+0x80>
typedef uint8_t  hri_ac_statusc_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     ec4:	7a63      	ldrb	r3, [r4, #9]
     ec6:	09db      	lsrs	r3, r3, #7
     ec8:	d1fc      	bne.n	ec4 <_ac_init+0x1c>
     eca:	7a63      	ldrb	r3, [r4, #9]
     ecc:	09db      	lsrs	r3, r3, #7
     ece:	d1fc      	bne.n	eca <_ac_init+0x22>

static inline hri_ac_ctrla_reg_t hri_ac_get_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw);
	tmp = ((Ac *)hw)->CTRLA.reg;
     ed0:	7823      	ldrb	r3, [r4, #0]
	if (hri_ac_get_CTRLA_reg(hw, AC_CTRLA_ENABLE)) {
     ed2:	079b      	lsls	r3, r3, #30
     ed4:	d507      	bpl.n	ee6 <_ac_init+0x3e>
}

static inline void hri_ac_write_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->CTRLA.reg = data;
     ed6:	2300      	movs	r3, #0
     ed8:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     eda:	7a63      	ldrb	r3, [r4, #9]
     edc:	09db      	lsrs	r3, r3, #7
     ede:	d1fc      	bne.n	eda <_ac_init+0x32>
     ee0:	7a63      	ldrb	r3, [r4, #9]
     ee2:	09db      	lsrs	r3, r3, #7
     ee4:	d1fc      	bne.n	ee0 <_ac_init+0x38>
	((Ac *)hw)->CTRLA.reg = data;
     ee6:	2301      	movs	r3, #1
     ee8:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     eea:	7a63      	ldrb	r3, [r4, #9]
     eec:	09db      	lsrs	r3, r3, #7
     eee:	d1fc      	bne.n	eea <_ac_init+0x42>
     ef0:	7a63      	ldrb	r3, [r4, #9]
     ef2:	09db      	lsrs	r3, r3, #7
     ef4:	d1fc      	bne.n	ef0 <_ac_init+0x48>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
     ef6:	6883      	ldr	r3, [r0, #8]
     ef8:	6123      	str	r3, [r4, #16]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     efa:	7a63      	ldrb	r3, [r4, #9]
     efc:	09db      	lsrs	r3, r3, #7
     efe:	d1fc      	bne.n	efa <_ac_init+0x52>
	((Ac *)hw)->COMPCTRL[index].reg = data;
     f00:	68c3      	ldr	r3, [r0, #12]
     f02:	6163      	str	r3, [r4, #20]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     f04:	7a63      	ldrb	r3, [r4, #9]
     f06:	09db      	lsrs	r3, r3, #7
     f08:	d1fc      	bne.n	f04 <_ac_init+0x5c>
	hri_ac_write_SCALER_reg(hw, 0, cfg->comp_scaler0);
     f0a:	7c02      	ldrb	r2, [r0, #16]
}

static inline void hri_ac_write_SCALER_reg(const void *const hw, uint8_t index, hri_ac_scaler_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->SCALER[index].reg = data;
     f0c:	3320      	adds	r3, #32
     f0e:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_SCALER_reg(hw, 1, cfg->comp_scaler1);
     f10:	7c42      	ldrb	r2, [r0, #17]
     f12:	3301      	adds	r3, #1
     f14:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_EVCTRL_reg(hw, cfg->ev_ctrl);
     f16:	88c3      	ldrh	r3, [r0, #6]
	((Ac *)hw)->EVCTRL.reg = data;
     f18:	8063      	strh	r3, [r4, #2]
	hri_ac_write_CTRLA_reg(hw, cfg->ctrla);
     f1a:	7943      	ldrb	r3, [r0, #5]
	((Ac *)hw)->CTRLA.reg = data;
     f1c:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     f1e:	7a63      	ldrb	r3, [r4, #9]
     f20:	09db      	lsrs	r3, r3, #7
     f22:	d1fc      	bne.n	f1e <_ac_init+0x76>
	return ERR_NONE;
     f24:	2000      	movs	r0, #0
}
     f26:	bd10      	pop	{r4, pc}
		return ERR_NOT_FOUND;
     f28:	200a      	movs	r0, #10
     f2a:	4240      	negs	r0, r0
     f2c:	e7fb      	b.n	f26 <_ac_init+0x7e>
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	00003784 	.word	0x00003784
     f34:	00000d19 	.word	0x00000d19
     f38:	00000e7d 	.word	0x00000e7d

00000f3c <_ac_sync_init>:
{
     f3c:	b570      	push	{r4, r5, r6, lr}
     f3e:	0005      	movs	r5, r0
     f40:	000c      	movs	r4, r1
	ASSERT(device);
     f42:	1e43      	subs	r3, r0, #1
     f44:	4198      	sbcs	r0, r3
     f46:	b2c0      	uxtb	r0, r0
     f48:	2262      	movs	r2, #98	; 0x62
     f4a:	4904      	ldr	r1, [pc, #16]	; (f5c <_ac_sync_init+0x20>)
     f4c:	4b04      	ldr	r3, [pc, #16]	; (f60 <_ac_sync_init+0x24>)
     f4e:	4798      	blx	r3
	device->hw = hw;
     f50:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
     f52:	0020      	movs	r0, r4
     f54:	4b03      	ldr	r3, [pc, #12]	; (f64 <_ac_sync_init+0x28>)
     f56:	4798      	blx	r3
}
     f58:	bd70      	pop	{r4, r5, r6, pc}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	00003784 	.word	0x00003784
     f60:	00000d19 	.word	0x00000d19
     f64:	00000ea9 	.word	0x00000ea9

00000f68 <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
     f68:	2000      	movs	r0, #0
     f6a:	4770      	bx	lr

00000f6c <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     f6c:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     f6e:	4b0b      	ldr	r3, [pc, #44]	; (f9c <_adc_get_regs+0x30>)
     f70:	4798      	blx	r3
     f72:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     f74:	2000      	movs	r0, #0
     f76:	2800      	cmp	r0, #0
     f78:	d006      	beq.n	f88 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     f7a:	227f      	movs	r2, #127	; 0x7f
     f7c:	4908      	ldr	r1, [pc, #32]	; (fa0 <_adc_get_regs+0x34>)
     f7e:	2000      	movs	r0, #0
     f80:	4b08      	ldr	r3, [pc, #32]	; (fa4 <_adc_get_regs+0x38>)
     f82:	4798      	blx	r3
	return 0;
     f84:	2000      	movs	r0, #0
}
     f86:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     f88:	00c3      	lsls	r3, r0, #3
     f8a:	1a1b      	subs	r3, r3, r0
     f8c:	0099      	lsls	r1, r3, #2
     f8e:	4b06      	ldr	r3, [pc, #24]	; (fa8 <_adc_get_regs+0x3c>)
     f90:	5ccb      	ldrb	r3, [r1, r3]
     f92:	429a      	cmp	r2, r3
     f94:	d0f7      	beq.n	f86 <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     f96:	3001      	adds	r0, #1
     f98:	b2c0      	uxtb	r0, r0
     f9a:	e7ec      	b.n	f76 <_adc_get_regs+0xa>
     f9c:	00000f69 	.word	0x00000f69
     fa0:	000037b4 	.word	0x000037b4
     fa4:	00000d19 	.word	0x00000d19
     fa8:	00003798 	.word	0x00003798

00000fac <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     fac:	b570      	push	{r4, r5, r6, lr}
     fae:	0004      	movs	r4, r0
     fb0:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     fb2:	4b3a      	ldr	r3, [pc, #232]	; (109c <_adc_init+0xf0>)
     fb4:	18c0      	adds	r0, r0, r3
     fb6:	4243      	negs	r3, r0
     fb8:	4158      	adcs	r0, r3
     fba:	b2c0      	uxtb	r0, r0
     fbc:	2294      	movs	r2, #148	; 0x94
     fbe:	4938      	ldr	r1, [pc, #224]	; (10a0 <_adc_init+0xf4>)
     fc0:	4b38      	ldr	r3, [pc, #224]	; (10a4 <_adc_init+0xf8>)
     fc2:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     fc4:	4b38      	ldr	r3, [pc, #224]	; (10a8 <_adc_init+0xfc>)
     fc6:	681a      	ldr	r2, [r3, #0]
     fc8:	08d2      	lsrs	r2, r2, #3
     fca:	0212      	lsls	r2, r2, #8
     fcc:	23e0      	movs	r3, #224	; 0xe0
     fce:	00db      	lsls	r3, r3, #3
     fd0:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     fd2:	4936      	ldr	r1, [pc, #216]	; (10ac <_adc_init+0x100>)
     fd4:	680b      	ldr	r3, [r1, #0]
     fd6:	6849      	ldr	r1, [r1, #4]
     fd8:	0149      	lsls	r1, r1, #5
     fda:	0edb      	lsrs	r3, r3, #27
     fdc:	430b      	orrs	r3, r1
     fde:	21ff      	movs	r1, #255	; 0xff
     fe0:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     fe2:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     fe4:	7e63      	ldrb	r3, [r4, #25]
     fe6:	09db      	lsrs	r3, r3, #7
     fe8:	d1fc      	bne.n	fe4 <_adc_init+0x38>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     fea:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     fec:	079b      	lsls	r3, r3, #30
     fee:	d504      	bpl.n	ffa <_adc_init+0x4e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     ff0:	2300      	movs	r3, #0
     ff2:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     ff4:	7e63      	ldrb	r3, [r4, #25]
     ff6:	09db      	lsrs	r3, r3, #7
     ff8:	d1fc      	bne.n	ff4 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg = data;
     ffa:	2301      	movs	r3, #1
     ffc:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     ffe:	7e63      	ldrb	r3, [r4, #25]
    1000:	09db      	lsrs	r3, r3, #7
    1002:	d1fc      	bne.n	ffe <_adc_init+0x52>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    1004:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1006:	00ea      	lsls	r2, r5, #3
    1008:	1b52      	subs	r2, r2, r5
    100a:	0091      	lsls	r1, r2, #2
    100c:	4b28      	ldr	r3, [pc, #160]	; (10b0 <_adc_init+0x104>)
    100e:	185b      	adds	r3, r3, r1
    1010:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
    1012:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1014:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
    1016:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1018:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
    101a:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    101c:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
    101e:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1020:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
    1022:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1024:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
    1026:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1028:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    102a:	222a      	movs	r2, #42	; 0x2a
    102c:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    102e:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
    1030:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1032:	7e63      	ldrb	r3, [r4, #25]
    1034:	09db      	lsrs	r3, r3, #7
    1036:	d1fc      	bne.n	1032 <_adc_init+0x86>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1038:	00eb      	lsls	r3, r5, #3
    103a:	1b5b      	subs	r3, r3, r5
    103c:	009a      	lsls	r2, r3, #2
    103e:	4b1c      	ldr	r3, [pc, #112]	; (10b0 <_adc_init+0x104>)
    1040:	189b      	adds	r3, r3, r2
    1042:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1044:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1046:	7e63      	ldrb	r3, [r4, #25]
    1048:	09db      	lsrs	r3, r3, #7
    104a:	d1fc      	bne.n	1046 <_adc_init+0x9a>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    104c:	00eb      	lsls	r3, r5, #3
    104e:	1b5b      	subs	r3, r3, r5
    1050:	009a      	lsls	r2, r3, #2
    1052:	4b17      	ldr	r3, [pc, #92]	; (10b0 <_adc_init+0x104>)
    1054:	189b      	adds	r3, r3, r2
    1056:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
    1058:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    105a:	7e63      	ldrb	r3, [r4, #25]
    105c:	09db      	lsrs	r3, r3, #7
    105e:	d1fc      	bne.n	105a <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1060:	00eb      	lsls	r3, r5, #3
    1062:	1b5b      	subs	r3, r3, r5
    1064:	009a      	lsls	r2, r3, #2
    1066:	4b12      	ldr	r3, [pc, #72]	; (10b0 <_adc_init+0x104>)
    1068:	189b      	adds	r3, r3, r2
    106a:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
    106c:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    106e:	7e63      	ldrb	r3, [r4, #25]
    1070:	09db      	lsrs	r3, r3, #7
    1072:	d1fc      	bne.n	106e <_adc_init+0xc2>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1074:	00eb      	lsls	r3, r5, #3
    1076:	1b5b      	subs	r3, r3, r5
    1078:	009a      	lsls	r2, r3, #2
    107a:	4b0d      	ldr	r3, [pc, #52]	; (10b0 <_adc_init+0x104>)
    107c:	189b      	adds	r3, r3, r2
    107e:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
    1080:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1082:	7e63      	ldrb	r3, [r4, #25]
    1084:	09db      	lsrs	r3, r3, #7
    1086:	d1fc      	bne.n	1082 <_adc_init+0xd6>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1088:	00eb      	lsls	r3, r5, #3
    108a:	1b5d      	subs	r5, r3, r5
    108c:	00aa      	lsls	r2, r5, #2
    108e:	4b08      	ldr	r3, [pc, #32]	; (10b0 <_adc_init+0x104>)
    1090:	189b      	adds	r3, r3, r2
    1092:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1094:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
    1096:	2000      	movs	r0, #0
    1098:	bd70      	pop	{r4, r5, r6, pc}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	bdffc000 	.word	0xbdffc000
    10a0:	000037b4 	.word	0x000037b4
    10a4:	00000d19 	.word	0x00000d19
    10a8:	00806024 	.word	0x00806024
    10ac:	00806020 	.word	0x00806020
    10b0:	00003798 	.word	0x00003798

000010b4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    10b4:	b570      	push	{r4, r5, r6, lr}
    10b6:	0005      	movs	r5, r0
    10b8:	000c      	movs	r4, r1
	ASSERT(device);
    10ba:	1e43      	subs	r3, r0, #1
    10bc:	4198      	sbcs	r0, r3
    10be:	b2c0      	uxtb	r0, r0
    10c0:	22c5      	movs	r2, #197	; 0xc5
    10c2:	4906      	ldr	r1, [pc, #24]	; (10dc <_adc_sync_init+0x28>)
    10c4:	4b06      	ldr	r3, [pc, #24]	; (10e0 <_adc_sync_init+0x2c>)
    10c6:	4798      	blx	r3

	device->hw = hw;
    10c8:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    10ca:	0020      	movs	r0, r4
    10cc:	4b05      	ldr	r3, [pc, #20]	; (10e4 <_adc_sync_init+0x30>)
    10ce:	4798      	blx	r3
    10d0:	0001      	movs	r1, r0
    10d2:	0020      	movs	r0, r4
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <_adc_sync_init+0x34>)
    10d6:	4798      	blx	r3
}
    10d8:	bd70      	pop	{r4, r5, r6, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	000037b4 	.word	0x000037b4
    10e0:	00000d19 	.word	0x00000d19
    10e4:	00000f6d 	.word	0x00000f6d
    10e8:	00000fad 	.word	0x00000fad

000010ec <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    10ec:	2364      	movs	r3, #100	; 0x64
    10ee:	4358      	muls	r0, r3
    10f0:	0083      	lsls	r3, r0, #2
    10f2:	181b      	adds	r3, r3, r0
    10f4:	0058      	lsls	r0, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    10f6:	4770      	bx	lr

000010f8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    10f8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    10fa:	4b06      	ldr	r3, [pc, #24]	; (1114 <_init_chip+0x1c>)
    10fc:	685a      	ldr	r2, [r3, #4]
    10fe:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1100:	4b05      	ldr	r3, [pc, #20]	; (1118 <_init_chip+0x20>)
    1102:	4798      	blx	r3
	_sysctrl_init_sources();
    1104:	4b05      	ldr	r3, [pc, #20]	; (111c <_init_chip+0x24>)
    1106:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1108:	4b05      	ldr	r3, [pc, #20]	; (1120 <_init_chip+0x28>)
    110a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    110c:	20ff      	movs	r0, #255	; 0xff
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <_init_chip+0x2c>)
    1110:	4798      	blx	r3
}
    1112:	bd10      	pop	{r4, pc}
    1114:	41004000 	.word	0x41004000
    1118:	0000137d 	.word	0x0000137d
    111c:	000018a9 	.word	0x000018a9
    1120:	000018f5 	.word	0x000018f5
    1124:	000012cd 	.word	0x000012cd

00001128 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1128:	79c3      	ldrb	r3, [r0, #7]
    112a:	09db      	lsrs	r3, r3, #7
    112c:	d1fc      	bne.n	1128 <_dac_init>
    112e:	79c3      	ldrb	r3, [r0, #7]
    1130:	09db      	lsrs	r3, r3, #7
    1132:	d1fc      	bne.n	112e <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1134:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    1136:	079b      	lsls	r3, r3, #30
    1138:	d507      	bpl.n	114a <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    113a:	2300      	movs	r3, #0
    113c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    113e:	79c3      	ldrb	r3, [r0, #7]
    1140:	09db      	lsrs	r3, r3, #7
    1142:	d1fc      	bne.n	113e <_dac_init+0x16>
    1144:	79c3      	ldrb	r3, [r0, #7]
    1146:	09db      	lsrs	r3, r3, #7
    1148:	d1fc      	bne.n	1144 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    114a:	2301      	movs	r3, #1
    114c:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    114e:	79c3      	ldrb	r3, [r0, #7]
    1150:	09db      	lsrs	r3, r3, #7
    1152:	d1fc      	bne.n	114e <_dac_init+0x26>
    1154:	79c3      	ldrb	r3, [r0, #7]
    1156:	09db      	lsrs	r3, r3, #7
    1158:	d1fc      	bne.n	1154 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    115a:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    115c:	2201      	movs	r2, #1
    115e:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1160:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1162:	79c3      	ldrb	r3, [r0, #7]
    1164:	09db      	lsrs	r3, r3, #7
    1166:	d1fc      	bne.n	1162 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    1168:	2000      	movs	r0, #0
    116a:	4770      	bx	lr

0000116c <_dac_sync_init>:
{
    116c:	b570      	push	{r4, r5, r6, lr}
    116e:	0005      	movs	r5, r0
    1170:	000c      	movs	r4, r1
	ASSERT(device);
    1172:	1e43      	subs	r3, r0, #1
    1174:	4198      	sbcs	r0, r3
    1176:	b2c0      	uxtb	r0, r0
    1178:	2249      	movs	r2, #73	; 0x49
    117a:	4904      	ldr	r1, [pc, #16]	; (118c <_dac_sync_init+0x20>)
    117c:	4b04      	ldr	r3, [pc, #16]	; (1190 <_dac_sync_init+0x24>)
    117e:	4798      	blx	r3
	device->hw = hw;
    1180:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1182:	0020      	movs	r0, r4
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <_dac_sync_init+0x28>)
    1186:	4798      	blx	r3
}
    1188:	bd70      	pop	{r4, r5, r6, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	000037cc 	.word	0x000037cc
    1190:	00000d19 	.word	0x00000d19
    1194:	00001129 	.word	0x00001129

00001198 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1198:	4b20      	ldr	r3, [pc, #128]	; (121c <_ext_irq_init+0x84>)
    119a:	785b      	ldrb	r3, [r3, #1]
    119c:	09db      	lsrs	r3, r3, #7
    119e:	d1fb      	bne.n	1198 <_ext_irq_init>
    11a0:	4b1e      	ldr	r3, [pc, #120]	; (121c <_ext_irq_init+0x84>)
    11a2:	785b      	ldrb	r3, [r3, #1]
    11a4:	09db      	lsrs	r3, r3, #7
    11a6:	d1fb      	bne.n	11a0 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    11a8:	4b1c      	ldr	r3, [pc, #112]	; (121c <_ext_irq_init+0x84>)
    11aa:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    11ac:	079b      	lsls	r3, r3, #30
    11ae:	d50a      	bpl.n	11c6 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    11b0:	2200      	movs	r2, #0
    11b2:	4b1a      	ldr	r3, [pc, #104]	; (121c <_ext_irq_init+0x84>)
    11b4:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11b6:	4b19      	ldr	r3, [pc, #100]	; (121c <_ext_irq_init+0x84>)
    11b8:	785b      	ldrb	r3, [r3, #1]
    11ba:	09db      	lsrs	r3, r3, #7
    11bc:	d1fb      	bne.n	11b6 <_ext_irq_init+0x1e>
    11be:	4b17      	ldr	r3, [pc, #92]	; (121c <_ext_irq_init+0x84>)
    11c0:	785b      	ldrb	r3, [r3, #1]
    11c2:	09db      	lsrs	r3, r3, #7
    11c4:	d1fb      	bne.n	11be <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    11c6:	2201      	movs	r2, #1
    11c8:	4b14      	ldr	r3, [pc, #80]	; (121c <_ext_irq_init+0x84>)
    11ca:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11cc:	4b13      	ldr	r3, [pc, #76]	; (121c <_ext_irq_init+0x84>)
    11ce:	785b      	ldrb	r3, [r3, #1]
    11d0:	09db      	lsrs	r3, r3, #7
    11d2:	d1fb      	bne.n	11cc <_ext_irq_init+0x34>
    11d4:	4b11      	ldr	r3, [pc, #68]	; (121c <_ext_irq_init+0x84>)
    11d6:	785b      	ldrb	r3, [r3, #1]
    11d8:	09db      	lsrs	r3, r3, #7
    11da:	d1fb      	bne.n	11d4 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    11dc:	4b0f      	ldr	r3, [pc, #60]	; (121c <_ext_irq_init+0x84>)
    11de:	2200      	movs	r2, #0
    11e0:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    11e2:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    11e4:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    11e6:	619a      	str	r2, [r3, #24]
    11e8:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    11ea:	781a      	ldrb	r2, [r3, #0]
    11ec:	2102      	movs	r1, #2
    11ee:	430a      	orrs	r2, r1
    11f0:	b2d2      	uxtb	r2, r2
    11f2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11f4:	4b09      	ldr	r3, [pc, #36]	; (121c <_ext_irq_init+0x84>)
    11f6:	785b      	ldrb	r3, [r3, #1]
    11f8:	09db      	lsrs	r3, r3, #7
    11fa:	d1fb      	bne.n	11f4 <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11fc:	4b08      	ldr	r3, [pc, #32]	; (1220 <_ext_irq_init+0x88>)
    11fe:	2210      	movs	r2, #16
    1200:	2180      	movs	r1, #128	; 0x80
    1202:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1208:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    120c:	3101      	adds	r1, #1
    120e:	31ff      	adds	r1, #255	; 0xff
    1210:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1212:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1214:	4b03      	ldr	r3, [pc, #12]	; (1224 <_ext_irq_init+0x8c>)
    1216:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1218:	2000      	movs	r0, #0
    121a:	4770      	bx	lr
    121c:	40001800 	.word	0x40001800
    1220:	e000e100 	.word	0xe000e100
    1224:	20000148 	.word	0x20000148

00001228 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1228:	b530      	push	{r4, r5, lr}
    122a:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    122c:	4b21      	ldr	r3, [pc, #132]	; (12b4 <EIC_Handler+0x8c>)
    122e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1230:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1232:	400a      	ands	r2, r1
    1234:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1236:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1238:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    123a:	4b1f      	ldr	r3, [pc, #124]	; (12b8 <EIC_Handler+0x90>)
    123c:	6818      	ldr	r0, [r3, #0]
    123e:	1e43      	subs	r3, r0, #1
    1240:	4198      	sbcs	r0, r3
    1242:	b2c0      	uxtb	r0, r0
    1244:	22d2      	movs	r2, #210	; 0xd2
    1246:	491d      	ldr	r1, [pc, #116]	; (12bc <EIC_Handler+0x94>)
    1248:	4b1d      	ldr	r3, [pc, #116]	; (12c0 <EIC_Handler+0x98>)
    124a:	4798      	blx	r3

	while (flags) {
    124c:	e027      	b.n	129e <EIC_Handler+0x76>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    124e:	3901      	subs	r1, #1
    1250:	b2cd      	uxtb	r5, r1
			while (upper >= lower) {
    1252:	42ac      	cmp	r4, r5
    1254:	d80d      	bhi.n	1272 <EIC_Handler+0x4a>
				middle = (upper + lower) >> 1;
    1256:	192a      	adds	r2, r5, r4
    1258:	1052      	asrs	r2, r2, #1
    125a:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    125c:	23ff      	movs	r3, #255	; 0xff
    125e:	4013      	ands	r3, r2
    1260:	00db      	lsls	r3, r3, #3
    1262:	4a18      	ldr	r2, [pc, #96]	; (12c4 <EIC_Handler+0x9c>)
    1264:	5c9b      	ldrb	r3, [r3, r2]
    1266:	4283      	cmp	r3, r0
    1268:	d003      	beq.n	1272 <EIC_Handler+0x4a>
				if (_map[middle].extint < pos) {
    126a:	daf0      	bge.n	124e <EIC_Handler+0x26>
					lower = middle + 1;
    126c:	3101      	adds	r1, #1
    126e:	b2cc      	uxtb	r4, r1
    1270:	e7ef      	b.n	1252 <EIC_Handler+0x2a>
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}
			flags &= ~(1ul << pos);
    1272:	2201      	movs	r2, #1
    1274:	4082      	lsls	r2, r0
    1276:	9b01      	ldr	r3, [sp, #4]
    1278:	4393      	bics	r3, r2
    127a:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    127c:	9801      	ldr	r0, [sp, #4]
    127e:	4b12      	ldr	r3, [pc, #72]	; (12c8 <EIC_Handler+0xa0>)
    1280:	4798      	blx	r3
    1282:	3801      	subs	r0, #1
    1284:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    1286:	1c43      	adds	r3, r0, #1
    1288:	d002      	beq.n	1290 <EIC_Handler+0x68>
    128a:	2500      	movs	r5, #0
    128c:	2400      	movs	r4, #0
    128e:	e7e0      	b.n	1252 <EIC_Handler+0x2a>
	return ((Eic *)hw)->INTFLAG.reg;
    1290:	4b08      	ldr	r3, [pc, #32]	; (12b4 <EIC_Handler+0x8c>)
    1292:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1294:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1296:	400a      	ands	r2, r1
    1298:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    129a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    129c:	611a      	str	r2, [r3, #16]
	while (flags) {
    129e:	9b01      	ldr	r3, [sp, #4]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d005      	beq.n	12b0 <EIC_Handler+0x88>
		pos = ffs(flags) - 1;
    12a4:	9801      	ldr	r0, [sp, #4]
    12a6:	4b08      	ldr	r3, [pc, #32]	; (12c8 <EIC_Handler+0xa0>)
    12a8:	4798      	blx	r3
    12aa:	3801      	subs	r0, #1
    12ac:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    12ae:	e7ea      	b.n	1286 <EIC_Handler+0x5e>
	}
}
    12b0:	b003      	add	sp, #12
    12b2:	bd30      	pop	{r4, r5, pc}
    12b4:	40001800 	.word	0x40001800
    12b8:	20000148 	.word	0x20000148
    12bc:	000037ec 	.word	0x000037ec
    12c0:	00000d19 	.word	0x00000d19
    12c4:	000037e4 	.word	0x000037e4
    12c8:	00003581 	.word	0x00003581

000012cc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    12cc:	07c3      	lsls	r3, r0, #31
    12ce:	d50a      	bpl.n	12e6 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    12d0:	4b05      	ldr	r3, [pc, #20]	; (12e8 <_gclk_init_generators_by_fref+0x1c>)
    12d2:	2280      	movs	r2, #128	; 0x80
    12d4:	0052      	lsls	r2, r2, #1
    12d6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    12d8:	2283      	movs	r2, #131	; 0x83
    12da:	0252      	lsls	r2, r2, #9
    12dc:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    12de:	4b02      	ldr	r3, [pc, #8]	; (12e8 <_gclk_init_generators_by_fref+0x1c>)
    12e0:	785b      	ldrb	r3, [r3, #1]
    12e2:	09db      	lsrs	r3, r3, #7
    12e4:	d1fb      	bne.n	12de <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    12e6:	4770      	bx	lr
    12e8:	40000c00 	.word	0x40000c00

000012ec <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	0005      	movs	r5, r0
    12f0:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    12f2:	2800      	cmp	r0, #0
    12f4:	d01c      	beq.n	1330 <_flash_init+0x44>
    12f6:	4b10      	ldr	r3, [pc, #64]	; (1338 <_flash_init+0x4c>)
    12f8:	4299      	cmp	r1, r3
    12fa:	d01b      	beq.n	1334 <_flash_init+0x48>
    12fc:	2000      	movs	r0, #0
    12fe:	2246      	movs	r2, #70	; 0x46
    1300:	490e      	ldr	r1, [pc, #56]	; (133c <_flash_init+0x50>)
    1302:	4b0f      	ldr	r3, [pc, #60]	; (1340 <_flash_init+0x54>)
    1304:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
    1306:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    1308:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    130a:	239e      	movs	r3, #158	; 0x9e
    130c:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    130e:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
    1310:	4b0c      	ldr	r3, [pc, #48]	; (1344 <_flash_init+0x58>)
    1312:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1314:	4b0c      	ldr	r3, [pc, #48]	; (1348 <_flash_init+0x5c>)
    1316:	2220      	movs	r2, #32
    1318:	2180      	movs	r1, #128	; 0x80
    131a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    131c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1320:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1324:	3101      	adds	r1, #1
    1326:	31ff      	adds	r1, #255	; 0xff
    1328:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    132a:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
    132c:	2000      	movs	r0, #0
    132e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    1330:	2000      	movs	r0, #0
    1332:	e7e4      	b.n	12fe <_flash_init+0x12>
    1334:	2001      	movs	r0, #1
    1336:	e7e2      	b.n	12fe <_flash_init+0x12>
    1338:	41004000 	.word	0x41004000
    133c:	00003804 	.word	0x00003804
    1340:	00000d19 	.word	0x00000d19
    1344:	2000014c 	.word	0x2000014c
    1348:	e000e100 	.word	0xe000e100

0000134c <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    134c:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    134e:	4b0a      	ldr	r3, [pc, #40]	; (1378 <NVMCTRL_Handler+0x2c>)
    1350:	6818      	ldr	r0, [r3, #0]
    1352:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1354:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1356:	07d2      	lsls	r2, r2, #31
    1358:	d504      	bpl.n	1364 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    135a:	6803      	ldr	r3, [r0, #0]
    135c:	2b00      	cmp	r3, #0
    135e:	d000      	beq.n	1362 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1360:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    1362:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    1364:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    1366:	0792      	lsls	r2, r2, #30
    1368:	d5fb      	bpl.n	1362 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    136a:	2202      	movs	r2, #2
    136c:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    136e:	6843      	ldr	r3, [r0, #4]
    1370:	2b00      	cmp	r3, #0
    1372:	d0f6      	beq.n	1362 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    1374:	4798      	blx	r3
}
    1376:	e7f4      	b.n	1362 <NVMCTRL_Handler+0x16>
    1378:	2000014c 	.word	0x2000014c

0000137c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    137c:	4b06      	ldr	r3, [pc, #24]	; (1398 <_pm_init+0x1c>)
    137e:	7a1a      	ldrb	r2, [r3, #8]
    1380:	b2d2      	uxtb	r2, r2
    1382:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1384:	7a5a      	ldrb	r2, [r3, #9]
    1386:	b2d2      	uxtb	r2, r2
    1388:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    138a:	7a9a      	ldrb	r2, [r3, #10]
    138c:	b2d2      	uxtb	r2, r2
    138e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1390:	7ada      	ldrb	r2, [r3, #11]
    1392:	b2d2      	uxtb	r2, r2
    1394:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1396:	4770      	bx	lr
    1398:	40000400 	.word	0x40000400

0000139c <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <_sercom_get_hardware_index+0xc>)
    139e:	469c      	mov	ip, r3
    13a0:	4460      	add	r0, ip
    13a2:	0a80      	lsrs	r0, r0, #10
    13a4:	b2c0      	uxtb	r0, r0
}
    13a6:	4770      	bx	lr
    13a8:	bdfff800 	.word	0xbdfff800

000013ac <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    13ac:	b510      	push	{r4, lr}
	void *hw = device->hw;
    13ae:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    13b0:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    13b2:	07d2      	lsls	r2, r2, #31
    13b4:	d502      	bpl.n	13bc <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    13b6:	7b5a      	ldrb	r2, [r3, #13]
    13b8:	07d2      	lsls	r2, r2, #31
    13ba:	d40e      	bmi.n	13da <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    13bc:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    13be:	0792      	lsls	r2, r2, #30
    13c0:	d502      	bpl.n	13c8 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    13c2:	7b5a      	ldrb	r2, [r3, #13]
    13c4:	0792      	lsls	r2, r2, #30
    13c6:	d40d      	bmi.n	13e4 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    13c8:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    13ca:	0752      	lsls	r2, r2, #29
    13cc:	d504      	bpl.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    13ce:	8a1a      	ldrh	r2, [r3, #16]
		if (hri_sercomusart_read_STATUS_reg(hw)
    13d0:	0752      	lsls	r2, r2, #29
    13d2:	d00c      	beq.n	13ee <_sercom_usart_interrupt_handler+0x42>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    13d4:	4a08      	ldr	r2, [pc, #32]	; (13f8 <_sercom_usart_interrupt_handler+0x4c>)
    13d6:	821a      	strh	r2, [r3, #16]
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
	}
}
    13d8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    13da:	2201      	movs	r2, #1
    13dc:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
    13de:	6803      	ldr	r3, [r0, #0]
    13e0:	4798      	blx	r3
    13e2:	e7f9      	b.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    13e4:	2202      	movs	r2, #2
    13e6:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
    13e8:	6883      	ldr	r3, [r0, #8]
    13ea:	4798      	blx	r3
    13ec:	e7f4      	b.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    13ee:	6842      	ldr	r2, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    13f0:	8b19      	ldrh	r1, [r3, #24]
    13f2:	b2c9      	uxtb	r1, r1
    13f4:	4790      	blx	r2
    13f6:	e7ef      	b.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
    13f8:	ffff8007 	.word	0xffff8007

000013fc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    13fc:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    13fe:	4b02      	ldr	r3, [pc, #8]	; (1408 <_sercom_get_irq_num+0xc>)
    1400:	4798      	blx	r3
    1402:	3007      	adds	r0, #7
    1404:	b2c0      	uxtb	r0, r0
}
    1406:	bd10      	pop	{r4, pc}
    1408:	0000139d 	.word	0x0000139d

0000140c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    140c:	4b03      	ldr	r3, [pc, #12]	; (141c <_sercom_init_irq_param+0x10>)
    140e:	4298      	cmp	r0, r3
    1410:	d000      	beq.n	1414 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    1412:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    1414:	4b02      	ldr	r3, [pc, #8]	; (1420 <_sercom_init_irq_param+0x14>)
    1416:	6019      	str	r1, [r3, #0]
}
    1418:	e7fb      	b.n	1412 <_sercom_init_irq_param+0x6>
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	42001400 	.word	0x42001400
    1420:	20000150 	.word	0x20000150

00001424 <_get_sercom_index>:
{
    1424:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1426:	4b0a      	ldr	r3, [pc, #40]	; (1450 <_get_sercom_index+0x2c>)
    1428:	4798      	blx	r3
    142a:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    142c:	2000      	movs	r0, #0
    142e:	2800      	cmp	r0, #0
    1430:	d006      	beq.n	1440 <_get_sercom_index+0x1c>
	ASSERT(false);
    1432:	4a08      	ldr	r2, [pc, #32]	; (1454 <_get_sercom_index+0x30>)
    1434:	4908      	ldr	r1, [pc, #32]	; (1458 <_get_sercom_index+0x34>)
    1436:	2000      	movs	r0, #0
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <_get_sercom_index+0x38>)
    143a:	4798      	blx	r3
	return 0;
    143c:	2000      	movs	r0, #0
}
    143e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1440:	0102      	lsls	r2, r0, #4
    1442:	4907      	ldr	r1, [pc, #28]	; (1460 <_get_sercom_index+0x3c>)
    1444:	5c52      	ldrb	r2, [r2, r1]
    1446:	4293      	cmp	r3, r2
    1448:	d0f9      	beq.n	143e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    144a:	3001      	adds	r0, #1
    144c:	b2c0      	uxtb	r0, r0
    144e:	e7ee      	b.n	142e <_get_sercom_index+0xa>
    1450:	0000139d 	.word	0x0000139d
    1454:	0000024e 	.word	0x0000024e
    1458:	0000386c 	.word	0x0000386c
    145c:	00000d19 	.word	0x00000d19
    1460:	00003824 	.word	0x00003824

00001464 <_usart_init>:
{
    1464:	b510      	push	{r4, lr}
    1466:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1468:	4b19      	ldr	r3, [pc, #100]	; (14d0 <_usart_init+0x6c>)
    146a:	4798      	blx	r3
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    146c:	8a23      	ldrh	r3, [r4, #16]
    146e:	0bdb      	lsrs	r3, r3, #15
    1470:	d1fc      	bne.n	146c <_usart_init+0x8>
    1472:	8a23      	ldrh	r3, [r4, #16]
    1474:	0bdb      	lsrs	r3, r3, #15
    1476:	d1fc      	bne.n	1472 <_usart_init+0xe>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1478:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    147a:	079b      	lsls	r3, r3, #30
    147c:	d507      	bpl.n	148e <_usart_init+0x2a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    147e:	2300      	movs	r3, #0
    1480:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1482:	8a23      	ldrh	r3, [r4, #16]
    1484:	0bdb      	lsrs	r3, r3, #15
    1486:	d1fc      	bne.n	1482 <_usart_init+0x1e>
    1488:	8a23      	ldrh	r3, [r4, #16]
    148a:	0bdb      	lsrs	r3, r3, #15
    148c:	d1fc      	bne.n	1488 <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    148e:	2301      	movs	r3, #1
    1490:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1492:	8a23      	ldrh	r3, [r4, #16]
    1494:	0bdb      	lsrs	r3, r3, #15
    1496:	d1fc      	bne.n	1492 <_usart_init+0x2e>
    1498:	8a23      	ldrh	r3, [r4, #16]
    149a:	0bdb      	lsrs	r3, r3, #15
    149c:	d1fc      	bne.n	1498 <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    149e:	0102      	lsls	r2, r0, #4
    14a0:	4b0c      	ldr	r3, [pc, #48]	; (14d4 <_usart_init+0x70>)
    14a2:	189b      	adds	r3, r3, r2
    14a4:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    14a6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    14a8:	8a23      	ldrh	r3, [r4, #16]
    14aa:	0bdb      	lsrs	r3, r3, #15
    14ac:	d1fc      	bne.n	14a8 <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    14ae:	0102      	lsls	r2, r0, #4
    14b0:	4b08      	ldr	r3, [pc, #32]	; (14d4 <_usart_init+0x70>)
    14b2:	189b      	adds	r3, r3, r2
    14b4:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    14b6:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    14b8:	8a23      	ldrh	r3, [r4, #16]
    14ba:	0bdb      	lsrs	r3, r3, #15
    14bc:	d1fc      	bne.n	14b8 <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    14be:	0100      	lsls	r0, r0, #4
    14c0:	4b04      	ldr	r3, [pc, #16]	; (14d4 <_usart_init+0x70>)
    14c2:	1818      	adds	r0, r3, r0
    14c4:	8983      	ldrh	r3, [r0, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    14c6:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    14c8:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    14ca:	7223      	strb	r3, [r4, #8]
}
    14cc:	2000      	movs	r0, #0
    14ce:	bd10      	pop	{r4, pc}
    14d0:	00001425 	.word	0x00001425
    14d4:	00003824 	.word	0x00003824

000014d8 <_usart_async_init>:
{
    14d8:	b570      	push	{r4, r5, r6, lr}
    14da:	0006      	movs	r6, r0
    14dc:	000c      	movs	r4, r1
	ASSERT(device);
    14de:	1e43      	subs	r3, r0, #1
    14e0:	4198      	sbcs	r0, r3
    14e2:	b2c0      	uxtb	r0, r0
    14e4:	22b1      	movs	r2, #177	; 0xb1
    14e6:	4919      	ldr	r1, [pc, #100]	; (154c <_usart_async_init+0x74>)
    14e8:	4b19      	ldr	r3, [pc, #100]	; (1550 <_usart_async_init+0x78>)
    14ea:	4798      	blx	r3
	init_status = _usart_init(hw);
    14ec:	0020      	movs	r0, r4
    14ee:	4b19      	ldr	r3, [pc, #100]	; (1554 <_usart_async_init+0x7c>)
    14f0:	4798      	blx	r3
    14f2:	1e05      	subs	r5, r0, #0
	if (init_status) {
    14f4:	d001      	beq.n	14fa <_usart_async_init+0x22>
}
    14f6:	0028      	movs	r0, r5
    14f8:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    14fa:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    14fc:	0031      	movs	r1, r6
    14fe:	0020      	movs	r0, r4
    1500:	4b15      	ldr	r3, [pc, #84]	; (1558 <_usart_async_init+0x80>)
    1502:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1504:	0020      	movs	r0, r4
    1506:	4b15      	ldr	r3, [pc, #84]	; (155c <_usart_async_init+0x84>)
    1508:	4798      	blx	r3
    150a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    150c:	2b00      	cmp	r3, #0
    150e:	db0a      	blt.n	1526 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1510:	211f      	movs	r1, #31
    1512:	4001      	ands	r1, r0
    1514:	2201      	movs	r2, #1
    1516:	408a      	lsls	r2, r1
    1518:	2180      	movs	r1, #128	; 0x80
    151a:	4c11      	ldr	r4, [pc, #68]	; (1560 <_usart_async_init+0x88>)
    151c:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    151e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1522:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1526:	2b00      	cmp	r3, #0
    1528:	db07      	blt.n	153a <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    152a:	211f      	movs	r1, #31
    152c:	4001      	ands	r1, r0
    152e:	2201      	movs	r2, #1
    1530:	408a      	lsls	r2, r1
    1532:	21c0      	movs	r1, #192	; 0xc0
    1534:	0049      	lsls	r1, r1, #1
    1536:	4c0a      	ldr	r4, [pc, #40]	; (1560 <_usart_async_init+0x88>)
    1538:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    153a:	2b00      	cmp	r3, #0
    153c:	dbdb      	blt.n	14f6 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    153e:	231f      	movs	r3, #31
    1540:	4018      	ands	r0, r3
    1542:	3b1e      	subs	r3, #30
    1544:	4083      	lsls	r3, r0
    1546:	4a06      	ldr	r2, [pc, #24]	; (1560 <_usart_async_init+0x88>)
    1548:	6013      	str	r3, [r2, #0]
    154a:	e7d4      	b.n	14f6 <_usart_async_init+0x1e>
    154c:	0000386c 	.word	0x0000386c
    1550:	00000d19 	.word	0x00000d19
    1554:	00001465 	.word	0x00001465
    1558:	0000140d 	.word	0x0000140d
    155c:	000013fd 	.word	0x000013fd
    1560:	e000e100 	.word	0xe000e100

00001564 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1564:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1566:	6813      	ldr	r3, [r2, #0]
    1568:	2102      	movs	r1, #2
    156a:	430b      	orrs	r3, r1
    156c:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    156e:	8a13      	ldrh	r3, [r2, #16]
    1570:	0bdb      	lsrs	r3, r3, #15
    1572:	d1fc      	bne.n	156e <_usart_async_enable+0xa>
}
    1574:	4770      	bx	lr

00001576 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1576:	6983      	ldr	r3, [r0, #24]
    1578:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    157a:	8319      	strh	r1, [r3, #24]
}
    157c:	4770      	bx	lr

0000157e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    157e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1580:	2201      	movs	r2, #1
    1582:	735a      	strb	r2, [r3, #13]
}
    1584:	4770      	bx	lr

00001586 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1586:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1588:	2202      	movs	r2, #2
    158a:	735a      	strb	r2, [r3, #13]
}
    158c:	4770      	bx	lr
	...

00001590 <_usart_async_set_irq_state>:
{
    1590:	b570      	push	{r4, r5, r6, lr}
    1592:	0004      	movs	r4, r0
    1594:	000d      	movs	r5, r1
    1596:	0016      	movs	r6, r2
	ASSERT(device);
    1598:	1e43      	subs	r3, r0, #1
    159a:	4198      	sbcs	r0, r3
    159c:	b2c0      	uxtb	r0, r0
    159e:	2284      	movs	r2, #132	; 0x84
    15a0:	0092      	lsls	r2, r2, #2
    15a2:	4911      	ldr	r1, [pc, #68]	; (15e8 <_usart_async_set_irq_state+0x58>)
    15a4:	4b11      	ldr	r3, [pc, #68]	; (15ec <_usart_async_set_irq_state+0x5c>)
    15a6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    15a8:	2d00      	cmp	r5, #0
    15aa:	d009      	beq.n	15c0 <_usart_async_set_irq_state+0x30>
    15ac:	2d02      	cmp	r5, #2
    15ae:	d007      	beq.n	15c0 <_usart_async_set_irq_state+0x30>
	} else if (USART_ASYNC_RX_DONE == type) {
    15b0:	2d01      	cmp	r5, #1
    15b2:	d10f      	bne.n	15d4 <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    15b4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    15b6:	2e00      	cmp	r6, #0
    15b8:	d013      	beq.n	15e2 <_usart_async_set_irq_state+0x52>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    15ba:	2204      	movs	r2, #4
    15bc:	735a      	strb	r2, [r3, #13]
}
    15be:	e009      	b.n	15d4 <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    15c0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    15c2:	2e00      	cmp	r6, #0
    15c4:	d107      	bne.n	15d6 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    15c6:	2201      	movs	r2, #1
    15c8:	731a      	strb	r2, [r3, #12]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    15ca:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    15cc:	2e00      	cmp	r6, #0
    15ce:	d105      	bne.n	15dc <_usart_async_set_irq_state+0x4c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    15d0:	2202      	movs	r2, #2
    15d2:	731a      	strb	r2, [r3, #12]
}
    15d4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    15d6:	2201      	movs	r2, #1
    15d8:	735a      	strb	r2, [r3, #13]
    15da:	e7f6      	b.n	15ca <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    15dc:	2202      	movs	r2, #2
    15de:	735a      	strb	r2, [r3, #13]
    15e0:	e7f8      	b.n	15d4 <_usart_async_set_irq_state+0x44>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    15e2:	2204      	movs	r2, #4
    15e4:	731a      	strb	r2, [r3, #12]
    15e6:	e7f5      	b.n	15d4 <_usart_async_set_irq_state+0x44>
    15e8:	0000386c 	.word	0x0000386c
    15ec:	00000d19 	.word	0x00000d19

000015f0 <SERCOM3_Handler>:
{
    15f0:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    15f2:	4b02      	ldr	r3, [pc, #8]	; (15fc <SERCOM3_Handler+0xc>)
    15f4:	6818      	ldr	r0, [r3, #0]
    15f6:	4b02      	ldr	r3, [pc, #8]	; (1600 <SERCOM3_Handler+0x10>)
    15f8:	4798      	blx	r3
}
    15fa:	bd10      	pop	{r4, pc}
    15fc:	20000150 	.word	0x20000150
    1600:	000013ad 	.word	0x000013ad

00001604 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1604:	b570      	push	{r4, r5, r6, lr}
    1606:	0006      	movs	r6, r0
    1608:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    160a:	0008      	movs	r0, r1
    160c:	4b62      	ldr	r3, [pc, #392]	; (1798 <_spi_m_sync_init+0x194>)
    160e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1610:	2300      	movs	r3, #0
    1612:	2b00      	cmp	r3, #0
    1614:	d100      	bne.n	1618 <_spi_m_sync_init+0x14>
    1616:	e06c      	b.n	16f2 <_spi_m_sync_init+0xee>
	return NULL;
    1618:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    161a:	2e00      	cmp	r6, #0
    161c:	d100      	bne.n	1620 <_spi_m_sync_init+0x1c>
    161e:	e074      	b.n	170a <_spi_m_sync_init+0x106>
    1620:	2c00      	cmp	r4, #0
    1622:	d100      	bne.n	1626 <_spi_m_sync_init+0x22>
    1624:	e06f      	b.n	1706 <_spi_m_sync_init+0x102>
    1626:	2001      	movs	r0, #1
    1628:	4a5c      	ldr	r2, [pc, #368]	; (179c <_spi_m_sync_init+0x198>)
    162a:	495d      	ldr	r1, [pc, #372]	; (17a0 <_spi_m_sync_init+0x19c>)
    162c:	4b5d      	ldr	r3, [pc, #372]	; (17a4 <_spi_m_sync_init+0x1a0>)
    162e:	4798      	blx	r3

	if (regs == NULL) {
    1630:	2d00      	cmp	r5, #0
    1632:	d100      	bne.n	1636 <_spi_m_sync_init+0x32>
    1634:	e0ac      	b.n	1790 <_spi_m_sync_init+0x18c>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1636:	8a23      	ldrh	r3, [r4, #16]
    1638:	0bdb      	lsrs	r3, r3, #15
    163a:	d1fc      	bne.n	1636 <_spi_m_sync_init+0x32>
    163c:	8a23      	ldrh	r3, [r4, #16]
    163e:	0bdb      	lsrs	r3, r3, #15
    1640:	d1fc      	bne.n	163c <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1642:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1644:	079b      	lsls	r3, r3, #30
    1646:	d507      	bpl.n	1658 <_spi_m_sync_init+0x54>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1648:	2300      	movs	r3, #0
    164a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    164c:	8a23      	ldrh	r3, [r4, #16]
    164e:	0bdb      	lsrs	r3, r3, #15
    1650:	d1fc      	bne.n	164c <_spi_m_sync_init+0x48>
    1652:	8a23      	ldrh	r3, [r4, #16]
    1654:	0bdb      	lsrs	r3, r3, #15
    1656:	d1fc      	bne.n	1652 <_spi_m_sync_init+0x4e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1658:	2301      	movs	r3, #1
    165a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    165c:	8a23      	ldrh	r3, [r4, #16]
    165e:	0bdb      	lsrs	r3, r3, #15
    1660:	d1fc      	bne.n	165c <_spi_m_sync_init+0x58>
    1662:	8a23      	ldrh	r3, [r4, #16]
    1664:	0bdb      	lsrs	r3, r3, #15
    1666:	d1fc      	bne.n	1662 <_spi_m_sync_init+0x5e>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    1668:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    166a:	782b      	ldrb	r3, [r5, #0]
    166c:	786a      	ldrb	r2, [r5, #1]
    166e:	0212      	lsls	r2, r2, #8
    1670:	431a      	orrs	r2, r3
    1672:	78ab      	ldrb	r3, [r5, #2]
    1674:	041b      	lsls	r3, r3, #16
    1676:	431a      	orrs	r2, r3
    1678:	78eb      	ldrb	r3, [r5, #3]
    167a:	061b      	lsls	r3, r3, #24
    167c:	4313      	orrs	r3, r2
    167e:	221c      	movs	r2, #28
    1680:	4013      	ands	r3, r2
    1682:	2b08      	cmp	r3, #8
    1684:	d043      	beq.n	170e <_spi_m_sync_init+0x10a>
	ASSERT(hw && regs);
    1686:	2c00      	cmp	r4, #0
    1688:	d100      	bne.n	168c <_spi_m_sync_init+0x88>
    168a:	e07d      	b.n	1788 <_spi_m_sync_init+0x184>
    168c:	2d00      	cmp	r5, #0
    168e:	d100      	bne.n	1692 <_spi_m_sync_init+0x8e>
    1690:	e078      	b.n	1784 <_spi_m_sync_init+0x180>
    1692:	2001      	movs	r0, #1
    1694:	4a44      	ldr	r2, [pc, #272]	; (17a8 <_spi_m_sync_init+0x1a4>)
    1696:	4942      	ldr	r1, [pc, #264]	; (17a0 <_spi_m_sync_init+0x19c>)
    1698:	4b42      	ldr	r3, [pc, #264]	; (17a4 <_spi_m_sync_init+0x1a0>)
    169a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    169c:	782b      	ldrb	r3, [r5, #0]
    169e:	786a      	ldrb	r2, [r5, #1]
    16a0:	0212      	lsls	r2, r2, #8
    16a2:	431a      	orrs	r2, r3
    16a4:	78ab      	ldrb	r3, [r5, #2]
    16a6:	041b      	lsls	r3, r3, #16
    16a8:	431a      	orrs	r2, r3
    16aa:	78eb      	ldrb	r3, [r5, #3]
    16ac:	061b      	lsls	r3, r3, #24
    16ae:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    16b0:	4a3e      	ldr	r2, [pc, #248]	; (17ac <_spi_m_sync_init+0x1a8>)
    16b2:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    16b4:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    16b6:	8a23      	ldrh	r3, [r4, #16]
    16b8:	0bdb      	lsrs	r3, r3, #15
    16ba:	d1fc      	bne.n	16b6 <_spi_m_sync_init+0xb2>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    16bc:	792b      	ldrb	r3, [r5, #4]
    16be:	796a      	ldrb	r2, [r5, #5]
    16c0:	0212      	lsls	r2, r2, #8
    16c2:	431a      	orrs	r2, r3
    16c4:	79ab      	ldrb	r3, [r5, #6]
    16c6:	041b      	lsls	r3, r3, #16
    16c8:	431a      	orrs	r2, r3
    16ca:	79eb      	ldrb	r3, [r5, #7]
    16cc:	061b      	lsls	r3, r3, #24
    16ce:	4313      	orrs	r3, r2
    16d0:	4a37      	ldr	r2, [pc, #220]	; (17b0 <_spi_m_sync_init+0x1ac>)
    16d2:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    16d4:	2280      	movs	r2, #128	; 0x80
    16d6:	0292      	lsls	r2, r2, #10
    16d8:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    16da:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    16dc:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    16de:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    16e0:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    16e2:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    16e4:	792b      	ldrb	r3, [r5, #4]
    16e6:	075b      	lsls	r3, r3, #29
    16e8:	d150      	bne.n	178c <_spi_m_sync_init+0x188>
    16ea:	2301      	movs	r3, #1
    16ec:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    16ee:	2000      	movs	r0, #0
}
    16f0:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    16f2:	2801      	cmp	r0, #1
    16f4:	d002      	beq.n	16fc <_spi_m_sync_init+0xf8>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    16f6:	3301      	adds	r3, #1
    16f8:	b2db      	uxtb	r3, r3
    16fa:	e78a      	b.n	1612 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    16fc:	011d      	lsls	r5, r3, #4
    16fe:	4b2d      	ldr	r3, [pc, #180]	; (17b4 <_spi_m_sync_init+0x1b0>)
    1700:	3338      	adds	r3, #56	; 0x38
    1702:	195d      	adds	r5, r3, r5
    1704:	e789      	b.n	161a <_spi_m_sync_init+0x16>
	ASSERT(dev && hw);
    1706:	2000      	movs	r0, #0
    1708:	e78e      	b.n	1628 <_spi_m_sync_init+0x24>
    170a:	2000      	movs	r0, #0
    170c:	e78c      	b.n	1628 <_spi_m_sync_init+0x24>
	ASSERT(hw && regs);
    170e:	2c00      	cmp	r4, #0
    1710:	d036      	beq.n	1780 <_spi_m_sync_init+0x17c>
    1712:	2d00      	cmp	r5, #0
    1714:	d032      	beq.n	177c <_spi_m_sync_init+0x178>
    1716:	2001      	movs	r0, #1
    1718:	4a27      	ldr	r2, [pc, #156]	; (17b8 <_spi_m_sync_init+0x1b4>)
    171a:	4921      	ldr	r1, [pc, #132]	; (17a0 <_spi_m_sync_init+0x19c>)
    171c:	4b21      	ldr	r3, [pc, #132]	; (17a4 <_spi_m_sync_init+0x1a0>)
    171e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1720:	782b      	ldrb	r3, [r5, #0]
    1722:	786a      	ldrb	r2, [r5, #1]
    1724:	0212      	lsls	r2, r2, #8
    1726:	431a      	orrs	r2, r3
    1728:	78ab      	ldrb	r3, [r5, #2]
    172a:	041b      	lsls	r3, r3, #16
    172c:	431a      	orrs	r2, r3
    172e:	78eb      	ldrb	r3, [r5, #3]
    1730:	061b      	lsls	r3, r3, #24
    1732:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1734:	4a1d      	ldr	r2, [pc, #116]	; (17ac <_spi_m_sync_init+0x1a8>)
    1736:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1738:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    173a:	8a23      	ldrh	r3, [r4, #16]
    173c:	0bdb      	lsrs	r3, r3, #15
    173e:	d1fc      	bne.n	173a <_spi_m_sync_init+0x136>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    1740:	792b      	ldrb	r3, [r5, #4]
    1742:	796a      	ldrb	r2, [r5, #5]
    1744:	0212      	lsls	r2, r2, #8
    1746:	431a      	orrs	r2, r3
    1748:	79ab      	ldrb	r3, [r5, #6]
    174a:	041b      	lsls	r3, r3, #16
    174c:	431a      	orrs	r2, r3
    174e:	79eb      	ldrb	r3, [r5, #7]
    1750:	061b      	lsls	r3, r3, #24
    1752:	4313      	orrs	r3, r2
    1754:	4a19      	ldr	r2, [pc, #100]	; (17bc <_spi_m_sync_init+0x1b8>)
    1756:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1758:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    175a:	7a2b      	ldrb	r3, [r5, #8]
    175c:	7a6a      	ldrb	r2, [r5, #9]
    175e:	0212      	lsls	r2, r2, #8
    1760:	431a      	orrs	r2, r3
    1762:	7aab      	ldrb	r3, [r5, #10]
    1764:	041b      	lsls	r3, r3, #16
    1766:	431a      	orrs	r2, r3
    1768:	7aeb      	ldrb	r3, [r5, #11]
    176a:	061b      	lsls	r3, r3, #24
    176c:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    176e:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1770:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1772:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    1774:	8a23      	ldrh	r3, [r4, #16]
    1776:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    1778:	d1fc      	bne.n	1774 <_spi_m_sync_init+0x170>
    177a:	e7b3      	b.n	16e4 <_spi_m_sync_init+0xe0>
	ASSERT(hw && regs);
    177c:	2000      	movs	r0, #0
    177e:	e7cb      	b.n	1718 <_spi_m_sync_init+0x114>
    1780:	2000      	movs	r0, #0
    1782:	e7c9      	b.n	1718 <_spi_m_sync_init+0x114>
	ASSERT(hw && regs);
    1784:	2000      	movs	r0, #0
    1786:	e785      	b.n	1694 <_spi_m_sync_init+0x90>
    1788:	2000      	movs	r0, #0
    178a:	e783      	b.n	1694 <_spi_m_sync_init+0x90>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    178c:	2302      	movs	r3, #2
    178e:	e7ad      	b.n	16ec <_spi_m_sync_init+0xe8>
		return ERR_INVALID_ARG;
    1790:	200d      	movs	r0, #13
    1792:	4240      	negs	r0, r0
    1794:	e7ac      	b.n	16f0 <_spi_m_sync_init+0xec>
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	0000139d 	.word	0x0000139d
    179c:	000008cb 	.word	0x000008cb
    17a0:	0000386c 	.word	0x0000386c
    17a4:	00000d19 	.word	0x00000d19
    17a8:	0000089a 	.word	0x0000089a
    17ac:	fffffefc 	.word	0xfffffefc
    17b0:	fffd3fbf 	.word	0xfffd3fbf
    17b4:	00003824 	.word	0x00003824
    17b8:	000008ab 	.word	0x000008ab
    17bc:	00020040 	.word	0x00020040

000017c0 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    17c0:	b570      	push	{r4, r5, r6, lr}
    17c2:	b088      	sub	sp, #32
    17c4:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    17c6:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    17c8:	680b      	ldr	r3, [r1, #0]
    17ca:	9303      	str	r3, [sp, #12]
    17cc:	684b      	ldr	r3, [r1, #4]
    17ce:	9304      	str	r3, [sp, #16]
    17d0:	2300      	movs	r3, #0
    17d2:	9305      	str	r3, [sp, #20]
    17d4:	9306      	str	r3, [sp, #24]
    17d6:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    17d8:	2800      	cmp	r0, #0
    17da:	d014      	beq.n	1806 <_spi_m_sync_trans+0x46>
    17dc:	2c00      	cmp	r4, #0
    17de:	d010      	beq.n	1802 <_spi_m_sync_trans+0x42>
    17e0:	2001      	movs	r0, #1
    17e2:	4a2d      	ldr	r2, [pc, #180]	; (1898 <_spi_m_sync_trans+0xd8>)
    17e4:	492d      	ldr	r1, [pc, #180]	; (189c <_spi_m_sync_trans+0xdc>)
    17e6:	4b2e      	ldr	r3, [pc, #184]	; (18a0 <_spi_m_sync_trans+0xe0>)
    17e8:	4798      	blx	r3
    17ea:	8a23      	ldrh	r3, [r4, #16]
    17ec:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    17ee:	d14f      	bne.n	1890 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    17f0:	8a23      	ldrh	r3, [r4, #16]
    17f2:	0bdb      	lsrs	r3, r3, #15
    17f4:	d1fc      	bne.n	17f0 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17f6:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    17f8:	079b      	lsls	r3, r3, #30
    17fa:	d418      	bmi.n	182e <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    17fc:	2014      	movs	r0, #20
    17fe:	4240      	negs	r0, r0
    1800:	e044      	b.n	188c <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    1802:	2000      	movs	r0, #0
    1804:	e7ed      	b.n	17e2 <_spi_m_sync_trans+0x22>
    1806:	2000      	movs	r0, #0
    1808:	e7eb      	b.n	17e2 <_spi_m_sync_trans+0x22>
		return false;
    180a:	2200      	movs	r2, #0
    180c:	e026      	b.n	185c <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    180e:	7858      	ldrb	r0, [r3, #1]
    1810:	0200      	lsls	r0, r0, #8
    1812:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    1814:	3302      	adds	r3, #2
    1816:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    1818:	3201      	adds	r2, #1
    181a:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    181c:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    181e:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1820:	9805      	ldr	r0, [sp, #20]
    1822:	68ab      	ldr	r3, [r5, #8]
    1824:	4298      	cmp	r0, r3
    1826:	d302      	bcc.n	182e <_spi_m_sync_trans+0x6e>
    1828:	9a06      	ldr	r2, [sp, #24]
    182a:	4293      	cmp	r3, r2
    182c:	d929      	bls.n	1882 <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    182e:	7ba3      	ldrb	r3, [r4, #14]
    1830:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1832:	075a      	lsls	r2, r3, #29
    1834:	d5e9      	bpl.n	180a <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1836:	8b22      	ldrh	r2, [r4, #24]
    1838:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    183a:	9904      	ldr	r1, [sp, #16]
    183c:	2900      	cmp	r1, #0
    183e:	d008      	beq.n	1852 <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    1840:	1c48      	adds	r0, r1, #1
    1842:	9004      	str	r0, [sp, #16]
    1844:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    1846:	2e01      	cmp	r6, #1
    1848:	d903      	bls.n	1852 <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    184a:	1c88      	adds	r0, r1, #2
    184c:	9004      	str	r0, [sp, #16]
    184e:	0a12      	lsrs	r2, r2, #8
    1850:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    1852:	9a06      	ldr	r2, [sp, #24]
    1854:	9201      	str	r2, [sp, #4]
    1856:	3201      	adds	r2, #1
    1858:	9206      	str	r2, [sp, #24]
	return true;
    185a:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    185c:	2a00      	cmp	r2, #0
    185e:	d1df      	bne.n	1820 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1860:	9906      	ldr	r1, [sp, #24]
    1862:	9a05      	ldr	r2, [sp, #20]
    1864:	4291      	cmp	r1, r2
    1866:	d3db      	bcc.n	1820 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1868:	07db      	lsls	r3, r3, #31
    186a:	d5d9      	bpl.n	1820 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    186c:	9b03      	ldr	r3, [sp, #12]
    186e:	2b00      	cmp	r3, #0
    1870:	d005      	beq.n	187e <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    1872:	1c59      	adds	r1, r3, #1
    1874:	9103      	str	r1, [sp, #12]
    1876:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    1878:	2e01      	cmp	r6, #1
    187a:	d8c8      	bhi.n	180e <_spi_m_sync_trans+0x4e>
    187c:	e7cc      	b.n	1818 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    187e:	4909      	ldr	r1, [pc, #36]	; (18a4 <_spi_m_sync_trans+0xe4>)
    1880:	e7ca      	b.n	1818 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1882:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1884:	079b      	lsls	r3, r3, #30
    1886:	d0fc      	beq.n	1882 <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1888:	2303      	movs	r3, #3
    188a:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    188c:	b008      	add	sp, #32
    188e:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    1890:	2004      	movs	r0, #4
    1892:	4240      	negs	r0, r0
    1894:	e7fa      	b.n	188c <_spi_m_sync_trans+0xcc>
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	00000a29 	.word	0x00000a29
    189c:	0000386c 	.word	0x0000386c
    18a0:	00000d19 	.word	0x00000d19
    18a4:	000001ff 	.word	0x000001ff

000018a8 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    18a8:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <_sysctrl_init_sources+0x40>)
    18aa:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    18ac:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    18ae:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    18b0:	0f92      	lsrs	r2, r2, #30
    18b2:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    18b4:	0409      	lsls	r1, r1, #16
    18b6:	480d      	ldr	r0, [pc, #52]	; (18ec <_sysctrl_init_sources+0x44>)
    18b8:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    18ba:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    18bc:	490c      	ldr	r1, [pc, #48]	; (18f0 <_sysctrl_init_sources+0x48>)
    18be:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    18c0:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18c2:	699a      	ldr	r2, [r3, #24]
    18c4:	2102      	movs	r1, #2
    18c6:	430a      	orrs	r2, r1
    18c8:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    18ca:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    18cc:	311d      	adds	r1, #29
    18ce:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    18d0:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <_sysctrl_init_sources+0x40>)
    18d4:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    18d6:	071b      	lsls	r3, r3, #28
    18d8:	d5fb      	bpl.n	18d2 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    18da:	4a03      	ldr	r2, [pc, #12]	; (18e8 <_sysctrl_init_sources+0x40>)
    18dc:	6a13      	ldr	r3, [r2, #32]
    18de:	2180      	movs	r1, #128	; 0x80
    18e0:	430b      	orrs	r3, r1
    18e2:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    18e4:	4770      	bx	lr
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	40000800 	.word	0x40000800
    18ec:	0fff0000 	.word	0x0fff0000
    18f0:	00000302 	.word	0x00000302

000018f4 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    18f4:	4a02      	ldr	r2, [pc, #8]	; (1900 <_sysctrl_init_referenced_generators+0xc>)
    18f6:	6993      	ldr	r3, [r2, #24]
    18f8:	2102      	movs	r1, #2
    18fa:	438b      	bics	r3, r1
    18fc:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    18fe:	4770      	bx	lr
    1900:	40000800 	.word	0x40000800

00001904 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1904:	4b02      	ldr	r3, [pc, #8]	; (1910 <_system_time_init+0xc>)
    1906:	4a03      	ldr	r2, [pc, #12]	; (1914 <_system_time_init+0x10>)
    1908:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    190a:	2205      	movs	r2, #5
    190c:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    190e:	4770      	bx	lr
    1910:	e000e010 	.word	0xe000e010
    1914:	00ffffff 	.word	0x00ffffff

00001918 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1918:	b510      	push	{r4, lr}
	_system_time_init(hw);
    191a:	4b01      	ldr	r3, [pc, #4]	; (1920 <_delay_init+0x8>)
    191c:	4798      	blx	r3
}
    191e:	bd10      	pop	{r4, pc}
    1920:	00001905 	.word	0x00001905

00001924 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1924:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1926:	e00b      	b.n	1940 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    1928:	4b0b      	ldr	r3, [pc, #44]	; (1958 <_delay_cycles+0x34>)
    192a:	480c      	ldr	r0, [pc, #48]	; (195c <_delay_cycles+0x38>)
    192c:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    192e:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1930:	4b09      	ldr	r3, [pc, #36]	; (1958 <_delay_cycles+0x34>)
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	03db      	lsls	r3, r3, #15
    1936:	d5fb      	bpl.n	1930 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    1938:	4b09      	ldr	r3, [pc, #36]	; (1960 <_delay_cycles+0x3c>)
    193a:	469c      	mov	ip, r3
    193c:	4461      	add	r1, ip
	while (n--) {
    193e:	0010      	movs	r0, r2
    1940:	1e42      	subs	r2, r0, #1
    1942:	b2d2      	uxtb	r2, r2
    1944:	2800      	cmp	r0, #0
    1946:	d1ef      	bne.n	1928 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1948:	4b03      	ldr	r3, [pc, #12]	; (1958 <_delay_cycles+0x34>)
    194a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    194c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    194e:	4b02      	ldr	r3, [pc, #8]	; (1958 <_delay_cycles+0x34>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	03db      	lsls	r3, r3, #15
    1954:	d5fb      	bpl.n	194e <_delay_cycles+0x2a>
		;
}
    1956:	4770      	bx	lr
    1958:	e000e010 	.word	0xe000e010
    195c:	00ffffff 	.word	0x00ffffff
    1960:	ff000001 	.word	0xff000001

00001964 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1964:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1966:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1968:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    196a:	07d2      	lsls	r2, r2, #31
    196c:	d400      	bmi.n	1970 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    196e:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1970:	2201      	movs	r2, #1
    1972:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1974:	6803      	ldr	r3, [r0, #0]
    1976:	4798      	blx	r3
}
    1978:	e7f9      	b.n	196e <tc_interrupt_handler+0xa>

0000197a <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    197a:	b570      	push	{r4, r5, r6, lr}
    197c:	0005      	movs	r5, r0
	void *const hw = device->hw;
    197e:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1980:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1982:	07db      	lsls	r3, r3, #31
    1984:	d505      	bpl.n	1992 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1986:	2301      	movs	r3, #1
    1988:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    198a:	6803      	ldr	r3, [r0, #0]
    198c:	2b00      	cmp	r3, #0
    198e:	d000      	beq.n	1992 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1990:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1992:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1994:	079b      	lsls	r3, r3, #30
    1996:	d506      	bpl.n	19a6 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1998:	2302      	movs	r3, #2
    199a:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    199c:	686b      	ldr	r3, [r5, #4]
    199e:	2b00      	cmp	r3, #0
    19a0:	d001      	beq.n	19a6 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    19a2:	0028      	movs	r0, r5
    19a4:	4798      	blx	r3
		}
	}
}
    19a6:	bd70      	pop	{r4, r5, r6, pc}

000019a8 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    19a8:	4b02      	ldr	r3, [pc, #8]	; (19b4 <tc_get_hardware_index+0xc>)
    19aa:	469c      	mov	ip, r3
    19ac:	4460      	add	r0, ip
    19ae:	0a80      	lsrs	r0, r0, #10
    19b0:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    19b2:	4770      	bx	lr
    19b4:	bdffe000 	.word	0xbdffe000

000019b8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    19b8:	4b06      	ldr	r3, [pc, #24]	; (19d4 <_tc_init_irq_param+0x1c>)
    19ba:	4298      	cmp	r0, r3
    19bc:	d003      	beq.n	19c6 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    19be:	4b06      	ldr	r3, [pc, #24]	; (19d8 <_tc_init_irq_param+0x20>)
    19c0:	4298      	cmp	r0, r3
    19c2:	d003      	beq.n	19cc <_tc_init_irq_param+0x14>
		_tc1_dev = (struct _timer_device *)dev;
	}
}
    19c4:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <_tc_init_irq_param+0x24>)
    19c8:	6019      	str	r1, [r3, #0]
    19ca:	e7f8      	b.n	19be <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    19cc:	4b03      	ldr	r3, [pc, #12]	; (19dc <_tc_init_irq_param+0x24>)
    19ce:	6059      	str	r1, [r3, #4]
}
    19d0:	e7f8      	b.n	19c4 <_tc_init_irq_param+0xc>
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	42002000 	.word	0x42002000
    19d8:	42002400 	.word	0x42002400
    19dc:	20000154 	.word	0x20000154

000019e0 <get_tc_index>:
{
    19e0:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    19e2:	4b0d      	ldr	r3, [pc, #52]	; (1a18 <get_tc_index+0x38>)
    19e4:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    19e6:	2300      	movs	r3, #0
    19e8:	2b01      	cmp	r3, #1
    19ea:	d80b      	bhi.n	1a04 <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    19ec:	009a      	lsls	r2, r3, #2
    19ee:	18d2      	adds	r2, r2, r3
    19f0:	0091      	lsls	r1, r2, #2
    19f2:	4a0a      	ldr	r2, [pc, #40]	; (1a1c <get_tc_index+0x3c>)
    19f4:	5c8a      	ldrb	r2, [r1, r2]
    19f6:	4290      	cmp	r0, r2
    19f8:	d002      	beq.n	1a00 <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    19fa:	3301      	adds	r3, #1
    19fc:	b2db      	uxtb	r3, r3
    19fe:	e7f3      	b.n	19e8 <get_tc_index+0x8>
			return i;
    1a00:	b258      	sxtb	r0, r3
    1a02:	e007      	b.n	1a14 <get_tc_index+0x34>
	ASSERT(false);
    1a04:	22f8      	movs	r2, #248	; 0xf8
    1a06:	32ff      	adds	r2, #255	; 0xff
    1a08:	4905      	ldr	r1, [pc, #20]	; (1a20 <get_tc_index+0x40>)
    1a0a:	2000      	movs	r0, #0
    1a0c:	4b05      	ldr	r3, [pc, #20]	; (1a24 <get_tc_index+0x44>)
    1a0e:	4798      	blx	r3
	return -1;
    1a10:	2001      	movs	r0, #1
    1a12:	4240      	negs	r0, r0
}
    1a14:	bd10      	pop	{r4, pc}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	000019a9 	.word	0x000019a9
    1a1c:	20000000 	.word	0x20000000
    1a20:	00003888 	.word	0x00003888
    1a24:	00000d19 	.word	0x00000d19

00001a28 <_timer_init>:
{
    1a28:	b570      	push	{r4, r5, r6, lr}
    1a2a:	0006      	movs	r6, r0
    1a2c:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    1a2e:	0008      	movs	r0, r1
    1a30:	4b3f      	ldr	r3, [pc, #252]	; (1b30 <_timer_init+0x108>)
    1a32:	4798      	blx	r3
    1a34:	0005      	movs	r5, r0
	device->hw = hw;
    1a36:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1a38:	229f      	movs	r2, #159	; 0x9f
    1a3a:	493e      	ldr	r1, [pc, #248]	; (1b34 <_timer_init+0x10c>)
    1a3c:	2001      	movs	r0, #1
    1a3e:	4b3e      	ldr	r3, [pc, #248]	; (1b38 <_timer_init+0x110>)
    1a40:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a42:	7be3      	ldrb	r3, [r4, #15]
    1a44:	09db      	lsrs	r3, r3, #7
    1a46:	d1fc      	bne.n	1a42 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a48:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1a4a:	079b      	lsls	r3, r3, #30
    1a4c:	d504      	bpl.n	1a58 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a4e:	2300      	movs	r3, #0
    1a50:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a52:	7be3      	ldrb	r3, [r4, #15]
    1a54:	09db      	lsrs	r3, r3, #7
    1a56:	d1fc      	bne.n	1a52 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a58:	2301      	movs	r3, #1
    1a5a:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a5c:	7be3      	ldrb	r3, [r4, #15]
    1a5e:	09db      	lsrs	r3, r3, #7
    1a60:	d1fc      	bne.n	1a5c <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1a62:	00aa      	lsls	r2, r5, #2
    1a64:	1952      	adds	r2, r2, r5
    1a66:	0091      	lsls	r1, r2, #2
    1a68:	4b34      	ldr	r3, [pc, #208]	; (1b3c <_timer_init+0x114>)
    1a6a:	185b      	adds	r3, r3, r1
    1a6c:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a6e:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1a70:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1a72:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1a74:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1a76:	8163      	strh	r3, [r4, #10]
    1a78:	230c      	movs	r3, #12
    1a7a:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1a7c:	2b08      	cmp	r3, #8
    1a7e:	d039      	beq.n	1af4 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1a80:	2b00      	cmp	r3, #0
    1a82:	d143      	bne.n	1b0c <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1a84:	4a2d      	ldr	r2, [pc, #180]	; (1b3c <_timer_init+0x114>)
    1a86:	00ab      	lsls	r3, r5, #2
    1a88:	1958      	adds	r0, r3, r5
    1a8a:	0081      	lsls	r1, r0, #2
    1a8c:	0008      	movs	r0, r1
    1a8e:	1851      	adds	r1, r2, r1
    1a90:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a92:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1a94:	1812      	adds	r2, r2, r0
    1a96:	8a13      	ldrh	r3, [r2, #16]
    1a98:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1a9a:	2301      	movs	r3, #1
    1a9c:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    1a9e:	0031      	movs	r1, r6
    1aa0:	0020      	movs	r0, r4
    1aa2:	4b27      	ldr	r3, [pc, #156]	; (1b40 <_timer_init+0x118>)
    1aa4:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1aa6:	0020      	movs	r0, r4
    1aa8:	4b26      	ldr	r3, [pc, #152]	; (1b44 <_timer_init+0x11c>)
    1aaa:	4798      	blx	r3
    1aac:	300d      	adds	r0, #13
    1aae:	b2c0      	uxtb	r0, r0
    1ab0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	db0a      	blt.n	1acc <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ab6:	211f      	movs	r1, #31
    1ab8:	4001      	ands	r1, r0
    1aba:	2201      	movs	r2, #1
    1abc:	408a      	lsls	r2, r1
    1abe:	2180      	movs	r1, #128	; 0x80
    1ac0:	4c21      	ldr	r4, [pc, #132]	; (1b48 <_timer_init+0x120>)
    1ac2:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ac8:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1acc:	2b00      	cmp	r3, #0
    1ace:	db07      	blt.n	1ae0 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad0:	211f      	movs	r1, #31
    1ad2:	4001      	ands	r1, r0
    1ad4:	2201      	movs	r2, #1
    1ad6:	408a      	lsls	r2, r1
    1ad8:	21c0      	movs	r1, #192	; 0xc0
    1ada:	0049      	lsls	r1, r1, #1
    1adc:	4c1a      	ldr	r4, [pc, #104]	; (1b48 <_timer_init+0x120>)
    1ade:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	db05      	blt.n	1af0 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ae4:	231f      	movs	r3, #31
    1ae6:	4018      	ands	r0, r3
    1ae8:	3b1e      	subs	r3, #30
    1aea:	4083      	lsls	r3, r0
    1aec:	4a16      	ldr	r2, [pc, #88]	; (1b48 <_timer_init+0x120>)
    1aee:	6013      	str	r3, [r2, #0]
}
    1af0:	2000      	movs	r0, #0
    1af2:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1af4:	4a11      	ldr	r2, [pc, #68]	; (1b3c <_timer_init+0x114>)
    1af6:	00ab      	lsls	r3, r5, #2
    1af8:	1958      	adds	r0, r3, r5
    1afa:	0081      	lsls	r1, r0, #2
    1afc:	0008      	movs	r0, r1
    1afe:	1851      	adds	r1, r2, r1
    1b00:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b02:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1b04:	1812      	adds	r2, r2, r0
    1b06:	6913      	ldr	r3, [r2, #16]
    1b08:	61e3      	str	r3, [r4, #28]
    1b0a:	e7c6      	b.n	1a9a <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1b0c:	2b04      	cmp	r3, #4
    1b0e:	d1c4      	bne.n	1a9a <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1b10:	490a      	ldr	r1, [pc, #40]	; (1b3c <_timer_init+0x114>)
    1b12:	00ab      	lsls	r3, r5, #2
    1b14:	1958      	adds	r0, r3, r5
    1b16:	0082      	lsls	r2, r0, #2
    1b18:	188a      	adds	r2, r1, r2
    1b1a:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1b1c:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    1b1e:	7c12      	ldrb	r2, [r2, #16]
    1b20:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1b22:	195d      	adds	r5, r3, r5
    1b24:	00ab      	lsls	r3, r5, #2
    1b26:	18c9      	adds	r1, r1, r3
    1b28:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1b2a:	7523      	strb	r3, [r4, #20]
    1b2c:	e7b5      	b.n	1a9a <_timer_init+0x72>
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	000019e1 	.word	0x000019e1
    1b34:	00003888 	.word	0x00003888
    1b38:	00000d19 	.word	0x00000d19
    1b3c:	20000000 	.word	0x20000000
    1b40:	000019b9 	.word	0x000019b9
    1b44:	000019a9 	.word	0x000019a9
    1b48:	e000e100 	.word	0xe000e100

00001b4c <_pwm_init>:
{
    1b4c:	b570      	push	{r4, r5, r6, lr}
    1b4e:	0005      	movs	r5, r0
    1b50:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1b52:	0008      	movs	r0, r1
    1b54:	4b35      	ldr	r3, [pc, #212]	; (1c2c <_pwm_init+0xe0>)
    1b56:	4798      	blx	r3
	device->hw = hw;
    1b58:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b5a:	7be3      	ldrb	r3, [r4, #15]
    1b5c:	09db      	lsrs	r3, r3, #7
    1b5e:	d1fc      	bne.n	1b5a <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b60:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1b62:	079b      	lsls	r3, r3, #30
    1b64:	d504      	bpl.n	1b70 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b66:	2300      	movs	r3, #0
    1b68:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b6a:	7be3      	ldrb	r3, [r4, #15]
    1b6c:	09db      	lsrs	r3, r3, #7
    1b6e:	d1fc      	bne.n	1b6a <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b70:	2301      	movs	r3, #1
    1b72:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b74:	7be3      	ldrb	r3, [r4, #15]
    1b76:	09db      	lsrs	r3, r3, #7
    1b78:	d1fc      	bne.n	1b74 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1b7a:	0082      	lsls	r2, r0, #2
    1b7c:	1812      	adds	r2, r2, r0
    1b7e:	0091      	lsls	r1, r2, #2
    1b80:	4b2b      	ldr	r3, [pc, #172]	; (1c30 <_pwm_init+0xe4>)
    1b82:	185b      	adds	r3, r3, r1
    1b84:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b86:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1b88:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1b8a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1b8c:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1b8e:	8163      	strh	r3, [r4, #10]
    1b90:	230c      	movs	r3, #12
    1b92:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1b94:	2b08      	cmp	r3, #8
    1b96:	d037      	beq.n	1c08 <_pwm_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d141      	bne.n	1c20 <_pwm_init+0xd4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1b9c:	4a24      	ldr	r2, [pc, #144]	; (1c30 <_pwm_init+0xe4>)
    1b9e:	0083      	lsls	r3, r0, #2
    1ba0:	181e      	adds	r6, r3, r0
    1ba2:	00b1      	lsls	r1, r6, #2
    1ba4:	000e      	movs	r6, r1
    1ba6:	1851      	adds	r1, r2, r1
    1ba8:	8989      	ldrh	r1, [r1, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1baa:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1bac:	1992      	adds	r2, r2, r6
    1bae:	8a13      	ldrh	r3, [r2, #16]
    1bb0:	8363      	strh	r3, [r4, #26]
	_tc_init_irq_param(hw, (void *)device);
    1bb2:	0029      	movs	r1, r5
    1bb4:	0020      	movs	r0, r4
    1bb6:	4b1f      	ldr	r3, [pc, #124]	; (1c34 <_pwm_init+0xe8>)
    1bb8:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1bba:	0020      	movs	r0, r4
    1bbc:	4b1e      	ldr	r3, [pc, #120]	; (1c38 <_pwm_init+0xec>)
    1bbe:	4798      	blx	r3
    1bc0:	300d      	adds	r0, #13
    1bc2:	b2c0      	uxtb	r0, r0
    1bc4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	db0a      	blt.n	1be0 <_pwm_init+0x94>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bca:	211f      	movs	r1, #31
    1bcc:	4001      	ands	r1, r0
    1bce:	2201      	movs	r2, #1
    1bd0:	408a      	lsls	r2, r1
    1bd2:	2180      	movs	r1, #128	; 0x80
    1bd4:	4c19      	ldr	r4, [pc, #100]	; (1c3c <_pwm_init+0xf0>)
    1bd6:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bdc:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1be0:	2b00      	cmp	r3, #0
    1be2:	db07      	blt.n	1bf4 <_pwm_init+0xa8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be4:	211f      	movs	r1, #31
    1be6:	4001      	ands	r1, r0
    1be8:	2201      	movs	r2, #1
    1bea:	408a      	lsls	r2, r1
    1bec:	21c0      	movs	r1, #192	; 0xc0
    1bee:	0049      	lsls	r1, r1, #1
    1bf0:	4c12      	ldr	r4, [pc, #72]	; (1c3c <_pwm_init+0xf0>)
    1bf2:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	db16      	blt.n	1c26 <_pwm_init+0xda>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf8:	231f      	movs	r3, #31
    1bfa:	4018      	ands	r0, r3
    1bfc:	3b1e      	subs	r3, #30
    1bfe:	4083      	lsls	r3, r0
    1c00:	4a0e      	ldr	r2, [pc, #56]	; (1c3c <_pwm_init+0xf0>)
    1c02:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    1c04:	2000      	movs	r0, #0
}
    1c06:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1c08:	4a09      	ldr	r2, [pc, #36]	; (1c30 <_pwm_init+0xe4>)
    1c0a:	0083      	lsls	r3, r0, #2
    1c0c:	181e      	adds	r6, r3, r0
    1c0e:	00b1      	lsls	r1, r6, #2
    1c10:	000e      	movs	r6, r1
    1c12:	1851      	adds	r1, r2, r1
    1c14:	68c9      	ldr	r1, [r1, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1c16:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1c18:	1992      	adds	r2, r2, r6
    1c1a:	6913      	ldr	r3, [r2, #16]
    1c1c:	61e3      	str	r3, [r4, #28]
    1c1e:	e7c8      	b.n	1bb2 <_pwm_init+0x66>
		return ERR_INVALID_DATA;
    1c20:	2001      	movs	r0, #1
    1c22:	4240      	negs	r0, r0
    1c24:	e7ef      	b.n	1c06 <_pwm_init+0xba>
	return ERR_NONE;
    1c26:	2000      	movs	r0, #0
    1c28:	e7ed      	b.n	1c06 <_pwm_init+0xba>
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	000019e1 	.word	0x000019e1
    1c30:	20000000 	.word	0x20000000
    1c34:	000019b9 	.word	0x000019b9
    1c38:	000019a9 	.word	0x000019a9
    1c3c:	e000e100 	.word	0xe000e100

00001c40 <_tc_get_timer>:
}
    1c40:	2000      	movs	r0, #0
    1c42:	4770      	bx	lr

00001c44 <_tc_get_pwm>:
}
    1c44:	2000      	movs	r0, #0
    1c46:	4770      	bx	lr

00001c48 <TC0_Handler>:
{
    1c48:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    1c4a:	4b02      	ldr	r3, [pc, #8]	; (1c54 <TC0_Handler+0xc>)
    1c4c:	6818      	ldr	r0, [r3, #0]
    1c4e:	4b02      	ldr	r3, [pc, #8]	; (1c58 <TC0_Handler+0x10>)
    1c50:	4798      	blx	r3
}
    1c52:	bd10      	pop	{r4, pc}
    1c54:	20000154 	.word	0x20000154
    1c58:	0000197b 	.word	0x0000197b

00001c5c <TC1_Handler>:
{
    1c5c:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc1_dev);
    1c5e:	4b02      	ldr	r3, [pc, #8]	; (1c68 <TC1_Handler+0xc>)
    1c60:	6858      	ldr	r0, [r3, #4]
    1c62:	4b02      	ldr	r3, [pc, #8]	; (1c6c <TC1_Handler+0x10>)
    1c64:	4798      	blx	r3
}
    1c66:	bd10      	pop	{r4, pc}
    1c68:	20000154 	.word	0x20000154
    1c6c:	00001965 	.word	0x00001965

00001c70 <receiver>:
		xQueueSend(output, &flag, portMAX_DELAY);
	}
}

void receiver(void *pvParameters)
{
    1c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c72:	b083      	sub	sp, #12
    1c74:	0007      	movs	r7, r0
	QueueBuffer anything;
	QueueHandle_t input = (QueueHandle_t)pvParameters;
	BaseType_t n;
	io_write(&SERIAL.io, help, 4);
    1c76:	2204      	movs	r2, #4
    1c78:	4911      	ldr	r1, [pc, #68]	; (1cc0 <receiver+0x50>)
    1c7a:	4812      	ldr	r0, [pc, #72]	; (1cc4 <receiver+0x54>)
    1c7c:	4b12      	ldr	r3, [pc, #72]	; (1cc8 <receiver+0x58>)
    1c7e:	4798      	blx	r3
    1c80:	e00a      	b.n	1c98 <receiver+0x28>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1c82:	25c0      	movs	r5, #192	; 0xc0
    1c84:	05ed      	lsls	r5, r5, #23
    1c86:	2680      	movs	r6, #128	; 0x80
    1c88:	01f6      	lsls	r6, r6, #7
    1c8a:	61ee      	str	r6, [r5, #28]
		}
		//gpio_set_pin_level()
		
		if (1) {
			gpio_toggle_pin_level(BLINK);
			delay_ms(100);
    1c8c:	2064      	movs	r0, #100	; 0x64
    1c8e:	4c0f      	ldr	r4, [pc, #60]	; (1ccc <receiver+0x5c>)
    1c90:	47a0      	blx	r4
    1c92:	61ee      	str	r6, [r5, #28]
			gpio_toggle_pin_level(BLINK);
			delay_ms(100);
    1c94:	2064      	movs	r0, #100	; 0x64
    1c96:	47a0      	blx	r4
		if((n = xQueueReceive(input, &anything, 10)) == pdPASS) {
    1c98:	220a      	movs	r2, #10
    1c9a:	4669      	mov	r1, sp
    1c9c:	0038      	movs	r0, r7
    1c9e:	4b0c      	ldr	r3, [pc, #48]	; (1cd0 <receiver+0x60>)
    1ca0:	4798      	blx	r3
    1ca2:	2801      	cmp	r0, #1
    1ca4:	d1ed      	bne.n	1c82 <receiver+0x12>
			io_write(&SERIAL.io, test, 4);
    1ca6:	4d07      	ldr	r5, [pc, #28]	; (1cc4 <receiver+0x54>)
    1ca8:	2204      	movs	r2, #4
    1caa:	4905      	ldr	r1, [pc, #20]	; (1cc0 <receiver+0x50>)
    1cac:	3104      	adds	r1, #4
    1cae:	0028      	movs	r0, r5
    1cb0:	4c05      	ldr	r4, [pc, #20]	; (1cc8 <receiver+0x58>)
    1cb2:	47a0      	blx	r4
			io_write(&SERIAL.io, anything.buffer, 4);
    1cb4:	2204      	movs	r2, #4
    1cb6:	9900      	ldr	r1, [sp, #0]
    1cb8:	0028      	movs	r0, r5
    1cba:	47a0      	blx	r4
    1cbc:	e7e1      	b.n	1c82 <receiver+0x12>
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	20000028 	.word	0x20000028
    1cc4:	200028ec 	.word	0x200028ec
    1cc8:	00000785 	.word	0x00000785
    1ccc:	00000689 	.word	0x00000689
    1cd0:	00002811 	.word	0x00002811

00001cd4 <main>:
{
    1cd4:	b510      	push	{r4, lr}
    1cd6:	b082      	sub	sp, #8
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1cd8:	490e      	ldr	r1, [pc, #56]	; (1d14 <main+0x40>)
    1cda:	22c2      	movs	r2, #194	; 0xc2
    1cdc:	0092      	lsls	r2, r2, #2
    1cde:	588b      	ldr	r3, [r1, r2]
    1ce0:	480d      	ldr	r0, [pc, #52]	; (1d18 <main+0x44>)
    1ce2:	4003      	ands	r3, r0
    1ce4:	508b      	str	r3, [r1, r2]
	atmel_start_init();
    1ce6:	4b0d      	ldr	r3, [pc, #52]	; (1d1c <main+0x48>)
    1ce8:	4798      	blx	r3
	async_setup();
    1cea:	4b0d      	ldr	r3, [pc, #52]	; (1d20 <main+0x4c>)
    1cec:	4798      	blx	r3
	Q1 = xQueueCreate((UBaseType_t) 2, (UBaseType_t) sizeof(QueueBuffer));
    1cee:	2200      	movs	r2, #0
    1cf0:	2108      	movs	r1, #8
    1cf2:	2002      	movs	r0, #2
    1cf4:	4b0b      	ldr	r3, [pc, #44]	; (1d24 <main+0x50>)
    1cf6:	4798      	blx	r3
    1cf8:	0003      	movs	r3, r0
	xTaskCreate(receiver, "rcv", configMINIMAL_STACK_SIZE, Q1, 2, NULL);
    1cfa:	2200      	movs	r2, #0
    1cfc:	9201      	str	r2, [sp, #4]
    1cfe:	3202      	adds	r2, #2
    1d00:	9200      	str	r2, [sp, #0]
    1d02:	323e      	adds	r2, #62	; 0x3e
    1d04:	4908      	ldr	r1, [pc, #32]	; (1d28 <main+0x54>)
    1d06:	4809      	ldr	r0, [pc, #36]	; (1d2c <main+0x58>)
    1d08:	4c09      	ldr	r4, [pc, #36]	; (1d30 <main+0x5c>)
    1d0a:	47a0      	blx	r4
	vTaskStartScheduler();
    1d0c:	4b09      	ldr	r3, [pc, #36]	; (1d34 <main+0x60>)
    1d0e:	4798      	blx	r3
    1d10:	e7fe      	b.n	1d10 <main+0x3c>
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	e000e100 	.word	0xe000e100
    1d18:	ff00ffff 	.word	0xff00ffff
    1d1c:	00000105 	.word	0x00000105
    1d20:	00001e31 	.word	0x00001e31
    1d24:	0000254d 	.word	0x0000254d
    1d28:	0000389c 	.word	0x0000389c
    1d2c:	00001c71 	.word	0x00001c71
    1d30:	00002c29 	.word	0x00002c29
    1d34:	00002c99 	.word	0x00002c99

00001d38 <touch_init>:
    1d38:	4770      	bx	lr

00001d3a <serial_tx_cb>:


static void serial_tx_cb(const struct usart_async_descriptor *const io_descr)
{
	
}
    1d3a:	4770      	bx	lr

00001d3c <serial_rx_cb>:
{
    1d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d3e:	46ce      	mov	lr, r9
    1d40:	4647      	mov	r7, r8
    1d42:	b580      	push	{r7, lr}
    1d44:	b083      	sub	sp, #12
	count = io_read(&SERIAL.io, &ch, 1);
    1d46:	2201      	movs	r2, #1
    1d48:	466b      	mov	r3, sp
    1d4a:	1dd9      	adds	r1, r3, #7
    1d4c:	482e      	ldr	r0, [pc, #184]	; (1e08 <serial_rx_cb+0xcc>)
    1d4e:	4b2f      	ldr	r3, [pc, #188]	; (1e0c <serial_rx_cb+0xd0>)
    1d50:	4798      	blx	r3
    1d52:	b2c1      	uxtb	r1, r0
	if (serial_receiving == 0)
    1d54:	4b2e      	ldr	r3, [pc, #184]	; (1e10 <serial_rx_cb+0xd4>)
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d112      	bne.n	1d82 <serial_rx_cb+0x46>
		if(ch != '\r' && ch != '\n')
    1d5c:	466b      	mov	r3, sp
    1d5e:	79da      	ldrb	r2, [r3, #7]
    1d60:	2a0d      	cmp	r2, #13
    1d62:	d024      	beq.n	1dae <serial_rx_cb+0x72>
    1d64:	2a0a      	cmp	r2, #10
    1d66:	d022      	beq.n	1dae <serial_rx_cb+0x72>
			serial_receiving = 1;
    1d68:	4b29      	ldr	r3, [pc, #164]	; (1e10 <serial_rx_cb+0xd4>)
    1d6a:	2001      	movs	r0, #1
    1d6c:	7018      	strb	r0, [r3, #0]
			byteCount = 0;
    1d6e:	2000      	movs	r0, #0
    1d70:	7058      	strb	r0, [r3, #1]
			rx_buffer[byteCount] = ch;
    1d72:	7858      	ldrb	r0, [r3, #1]
    1d74:	1818      	adds	r0, r3, r0
    1d76:	7102      	strb	r2, [r0, #4]
			byteCount += count;
    1d78:	7858      	ldrb	r0, [r3, #1]
    1d7a:	1840      	adds	r0, r0, r1
    1d7c:	b2c0      	uxtb	r0, r0
    1d7e:	7058      	strb	r0, [r3, #1]
    1d80:	e015      	b.n	1dae <serial_rx_cb+0x72>
		rx_buffer[byteCount] = ch;
    1d82:	4b23      	ldr	r3, [pc, #140]	; (1e10 <serial_rx_cb+0xd4>)
    1d84:	785a      	ldrb	r2, [r3, #1]
    1d86:	4668      	mov	r0, sp
    1d88:	79c4      	ldrb	r4, [r0, #7]
    1d8a:	189a      	adds	r2, r3, r2
    1d8c:	7114      	strb	r4, [r2, #4]
		byteCount += count;
    1d8e:	7858      	ldrb	r0, [r3, #1]
    1d90:	1840      	adds	r0, r0, r1
    1d92:	b2c0      	uxtb	r0, r0
    1d94:	7058      	strb	r0, [r3, #1]
		if (ch == '\r' || ch == '\n')
    1d96:	2c0d      	cmp	r4, #13
    1d98:	d00e      	beq.n	1db8 <serial_rx_cb+0x7c>
    1d9a:	2c0a      	cmp	r4, #10
    1d9c:	d00c      	beq.n	1db8 <serial_rx_cb+0x7c>
		if (byteCount >= SERIAL_BUFFER_SIZE)
    1d9e:	4b1c      	ldr	r3, [pc, #112]	; (1e10 <serial_rx_cb+0xd4>)
    1da0:	785b      	ldrb	r3, [r3, #1]
    1da2:	b2db      	uxtb	r3, r3
    1da4:	2bc7      	cmp	r3, #199	; 0xc7
    1da6:	d902      	bls.n	1dae <serial_rx_cb+0x72>
			byteCount = 0;
    1da8:	2200      	movs	r2, #0
    1daa:	4b19      	ldr	r3, [pc, #100]	; (1e10 <serial_rx_cb+0xd4>)
    1dac:	705a      	strb	r2, [r3, #1]
}
    1dae:	b003      	add	sp, #12
    1db0:	bc0c      	pop	{r2, r3}
    1db2:	4690      	mov	r8, r2
    1db4:	4699      	mov	r9, r3
    1db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			totalBytes = byteCount - 2;
    1db8:	4c15      	ldr	r4, [pc, #84]	; (1e10 <serial_rx_cb+0xd4>)
    1dba:	7863      	ldrb	r3, [r4, #1]
    1dbc:	3b02      	subs	r3, #2
    1dbe:	b2db      	uxtb	r3, r3
    1dc0:	4d14      	ldr	r5, [pc, #80]	; (1e14 <serial_rx_cb+0xd8>)
    1dc2:	274c      	movs	r7, #76	; 0x4c
    1dc4:	55eb      	strb	r3, [r5, r7]
			serial_receiving = 0;
    1dc6:	2300      	movs	r3, #0
    1dc8:	7023      	strb	r3, [r4, #0]
			serial_complete = 0;
    1dca:	224d      	movs	r2, #77	; 0x4d
    1dcc:	54ab      	strb	r3, [r5, r2]
			memcpy(&tx_buffer[20], &rx_buffer[0], SERIAL_BUFFER_SIZE);
    1dce:	4b12      	ldr	r3, [pc, #72]	; (1e18 <serial_rx_cb+0xdc>)
    1dd0:	4699      	mov	r9, r3
    1dd2:	0018      	movs	r0, r3
    1dd4:	3014      	adds	r0, #20
    1dd6:	3404      	adds	r4, #4
    1dd8:	327b      	adds	r2, #123	; 0x7b
    1dda:	0021      	movs	r1, r4
    1ddc:	4b0f      	ldr	r3, [pc, #60]	; (1e1c <serial_rx_cb+0xe0>)
    1dde:	4798      	blx	r3
			Qbuffer.buffer = rx_buffer;
    1de0:	490f      	ldr	r1, [pc, #60]	; (1e20 <serial_rx_cb+0xe4>)
    1de2:	600c      	str	r4, [r1, #0]
			xQueueSend(Q1, &Qbuffer, configMAX_PRIORITIES-1);
    1de4:	2300      	movs	r3, #0
    1de6:	2204      	movs	r2, #4
    1de8:	2000      	movs	r0, #0
    1dea:	4e0e      	ldr	r6, [pc, #56]	; (1e24 <serial_rx_cb+0xe8>)
    1dec:	47b0      	blx	r6
			io_write(&SERIAL.io, tx_buffer, totalBytes + 22);
    1dee:	5dea      	ldrb	r2, [r5, r7]
    1df0:	3216      	adds	r2, #22
    1df2:	4649      	mov	r1, r9
    1df4:	4804      	ldr	r0, [pc, #16]	; (1e08 <serial_rx_cb+0xcc>)
    1df6:	4b0c      	ldr	r3, [pc, #48]	; (1e28 <serial_rx_cb+0xec>)
    1df8:	4798      	blx	r3
			memset(&rx_buffer, 0x00, SERIAL_BUFFER_SIZE);
    1dfa:	22c8      	movs	r2, #200	; 0xc8
    1dfc:	2100      	movs	r1, #0
    1dfe:	0020      	movs	r0, r4
    1e00:	4b0a      	ldr	r3, [pc, #40]	; (1e2c <serial_rx_cb+0xf0>)
    1e02:	4798      	blx	r3
    1e04:	e7cb      	b.n	1d9e <serial_rx_cb+0x62>
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	200028ec 	.word	0x200028ec
    1e0c:	000007bd 	.word	0x000007bd
    1e10:	2000015c 	.word	0x2000015c
    1e14:	200001dc 	.word	0x200001dc
    1e18:	20000030 	.word	0x20000030
    1e1c:	0000361d 	.word	0x0000361d
    1e20:	200029bc 	.word	0x200029bc
    1e24:	00002595 	.word	0x00002595
    1e28:	00000785 	.word	0x00000785
    1e2c:	0000362f 	.word	0x0000362f

00001e30 <async_setup>:

void async_setup(void)
{
    1e30:	b570      	push	{r4, r5, r6, lr}
	
	usart_async_register_callback(&SERIAL, USART_ASYNC_TXC_CB, serial_tx_cb);
    1e32:	4c07      	ldr	r4, [pc, #28]	; (1e50 <async_setup+0x20>)
    1e34:	4a07      	ldr	r2, [pc, #28]	; (1e54 <async_setup+0x24>)
    1e36:	2101      	movs	r1, #1
    1e38:	0020      	movs	r0, r4
    1e3a:	4d07      	ldr	r5, [pc, #28]	; (1e58 <async_setup+0x28>)
    1e3c:	47a8      	blx	r5
	usart_async_register_callback(&SERIAL, USART_ASYNC_RXC_CB, serial_rx_cb);
    1e3e:	4a07      	ldr	r2, [pc, #28]	; (1e5c <async_setup+0x2c>)
    1e40:	2100      	movs	r1, #0
    1e42:	0020      	movs	r0, r4
    1e44:	47a8      	blx	r5
	usart_async_enable(&SERIAL);
    1e46:	0020      	movs	r0, r4
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <async_setup+0x30>)
    1e4a:	4798      	blx	r3
	
	
    1e4c:	bd70      	pop	{r4, r5, r6, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	200028ec 	.word	0x200028ec
    1e54:	00001d3b 	.word	0x00001d3b
    1e58:	00000ca1 	.word	0x00000ca1
    1e5c:	00001d3d 	.word	0x00001d3d
    1e60:	00000c75 	.word	0x00000c75

00001e64 <vListInitialise>:
    1e64:	0003      	movs	r3, r0
    1e66:	3308      	adds	r3, #8
    1e68:	6043      	str	r3, [r0, #4]
    1e6a:	2201      	movs	r2, #1
    1e6c:	4252      	negs	r2, r2
    1e6e:	6082      	str	r2, [r0, #8]
    1e70:	60c3      	str	r3, [r0, #12]
    1e72:	6103      	str	r3, [r0, #16]
    1e74:	2300      	movs	r3, #0
    1e76:	6003      	str	r3, [r0, #0]
    1e78:	4770      	bx	lr

00001e7a <vListInitialiseItem>:
    1e7a:	2300      	movs	r3, #0
    1e7c:	6103      	str	r3, [r0, #16]
    1e7e:	4770      	bx	lr

00001e80 <vListInsertEnd>:
    1e80:	6843      	ldr	r3, [r0, #4]
    1e82:	604b      	str	r3, [r1, #4]
    1e84:	689a      	ldr	r2, [r3, #8]
    1e86:	608a      	str	r2, [r1, #8]
    1e88:	689a      	ldr	r2, [r3, #8]
    1e8a:	6051      	str	r1, [r2, #4]
    1e8c:	6099      	str	r1, [r3, #8]
    1e8e:	6108      	str	r0, [r1, #16]
    1e90:	6803      	ldr	r3, [r0, #0]
    1e92:	3301      	adds	r3, #1
    1e94:	6003      	str	r3, [r0, #0]
    1e96:	4770      	bx	lr

00001e98 <vListInsert>:
    1e98:	b530      	push	{r4, r5, lr}
    1e9a:	680c      	ldr	r4, [r1, #0]
    1e9c:	1c63      	adds	r3, r4, #1
    1e9e:	d002      	beq.n	1ea6 <vListInsert+0xe>
    1ea0:	0002      	movs	r2, r0
    1ea2:	3208      	adds	r2, #8
    1ea4:	e002      	b.n	1eac <vListInsert+0x14>
    1ea6:	6902      	ldr	r2, [r0, #16]
    1ea8:	e004      	b.n	1eb4 <vListInsert+0x1c>
    1eaa:	001a      	movs	r2, r3
    1eac:	6853      	ldr	r3, [r2, #4]
    1eae:	681d      	ldr	r5, [r3, #0]
    1eb0:	42ac      	cmp	r4, r5
    1eb2:	d2fa      	bcs.n	1eaa <vListInsert+0x12>
    1eb4:	6853      	ldr	r3, [r2, #4]
    1eb6:	604b      	str	r3, [r1, #4]
    1eb8:	6099      	str	r1, [r3, #8]
    1eba:	608a      	str	r2, [r1, #8]
    1ebc:	6051      	str	r1, [r2, #4]
    1ebe:	6108      	str	r0, [r1, #16]
    1ec0:	6803      	ldr	r3, [r0, #0]
    1ec2:	3301      	adds	r3, #1
    1ec4:	6003      	str	r3, [r0, #0]
    1ec6:	bd30      	pop	{r4, r5, pc}

00001ec8 <uxListRemove>:
    1ec8:	6903      	ldr	r3, [r0, #16]
    1eca:	6842      	ldr	r2, [r0, #4]
    1ecc:	6881      	ldr	r1, [r0, #8]
    1ece:	6091      	str	r1, [r2, #8]
    1ed0:	6882      	ldr	r2, [r0, #8]
    1ed2:	6841      	ldr	r1, [r0, #4]
    1ed4:	6051      	str	r1, [r2, #4]
    1ed6:	685a      	ldr	r2, [r3, #4]
    1ed8:	4290      	cmp	r0, r2
    1eda:	d006      	beq.n	1eea <uxListRemove+0x22>
    1edc:	2200      	movs	r2, #0
    1ede:	6102      	str	r2, [r0, #16]
    1ee0:	681a      	ldr	r2, [r3, #0]
    1ee2:	3a01      	subs	r2, #1
    1ee4:	601a      	str	r2, [r3, #0]
    1ee6:	6818      	ldr	r0, [r3, #0]
    1ee8:	4770      	bx	lr
    1eea:	6882      	ldr	r2, [r0, #8]
    1eec:	605a      	str	r2, [r3, #4]
    1eee:	e7f5      	b.n	1edc <uxListRemove+0x14>

00001ef0 <prvTaskExitError>:
    1ef0:	b082      	sub	sp, #8
    1ef2:	2300      	movs	r3, #0
    1ef4:	9301      	str	r3, [sp, #4]
    1ef6:	4b06      	ldr	r3, [pc, #24]	; (1f10 <prvTaskExitError+0x20>)
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	3301      	adds	r3, #1
    1efc:	d001      	beq.n	1f02 <prvTaskExitError+0x12>
    1efe:	b672      	cpsid	i
    1f00:	e7fe      	b.n	1f00 <prvTaskExitError+0x10>
    1f02:	b672      	cpsid	i
    1f04:	9b01      	ldr	r3, [sp, #4]
    1f06:	2b00      	cmp	r3, #0
    1f08:	d0fc      	beq.n	1f04 <prvTaskExitError+0x14>
    1f0a:	b002      	add	sp, #8
    1f0c:	4770      	bx	lr
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	2000010c 	.word	0x2000010c
	...

00001f20 <vPortStartFirstTask>:
    1f20:	4a0b      	ldr	r2, [pc, #44]	; (1f50 <pxCurrentTCBConst2>)
    1f22:	6813      	ldr	r3, [r2, #0]
    1f24:	6818      	ldr	r0, [r3, #0]
    1f26:	3020      	adds	r0, #32
    1f28:	f380 8809 	msr	PSP, r0
    1f2c:	2002      	movs	r0, #2
    1f2e:	f380 8814 	msr	CONTROL, r0
    1f32:	f3bf 8f6f 	isb	sy
    1f36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1f38:	46ae      	mov	lr, r5
    1f3a:	bc08      	pop	{r3}
    1f3c:	bc04      	pop	{r2}
    1f3e:	b662      	cpsie	i
    1f40:	4718      	bx	r3
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	46c0      	nop			; (mov r8, r8)
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	46c0      	nop			; (mov r8, r8)
    1f4e:	46c0      	nop			; (mov r8, r8)

00001f50 <pxCurrentTCBConst2>:
    1f50:	20002888 	.word	0x20002888

00001f54 <prvSetupTimerInterrupt>:
    1f54:	4b05      	ldr	r3, [pc, #20]	; (1f6c <prvSetupTimerInterrupt+0x18>)
    1f56:	2200      	movs	r2, #0
    1f58:	601a      	str	r2, [r3, #0]
    1f5a:	4905      	ldr	r1, [pc, #20]	; (1f70 <prvSetupTimerInterrupt+0x1c>)
    1f5c:	600a      	str	r2, [r1, #0]
    1f5e:	4905      	ldr	r1, [pc, #20]	; (1f74 <prvSetupTimerInterrupt+0x20>)
    1f60:	4a05      	ldr	r2, [pc, #20]	; (1f78 <prvSetupTimerInterrupt+0x24>)
    1f62:	6011      	str	r1, [r2, #0]
    1f64:	2207      	movs	r2, #7
    1f66:	601a      	str	r2, [r3, #0]
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	e000e010 	.word	0xe000e010
    1f70:	e000e018 	.word	0xe000e018
    1f74:	000003e7 	.word	0x000003e7
    1f78:	e000e014 	.word	0xe000e014

00001f7c <pxPortInitialiseStack>:
    1f7c:	b510      	push	{r4, lr}
    1f7e:	1f03      	subs	r3, r0, #4
    1f80:	2480      	movs	r4, #128	; 0x80
    1f82:	0464      	lsls	r4, r4, #17
    1f84:	601c      	str	r4, [r3, #0]
    1f86:	3b04      	subs	r3, #4
    1f88:	6019      	str	r1, [r3, #0]
    1f8a:	3b04      	subs	r3, #4
    1f8c:	4902      	ldr	r1, [pc, #8]	; (1f98 <pxPortInitialiseStack+0x1c>)
    1f8e:	6019      	str	r1, [r3, #0]
    1f90:	3b14      	subs	r3, #20
    1f92:	601a      	str	r2, [r3, #0]
    1f94:	3840      	subs	r0, #64	; 0x40
    1f96:	bd10      	pop	{r4, pc}
    1f98:	00001ef1 	.word	0x00001ef1

00001f9c <SVCall_Handler>:
    1f9c:	4770      	bx	lr
	...

00001fa0 <xPortStartScheduler>:
    1fa0:	b510      	push	{r4, lr}
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <xPortStartScheduler+0x34>)
    1fa4:	6819      	ldr	r1, [r3, #0]
    1fa6:	22ff      	movs	r2, #255	; 0xff
    1fa8:	0412      	lsls	r2, r2, #16
    1faa:	430a      	orrs	r2, r1
    1fac:	601a      	str	r2, [r3, #0]
    1fae:	6819      	ldr	r1, [r3, #0]
    1fb0:	22ff      	movs	r2, #255	; 0xff
    1fb2:	0612      	lsls	r2, r2, #24
    1fb4:	430a      	orrs	r2, r1
    1fb6:	601a      	str	r2, [r3, #0]
    1fb8:	4b07      	ldr	r3, [pc, #28]	; (1fd8 <xPortStartScheduler+0x38>)
    1fba:	4798      	blx	r3
    1fbc:	2200      	movs	r2, #0
    1fbe:	4b07      	ldr	r3, [pc, #28]	; (1fdc <xPortStartScheduler+0x3c>)
    1fc0:	601a      	str	r2, [r3, #0]
    1fc2:	4b07      	ldr	r3, [pc, #28]	; (1fe0 <xPortStartScheduler+0x40>)
    1fc4:	4798      	blx	r3
    1fc6:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <xPortStartScheduler+0x44>)
    1fc8:	4798      	blx	r3
    1fca:	4b07      	ldr	r3, [pc, #28]	; (1fe8 <xPortStartScheduler+0x48>)
    1fcc:	4798      	blx	r3
    1fce:	2000      	movs	r0, #0
    1fd0:	bd10      	pop	{r4, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	e000ed20 	.word	0xe000ed20
    1fd8:	00001f55 	.word	0x00001f55
    1fdc:	2000010c 	.word	0x2000010c
    1fe0:	00001f21 	.word	0x00001f21
    1fe4:	00002f15 	.word	0x00002f15
    1fe8:	00001ef1 	.word	0x00001ef1

00001fec <vPortYield>:
    1fec:	2280      	movs	r2, #128	; 0x80
    1fee:	0552      	lsls	r2, r2, #21
    1ff0:	4b03      	ldr	r3, [pc, #12]	; (2000 <STACK_SIZE>)
    1ff2:	601a      	str	r2, [r3, #0]
    1ff4:	f3bf 8f4f 	dsb	sy
    1ff8:	f3bf 8f6f 	isb	sy
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	e000ed04 	.word	0xe000ed04

00002004 <vPortEnterCritical>:
    2004:	b672      	cpsid	i
    2006:	4a04      	ldr	r2, [pc, #16]	; (2018 <vPortEnterCritical+0x14>)
    2008:	6813      	ldr	r3, [r2, #0]
    200a:	3301      	adds	r3, #1
    200c:	6013      	str	r3, [r2, #0]
    200e:	f3bf 8f4f 	dsb	sy
    2012:	f3bf 8f6f 	isb	sy
    2016:	4770      	bx	lr
    2018:	2000010c 	.word	0x2000010c

0000201c <vPortExitCritical>:
    201c:	4b06      	ldr	r3, [pc, #24]	; (2038 <vPortExitCritical+0x1c>)
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	2b00      	cmp	r3, #0
    2022:	d101      	bne.n	2028 <vPortExitCritical+0xc>
    2024:	b672      	cpsid	i
    2026:	e7fe      	b.n	2026 <vPortExitCritical+0xa>
    2028:	3b01      	subs	r3, #1
    202a:	4a03      	ldr	r2, [pc, #12]	; (2038 <vPortExitCritical+0x1c>)
    202c:	6013      	str	r3, [r2, #0]
    202e:	2b00      	cmp	r3, #0
    2030:	d100      	bne.n	2034 <vPortExitCritical+0x18>
    2032:	b662      	cpsie	i
    2034:	4770      	bx	lr
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	2000010c 	.word	0x2000010c

0000203c <ulSetInterruptMaskFromISR>:
    203c:	f3ef 8010 	mrs	r0, PRIMASK
    2040:	b672      	cpsid	i
    2042:	4770      	bx	lr

00002044 <vClearInterruptMaskFromISR>:
    2044:	f380 8810 	msr	PRIMASK, r0
    2048:	4770      	bx	lr
    204a:	0000      	movs	r0, r0
    204c:	0000      	movs	r0, r0
	...

00002050 <PendSV_Handler>:
    2050:	f3ef 8009 	mrs	r0, PSP
    2054:	4b0e      	ldr	r3, [pc, #56]	; (2090 <pxCurrentTCBConst>)
    2056:	681a      	ldr	r2, [r3, #0]
    2058:	3820      	subs	r0, #32
    205a:	6010      	str	r0, [r2, #0]
    205c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    205e:	4644      	mov	r4, r8
    2060:	464d      	mov	r5, r9
    2062:	4656      	mov	r6, sl
    2064:	465f      	mov	r7, fp
    2066:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2068:	b508      	push	{r3, lr}
    206a:	b672      	cpsid	i
    206c:	f000 ff52 	bl	2f14 <vTaskSwitchContext>
    2070:	b662      	cpsie	i
    2072:	bc0c      	pop	{r2, r3}
    2074:	6811      	ldr	r1, [r2, #0]
    2076:	6808      	ldr	r0, [r1, #0]
    2078:	3010      	adds	r0, #16
    207a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    207c:	46a0      	mov	r8, r4
    207e:	46a9      	mov	r9, r5
    2080:	46b2      	mov	sl, r6
    2082:	46bb      	mov	fp, r7
    2084:	f380 8809 	msr	PSP, r0
    2088:	3820      	subs	r0, #32
    208a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    208c:	4718      	bx	r3
    208e:	46c0      	nop			; (mov r8, r8)

00002090 <pxCurrentTCBConst>:
    2090:	20002888 	.word	0x20002888

00002094 <SysTick_Handler>:
    2094:	b510      	push	{r4, lr}
    2096:	4b07      	ldr	r3, [pc, #28]	; (20b4 <SysTick_Handler+0x20>)
    2098:	4798      	blx	r3
    209a:	0004      	movs	r4, r0
    209c:	4b06      	ldr	r3, [pc, #24]	; (20b8 <SysTick_Handler+0x24>)
    209e:	4798      	blx	r3
    20a0:	2800      	cmp	r0, #0
    20a2:	d003      	beq.n	20ac <SysTick_Handler+0x18>
    20a4:	2280      	movs	r2, #128	; 0x80
    20a6:	0552      	lsls	r2, r2, #21
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <SysTick_Handler+0x28>)
    20aa:	601a      	str	r2, [r3, #0]
    20ac:	0020      	movs	r0, r4
    20ae:	4b04      	ldr	r3, [pc, #16]	; (20c0 <SysTick_Handler+0x2c>)
    20b0:	4798      	blx	r3
    20b2:	bd10      	pop	{r4, pc}
    20b4:	0000203d 	.word	0x0000203d
    20b8:	00002d1d 	.word	0x00002d1d
    20bc:	e000ed04 	.word	0xe000ed04
    20c0:	00002045 	.word	0x00002045

000020c4 <prvHeapInit>:
    20c4:	b510      	push	{r4, lr}
    20c6:	4a11      	ldr	r2, [pc, #68]	; (210c <prvHeapInit+0x48>)
    20c8:	0753      	lsls	r3, r2, #29
    20ca:	d01b      	beq.n	2104 <prvHeapInit+0x40>
    20cc:	1dd1      	adds	r1, r2, #7
    20ce:	2307      	movs	r3, #7
    20d0:	4399      	bics	r1, r3
    20d2:	2396      	movs	r3, #150	; 0x96
    20d4:	019b      	lsls	r3, r3, #6
    20d6:	1a5b      	subs	r3, r3, r1
    20d8:	189b      	adds	r3, r3, r2
    20da:	000a      	movs	r2, r1
    20dc:	490c      	ldr	r1, [pc, #48]	; (2110 <prvHeapInit+0x4c>)
    20de:	600a      	str	r2, [r1, #0]
    20e0:	2000      	movs	r0, #0
    20e2:	6048      	str	r0, [r1, #4]
    20e4:	18d3      	adds	r3, r2, r3
    20e6:	3b08      	subs	r3, #8
    20e8:	2407      	movs	r4, #7
    20ea:	43a3      	bics	r3, r4
    20ec:	608b      	str	r3, [r1, #8]
    20ee:	6058      	str	r0, [r3, #4]
    20f0:	6018      	str	r0, [r3, #0]
    20f2:	1a98      	subs	r0, r3, r2
    20f4:	6050      	str	r0, [r2, #4]
    20f6:	6013      	str	r3, [r2, #0]
    20f8:	60c8      	str	r0, [r1, #12]
    20fa:	6108      	str	r0, [r1, #16]
    20fc:	2380      	movs	r3, #128	; 0x80
    20fe:	061b      	lsls	r3, r3, #24
    2100:	614b      	str	r3, [r1, #20]
    2102:	bd10      	pop	{r4, pc}
    2104:	2396      	movs	r3, #150	; 0x96
    2106:	019b      	lsls	r3, r3, #6
    2108:	e7e8      	b.n	20dc <prvHeapInit+0x18>
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	2000022c 	.word	0x2000022c
    2110:	200027ac 	.word	0x200027ac

00002114 <prvInsertBlockIntoFreeList>:
    2114:	b510      	push	{r4, lr}
    2116:	4b12      	ldr	r3, [pc, #72]	; (2160 <prvInsertBlockIntoFreeList+0x4c>)
    2118:	681a      	ldr	r2, [r3, #0]
    211a:	4282      	cmp	r2, r0
    211c:	d319      	bcc.n	2152 <prvInsertBlockIntoFreeList+0x3e>
    211e:	6859      	ldr	r1, [r3, #4]
    2120:	185c      	adds	r4, r3, r1
    2122:	42a0      	cmp	r0, r4
    2124:	d103      	bne.n	212e <prvInsertBlockIntoFreeList+0x1a>
    2126:	6840      	ldr	r0, [r0, #4]
    2128:	1809      	adds	r1, r1, r0
    212a:	6059      	str	r1, [r3, #4]
    212c:	0018      	movs	r0, r3
    212e:	6841      	ldr	r1, [r0, #4]
    2130:	1844      	adds	r4, r0, r1
    2132:	42a2      	cmp	r2, r4
    2134:	d111      	bne.n	215a <prvInsertBlockIntoFreeList+0x46>
    2136:	4c0a      	ldr	r4, [pc, #40]	; (2160 <prvInsertBlockIntoFreeList+0x4c>)
    2138:	68a4      	ldr	r4, [r4, #8]
    213a:	42a2      	cmp	r2, r4
    213c:	d00b      	beq.n	2156 <prvInsertBlockIntoFreeList+0x42>
    213e:	6852      	ldr	r2, [r2, #4]
    2140:	1889      	adds	r1, r1, r2
    2142:	6041      	str	r1, [r0, #4]
    2144:	681a      	ldr	r2, [r3, #0]
    2146:	6812      	ldr	r2, [r2, #0]
    2148:	6002      	str	r2, [r0, #0]
    214a:	4298      	cmp	r0, r3
    214c:	d000      	beq.n	2150 <prvInsertBlockIntoFreeList+0x3c>
    214e:	6018      	str	r0, [r3, #0]
    2150:	bd10      	pop	{r4, pc}
    2152:	0013      	movs	r3, r2
    2154:	e7e0      	b.n	2118 <prvInsertBlockIntoFreeList+0x4>
    2156:	6004      	str	r4, [r0, #0]
    2158:	e7f7      	b.n	214a <prvInsertBlockIntoFreeList+0x36>
    215a:	6002      	str	r2, [r0, #0]
    215c:	e7f5      	b.n	214a <prvInsertBlockIntoFreeList+0x36>
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	200027ac 	.word	0x200027ac

00002164 <pvPortMalloc>:
    2164:	b570      	push	{r4, r5, r6, lr}
    2166:	0004      	movs	r4, r0
    2168:	4b2f      	ldr	r3, [pc, #188]	; (2228 <pvPortMalloc+0xc4>)
    216a:	4798      	blx	r3
    216c:	4b2f      	ldr	r3, [pc, #188]	; (222c <pvPortMalloc+0xc8>)
    216e:	689b      	ldr	r3, [r3, #8]
    2170:	2b00      	cmp	r3, #0
    2172:	d00f      	beq.n	2194 <pvPortMalloc+0x30>
    2174:	4b2d      	ldr	r3, [pc, #180]	; (222c <pvPortMalloc+0xc8>)
    2176:	695b      	ldr	r3, [r3, #20]
    2178:	4223      	tst	r3, r4
    217a:	d14a      	bne.n	2212 <pvPortMalloc+0xae>
    217c:	2c00      	cmp	r4, #0
    217e:	d00c      	beq.n	219a <pvPortMalloc+0x36>
    2180:	3408      	adds	r4, #8
    2182:	0763      	lsls	r3, r4, #29
    2184:	d009      	beq.n	219a <pvPortMalloc+0x36>
    2186:	2307      	movs	r3, #7
    2188:	439c      	bics	r4, r3
    218a:	3408      	adds	r4, #8
    218c:	4223      	tst	r3, r4
    218e:	d004      	beq.n	219a <pvPortMalloc+0x36>
    2190:	b672      	cpsid	i
    2192:	e7fe      	b.n	2192 <pvPortMalloc+0x2e>
    2194:	4b26      	ldr	r3, [pc, #152]	; (2230 <pvPortMalloc+0xcc>)
    2196:	4798      	blx	r3
    2198:	e7ec      	b.n	2174 <pvPortMalloc+0x10>
    219a:	2c00      	cmp	r4, #0
    219c:	d03b      	beq.n	2216 <pvPortMalloc+0xb2>
    219e:	4b23      	ldr	r3, [pc, #140]	; (222c <pvPortMalloc+0xc8>)
    21a0:	691b      	ldr	r3, [r3, #16]
    21a2:	429c      	cmp	r4, r3
    21a4:	d839      	bhi.n	221a <pvPortMalloc+0xb6>
    21a6:	4b21      	ldr	r3, [pc, #132]	; (222c <pvPortMalloc+0xc8>)
    21a8:	681d      	ldr	r5, [r3, #0]
    21aa:	e001      	b.n	21b0 <pvPortMalloc+0x4c>
    21ac:	002b      	movs	r3, r5
    21ae:	0015      	movs	r5, r2
    21b0:	686a      	ldr	r2, [r5, #4]
    21b2:	4294      	cmp	r4, r2
    21b4:	d902      	bls.n	21bc <pvPortMalloc+0x58>
    21b6:	682a      	ldr	r2, [r5, #0]
    21b8:	2a00      	cmp	r2, #0
    21ba:	d1f7      	bne.n	21ac <pvPortMalloc+0x48>
    21bc:	4a1b      	ldr	r2, [pc, #108]	; (222c <pvPortMalloc+0xc8>)
    21be:	6892      	ldr	r2, [r2, #8]
    21c0:	4295      	cmp	r5, r2
    21c2:	d02c      	beq.n	221e <pvPortMalloc+0xba>
    21c4:	681e      	ldr	r6, [r3, #0]
    21c6:	3608      	adds	r6, #8
    21c8:	682a      	ldr	r2, [r5, #0]
    21ca:	601a      	str	r2, [r3, #0]
    21cc:	686b      	ldr	r3, [r5, #4]
    21ce:	1b1b      	subs	r3, r3, r4
    21d0:	2b10      	cmp	r3, #16
    21d2:	d908      	bls.n	21e6 <pvPortMalloc+0x82>
    21d4:	1928      	adds	r0, r5, r4
    21d6:	0742      	lsls	r2, r0, #29
    21d8:	d001      	beq.n	21de <pvPortMalloc+0x7a>
    21da:	b672      	cpsid	i
    21dc:	e7fe      	b.n	21dc <pvPortMalloc+0x78>
    21de:	6043      	str	r3, [r0, #4]
    21e0:	606c      	str	r4, [r5, #4]
    21e2:	4b14      	ldr	r3, [pc, #80]	; (2234 <pvPortMalloc+0xd0>)
    21e4:	4798      	blx	r3
    21e6:	6869      	ldr	r1, [r5, #4]
    21e8:	4a10      	ldr	r2, [pc, #64]	; (222c <pvPortMalloc+0xc8>)
    21ea:	6913      	ldr	r3, [r2, #16]
    21ec:	1a5b      	subs	r3, r3, r1
    21ee:	6113      	str	r3, [r2, #16]
    21f0:	68d2      	ldr	r2, [r2, #12]
    21f2:	4293      	cmp	r3, r2
    21f4:	d201      	bcs.n	21fa <pvPortMalloc+0x96>
    21f6:	4a0d      	ldr	r2, [pc, #52]	; (222c <pvPortMalloc+0xc8>)
    21f8:	60d3      	str	r3, [r2, #12]
    21fa:	4b0c      	ldr	r3, [pc, #48]	; (222c <pvPortMalloc+0xc8>)
    21fc:	695b      	ldr	r3, [r3, #20]
    21fe:	430b      	orrs	r3, r1
    2200:	606b      	str	r3, [r5, #4]
    2202:	2300      	movs	r3, #0
    2204:	602b      	str	r3, [r5, #0]
    2206:	4b0c      	ldr	r3, [pc, #48]	; (2238 <pvPortMalloc+0xd4>)
    2208:	4798      	blx	r3
    220a:	0773      	lsls	r3, r6, #29
    220c:	d009      	beq.n	2222 <pvPortMalloc+0xbe>
    220e:	b672      	cpsid	i
    2210:	e7fe      	b.n	2210 <pvPortMalloc+0xac>
    2212:	2600      	movs	r6, #0
    2214:	e7f7      	b.n	2206 <pvPortMalloc+0xa2>
    2216:	2600      	movs	r6, #0
    2218:	e7f5      	b.n	2206 <pvPortMalloc+0xa2>
    221a:	2600      	movs	r6, #0
    221c:	e7f3      	b.n	2206 <pvPortMalloc+0xa2>
    221e:	2600      	movs	r6, #0
    2220:	e7f1      	b.n	2206 <pvPortMalloc+0xa2>
    2222:	0030      	movs	r0, r6
    2224:	bd70      	pop	{r4, r5, r6, pc}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	00002d01 	.word	0x00002d01
    222c:	200027ac 	.word	0x200027ac
    2230:	000020c5 	.word	0x000020c5
    2234:	00002115 	.word	0x00002115
    2238:	00002e25 	.word	0x00002e25

0000223c <vPortFree>:
    223c:	b570      	push	{r4, r5, r6, lr}
    223e:	2800      	cmp	r0, #0
    2240:	d020      	beq.n	2284 <vPortFree+0x48>
    2242:	0005      	movs	r5, r0
    2244:	3d08      	subs	r5, #8
    2246:	686b      	ldr	r3, [r5, #4]
    2248:	4a0f      	ldr	r2, [pc, #60]	; (2288 <vPortFree+0x4c>)
    224a:	6952      	ldr	r2, [r2, #20]
    224c:	421a      	tst	r2, r3
    224e:	d101      	bne.n	2254 <vPortFree+0x18>
    2250:	b672      	cpsid	i
    2252:	e7fe      	b.n	2252 <vPortFree+0x16>
    2254:	0001      	movs	r1, r0
    2256:	3908      	subs	r1, #8
    2258:	6809      	ldr	r1, [r1, #0]
    225a:	2900      	cmp	r1, #0
    225c:	d001      	beq.n	2262 <vPortFree+0x26>
    225e:	b672      	cpsid	i
    2260:	e7fe      	b.n	2260 <vPortFree+0x24>
    2262:	3808      	subs	r0, #8
    2264:	0004      	movs	r4, r0
    2266:	4393      	bics	r3, r2
    2268:	6043      	str	r3, [r0, #4]
    226a:	4b08      	ldr	r3, [pc, #32]	; (228c <vPortFree+0x50>)
    226c:	4798      	blx	r3
    226e:	6863      	ldr	r3, [r4, #4]
    2270:	4a05      	ldr	r2, [pc, #20]	; (2288 <vPortFree+0x4c>)
    2272:	6911      	ldr	r1, [r2, #16]
    2274:	468c      	mov	ip, r1
    2276:	4463      	add	r3, ip
    2278:	6113      	str	r3, [r2, #16]
    227a:	0028      	movs	r0, r5
    227c:	4b04      	ldr	r3, [pc, #16]	; (2290 <vPortFree+0x54>)
    227e:	4798      	blx	r3
    2280:	4b04      	ldr	r3, [pc, #16]	; (2294 <vPortFree+0x58>)
    2282:	4798      	blx	r3
    2284:	bd70      	pop	{r4, r5, r6, pc}
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	200027ac 	.word	0x200027ac
    228c:	00002d01 	.word	0x00002d01
    2290:	00002115 	.word	0x00002115
    2294:	00002e25 	.word	0x00002e25

00002298 <prvIsQueueFull>:
    2298:	b510      	push	{r4, lr}
    229a:	0004      	movs	r4, r0
    229c:	4b06      	ldr	r3, [pc, #24]	; (22b8 <prvIsQueueFull+0x20>)
    229e:	4798      	blx	r3
    22a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    22a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    22a4:	429a      	cmp	r2, r3
    22a6:	d004      	beq.n	22b2 <prvIsQueueFull+0x1a>
    22a8:	2400      	movs	r4, #0
    22aa:	4b04      	ldr	r3, [pc, #16]	; (22bc <prvIsQueueFull+0x24>)
    22ac:	4798      	blx	r3
    22ae:	0020      	movs	r0, r4
    22b0:	bd10      	pop	{r4, pc}
    22b2:	2401      	movs	r4, #1
    22b4:	e7f9      	b.n	22aa <prvIsQueueFull+0x12>
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	00002005 	.word	0x00002005
    22bc:	0000201d 	.word	0x0000201d

000022c0 <prvIsQueueEmpty>:
    22c0:	b510      	push	{r4, lr}
    22c2:	0004      	movs	r4, r0
    22c4:	4b05      	ldr	r3, [pc, #20]	; (22dc <prvIsQueueEmpty+0x1c>)
    22c6:	4798      	blx	r3
    22c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    22ca:	2b00      	cmp	r3, #0
    22cc:	d004      	beq.n	22d8 <prvIsQueueEmpty+0x18>
    22ce:	2400      	movs	r4, #0
    22d0:	4b03      	ldr	r3, [pc, #12]	; (22e0 <prvIsQueueEmpty+0x20>)
    22d2:	4798      	blx	r3
    22d4:	0020      	movs	r0, r4
    22d6:	bd10      	pop	{r4, pc}
    22d8:	2401      	movs	r4, #1
    22da:	e7f9      	b.n	22d0 <prvIsQueueEmpty+0x10>
    22dc:	00002005 	.word	0x00002005
    22e0:	0000201d 	.word	0x0000201d

000022e4 <prvCopyDataToQueue>:
    22e4:	b570      	push	{r4, r5, r6, lr}
    22e6:	0004      	movs	r4, r0
    22e8:	0016      	movs	r6, r2
    22ea:	6b85      	ldr	r5, [r0, #56]	; 0x38
    22ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
    22ee:	2a00      	cmp	r2, #0
    22f0:	d10a      	bne.n	2308 <prvCopyDataToQueue+0x24>
    22f2:	6803      	ldr	r3, [r0, #0]
    22f4:	2b00      	cmp	r3, #0
    22f6:	d12e      	bne.n	2356 <prvCopyDataToQueue+0x72>
    22f8:	6840      	ldr	r0, [r0, #4]
    22fa:	4b1b      	ldr	r3, [pc, #108]	; (2368 <prvCopyDataToQueue+0x84>)
    22fc:	4798      	blx	r3
    22fe:	2300      	movs	r3, #0
    2300:	6063      	str	r3, [r4, #4]
    2302:	3501      	adds	r5, #1
    2304:	63a5      	str	r5, [r4, #56]	; 0x38
    2306:	bd70      	pop	{r4, r5, r6, pc}
    2308:	2e00      	cmp	r6, #0
    230a:	d10e      	bne.n	232a <prvCopyDataToQueue+0x46>
    230c:	6880      	ldr	r0, [r0, #8]
    230e:	4b17      	ldr	r3, [pc, #92]	; (236c <prvCopyDataToQueue+0x88>)
    2310:	4798      	blx	r3
    2312:	68a3      	ldr	r3, [r4, #8]
    2314:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2316:	4694      	mov	ip, r2
    2318:	4463      	add	r3, ip
    231a:	60a3      	str	r3, [r4, #8]
    231c:	6862      	ldr	r2, [r4, #4]
    231e:	4293      	cmp	r3, r2
    2320:	d31b      	bcc.n	235a <prvCopyDataToQueue+0x76>
    2322:	6823      	ldr	r3, [r4, #0]
    2324:	60a3      	str	r3, [r4, #8]
    2326:	2000      	movs	r0, #0
    2328:	e7eb      	b.n	2302 <prvCopyDataToQueue+0x1e>
    232a:	68c0      	ldr	r0, [r0, #12]
    232c:	4b0f      	ldr	r3, [pc, #60]	; (236c <prvCopyDataToQueue+0x88>)
    232e:	4798      	blx	r3
    2330:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2332:	425b      	negs	r3, r3
    2334:	68e2      	ldr	r2, [r4, #12]
    2336:	18d2      	adds	r2, r2, r3
    2338:	60e2      	str	r2, [r4, #12]
    233a:	6821      	ldr	r1, [r4, #0]
    233c:	428a      	cmp	r2, r1
    233e:	d203      	bcs.n	2348 <prvCopyDataToQueue+0x64>
    2340:	6862      	ldr	r2, [r4, #4]
    2342:	4694      	mov	ip, r2
    2344:	4463      	add	r3, ip
    2346:	60e3      	str	r3, [r4, #12]
    2348:	2e02      	cmp	r6, #2
    234a:	d108      	bne.n	235e <prvCopyDataToQueue+0x7a>
    234c:	2d00      	cmp	r5, #0
    234e:	d008      	beq.n	2362 <prvCopyDataToQueue+0x7e>
    2350:	3d01      	subs	r5, #1
    2352:	2000      	movs	r0, #0
    2354:	e7d5      	b.n	2302 <prvCopyDataToQueue+0x1e>
    2356:	2000      	movs	r0, #0
    2358:	e7d3      	b.n	2302 <prvCopyDataToQueue+0x1e>
    235a:	2000      	movs	r0, #0
    235c:	e7d1      	b.n	2302 <prvCopyDataToQueue+0x1e>
    235e:	2000      	movs	r0, #0
    2360:	e7cf      	b.n	2302 <prvCopyDataToQueue+0x1e>
    2362:	2000      	movs	r0, #0
    2364:	e7cd      	b.n	2302 <prvCopyDataToQueue+0x1e>
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	00003125 	.word	0x00003125
    236c:	0000361d 	.word	0x0000361d

00002370 <prvNotifyQueueSetContainer>:
    2370:	b570      	push	{r4, r5, r6, lr}
    2372:	b082      	sub	sp, #8
    2374:	9001      	str	r0, [sp, #4]
    2376:	000a      	movs	r2, r1
    2378:	6c84      	ldr	r4, [r0, #72]	; 0x48
    237a:	2c00      	cmp	r4, #0
    237c:	d005      	beq.n	238a <prvNotifyQueueSetContainer+0x1a>
    237e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2382:	4299      	cmp	r1, r3
    2384:	d303      	bcc.n	238e <prvNotifyQueueSetContainer+0x1e>
    2386:	b672      	cpsid	i
    2388:	e7fe      	b.n	2388 <prvNotifyQueueSetContainer+0x18>
    238a:	b672      	cpsid	i
    238c:	e7fe      	b.n	238c <prvNotifyQueueSetContainer+0x1c>
    238e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2390:	428b      	cmp	r3, r1
    2392:	d803      	bhi.n	239c <prvNotifyQueueSetContainer+0x2c>
    2394:	2600      	movs	r6, #0
    2396:	0030      	movs	r0, r6
    2398:	b002      	add	sp, #8
    239a:	bd70      	pop	{r4, r5, r6, pc}
    239c:	2345      	movs	r3, #69	; 0x45
    239e:	5ce5      	ldrb	r5, [r4, r3]
    23a0:	b26d      	sxtb	r5, r5
    23a2:	a901      	add	r1, sp, #4
    23a4:	0020      	movs	r0, r4
    23a6:	4b0a      	ldr	r3, [pc, #40]	; (23d0 <prvNotifyQueueSetContainer+0x60>)
    23a8:	4798      	blx	r3
    23aa:	0006      	movs	r6, r0
    23ac:	1c6b      	adds	r3, r5, #1
    23ae:	d10a      	bne.n	23c6 <prvNotifyQueueSetContainer+0x56>
    23b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23b2:	2b00      	cmp	r3, #0
    23b4:	d0ef      	beq.n	2396 <prvNotifyQueueSetContainer+0x26>
    23b6:	0020      	movs	r0, r4
    23b8:	3024      	adds	r0, #36	; 0x24
    23ba:	4b06      	ldr	r3, [pc, #24]	; (23d4 <prvNotifyQueueSetContainer+0x64>)
    23bc:	4798      	blx	r3
    23be:	2800      	cmp	r0, #0
    23c0:	d0e9      	beq.n	2396 <prvNotifyQueueSetContainer+0x26>
    23c2:	2601      	movs	r6, #1
    23c4:	e7e7      	b.n	2396 <prvNotifyQueueSetContainer+0x26>
    23c6:	3501      	adds	r5, #1
    23c8:	b26d      	sxtb	r5, r5
    23ca:	2345      	movs	r3, #69	; 0x45
    23cc:	54e5      	strb	r5, [r4, r3]
    23ce:	e7e2      	b.n	2396 <prvNotifyQueueSetContainer+0x26>
    23d0:	000022e5 	.word	0x000022e5
    23d4:	00002ff9 	.word	0x00002ff9

000023d8 <prvCopyDataFromQueue>:
    23d8:	b510      	push	{r4, lr}
    23da:	000c      	movs	r4, r1
    23dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    23de:	2a00      	cmp	r2, #0
    23e0:	d00b      	beq.n	23fa <prvCopyDataFromQueue+0x22>
    23e2:	68c3      	ldr	r3, [r0, #12]
    23e4:	189b      	adds	r3, r3, r2
    23e6:	60c3      	str	r3, [r0, #12]
    23e8:	6841      	ldr	r1, [r0, #4]
    23ea:	428b      	cmp	r3, r1
    23ec:	d301      	bcc.n	23f2 <prvCopyDataFromQueue+0x1a>
    23ee:	6803      	ldr	r3, [r0, #0]
    23f0:	60c3      	str	r3, [r0, #12]
    23f2:	68c1      	ldr	r1, [r0, #12]
    23f4:	0020      	movs	r0, r4
    23f6:	4b01      	ldr	r3, [pc, #4]	; (23fc <prvCopyDataFromQueue+0x24>)
    23f8:	4798      	blx	r3
    23fa:	bd10      	pop	{r4, pc}
    23fc:	0000361d 	.word	0x0000361d

00002400 <prvUnlockQueue>:
    2400:	b570      	push	{r4, r5, r6, lr}
    2402:	0005      	movs	r5, r0
    2404:	4b21      	ldr	r3, [pc, #132]	; (248c <prvUnlockQueue+0x8c>)
    2406:	4798      	blx	r3
    2408:	2345      	movs	r3, #69	; 0x45
    240a:	5cec      	ldrb	r4, [r5, r3]
    240c:	b264      	sxtb	r4, r4
    240e:	e00a      	b.n	2426 <prvUnlockQueue+0x26>
    2410:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2412:	2b00      	cmp	r3, #0
    2414:	d018      	beq.n	2448 <prvUnlockQueue+0x48>
    2416:	0028      	movs	r0, r5
    2418:	3024      	adds	r0, #36	; 0x24
    241a:	4b1d      	ldr	r3, [pc, #116]	; (2490 <prvUnlockQueue+0x90>)
    241c:	4798      	blx	r3
    241e:	2800      	cmp	r0, #0
    2420:	d10f      	bne.n	2442 <prvUnlockQueue+0x42>
    2422:	3c01      	subs	r4, #1
    2424:	b264      	sxtb	r4, r4
    2426:	2c00      	cmp	r4, #0
    2428:	dd0e      	ble.n	2448 <prvUnlockQueue+0x48>
    242a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    242c:	2b00      	cmp	r3, #0
    242e:	d0ef      	beq.n	2410 <prvUnlockQueue+0x10>
    2430:	2100      	movs	r1, #0
    2432:	0028      	movs	r0, r5
    2434:	4b17      	ldr	r3, [pc, #92]	; (2494 <prvUnlockQueue+0x94>)
    2436:	4798      	blx	r3
    2438:	2800      	cmp	r0, #0
    243a:	d0f2      	beq.n	2422 <prvUnlockQueue+0x22>
    243c:	4b16      	ldr	r3, [pc, #88]	; (2498 <prvUnlockQueue+0x98>)
    243e:	4798      	blx	r3
    2440:	e7ef      	b.n	2422 <prvUnlockQueue+0x22>
    2442:	4b15      	ldr	r3, [pc, #84]	; (2498 <prvUnlockQueue+0x98>)
    2444:	4798      	blx	r3
    2446:	e7ec      	b.n	2422 <prvUnlockQueue+0x22>
    2448:	22ff      	movs	r2, #255	; 0xff
    244a:	2345      	movs	r3, #69	; 0x45
    244c:	54ea      	strb	r2, [r5, r3]
    244e:	4b13      	ldr	r3, [pc, #76]	; (249c <prvUnlockQueue+0x9c>)
    2450:	4798      	blx	r3
    2452:	4b0e      	ldr	r3, [pc, #56]	; (248c <prvUnlockQueue+0x8c>)
    2454:	4798      	blx	r3
    2456:	2344      	movs	r3, #68	; 0x44
    2458:	5cec      	ldrb	r4, [r5, r3]
    245a:	b264      	sxtb	r4, r4
    245c:	e001      	b.n	2462 <prvUnlockQueue+0x62>
    245e:	3c01      	subs	r4, #1
    2460:	b264      	sxtb	r4, r4
    2462:	2c00      	cmp	r4, #0
    2464:	dd0b      	ble.n	247e <prvUnlockQueue+0x7e>
    2466:	692b      	ldr	r3, [r5, #16]
    2468:	2b00      	cmp	r3, #0
    246a:	d008      	beq.n	247e <prvUnlockQueue+0x7e>
    246c:	0028      	movs	r0, r5
    246e:	3010      	adds	r0, #16
    2470:	4b07      	ldr	r3, [pc, #28]	; (2490 <prvUnlockQueue+0x90>)
    2472:	4798      	blx	r3
    2474:	2800      	cmp	r0, #0
    2476:	d0f2      	beq.n	245e <prvUnlockQueue+0x5e>
    2478:	4b07      	ldr	r3, [pc, #28]	; (2498 <prvUnlockQueue+0x98>)
    247a:	4798      	blx	r3
    247c:	e7ef      	b.n	245e <prvUnlockQueue+0x5e>
    247e:	22ff      	movs	r2, #255	; 0xff
    2480:	2344      	movs	r3, #68	; 0x44
    2482:	54ea      	strb	r2, [r5, r3]
    2484:	4b05      	ldr	r3, [pc, #20]	; (249c <prvUnlockQueue+0x9c>)
    2486:	4798      	blx	r3
    2488:	bd70      	pop	{r4, r5, r6, pc}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	00002005 	.word	0x00002005
    2490:	00002ff9 	.word	0x00002ff9
    2494:	00002371 	.word	0x00002371
    2498:	000030f9 	.word	0x000030f9
    249c:	0000201d 	.word	0x0000201d

000024a0 <xQueueGenericReset>:
    24a0:	b570      	push	{r4, r5, r6, lr}
    24a2:	0004      	movs	r4, r0
    24a4:	000d      	movs	r5, r1
    24a6:	2800      	cmp	r0, #0
    24a8:	d023      	beq.n	24f2 <xQueueGenericReset+0x52>
    24aa:	4b18      	ldr	r3, [pc, #96]	; (250c <xQueueGenericReset+0x6c>)
    24ac:	4798      	blx	r3
    24ae:	6822      	ldr	r2, [r4, #0]
    24b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    24b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    24b4:	0001      	movs	r1, r0
    24b6:	4359      	muls	r1, r3
    24b8:	1851      	adds	r1, r2, r1
    24ba:	6061      	str	r1, [r4, #4]
    24bc:	2100      	movs	r1, #0
    24be:	63a1      	str	r1, [r4, #56]	; 0x38
    24c0:	60a2      	str	r2, [r4, #8]
    24c2:	3b01      	subs	r3, #1
    24c4:	4343      	muls	r3, r0
    24c6:	18d3      	adds	r3, r2, r3
    24c8:	60e3      	str	r3, [r4, #12]
    24ca:	23ff      	movs	r3, #255	; 0xff
    24cc:	2244      	movs	r2, #68	; 0x44
    24ce:	54a3      	strb	r3, [r4, r2]
    24d0:	3201      	adds	r2, #1
    24d2:	54a3      	strb	r3, [r4, r2]
    24d4:	2d00      	cmp	r5, #0
    24d6:	d111      	bne.n	24fc <xQueueGenericReset+0x5c>
    24d8:	6923      	ldr	r3, [r4, #16]
    24da:	2b00      	cmp	r3, #0
    24dc:	d005      	beq.n	24ea <xQueueGenericReset+0x4a>
    24de:	0020      	movs	r0, r4
    24e0:	3010      	adds	r0, #16
    24e2:	4b0b      	ldr	r3, [pc, #44]	; (2510 <xQueueGenericReset+0x70>)
    24e4:	4798      	blx	r3
    24e6:	2800      	cmp	r0, #0
    24e8:	d105      	bne.n	24f6 <xQueueGenericReset+0x56>
    24ea:	4b0a      	ldr	r3, [pc, #40]	; (2514 <xQueueGenericReset+0x74>)
    24ec:	4798      	blx	r3
    24ee:	2001      	movs	r0, #1
    24f0:	bd70      	pop	{r4, r5, r6, pc}
    24f2:	b672      	cpsid	i
    24f4:	e7fe      	b.n	24f4 <xQueueGenericReset+0x54>
    24f6:	4b08      	ldr	r3, [pc, #32]	; (2518 <xQueueGenericReset+0x78>)
    24f8:	4798      	blx	r3
    24fa:	e7f6      	b.n	24ea <xQueueGenericReset+0x4a>
    24fc:	0020      	movs	r0, r4
    24fe:	3010      	adds	r0, #16
    2500:	4d06      	ldr	r5, [pc, #24]	; (251c <xQueueGenericReset+0x7c>)
    2502:	47a8      	blx	r5
    2504:	0020      	movs	r0, r4
    2506:	3024      	adds	r0, #36	; 0x24
    2508:	47a8      	blx	r5
    250a:	e7ee      	b.n	24ea <xQueueGenericReset+0x4a>
    250c:	00002005 	.word	0x00002005
    2510:	00002ff9 	.word	0x00002ff9
    2514:	0000201d 	.word	0x0000201d
    2518:	00001fed 	.word	0x00001fed
    251c:	00001e65 	.word	0x00001e65

00002520 <prvInitialiseNewQueue>:
    2520:	b570      	push	{r4, r5, r6, lr}
    2522:	001d      	movs	r5, r3
    2524:	9c04      	ldr	r4, [sp, #16]
    2526:	2900      	cmp	r1, #0
    2528:	d00b      	beq.n	2542 <prvInitialiseNewQueue+0x22>
    252a:	6022      	str	r2, [r4, #0]
    252c:	63e0      	str	r0, [r4, #60]	; 0x3c
    252e:	6421      	str	r1, [r4, #64]	; 0x40
    2530:	2101      	movs	r1, #1
    2532:	0020      	movs	r0, r4
    2534:	4b04      	ldr	r3, [pc, #16]	; (2548 <prvInitialiseNewQueue+0x28>)
    2536:	4798      	blx	r3
    2538:	2350      	movs	r3, #80	; 0x50
    253a:	54e5      	strb	r5, [r4, r3]
    253c:	2300      	movs	r3, #0
    253e:	64a3      	str	r3, [r4, #72]	; 0x48
    2540:	bd70      	pop	{r4, r5, r6, pc}
    2542:	6024      	str	r4, [r4, #0]
    2544:	e7f2      	b.n	252c <prvInitialiseNewQueue+0xc>
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	000024a1 	.word	0x000024a1

0000254c <xQueueGenericCreate>:
    254c:	b5f0      	push	{r4, r5, r6, r7, lr}
    254e:	b083      	sub	sp, #12
    2550:	0006      	movs	r6, r0
    2552:	000f      	movs	r7, r1
    2554:	0015      	movs	r5, r2
    2556:	2800      	cmp	r0, #0
    2558:	d101      	bne.n	255e <xQueueGenericCreate+0x12>
    255a:	b672      	cpsid	i
    255c:	e7fe      	b.n	255c <xQueueGenericCreate+0x10>
    255e:	2900      	cmp	r1, #0
    2560:	d002      	beq.n	2568 <xQueueGenericCreate+0x1c>
    2562:	0008      	movs	r0, r1
    2564:	4370      	muls	r0, r6
    2566:	e000      	b.n	256a <xQueueGenericCreate+0x1e>
    2568:	2000      	movs	r0, #0
    256a:	3054      	adds	r0, #84	; 0x54
    256c:	4b07      	ldr	r3, [pc, #28]	; (258c <xQueueGenericCreate+0x40>)
    256e:	4798      	blx	r3
    2570:	1e04      	subs	r4, r0, #0
    2572:	d007      	beq.n	2584 <xQueueGenericCreate+0x38>
    2574:	0002      	movs	r2, r0
    2576:	3254      	adds	r2, #84	; 0x54
    2578:	9000      	str	r0, [sp, #0]
    257a:	002b      	movs	r3, r5
    257c:	0039      	movs	r1, r7
    257e:	0030      	movs	r0, r6
    2580:	4d03      	ldr	r5, [pc, #12]	; (2590 <xQueueGenericCreate+0x44>)
    2582:	47a8      	blx	r5
    2584:	0020      	movs	r0, r4
    2586:	b003      	add	sp, #12
    2588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	00002165 	.word	0x00002165
    2590:	00002521 	.word	0x00002521

00002594 <xQueueGenericSend>:
    2594:	b5f0      	push	{r4, r5, r6, r7, lr}
    2596:	b085      	sub	sp, #20
    2598:	0004      	movs	r4, r0
    259a:	000f      	movs	r7, r1
    259c:	9201      	str	r2, [sp, #4]
    259e:	001e      	movs	r6, r3
    25a0:	2800      	cmp	r0, #0
    25a2:	d006      	beq.n	25b2 <xQueueGenericSend+0x1e>
    25a4:	2900      	cmp	r1, #0
    25a6:	d006      	beq.n	25b6 <xQueueGenericSend+0x22>
    25a8:	2501      	movs	r5, #1
    25aa:	2d00      	cmp	r5, #0
    25ac:	d10a      	bne.n	25c4 <xQueueGenericSend+0x30>
    25ae:	b672      	cpsid	i
    25b0:	e7fe      	b.n	25b0 <xQueueGenericSend+0x1c>
    25b2:	b672      	cpsid	i
    25b4:	e7fe      	b.n	25b4 <xQueueGenericSend+0x20>
    25b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
    25b8:	2b00      	cmp	r3, #0
    25ba:	d101      	bne.n	25c0 <xQueueGenericSend+0x2c>
    25bc:	2501      	movs	r5, #1
    25be:	e7f4      	b.n	25aa <xQueueGenericSend+0x16>
    25c0:	2500      	movs	r5, #0
    25c2:	e7f2      	b.n	25aa <xQueueGenericSend+0x16>
    25c4:	2e02      	cmp	r6, #2
    25c6:	d003      	beq.n	25d0 <xQueueGenericSend+0x3c>
    25c8:	2d00      	cmp	r5, #0
    25ca:	d106      	bne.n	25da <xQueueGenericSend+0x46>
    25cc:	b672      	cpsid	i
    25ce:	e7fe      	b.n	25ce <xQueueGenericSend+0x3a>
    25d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    25d2:	2b01      	cmp	r3, #1
    25d4:	d0f8      	beq.n	25c8 <xQueueGenericSend+0x34>
    25d6:	2500      	movs	r5, #0
    25d8:	e7f6      	b.n	25c8 <xQueueGenericSend+0x34>
    25da:	4b44      	ldr	r3, [pc, #272]	; (26ec <xQueueGenericSend+0x158>)
    25dc:	4798      	blx	r3
    25de:	2800      	cmp	r0, #0
    25e0:	d103      	bne.n	25ea <xQueueGenericSend+0x56>
    25e2:	9b01      	ldr	r3, [sp, #4]
    25e4:	2b00      	cmp	r3, #0
    25e6:	d000      	beq.n	25ea <xQueueGenericSend+0x56>
    25e8:	2500      	movs	r5, #0
    25ea:	2d00      	cmp	r5, #0
    25ec:	d101      	bne.n	25f2 <xQueueGenericSend+0x5e>
    25ee:	b672      	cpsid	i
    25f0:	e7fe      	b.n	25f0 <xQueueGenericSend+0x5c>
    25f2:	2500      	movs	r5, #0
    25f4:	e042      	b.n	267c <xQueueGenericSend+0xe8>
    25f6:	0032      	movs	r2, r6
    25f8:	0039      	movs	r1, r7
    25fa:	0020      	movs	r0, r4
    25fc:	4b3c      	ldr	r3, [pc, #240]	; (26f0 <xQueueGenericSend+0x15c>)
    25fe:	4798      	blx	r3
    2600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2602:	2b00      	cmp	r3, #0
    2604:	d00c      	beq.n	2620 <xQueueGenericSend+0x8c>
    2606:	0031      	movs	r1, r6
    2608:	0020      	movs	r0, r4
    260a:	4b3a      	ldr	r3, [pc, #232]	; (26f4 <xQueueGenericSend+0x160>)
    260c:	4798      	blx	r3
    260e:	2800      	cmp	r0, #0
    2610:	d001      	beq.n	2616 <xQueueGenericSend+0x82>
    2612:	4b39      	ldr	r3, [pc, #228]	; (26f8 <xQueueGenericSend+0x164>)
    2614:	4798      	blx	r3
    2616:	4b39      	ldr	r3, [pc, #228]	; (26fc <xQueueGenericSend+0x168>)
    2618:	4798      	blx	r3
    261a:	2001      	movs	r0, #1
    261c:	b005      	add	sp, #20
    261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2620:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2622:	2b00      	cmp	r3, #0
    2624:	d008      	beq.n	2638 <xQueueGenericSend+0xa4>
    2626:	0020      	movs	r0, r4
    2628:	3024      	adds	r0, #36	; 0x24
    262a:	4b35      	ldr	r3, [pc, #212]	; (2700 <xQueueGenericSend+0x16c>)
    262c:	4798      	blx	r3
    262e:	2800      	cmp	r0, #0
    2630:	d0f1      	beq.n	2616 <xQueueGenericSend+0x82>
    2632:	4b31      	ldr	r3, [pc, #196]	; (26f8 <xQueueGenericSend+0x164>)
    2634:	4798      	blx	r3
    2636:	e7ee      	b.n	2616 <xQueueGenericSend+0x82>
    2638:	2800      	cmp	r0, #0
    263a:	d0ec      	beq.n	2616 <xQueueGenericSend+0x82>
    263c:	4b2e      	ldr	r3, [pc, #184]	; (26f8 <xQueueGenericSend+0x164>)
    263e:	4798      	blx	r3
    2640:	e7e9      	b.n	2616 <xQueueGenericSend+0x82>
    2642:	4b2e      	ldr	r3, [pc, #184]	; (26fc <xQueueGenericSend+0x168>)
    2644:	4798      	blx	r3
    2646:	2000      	movs	r0, #0
    2648:	e7e8      	b.n	261c <xQueueGenericSend+0x88>
    264a:	4b2c      	ldr	r3, [pc, #176]	; (26fc <xQueueGenericSend+0x168>)
    264c:	4798      	blx	r3
    264e:	a901      	add	r1, sp, #4
    2650:	a802      	add	r0, sp, #8
    2652:	4b2c      	ldr	r3, [pc, #176]	; (2704 <xQueueGenericSend+0x170>)
    2654:	4798      	blx	r3
    2656:	2800      	cmp	r0, #0
    2658:	d141      	bne.n	26de <xQueueGenericSend+0x14a>
    265a:	0020      	movs	r0, r4
    265c:	4b2a      	ldr	r3, [pc, #168]	; (2708 <xQueueGenericSend+0x174>)
    265e:	4798      	blx	r3
    2660:	2800      	cmp	r0, #0
    2662:	d036      	beq.n	26d2 <xQueueGenericSend+0x13e>
    2664:	0020      	movs	r0, r4
    2666:	3010      	adds	r0, #16
    2668:	9901      	ldr	r1, [sp, #4]
    266a:	4b28      	ldr	r3, [pc, #160]	; (270c <xQueueGenericSend+0x178>)
    266c:	4798      	blx	r3
    266e:	0020      	movs	r0, r4
    2670:	4b27      	ldr	r3, [pc, #156]	; (2710 <xQueueGenericSend+0x17c>)
    2672:	4798      	blx	r3
    2674:	4b27      	ldr	r3, [pc, #156]	; (2714 <xQueueGenericSend+0x180>)
    2676:	4798      	blx	r3
    2678:	2800      	cmp	r0, #0
    267a:	d027      	beq.n	26cc <xQueueGenericSend+0x138>
    267c:	4b26      	ldr	r3, [pc, #152]	; (2718 <xQueueGenericSend+0x184>)
    267e:	4798      	blx	r3
    2680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2682:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2684:	4293      	cmp	r3, r2
    2686:	d3b6      	bcc.n	25f6 <xQueueGenericSend+0x62>
    2688:	2e02      	cmp	r6, #2
    268a:	d0b4      	beq.n	25f6 <xQueueGenericSend+0x62>
    268c:	9b01      	ldr	r3, [sp, #4]
    268e:	2b00      	cmp	r3, #0
    2690:	d0d7      	beq.n	2642 <xQueueGenericSend+0xae>
    2692:	2d00      	cmp	r5, #0
    2694:	d103      	bne.n	269e <xQueueGenericSend+0x10a>
    2696:	a802      	add	r0, sp, #8
    2698:	4b20      	ldr	r3, [pc, #128]	; (271c <xQueueGenericSend+0x188>)
    269a:	4798      	blx	r3
    269c:	3501      	adds	r5, #1
    269e:	4b17      	ldr	r3, [pc, #92]	; (26fc <xQueueGenericSend+0x168>)
    26a0:	4798      	blx	r3
    26a2:	4b1f      	ldr	r3, [pc, #124]	; (2720 <xQueueGenericSend+0x18c>)
    26a4:	4798      	blx	r3
    26a6:	4b1c      	ldr	r3, [pc, #112]	; (2718 <xQueueGenericSend+0x184>)
    26a8:	4798      	blx	r3
    26aa:	2344      	movs	r3, #68	; 0x44
    26ac:	5ce3      	ldrb	r3, [r4, r3]
    26ae:	b25b      	sxtb	r3, r3
    26b0:	3301      	adds	r3, #1
    26b2:	d102      	bne.n	26ba <xQueueGenericSend+0x126>
    26b4:	2200      	movs	r2, #0
    26b6:	2344      	movs	r3, #68	; 0x44
    26b8:	54e2      	strb	r2, [r4, r3]
    26ba:	2345      	movs	r3, #69	; 0x45
    26bc:	5ce3      	ldrb	r3, [r4, r3]
    26be:	b25b      	sxtb	r3, r3
    26c0:	3301      	adds	r3, #1
    26c2:	d1c2      	bne.n	264a <xQueueGenericSend+0xb6>
    26c4:	2200      	movs	r2, #0
    26c6:	2345      	movs	r3, #69	; 0x45
    26c8:	54e2      	strb	r2, [r4, r3]
    26ca:	e7be      	b.n	264a <xQueueGenericSend+0xb6>
    26cc:	4b0a      	ldr	r3, [pc, #40]	; (26f8 <xQueueGenericSend+0x164>)
    26ce:	4798      	blx	r3
    26d0:	e7d4      	b.n	267c <xQueueGenericSend+0xe8>
    26d2:	0020      	movs	r0, r4
    26d4:	4b0e      	ldr	r3, [pc, #56]	; (2710 <xQueueGenericSend+0x17c>)
    26d6:	4798      	blx	r3
    26d8:	4b0e      	ldr	r3, [pc, #56]	; (2714 <xQueueGenericSend+0x180>)
    26da:	4798      	blx	r3
    26dc:	e7ce      	b.n	267c <xQueueGenericSend+0xe8>
    26de:	0020      	movs	r0, r4
    26e0:	4b0b      	ldr	r3, [pc, #44]	; (2710 <xQueueGenericSend+0x17c>)
    26e2:	4798      	blx	r3
    26e4:	4b0b      	ldr	r3, [pc, #44]	; (2714 <xQueueGenericSend+0x180>)
    26e6:	4798      	blx	r3
    26e8:	2000      	movs	r0, #0
    26ea:	e797      	b.n	261c <xQueueGenericSend+0x88>
    26ec:	00003105 	.word	0x00003105
    26f0:	000022e5 	.word	0x000022e5
    26f4:	00002371 	.word	0x00002371
    26f8:	00001fed 	.word	0x00001fed
    26fc:	0000201d 	.word	0x0000201d
    2700:	00002ff9 	.word	0x00002ff9
    2704:	00003089 	.word	0x00003089
    2708:	00002299 	.word	0x00002299
    270c:	00002f95 	.word	0x00002f95
    2710:	00002401 	.word	0x00002401
    2714:	00002e25 	.word	0x00002e25
    2718:	00002005 	.word	0x00002005
    271c:	00003079 	.word	0x00003079
    2720:	00002d01 	.word	0x00002d01

00002724 <xQueueGenericSendFromISR>:
    2724:	b5f0      	push	{r4, r5, r6, r7, lr}
    2726:	b083      	sub	sp, #12
    2728:	0004      	movs	r4, r0
    272a:	9100      	str	r1, [sp, #0]
    272c:	0017      	movs	r7, r2
    272e:	001d      	movs	r5, r3
    2730:	2800      	cmp	r0, #0
    2732:	d007      	beq.n	2744 <xQueueGenericSendFromISR+0x20>
    2734:	9b00      	ldr	r3, [sp, #0]
    2736:	2b00      	cmp	r3, #0
    2738:	d006      	beq.n	2748 <xQueueGenericSendFromISR+0x24>
    273a:	2301      	movs	r3, #1
    273c:	2b00      	cmp	r3, #0
    273e:	d10a      	bne.n	2756 <xQueueGenericSendFromISR+0x32>
    2740:	b672      	cpsid	i
    2742:	e7fe      	b.n	2742 <xQueueGenericSendFromISR+0x1e>
    2744:	b672      	cpsid	i
    2746:	e7fe      	b.n	2746 <xQueueGenericSendFromISR+0x22>
    2748:	6c03      	ldr	r3, [r0, #64]	; 0x40
    274a:	2b00      	cmp	r3, #0
    274c:	d101      	bne.n	2752 <xQueueGenericSendFromISR+0x2e>
    274e:	3301      	adds	r3, #1
    2750:	e7f4      	b.n	273c <xQueueGenericSendFromISR+0x18>
    2752:	2300      	movs	r3, #0
    2754:	e7f2      	b.n	273c <xQueueGenericSendFromISR+0x18>
    2756:	2d02      	cmp	r5, #2
    2758:	d003      	beq.n	2762 <xQueueGenericSendFromISR+0x3e>
    275a:	2b00      	cmp	r3, #0
    275c:	d106      	bne.n	276c <xQueueGenericSendFromISR+0x48>
    275e:	b672      	cpsid	i
    2760:	e7fe      	b.n	2760 <xQueueGenericSendFromISR+0x3c>
    2762:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2764:	2a01      	cmp	r2, #1
    2766:	d0f8      	beq.n	275a <xQueueGenericSendFromISR+0x36>
    2768:	2300      	movs	r3, #0
    276a:	e7f6      	b.n	275a <xQueueGenericSendFromISR+0x36>
    276c:	4b23      	ldr	r3, [pc, #140]	; (27fc <xQueueGenericSendFromISR+0xd8>)
    276e:	4798      	blx	r3
    2770:	9001      	str	r0, [sp, #4]
    2772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2774:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2776:	4293      	cmp	r3, r2
    2778:	d301      	bcc.n	277e <xQueueGenericSendFromISR+0x5a>
    277a:	2d02      	cmp	r5, #2
    277c:	d132      	bne.n	27e4 <xQueueGenericSendFromISR+0xc0>
    277e:	2345      	movs	r3, #69	; 0x45
    2780:	5ce6      	ldrb	r6, [r4, r3]
    2782:	b276      	sxtb	r6, r6
    2784:	002a      	movs	r2, r5
    2786:	9900      	ldr	r1, [sp, #0]
    2788:	0020      	movs	r0, r4
    278a:	4b1d      	ldr	r3, [pc, #116]	; (2800 <xQueueGenericSendFromISR+0xdc>)
    278c:	4798      	blx	r3
    278e:	1c73      	adds	r3, r6, #1
    2790:	d122      	bne.n	27d8 <xQueueGenericSendFromISR+0xb4>
    2792:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2794:	2b00      	cmp	r3, #0
    2796:	d010      	beq.n	27ba <xQueueGenericSendFromISR+0x96>
    2798:	0029      	movs	r1, r5
    279a:	0020      	movs	r0, r4
    279c:	4b19      	ldr	r3, [pc, #100]	; (2804 <xQueueGenericSendFromISR+0xe0>)
    279e:	4798      	blx	r3
    27a0:	2800      	cmp	r0, #0
    27a2:	d021      	beq.n	27e8 <xQueueGenericSendFromISR+0xc4>
    27a4:	2f00      	cmp	r7, #0
    27a6:	d021      	beq.n	27ec <xQueueGenericSendFromISR+0xc8>
    27a8:	2301      	movs	r3, #1
    27aa:	603b      	str	r3, [r7, #0]
    27ac:	2401      	movs	r4, #1
    27ae:	9801      	ldr	r0, [sp, #4]
    27b0:	4b15      	ldr	r3, [pc, #84]	; (2808 <xQueueGenericSendFromISR+0xe4>)
    27b2:	4798      	blx	r3
    27b4:	0020      	movs	r0, r4
    27b6:	b003      	add	sp, #12
    27b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27bc:	2b00      	cmp	r3, #0
    27be:	d017      	beq.n	27f0 <xQueueGenericSendFromISR+0xcc>
    27c0:	0020      	movs	r0, r4
    27c2:	3024      	adds	r0, #36	; 0x24
    27c4:	4b11      	ldr	r3, [pc, #68]	; (280c <xQueueGenericSendFromISR+0xe8>)
    27c6:	4798      	blx	r3
    27c8:	2800      	cmp	r0, #0
    27ca:	d013      	beq.n	27f4 <xQueueGenericSendFromISR+0xd0>
    27cc:	2f00      	cmp	r7, #0
    27ce:	d013      	beq.n	27f8 <xQueueGenericSendFromISR+0xd4>
    27d0:	2301      	movs	r3, #1
    27d2:	603b      	str	r3, [r7, #0]
    27d4:	2401      	movs	r4, #1
    27d6:	e7ea      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27d8:	1c73      	adds	r3, r6, #1
    27da:	b25b      	sxtb	r3, r3
    27dc:	2245      	movs	r2, #69	; 0x45
    27de:	54a3      	strb	r3, [r4, r2]
    27e0:	2401      	movs	r4, #1
    27e2:	e7e4      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27e4:	2400      	movs	r4, #0
    27e6:	e7e2      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27e8:	2401      	movs	r4, #1
    27ea:	e7e0      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27ec:	2401      	movs	r4, #1
    27ee:	e7de      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27f0:	2401      	movs	r4, #1
    27f2:	e7dc      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27f4:	2401      	movs	r4, #1
    27f6:	e7da      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27f8:	2401      	movs	r4, #1
    27fa:	e7d8      	b.n	27ae <xQueueGenericSendFromISR+0x8a>
    27fc:	0000203d 	.word	0x0000203d
    2800:	000022e5 	.word	0x000022e5
    2804:	00002371 	.word	0x00002371
    2808:	00002045 	.word	0x00002045
    280c:	00002ff9 	.word	0x00002ff9

00002810 <xQueueReceive>:
    2810:	b5f0      	push	{r4, r5, r6, r7, lr}
    2812:	b085      	sub	sp, #20
    2814:	0004      	movs	r4, r0
    2816:	000e      	movs	r6, r1
    2818:	9201      	str	r2, [sp, #4]
    281a:	2800      	cmp	r0, #0
    281c:	d006      	beq.n	282c <xQueueReceive+0x1c>
    281e:	2900      	cmp	r1, #0
    2820:	d006      	beq.n	2830 <xQueueReceive+0x20>
    2822:	2501      	movs	r5, #1
    2824:	2d00      	cmp	r5, #0
    2826:	d10a      	bne.n	283e <xQueueReceive+0x2e>
    2828:	b672      	cpsid	i
    282a:	e7fe      	b.n	282a <xQueueReceive+0x1a>
    282c:	b672      	cpsid	i
    282e:	e7fe      	b.n	282e <xQueueReceive+0x1e>
    2830:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2832:	2b00      	cmp	r3, #0
    2834:	d101      	bne.n	283a <xQueueReceive+0x2a>
    2836:	2501      	movs	r5, #1
    2838:	e7f4      	b.n	2824 <xQueueReceive+0x14>
    283a:	2500      	movs	r5, #0
    283c:	e7f2      	b.n	2824 <xQueueReceive+0x14>
    283e:	4b3e      	ldr	r3, [pc, #248]	; (2938 <xQueueReceive+0x128>)
    2840:	4798      	blx	r3
    2842:	2800      	cmp	r0, #0
    2844:	d103      	bne.n	284e <xQueueReceive+0x3e>
    2846:	9b01      	ldr	r3, [sp, #4]
    2848:	2b00      	cmp	r3, #0
    284a:	d000      	beq.n	284e <xQueueReceive+0x3e>
    284c:	2500      	movs	r5, #0
    284e:	2d00      	cmp	r5, #0
    2850:	d101      	bne.n	2856 <xQueueReceive+0x46>
    2852:	b672      	cpsid	i
    2854:	e7fe      	b.n	2854 <xQueueReceive+0x44>
    2856:	2700      	movs	r7, #0
    2858:	e02b      	b.n	28b2 <xQueueReceive+0xa2>
    285a:	0031      	movs	r1, r6
    285c:	0020      	movs	r0, r4
    285e:	4b37      	ldr	r3, [pc, #220]	; (293c <xQueueReceive+0x12c>)
    2860:	4798      	blx	r3
    2862:	3d01      	subs	r5, #1
    2864:	63a5      	str	r5, [r4, #56]	; 0x38
    2866:	6923      	ldr	r3, [r4, #16]
    2868:	2b00      	cmp	r3, #0
    286a:	d007      	beq.n	287c <xQueueReceive+0x6c>
    286c:	0020      	movs	r0, r4
    286e:	3010      	adds	r0, #16
    2870:	4b33      	ldr	r3, [pc, #204]	; (2940 <xQueueReceive+0x130>)
    2872:	4798      	blx	r3
    2874:	2800      	cmp	r0, #0
    2876:	d001      	beq.n	287c <xQueueReceive+0x6c>
    2878:	4b32      	ldr	r3, [pc, #200]	; (2944 <xQueueReceive+0x134>)
    287a:	4798      	blx	r3
    287c:	4b32      	ldr	r3, [pc, #200]	; (2948 <xQueueReceive+0x138>)
    287e:	4798      	blx	r3
    2880:	2001      	movs	r0, #1
    2882:	b005      	add	sp, #20
    2884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2886:	4b30      	ldr	r3, [pc, #192]	; (2948 <xQueueReceive+0x138>)
    2888:	4798      	blx	r3
    288a:	2000      	movs	r0, #0
    288c:	e7f9      	b.n	2882 <xQueueReceive+0x72>
    288e:	a802      	add	r0, sp, #8
    2890:	4b2e      	ldr	r3, [pc, #184]	; (294c <xQueueReceive+0x13c>)
    2892:	4798      	blx	r3
    2894:	3701      	adds	r7, #1
    2896:	e016      	b.n	28c6 <xQueueReceive+0xb6>
    2898:	2200      	movs	r2, #0
    289a:	2344      	movs	r3, #68	; 0x44
    289c:	54e2      	strb	r2, [r4, r3]
    289e:	e01d      	b.n	28dc <xQueueReceive+0xcc>
    28a0:	2200      	movs	r2, #0
    28a2:	2345      	movs	r3, #69	; 0x45
    28a4:	54e2      	strb	r2, [r4, r3]
    28a6:	e01e      	b.n	28e6 <xQueueReceive+0xd6>
    28a8:	0020      	movs	r0, r4
    28aa:	4b29      	ldr	r3, [pc, #164]	; (2950 <xQueueReceive+0x140>)
    28ac:	4798      	blx	r3
    28ae:	4b29      	ldr	r3, [pc, #164]	; (2954 <xQueueReceive+0x144>)
    28b0:	4798      	blx	r3
    28b2:	4b29      	ldr	r3, [pc, #164]	; (2958 <xQueueReceive+0x148>)
    28b4:	4798      	blx	r3
    28b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    28b8:	2d00      	cmp	r5, #0
    28ba:	d1ce      	bne.n	285a <xQueueReceive+0x4a>
    28bc:	9b01      	ldr	r3, [sp, #4]
    28be:	2b00      	cmp	r3, #0
    28c0:	d0e1      	beq.n	2886 <xQueueReceive+0x76>
    28c2:	2f00      	cmp	r7, #0
    28c4:	d0e3      	beq.n	288e <xQueueReceive+0x7e>
    28c6:	4b20      	ldr	r3, [pc, #128]	; (2948 <xQueueReceive+0x138>)
    28c8:	4798      	blx	r3
    28ca:	4b24      	ldr	r3, [pc, #144]	; (295c <xQueueReceive+0x14c>)
    28cc:	4798      	blx	r3
    28ce:	4b22      	ldr	r3, [pc, #136]	; (2958 <xQueueReceive+0x148>)
    28d0:	4798      	blx	r3
    28d2:	2344      	movs	r3, #68	; 0x44
    28d4:	5ce3      	ldrb	r3, [r4, r3]
    28d6:	b25b      	sxtb	r3, r3
    28d8:	3301      	adds	r3, #1
    28da:	d0dd      	beq.n	2898 <xQueueReceive+0x88>
    28dc:	2345      	movs	r3, #69	; 0x45
    28de:	5ce3      	ldrb	r3, [r4, r3]
    28e0:	b25b      	sxtb	r3, r3
    28e2:	3301      	adds	r3, #1
    28e4:	d0dc      	beq.n	28a0 <xQueueReceive+0x90>
    28e6:	4b18      	ldr	r3, [pc, #96]	; (2948 <xQueueReceive+0x138>)
    28e8:	4798      	blx	r3
    28ea:	a901      	add	r1, sp, #4
    28ec:	a802      	add	r0, sp, #8
    28ee:	4b1c      	ldr	r3, [pc, #112]	; (2960 <xQueueReceive+0x150>)
    28f0:	4798      	blx	r3
    28f2:	2800      	cmp	r0, #0
    28f4:	d113      	bne.n	291e <xQueueReceive+0x10e>
    28f6:	0020      	movs	r0, r4
    28f8:	4b1a      	ldr	r3, [pc, #104]	; (2964 <xQueueReceive+0x154>)
    28fa:	4798      	blx	r3
    28fc:	2800      	cmp	r0, #0
    28fe:	d0d3      	beq.n	28a8 <xQueueReceive+0x98>
    2900:	0020      	movs	r0, r4
    2902:	3024      	adds	r0, #36	; 0x24
    2904:	9901      	ldr	r1, [sp, #4]
    2906:	4b18      	ldr	r3, [pc, #96]	; (2968 <xQueueReceive+0x158>)
    2908:	4798      	blx	r3
    290a:	0020      	movs	r0, r4
    290c:	4b10      	ldr	r3, [pc, #64]	; (2950 <xQueueReceive+0x140>)
    290e:	4798      	blx	r3
    2910:	4b10      	ldr	r3, [pc, #64]	; (2954 <xQueueReceive+0x144>)
    2912:	4798      	blx	r3
    2914:	2800      	cmp	r0, #0
    2916:	d1cc      	bne.n	28b2 <xQueueReceive+0xa2>
    2918:	4b0a      	ldr	r3, [pc, #40]	; (2944 <xQueueReceive+0x134>)
    291a:	4798      	blx	r3
    291c:	e7c9      	b.n	28b2 <xQueueReceive+0xa2>
    291e:	0020      	movs	r0, r4
    2920:	4b0b      	ldr	r3, [pc, #44]	; (2950 <xQueueReceive+0x140>)
    2922:	4798      	blx	r3
    2924:	4b0b      	ldr	r3, [pc, #44]	; (2954 <xQueueReceive+0x144>)
    2926:	4798      	blx	r3
    2928:	0020      	movs	r0, r4
    292a:	4b0e      	ldr	r3, [pc, #56]	; (2964 <xQueueReceive+0x154>)
    292c:	4798      	blx	r3
    292e:	2800      	cmp	r0, #0
    2930:	d0bf      	beq.n	28b2 <xQueueReceive+0xa2>
    2932:	2000      	movs	r0, #0
    2934:	e7a5      	b.n	2882 <xQueueReceive+0x72>
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	00003105 	.word	0x00003105
    293c:	000023d9 	.word	0x000023d9
    2940:	00002ff9 	.word	0x00002ff9
    2944:	00001fed 	.word	0x00001fed
    2948:	0000201d 	.word	0x0000201d
    294c:	00003079 	.word	0x00003079
    2950:	00002401 	.word	0x00002401
    2954:	00002e25 	.word	0x00002e25
    2958:	00002005 	.word	0x00002005
    295c:	00002d01 	.word	0x00002d01
    2960:	00003089 	.word	0x00003089
    2964:	000022c1 	.word	0x000022c1
    2968:	00002f95 	.word	0x00002f95

0000296c <vQueueWaitForMessageRestricted>:
    296c:	b570      	push	{r4, r5, r6, lr}
    296e:	0004      	movs	r4, r0
    2970:	000d      	movs	r5, r1
    2972:	0016      	movs	r6, r2
    2974:	4b11      	ldr	r3, [pc, #68]	; (29bc <vQueueWaitForMessageRestricted+0x50>)
    2976:	4798      	blx	r3
    2978:	2344      	movs	r3, #68	; 0x44
    297a:	5ce3      	ldrb	r3, [r4, r3]
    297c:	b25b      	sxtb	r3, r3
    297e:	3301      	adds	r3, #1
    2980:	d00d      	beq.n	299e <vQueueWaitForMessageRestricted+0x32>
    2982:	2345      	movs	r3, #69	; 0x45
    2984:	5ce3      	ldrb	r3, [r4, r3]
    2986:	b25b      	sxtb	r3, r3
    2988:	3301      	adds	r3, #1
    298a:	d00c      	beq.n	29a6 <vQueueWaitForMessageRestricted+0x3a>
    298c:	4b0c      	ldr	r3, [pc, #48]	; (29c0 <vQueueWaitForMessageRestricted+0x54>)
    298e:	4798      	blx	r3
    2990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2992:	2b00      	cmp	r3, #0
    2994:	d00b      	beq.n	29ae <vQueueWaitForMessageRestricted+0x42>
    2996:	0020      	movs	r0, r4
    2998:	4b0a      	ldr	r3, [pc, #40]	; (29c4 <vQueueWaitForMessageRestricted+0x58>)
    299a:	4798      	blx	r3
    299c:	bd70      	pop	{r4, r5, r6, pc}
    299e:	2200      	movs	r2, #0
    29a0:	2344      	movs	r3, #68	; 0x44
    29a2:	54e2      	strb	r2, [r4, r3]
    29a4:	e7ed      	b.n	2982 <vQueueWaitForMessageRestricted+0x16>
    29a6:	2200      	movs	r2, #0
    29a8:	2345      	movs	r3, #69	; 0x45
    29aa:	54e2      	strb	r2, [r4, r3]
    29ac:	e7ee      	b.n	298c <vQueueWaitForMessageRestricted+0x20>
    29ae:	0020      	movs	r0, r4
    29b0:	3024      	adds	r0, #36	; 0x24
    29b2:	0032      	movs	r2, r6
    29b4:	0029      	movs	r1, r5
    29b6:	4b04      	ldr	r3, [pc, #16]	; (29c8 <vQueueWaitForMessageRestricted+0x5c>)
    29b8:	4798      	blx	r3
    29ba:	e7ec      	b.n	2996 <vQueueWaitForMessageRestricted+0x2a>
    29bc:	00002005 	.word	0x00002005
    29c0:	0000201d 	.word	0x0000201d
    29c4:	00002401 	.word	0x00002401
    29c8:	00002fc1 	.word	0x00002fc1

000029cc <prvResetNextTaskUnblockTime>:
    29cc:	4b0a      	ldr	r3, [pc, #40]	; (29f8 <prvResetNextTaskUnblockTime+0x2c>)
    29ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	2b00      	cmp	r3, #0
    29d4:	d109      	bne.n	29ea <prvResetNextTaskUnblockTime+0x1e>
    29d6:	3301      	adds	r3, #1
    29d8:	2b00      	cmp	r3, #0
    29da:	d108      	bne.n	29ee <prvResetNextTaskUnblockTime+0x22>
    29dc:	4b06      	ldr	r3, [pc, #24]	; (29f8 <prvResetNextTaskUnblockTime+0x2c>)
    29de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    29e0:	68d2      	ldr	r2, [r2, #12]
    29e2:	68d2      	ldr	r2, [r2, #12]
    29e4:	6852      	ldr	r2, [r2, #4]
    29e6:	62da      	str	r2, [r3, #44]	; 0x2c
    29e8:	4770      	bx	lr
    29ea:	2300      	movs	r3, #0
    29ec:	e7f4      	b.n	29d8 <prvResetNextTaskUnblockTime+0xc>
    29ee:	2201      	movs	r2, #1
    29f0:	4252      	negs	r2, r2
    29f2:	4b01      	ldr	r3, [pc, #4]	; (29f8 <prvResetNextTaskUnblockTime+0x2c>)
    29f4:	62da      	str	r2, [r3, #44]	; 0x2c
    29f6:	e7f7      	b.n	29e8 <prvResetNextTaskUnblockTime+0x1c>
    29f8:	200027c4 	.word	0x200027c4

000029fc <prvInitialiseNewTask>:
    29fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29fe:	46c6      	mov	lr, r8
    2a00:	b500      	push	{lr}
    2a02:	b082      	sub	sp, #8
    2a04:	9000      	str	r0, [sp, #0]
    2a06:	000f      	movs	r7, r1
    2a08:	0015      	movs	r5, r2
    2a0a:	9301      	str	r3, [sp, #4]
    2a0c:	9c08      	ldr	r4, [sp, #32]
    2a0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    2a10:	0092      	lsls	r2, r2, #2
    2a12:	21a5      	movs	r1, #165	; 0xa5
    2a14:	6b30      	ldr	r0, [r6, #48]	; 0x30
    2a16:	4b1f      	ldr	r3, [pc, #124]	; (2a94 <prvInitialiseNewTask+0x98>)
    2a18:	4798      	blx	r3
    2a1a:	4b1f      	ldr	r3, [pc, #124]	; (2a98 <prvInitialiseNewTask+0x9c>)
    2a1c:	18eb      	adds	r3, r5, r3
    2a1e:	009b      	lsls	r3, r3, #2
    2a20:	6b32      	ldr	r2, [r6, #48]	; 0x30
    2a22:	4694      	mov	ip, r2
    2a24:	4463      	add	r3, ip
    2a26:	2207      	movs	r2, #7
    2a28:	4393      	bics	r3, r2
    2a2a:	4698      	mov	r8, r3
    2a2c:	2300      	movs	r3, #0
    2a2e:	2b07      	cmp	r3, #7
    2a30:	d809      	bhi.n	2a46 <prvInitialiseNewTask+0x4a>
    2a32:	18f9      	adds	r1, r7, r3
    2a34:	7808      	ldrb	r0, [r1, #0]
    2a36:	18f2      	adds	r2, r6, r3
    2a38:	3234      	adds	r2, #52	; 0x34
    2a3a:	7010      	strb	r0, [r2, #0]
    2a3c:	780a      	ldrb	r2, [r1, #0]
    2a3e:	2a00      	cmp	r2, #0
    2a40:	d001      	beq.n	2a46 <prvInitialiseNewTask+0x4a>
    2a42:	3301      	adds	r3, #1
    2a44:	e7f3      	b.n	2a2e <prvInitialiseNewTask+0x32>
    2a46:	2200      	movs	r2, #0
    2a48:	233b      	movs	r3, #59	; 0x3b
    2a4a:	54f2      	strb	r2, [r6, r3]
    2a4c:	2c04      	cmp	r4, #4
    2a4e:	d900      	bls.n	2a52 <prvInitialiseNewTask+0x56>
    2a50:	2404      	movs	r4, #4
    2a52:	62f4      	str	r4, [r6, #44]	; 0x2c
    2a54:	6474      	str	r4, [r6, #68]	; 0x44
    2a56:	2500      	movs	r5, #0
    2a58:	64b5      	str	r5, [r6, #72]	; 0x48
    2a5a:	1d30      	adds	r0, r6, #4
    2a5c:	4f0f      	ldr	r7, [pc, #60]	; (2a9c <prvInitialiseNewTask+0xa0>)
    2a5e:	47b8      	blx	r7
    2a60:	0030      	movs	r0, r6
    2a62:	3018      	adds	r0, #24
    2a64:	47b8      	blx	r7
    2a66:	6136      	str	r6, [r6, #16]
    2a68:	2305      	movs	r3, #5
    2a6a:	1b1c      	subs	r4, r3, r4
    2a6c:	61b4      	str	r4, [r6, #24]
    2a6e:	6276      	str	r6, [r6, #36]	; 0x24
    2a70:	64f5      	str	r5, [r6, #76]	; 0x4c
    2a72:	334b      	adds	r3, #75	; 0x4b
    2a74:	54f5      	strb	r5, [r6, r3]
    2a76:	9a01      	ldr	r2, [sp, #4]
    2a78:	9900      	ldr	r1, [sp, #0]
    2a7a:	4640      	mov	r0, r8
    2a7c:	4b08      	ldr	r3, [pc, #32]	; (2aa0 <prvInitialiseNewTask+0xa4>)
    2a7e:	4798      	blx	r3
    2a80:	6030      	str	r0, [r6, #0]
    2a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a84:	2b00      	cmp	r3, #0
    2a86:	d000      	beq.n	2a8a <prvInitialiseNewTask+0x8e>
    2a88:	601e      	str	r6, [r3, #0]
    2a8a:	b002      	add	sp, #8
    2a8c:	bc04      	pop	{r2}
    2a8e:	4690      	mov	r8, r2
    2a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	0000362f 	.word	0x0000362f
    2a98:	3fffffff 	.word	0x3fffffff
    2a9c:	00001e7b 	.word	0x00001e7b
    2aa0:	00001f7d 	.word	0x00001f7d

00002aa4 <prvIdleTask>:
    2aa4:	b510      	push	{r4, lr}
    2aa6:	4b03      	ldr	r3, [pc, #12]	; (2ab4 <prvIdleTask+0x10>)
    2aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2aaa:	2b01      	cmp	r3, #1
    2aac:	d9fb      	bls.n	2aa6 <prvIdleTask+0x2>
    2aae:	4b02      	ldr	r3, [pc, #8]	; (2ab8 <prvIdleTask+0x14>)
    2ab0:	4798      	blx	r3
    2ab2:	e7f8      	b.n	2aa6 <prvIdleTask+0x2>
    2ab4:	200027c4 	.word	0x200027c4
    2ab8:	00001fed 	.word	0x00001fed

00002abc <prvInitialiseTaskLists>:
    2abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2abe:	46c6      	mov	lr, r8
    2ac0:	b500      	push	{lr}
    2ac2:	2400      	movs	r4, #0
    2ac4:	e008      	b.n	2ad8 <prvInitialiseTaskLists+0x1c>
    2ac6:	00a3      	lsls	r3, r4, #2
    2ac8:	191b      	adds	r3, r3, r4
    2aca:	009a      	lsls	r2, r3, #2
    2acc:	480f      	ldr	r0, [pc, #60]	; (2b0c <prvInitialiseTaskLists+0x50>)
    2ace:	3030      	adds	r0, #48	; 0x30
    2ad0:	1880      	adds	r0, r0, r2
    2ad2:	4b0f      	ldr	r3, [pc, #60]	; (2b10 <prvInitialiseTaskLists+0x54>)
    2ad4:	4798      	blx	r3
    2ad6:	3401      	adds	r4, #1
    2ad8:	2c04      	cmp	r4, #4
    2ada:	d9f4      	bls.n	2ac6 <prvInitialiseTaskLists+0xa>
    2adc:	4d0d      	ldr	r5, [pc, #52]	; (2b14 <prvInitialiseTaskLists+0x58>)
    2ade:	2314      	movs	r3, #20
    2ae0:	4698      	mov	r8, r3
    2ae2:	44a8      	add	r8, r5
    2ae4:	4640      	mov	r0, r8
    2ae6:	4c0a      	ldr	r4, [pc, #40]	; (2b10 <prvInitialiseTaskLists+0x54>)
    2ae8:	47a0      	blx	r4
    2aea:	002f      	movs	r7, r5
    2aec:	3728      	adds	r7, #40	; 0x28
    2aee:	0038      	movs	r0, r7
    2af0:	47a0      	blx	r4
    2af2:	4e06      	ldr	r6, [pc, #24]	; (2b0c <prvInitialiseTaskLists+0x50>)
    2af4:	0030      	movs	r0, r6
    2af6:	3014      	adds	r0, #20
    2af8:	47a0      	blx	r4
    2afa:	0030      	movs	r0, r6
    2afc:	47a0      	blx	r4
    2afe:	4643      	mov	r3, r8
    2b00:	62b3      	str	r3, [r6, #40]	; 0x28
    2b02:	63ef      	str	r7, [r5, #60]	; 0x3c
    2b04:	bc04      	pop	{r2}
    2b06:	4690      	mov	r8, r2
    2b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	200027c4 	.word	0x200027c4
    2b10:	00001e65 	.word	0x00001e65
    2b14:	20002844 	.word	0x20002844

00002b18 <prvAddNewTaskToReadyList>:
    2b18:	b510      	push	{r4, lr}
    2b1a:	0004      	movs	r4, r0
    2b1c:	4b1f      	ldr	r3, [pc, #124]	; (2b9c <prvAddNewTaskToReadyList+0x84>)
    2b1e:	4798      	blx	r3
    2b20:	4b1f      	ldr	r3, [pc, #124]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2b24:	3201      	adds	r2, #1
    2b26:	641a      	str	r2, [r3, #64]	; 0x40
    2b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d02b      	beq.n	2b86 <prvAddNewTaskToReadyList+0x6e>
    2b2e:	4b1c      	ldr	r3, [pc, #112]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b32:	2b00      	cmp	r3, #0
    2b34:	d107      	bne.n	2b46 <prvAddNewTaskToReadyList+0x2e>
    2b36:	4b1a      	ldr	r3, [pc, #104]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2b3e:	4293      	cmp	r3, r2
    2b40:	d801      	bhi.n	2b46 <prvAddNewTaskToReadyList+0x2e>
    2b42:	4b17      	ldr	r3, [pc, #92]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b44:	645c      	str	r4, [r3, #68]	; 0x44
    2b46:	4916      	ldr	r1, [pc, #88]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b48:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    2b4a:	3301      	adds	r3, #1
    2b4c:	64cb      	str	r3, [r1, #76]	; 0x4c
    2b4e:	63e3      	str	r3, [r4, #60]	; 0x3c
    2b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2b52:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    2b54:	429a      	cmp	r2, r3
    2b56:	d900      	bls.n	2b5a <prvAddNewTaskToReadyList+0x42>
    2b58:	650a      	str	r2, [r1, #80]	; 0x50
    2b5a:	1d21      	adds	r1, r4, #4
    2b5c:	0093      	lsls	r3, r2, #2
    2b5e:	189b      	adds	r3, r3, r2
    2b60:	009a      	lsls	r2, r3, #2
    2b62:	4810      	ldr	r0, [pc, #64]	; (2ba4 <prvAddNewTaskToReadyList+0x8c>)
    2b64:	3030      	adds	r0, #48	; 0x30
    2b66:	1880      	adds	r0, r0, r2
    2b68:	4b0f      	ldr	r3, [pc, #60]	; (2ba8 <prvAddNewTaskToReadyList+0x90>)
    2b6a:	4798      	blx	r3
    2b6c:	4b0f      	ldr	r3, [pc, #60]	; (2bac <prvAddNewTaskToReadyList+0x94>)
    2b6e:	4798      	blx	r3
    2b70:	4b0b      	ldr	r3, [pc, #44]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b74:	2b00      	cmp	r3, #0
    2b76:	d005      	beq.n	2b84 <prvAddNewTaskToReadyList+0x6c>
    2b78:	4b09      	ldr	r3, [pc, #36]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2b80:	429a      	cmp	r2, r3
    2b82:	d308      	bcc.n	2b96 <prvAddNewTaskToReadyList+0x7e>
    2b84:	bd10      	pop	{r4, pc}
    2b86:	4b06      	ldr	r3, [pc, #24]	; (2ba0 <prvAddNewTaskToReadyList+0x88>)
    2b88:	645c      	str	r4, [r3, #68]	; 0x44
    2b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	d1da      	bne.n	2b46 <prvAddNewTaskToReadyList+0x2e>
    2b90:	4b07      	ldr	r3, [pc, #28]	; (2bb0 <prvAddNewTaskToReadyList+0x98>)
    2b92:	4798      	blx	r3
    2b94:	e7d7      	b.n	2b46 <prvAddNewTaskToReadyList+0x2e>
    2b96:	4b07      	ldr	r3, [pc, #28]	; (2bb4 <prvAddNewTaskToReadyList+0x9c>)
    2b98:	4798      	blx	r3
    2b9a:	e7f3      	b.n	2b84 <prvAddNewTaskToReadyList+0x6c>
    2b9c:	00002005 	.word	0x00002005
    2ba0:	20002844 	.word	0x20002844
    2ba4:	200027c4 	.word	0x200027c4
    2ba8:	00001e81 	.word	0x00001e81
    2bac:	0000201d 	.word	0x0000201d
    2bb0:	00002abd 	.word	0x00002abd
    2bb4:	00001fed 	.word	0x00001fed

00002bb8 <prvAddCurrentTaskToDelayedList>:
    2bb8:	b570      	push	{r4, r5, r6, lr}
    2bba:	0004      	movs	r4, r0
    2bbc:	000d      	movs	r5, r1
    2bbe:	4b15      	ldr	r3, [pc, #84]	; (2c14 <prvAddCurrentTaskToDelayedList+0x5c>)
    2bc0:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    2bc2:	6c58      	ldr	r0, [r3, #68]	; 0x44
    2bc4:	3004      	adds	r0, #4
    2bc6:	4b14      	ldr	r3, [pc, #80]	; (2c18 <prvAddCurrentTaskToDelayedList+0x60>)
    2bc8:	4798      	blx	r3
    2bca:	1c63      	adds	r3, r4, #1
    2bcc:	d012      	beq.n	2bf4 <prvAddCurrentTaskToDelayedList+0x3c>
    2bce:	1934      	adds	r4, r6, r4
    2bd0:	4b10      	ldr	r3, [pc, #64]	; (2c14 <prvAddCurrentTaskToDelayedList+0x5c>)
    2bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2bd4:	605c      	str	r4, [r3, #4]
    2bd6:	42a6      	cmp	r6, r4
    2bd8:	d815      	bhi.n	2c06 <prvAddCurrentTaskToDelayedList+0x4e>
    2bda:	4d10      	ldr	r5, [pc, #64]	; (2c1c <prvAddCurrentTaskToDelayedList+0x64>)
    2bdc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2bde:	4b0d      	ldr	r3, [pc, #52]	; (2c14 <prvAddCurrentTaskToDelayedList+0x5c>)
    2be0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2be2:	3104      	adds	r1, #4
    2be4:	4b0e      	ldr	r3, [pc, #56]	; (2c20 <prvAddCurrentTaskToDelayedList+0x68>)
    2be6:	4798      	blx	r3
    2be8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2bea:	429c      	cmp	r4, r3
    2bec:	d211      	bcs.n	2c12 <prvAddCurrentTaskToDelayedList+0x5a>
    2bee:	4b0b      	ldr	r3, [pc, #44]	; (2c1c <prvAddCurrentTaskToDelayedList+0x64>)
    2bf0:	62dc      	str	r4, [r3, #44]	; 0x2c
    2bf2:	e00e      	b.n	2c12 <prvAddCurrentTaskToDelayedList+0x5a>
    2bf4:	2d00      	cmp	r5, #0
    2bf6:	d0ea      	beq.n	2bce <prvAddCurrentTaskToDelayedList+0x16>
    2bf8:	4b06      	ldr	r3, [pc, #24]	; (2c14 <prvAddCurrentTaskToDelayedList+0x5c>)
    2bfa:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2bfc:	3104      	adds	r1, #4
    2bfe:	4807      	ldr	r0, [pc, #28]	; (2c1c <prvAddCurrentTaskToDelayedList+0x64>)
    2c00:	4b08      	ldr	r3, [pc, #32]	; (2c24 <prvAddCurrentTaskToDelayedList+0x6c>)
    2c02:	4798      	blx	r3
    2c04:	e005      	b.n	2c12 <prvAddCurrentTaskToDelayedList+0x5a>
    2c06:	4b03      	ldr	r3, [pc, #12]	; (2c14 <prvAddCurrentTaskToDelayedList+0x5c>)
    2c08:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2c0a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2c0c:	3104      	adds	r1, #4
    2c0e:	4b04      	ldr	r3, [pc, #16]	; (2c20 <prvAddCurrentTaskToDelayedList+0x68>)
    2c10:	4798      	blx	r3
    2c12:	bd70      	pop	{r4, r5, r6, pc}
    2c14:	20002844 	.word	0x20002844
    2c18:	00001ec9 	.word	0x00001ec9
    2c1c:	200027c4 	.word	0x200027c4
    2c20:	00001e99 	.word	0x00001e99
    2c24:	00001e81 	.word	0x00001e81

00002c28 <xTaskCreate>:
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2a:	b087      	sub	sp, #28
    2c2c:	9004      	str	r0, [sp, #16]
    2c2e:	9105      	str	r1, [sp, #20]
    2c30:	0014      	movs	r4, r2
    2c32:	001f      	movs	r7, r3
    2c34:	0090      	lsls	r0, r2, #2
    2c36:	4b14      	ldr	r3, [pc, #80]	; (2c88 <xTaskCreate+0x60>)
    2c38:	4798      	blx	r3
    2c3a:	1e06      	subs	r6, r0, #0
    2c3c:	d01e      	beq.n	2c7c <xTaskCreate+0x54>
    2c3e:	2054      	movs	r0, #84	; 0x54
    2c40:	4b11      	ldr	r3, [pc, #68]	; (2c88 <xTaskCreate+0x60>)
    2c42:	4798      	blx	r3
    2c44:	1e05      	subs	r5, r0, #0
    2c46:	d015      	beq.n	2c74 <xTaskCreate+0x4c>
    2c48:	6306      	str	r6, [r0, #48]	; 0x30
    2c4a:	2d00      	cmp	r5, #0
    2c4c:	d018      	beq.n	2c80 <xTaskCreate+0x58>
    2c4e:	2300      	movs	r3, #0
    2c50:	9303      	str	r3, [sp, #12]
    2c52:	9502      	str	r5, [sp, #8]
    2c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2c56:	9301      	str	r3, [sp, #4]
    2c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c5a:	9300      	str	r3, [sp, #0]
    2c5c:	003b      	movs	r3, r7
    2c5e:	0022      	movs	r2, r4
    2c60:	9905      	ldr	r1, [sp, #20]
    2c62:	9804      	ldr	r0, [sp, #16]
    2c64:	4c09      	ldr	r4, [pc, #36]	; (2c8c <xTaskCreate+0x64>)
    2c66:	47a0      	blx	r4
    2c68:	0028      	movs	r0, r5
    2c6a:	4b09      	ldr	r3, [pc, #36]	; (2c90 <xTaskCreate+0x68>)
    2c6c:	4798      	blx	r3
    2c6e:	2001      	movs	r0, #1
    2c70:	b007      	add	sp, #28
    2c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c74:	0030      	movs	r0, r6
    2c76:	4b07      	ldr	r3, [pc, #28]	; (2c94 <xTaskCreate+0x6c>)
    2c78:	4798      	blx	r3
    2c7a:	e7e6      	b.n	2c4a <xTaskCreate+0x22>
    2c7c:	2500      	movs	r5, #0
    2c7e:	e7e4      	b.n	2c4a <xTaskCreate+0x22>
    2c80:	2001      	movs	r0, #1
    2c82:	4240      	negs	r0, r0
    2c84:	e7f4      	b.n	2c70 <xTaskCreate+0x48>
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	00002165 	.word	0x00002165
    2c8c:	000029fd 	.word	0x000029fd
    2c90:	00002b19 	.word	0x00002b19
    2c94:	0000223d 	.word	0x0000223d

00002c98 <vTaskStartScheduler>:
    2c98:	b510      	push	{r4, lr}
    2c9a:	b082      	sub	sp, #8
    2c9c:	4b11      	ldr	r3, [pc, #68]	; (2ce4 <vTaskStartScheduler+0x4c>)
    2c9e:	335c      	adds	r3, #92	; 0x5c
    2ca0:	9301      	str	r3, [sp, #4]
    2ca2:	2300      	movs	r3, #0
    2ca4:	9300      	str	r3, [sp, #0]
    2ca6:	2240      	movs	r2, #64	; 0x40
    2ca8:	490f      	ldr	r1, [pc, #60]	; (2ce8 <vTaskStartScheduler+0x50>)
    2caa:	4810      	ldr	r0, [pc, #64]	; (2cec <vTaskStartScheduler+0x54>)
    2cac:	4c10      	ldr	r4, [pc, #64]	; (2cf0 <vTaskStartScheduler+0x58>)
    2cae:	47a0      	blx	r4
    2cb0:	2801      	cmp	r0, #1
    2cb2:	d005      	beq.n	2cc0 <vTaskStartScheduler+0x28>
    2cb4:	2801      	cmp	r0, #1
    2cb6:	d006      	beq.n	2cc6 <vTaskStartScheduler+0x2e>
    2cb8:	1c43      	adds	r3, r0, #1
    2cba:	d011      	beq.n	2ce0 <vTaskStartScheduler+0x48>
    2cbc:	b002      	add	sp, #8
    2cbe:	bd10      	pop	{r4, pc}
    2cc0:	4b0c      	ldr	r3, [pc, #48]	; (2cf4 <vTaskStartScheduler+0x5c>)
    2cc2:	4798      	blx	r3
    2cc4:	e7f6      	b.n	2cb4 <vTaskStartScheduler+0x1c>
    2cc6:	b672      	cpsid	i
    2cc8:	2201      	movs	r2, #1
    2cca:	4252      	negs	r2, r2
    2ccc:	4b0a      	ldr	r3, [pc, #40]	; (2cf8 <vTaskStartScheduler+0x60>)
    2cce:	62da      	str	r2, [r3, #44]	; 0x2c
    2cd0:	4b04      	ldr	r3, [pc, #16]	; (2ce4 <vTaskStartScheduler+0x4c>)
    2cd2:	3202      	adds	r2, #2
    2cd4:	649a      	str	r2, [r3, #72]	; 0x48
    2cd6:	2200      	movs	r2, #0
    2cd8:	655a      	str	r2, [r3, #84]	; 0x54
    2cda:	4b08      	ldr	r3, [pc, #32]	; (2cfc <vTaskStartScheduler+0x64>)
    2cdc:	4798      	blx	r3
    2cde:	e7ed      	b.n	2cbc <vTaskStartScheduler+0x24>
    2ce0:	b672      	cpsid	i
    2ce2:	e7fe      	b.n	2ce2 <vTaskStartScheduler+0x4a>
    2ce4:	20002844 	.word	0x20002844
    2ce8:	000038a0 	.word	0x000038a0
    2cec:	00002aa5 	.word	0x00002aa5
    2cf0:	00002c29 	.word	0x00002c29
    2cf4:	00003259 	.word	0x00003259
    2cf8:	200027c4 	.word	0x200027c4
    2cfc:	00001fa1 	.word	0x00001fa1

00002d00 <vTaskSuspendAll>:
    2d00:	4a02      	ldr	r2, [pc, #8]	; (2d0c <vTaskSuspendAll+0xc>)
    2d02:	6d93      	ldr	r3, [r2, #88]	; 0x58
    2d04:	3301      	adds	r3, #1
    2d06:	6593      	str	r3, [r2, #88]	; 0x58
    2d08:	4770      	bx	lr
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	20002844 	.word	0x20002844

00002d10 <xTaskGetTickCount>:
    2d10:	4b01      	ldr	r3, [pc, #4]	; (2d18 <xTaskGetTickCount+0x8>)
    2d12:	6d58      	ldr	r0, [r3, #84]	; 0x54
    2d14:	4770      	bx	lr
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	20002844 	.word	0x20002844

00002d1c <xTaskIncrementTick>:
    2d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d1e:	4b3c      	ldr	r3, [pc, #240]	; (2e10 <xTaskIncrementTick+0xf4>)
    2d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2d22:	2b00      	cmp	r3, #0
    2d24:	d167      	bne.n	2df6 <xTaskIncrementTick+0xda>
    2d26:	4b3a      	ldr	r3, [pc, #232]	; (2e10 <xTaskIncrementTick+0xf4>)
    2d28:	6d5d      	ldr	r5, [r3, #84]	; 0x54
    2d2a:	3501      	adds	r5, #1
    2d2c:	655d      	str	r5, [r3, #84]	; 0x54
    2d2e:	2d00      	cmp	r5, #0
    2d30:	d111      	bne.n	2d56 <xTaskIncrementTick+0x3a>
    2d32:	4b38      	ldr	r3, [pc, #224]	; (2e14 <xTaskIncrementTick+0xf8>)
    2d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d001      	beq.n	2d40 <xTaskIncrementTick+0x24>
    2d3c:	b672      	cpsid	i
    2d3e:	e7fe      	b.n	2d3e <xTaskIncrementTick+0x22>
    2d40:	4a34      	ldr	r2, [pc, #208]	; (2e14 <xTaskIncrementTick+0xf8>)
    2d42:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2d44:	4b32      	ldr	r3, [pc, #200]	; (2e10 <xTaskIncrementTick+0xf4>)
    2d46:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2d48:	6290      	str	r0, [r2, #40]	; 0x28
    2d4a:	63d9      	str	r1, [r3, #60]	; 0x3c
    2d4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2d4e:	3201      	adds	r2, #1
    2d50:	661a      	str	r2, [r3, #96]	; 0x60
    2d52:	4b31      	ldr	r3, [pc, #196]	; (2e18 <xTaskIncrementTick+0xfc>)
    2d54:	4798      	blx	r3
    2d56:	4b2f      	ldr	r3, [pc, #188]	; (2e14 <xTaskIncrementTick+0xf8>)
    2d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d5a:	429d      	cmp	r5, r3
    2d5c:	d23f      	bcs.n	2dde <xTaskIncrementTick+0xc2>
    2d5e:	2400      	movs	r4, #0
    2d60:	4b2b      	ldr	r3, [pc, #172]	; (2e10 <xTaskIncrementTick+0xf4>)
    2d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d66:	0093      	lsls	r3, r2, #2
    2d68:	189b      	adds	r3, r3, r2
    2d6a:	009a      	lsls	r2, r3, #2
    2d6c:	4b29      	ldr	r3, [pc, #164]	; (2e14 <xTaskIncrementTick+0xf8>)
    2d6e:	189b      	adds	r3, r3, r2
    2d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d72:	2b01      	cmp	r3, #1
    2d74:	d944      	bls.n	2e00 <xTaskIncrementTick+0xe4>
    2d76:	2401      	movs	r4, #1
    2d78:	e042      	b.n	2e00 <xTaskIncrementTick+0xe4>
    2d7a:	2401      	movs	r4, #1
    2d7c:	4b25      	ldr	r3, [pc, #148]	; (2e14 <xTaskIncrementTick+0xf8>)
    2d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	2b00      	cmp	r3, #0
    2d84:	d02d      	beq.n	2de2 <xTaskIncrementTick+0xc6>
    2d86:	2300      	movs	r3, #0
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d12c      	bne.n	2de6 <xTaskIncrementTick+0xca>
    2d8c:	4b21      	ldr	r3, [pc, #132]	; (2e14 <xTaskIncrementTick+0xf8>)
    2d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d90:	68db      	ldr	r3, [r3, #12]
    2d92:	68de      	ldr	r6, [r3, #12]
    2d94:	6873      	ldr	r3, [r6, #4]
    2d96:	429d      	cmp	r5, r3
    2d98:	d32a      	bcc.n	2df0 <xTaskIncrementTick+0xd4>
    2d9a:	1d37      	adds	r7, r6, #4
    2d9c:	0038      	movs	r0, r7
    2d9e:	4b1f      	ldr	r3, [pc, #124]	; (2e1c <xTaskIncrementTick+0x100>)
    2da0:	4798      	blx	r3
    2da2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2da4:	2b00      	cmp	r3, #0
    2da6:	d003      	beq.n	2db0 <xTaskIncrementTick+0x94>
    2da8:	0030      	movs	r0, r6
    2daa:	3018      	adds	r0, #24
    2dac:	4b1b      	ldr	r3, [pc, #108]	; (2e1c <xTaskIncrementTick+0x100>)
    2dae:	4798      	blx	r3
    2db0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2db2:	4b17      	ldr	r3, [pc, #92]	; (2e10 <xTaskIncrementTick+0xf4>)
    2db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2db6:	429a      	cmp	r2, r3
    2db8:	d901      	bls.n	2dbe <xTaskIncrementTick+0xa2>
    2dba:	4b15      	ldr	r3, [pc, #84]	; (2e10 <xTaskIncrementTick+0xf4>)
    2dbc:	651a      	str	r2, [r3, #80]	; 0x50
    2dbe:	0093      	lsls	r3, r2, #2
    2dc0:	189b      	adds	r3, r3, r2
    2dc2:	009a      	lsls	r2, r3, #2
    2dc4:	4813      	ldr	r0, [pc, #76]	; (2e14 <xTaskIncrementTick+0xf8>)
    2dc6:	3030      	adds	r0, #48	; 0x30
    2dc8:	1880      	adds	r0, r0, r2
    2dca:	0039      	movs	r1, r7
    2dcc:	4b14      	ldr	r3, [pc, #80]	; (2e20 <xTaskIncrementTick+0x104>)
    2dce:	4798      	blx	r3
    2dd0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2dd2:	4b0f      	ldr	r3, [pc, #60]	; (2e10 <xTaskIncrementTick+0xf4>)
    2dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2dd8:	429a      	cmp	r2, r3
    2dda:	d2ce      	bcs.n	2d7a <xTaskIncrementTick+0x5e>
    2ddc:	e7ce      	b.n	2d7c <xTaskIncrementTick+0x60>
    2dde:	2400      	movs	r4, #0
    2de0:	e7cc      	b.n	2d7c <xTaskIncrementTick+0x60>
    2de2:	3301      	adds	r3, #1
    2de4:	e7d0      	b.n	2d88 <xTaskIncrementTick+0x6c>
    2de6:	2201      	movs	r2, #1
    2de8:	4252      	negs	r2, r2
    2dea:	4b0a      	ldr	r3, [pc, #40]	; (2e14 <xTaskIncrementTick+0xf8>)
    2dec:	62da      	str	r2, [r3, #44]	; 0x2c
    2dee:	e7b7      	b.n	2d60 <xTaskIncrementTick+0x44>
    2df0:	4a08      	ldr	r2, [pc, #32]	; (2e14 <xTaskIncrementTick+0xf8>)
    2df2:	62d3      	str	r3, [r2, #44]	; 0x2c
    2df4:	e7b4      	b.n	2d60 <xTaskIncrementTick+0x44>
    2df6:	4a06      	ldr	r2, [pc, #24]	; (2e10 <xTaskIncrementTick+0xf4>)
    2df8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    2dfa:	3301      	adds	r3, #1
    2dfc:	6653      	str	r3, [r2, #100]	; 0x64
    2dfe:	2400      	movs	r4, #0
    2e00:	4b03      	ldr	r3, [pc, #12]	; (2e10 <xTaskIncrementTick+0xf4>)
    2e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2e04:	2b00      	cmp	r3, #0
    2e06:	d000      	beq.n	2e0a <xTaskIncrementTick+0xee>
    2e08:	2401      	movs	r4, #1
    2e0a:	0020      	movs	r0, r4
    2e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	20002844 	.word	0x20002844
    2e14:	200027c4 	.word	0x200027c4
    2e18:	000029cd 	.word	0x000029cd
    2e1c:	00001ec9 	.word	0x00001ec9
    2e20:	00001e81 	.word	0x00001e81

00002e24 <xTaskResumeAll>:
    2e24:	b570      	push	{r4, r5, r6, lr}
    2e26:	4b32      	ldr	r3, [pc, #200]	; (2ef0 <xTaskResumeAll+0xcc>)
    2e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d101      	bne.n	2e32 <xTaskResumeAll+0xe>
    2e2e:	b672      	cpsid	i
    2e30:	e7fe      	b.n	2e30 <xTaskResumeAll+0xc>
    2e32:	4b30      	ldr	r3, [pc, #192]	; (2ef4 <xTaskResumeAll+0xd0>)
    2e34:	4798      	blx	r3
    2e36:	4b2e      	ldr	r3, [pc, #184]	; (2ef0 <xTaskResumeAll+0xcc>)
    2e38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    2e3a:	3a01      	subs	r2, #1
    2e3c:	659a      	str	r2, [r3, #88]	; 0x58
    2e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2e40:	2b00      	cmp	r3, #0
    2e42:	d150      	bne.n	2ee6 <xTaskResumeAll+0xc2>
    2e44:	4b2a      	ldr	r3, [pc, #168]	; (2ef0 <xTaskResumeAll+0xcc>)
    2e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d104      	bne.n	2e56 <xTaskResumeAll+0x32>
    2e4c:	2400      	movs	r4, #0
    2e4e:	4b2a      	ldr	r3, [pc, #168]	; (2ef8 <xTaskResumeAll+0xd4>)
    2e50:	4798      	blx	r3
    2e52:	0020      	movs	r0, r4
    2e54:	bd70      	pop	{r4, r5, r6, pc}
    2e56:	2400      	movs	r4, #0
    2e58:	4b28      	ldr	r3, [pc, #160]	; (2efc <xTaskResumeAll+0xd8>)
    2e5a:	695b      	ldr	r3, [r3, #20]
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d023      	beq.n	2ea8 <xTaskResumeAll+0x84>
    2e60:	4b26      	ldr	r3, [pc, #152]	; (2efc <xTaskResumeAll+0xd8>)
    2e62:	6a1b      	ldr	r3, [r3, #32]
    2e64:	68dc      	ldr	r4, [r3, #12]
    2e66:	0020      	movs	r0, r4
    2e68:	3018      	adds	r0, #24
    2e6a:	4e25      	ldr	r6, [pc, #148]	; (2f00 <xTaskResumeAll+0xdc>)
    2e6c:	47b0      	blx	r6
    2e6e:	1d25      	adds	r5, r4, #4
    2e70:	0028      	movs	r0, r5
    2e72:	47b0      	blx	r6
    2e74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2e76:	4b1e      	ldr	r3, [pc, #120]	; (2ef0 <xTaskResumeAll+0xcc>)
    2e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2e7a:	429a      	cmp	r2, r3
    2e7c:	d901      	bls.n	2e82 <xTaskResumeAll+0x5e>
    2e7e:	4b1c      	ldr	r3, [pc, #112]	; (2ef0 <xTaskResumeAll+0xcc>)
    2e80:	651a      	str	r2, [r3, #80]	; 0x50
    2e82:	0093      	lsls	r3, r2, #2
    2e84:	189b      	adds	r3, r3, r2
    2e86:	009a      	lsls	r2, r3, #2
    2e88:	481c      	ldr	r0, [pc, #112]	; (2efc <xTaskResumeAll+0xd8>)
    2e8a:	3030      	adds	r0, #48	; 0x30
    2e8c:	1880      	adds	r0, r0, r2
    2e8e:	0029      	movs	r1, r5
    2e90:	4b1c      	ldr	r3, [pc, #112]	; (2f04 <xTaskResumeAll+0xe0>)
    2e92:	4798      	blx	r3
    2e94:	4b16      	ldr	r3, [pc, #88]	; (2ef0 <xTaskResumeAll+0xcc>)
    2e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2e9c:	429a      	cmp	r2, r3
    2e9e:	d3db      	bcc.n	2e58 <xTaskResumeAll+0x34>
    2ea0:	2201      	movs	r2, #1
    2ea2:	4b13      	ldr	r3, [pc, #76]	; (2ef0 <xTaskResumeAll+0xcc>)
    2ea4:	669a      	str	r2, [r3, #104]	; 0x68
    2ea6:	e7d7      	b.n	2e58 <xTaskResumeAll+0x34>
    2ea8:	2c00      	cmp	r4, #0
    2eaa:	d001      	beq.n	2eb0 <xTaskResumeAll+0x8c>
    2eac:	4b16      	ldr	r3, [pc, #88]	; (2f08 <xTaskResumeAll+0xe4>)
    2eae:	4798      	blx	r3
    2eb0:	4b0f      	ldr	r3, [pc, #60]	; (2ef0 <xTaskResumeAll+0xcc>)
    2eb2:	6e5c      	ldr	r4, [r3, #100]	; 0x64
    2eb4:	2c00      	cmp	r4, #0
    2eb6:	d10a      	bne.n	2ece <xTaskResumeAll+0xaa>
    2eb8:	4b0d      	ldr	r3, [pc, #52]	; (2ef0 <xTaskResumeAll+0xcc>)
    2eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d014      	beq.n	2eea <xTaskResumeAll+0xc6>
    2ec0:	4b12      	ldr	r3, [pc, #72]	; (2f0c <xTaskResumeAll+0xe8>)
    2ec2:	4798      	blx	r3
    2ec4:	2401      	movs	r4, #1
    2ec6:	e7c2      	b.n	2e4e <xTaskResumeAll+0x2a>
    2ec8:	3c01      	subs	r4, #1
    2eca:	2c00      	cmp	r4, #0
    2ecc:	d007      	beq.n	2ede <xTaskResumeAll+0xba>
    2ece:	4b10      	ldr	r3, [pc, #64]	; (2f10 <xTaskResumeAll+0xec>)
    2ed0:	4798      	blx	r3
    2ed2:	2800      	cmp	r0, #0
    2ed4:	d0f8      	beq.n	2ec8 <xTaskResumeAll+0xa4>
    2ed6:	2201      	movs	r2, #1
    2ed8:	4b05      	ldr	r3, [pc, #20]	; (2ef0 <xTaskResumeAll+0xcc>)
    2eda:	669a      	str	r2, [r3, #104]	; 0x68
    2edc:	e7f4      	b.n	2ec8 <xTaskResumeAll+0xa4>
    2ede:	2200      	movs	r2, #0
    2ee0:	4b03      	ldr	r3, [pc, #12]	; (2ef0 <xTaskResumeAll+0xcc>)
    2ee2:	665a      	str	r2, [r3, #100]	; 0x64
    2ee4:	e7e8      	b.n	2eb8 <xTaskResumeAll+0x94>
    2ee6:	2400      	movs	r4, #0
    2ee8:	e7b1      	b.n	2e4e <xTaskResumeAll+0x2a>
    2eea:	2400      	movs	r4, #0
    2eec:	e7af      	b.n	2e4e <xTaskResumeAll+0x2a>
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	20002844 	.word	0x20002844
    2ef4:	00002005 	.word	0x00002005
    2ef8:	0000201d 	.word	0x0000201d
    2efc:	200027c4 	.word	0x200027c4
    2f00:	00001ec9 	.word	0x00001ec9
    2f04:	00001e81 	.word	0x00001e81
    2f08:	000029cd 	.word	0x000029cd
    2f0c:	00001fed 	.word	0x00001fed
    2f10:	00002d1d 	.word	0x00002d1d

00002f14 <vTaskSwitchContext>:
    2f14:	b510      	push	{r4, lr}
    2f16:	4b1d      	ldr	r3, [pc, #116]	; (2f8c <vTaskSwitchContext+0x78>)
    2f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	d10f      	bne.n	2f3e <vTaskSwitchContext+0x2a>
    2f1e:	4b1b      	ldr	r3, [pc, #108]	; (2f8c <vTaskSwitchContext+0x78>)
    2f20:	2200      	movs	r2, #0
    2f22:	669a      	str	r2, [r3, #104]	; 0x68
    2f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2f26:	009a      	lsls	r2, r3, #2
    2f28:	18d2      	adds	r2, r2, r3
    2f2a:	0091      	lsls	r1, r2, #2
    2f2c:	4a18      	ldr	r2, [pc, #96]	; (2f90 <vTaskSwitchContext+0x7c>)
    2f2e:	1852      	adds	r2, r2, r1
    2f30:	6b12      	ldr	r2, [r2, #48]	; 0x30
    2f32:	2a00      	cmp	r2, #0
    2f34:	d109      	bne.n	2f4a <vTaskSwitchContext+0x36>
    2f36:	2b00      	cmp	r3, #0
    2f38:	d005      	beq.n	2f46 <vTaskSwitchContext+0x32>
    2f3a:	3b01      	subs	r3, #1
    2f3c:	e7f3      	b.n	2f26 <vTaskSwitchContext+0x12>
    2f3e:	2201      	movs	r2, #1
    2f40:	4b12      	ldr	r3, [pc, #72]	; (2f8c <vTaskSwitchContext+0x78>)
    2f42:	669a      	str	r2, [r3, #104]	; 0x68
    2f44:	bd10      	pop	{r4, pc}
    2f46:	b672      	cpsid	i
    2f48:	e7fe      	b.n	2f48 <vTaskSwitchContext+0x34>
    2f4a:	4a11      	ldr	r2, [pc, #68]	; (2f90 <vTaskSwitchContext+0x7c>)
    2f4c:	0099      	lsls	r1, r3, #2
    2f4e:	18cc      	adds	r4, r1, r3
    2f50:	00a0      	lsls	r0, r4, #2
    2f52:	1810      	adds	r0, r2, r0
    2f54:	6b44      	ldr	r4, [r0, #52]	; 0x34
    2f56:	6864      	ldr	r4, [r4, #4]
    2f58:	6344      	str	r4, [r0, #52]	; 0x34
    2f5a:	3230      	adds	r2, #48	; 0x30
    2f5c:	18c9      	adds	r1, r1, r3
    2f5e:	0088      	lsls	r0, r1, #2
    2f60:	3008      	adds	r0, #8
    2f62:	1812      	adds	r2, r2, r0
    2f64:	4294      	cmp	r4, r2
    2f66:	d00a      	beq.n	2f7e <vTaskSwitchContext+0x6a>
    2f68:	009a      	lsls	r2, r3, #2
    2f6a:	18d2      	adds	r2, r2, r3
    2f6c:	0091      	lsls	r1, r2, #2
    2f6e:	4a08      	ldr	r2, [pc, #32]	; (2f90 <vTaskSwitchContext+0x7c>)
    2f70:	1852      	adds	r2, r2, r1
    2f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
    2f74:	68d1      	ldr	r1, [r2, #12]
    2f76:	4a05      	ldr	r2, [pc, #20]	; (2f8c <vTaskSwitchContext+0x78>)
    2f78:	6451      	str	r1, [r2, #68]	; 0x44
    2f7a:	6513      	str	r3, [r2, #80]	; 0x50
    2f7c:	e7e2      	b.n	2f44 <vTaskSwitchContext+0x30>
    2f7e:	6860      	ldr	r0, [r4, #4]
    2f80:	0089      	lsls	r1, r1, #2
    2f82:	4a03      	ldr	r2, [pc, #12]	; (2f90 <vTaskSwitchContext+0x7c>)
    2f84:	1852      	adds	r2, r2, r1
    2f86:	6350      	str	r0, [r2, #52]	; 0x34
    2f88:	e7ee      	b.n	2f68 <vTaskSwitchContext+0x54>
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	20002844 	.word	0x20002844
    2f90:	200027c4 	.word	0x200027c4

00002f94 <vTaskPlaceOnEventList>:
    2f94:	b510      	push	{r4, lr}
    2f96:	000c      	movs	r4, r1
    2f98:	2800      	cmp	r0, #0
    2f9a:	d101      	bne.n	2fa0 <vTaskPlaceOnEventList+0xc>
    2f9c:	b672      	cpsid	i
    2f9e:	e7fe      	b.n	2f9e <vTaskPlaceOnEventList+0xa>
    2fa0:	4b04      	ldr	r3, [pc, #16]	; (2fb4 <vTaskPlaceOnEventList+0x20>)
    2fa2:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2fa4:	3118      	adds	r1, #24
    2fa6:	4b04      	ldr	r3, [pc, #16]	; (2fb8 <vTaskPlaceOnEventList+0x24>)
    2fa8:	4798      	blx	r3
    2faa:	2101      	movs	r1, #1
    2fac:	0020      	movs	r0, r4
    2fae:	4b03      	ldr	r3, [pc, #12]	; (2fbc <vTaskPlaceOnEventList+0x28>)
    2fb0:	4798      	blx	r3
    2fb2:	bd10      	pop	{r4, pc}
    2fb4:	20002844 	.word	0x20002844
    2fb8:	00001e99 	.word	0x00001e99
    2fbc:	00002bb9 	.word	0x00002bb9

00002fc0 <vTaskPlaceOnEventListRestricted>:
    2fc0:	b570      	push	{r4, r5, r6, lr}
    2fc2:	000c      	movs	r4, r1
    2fc4:	0015      	movs	r5, r2
    2fc6:	2800      	cmp	r0, #0
    2fc8:	d00d      	beq.n	2fe6 <vTaskPlaceOnEventListRestricted+0x26>
    2fca:	4b08      	ldr	r3, [pc, #32]	; (2fec <vTaskPlaceOnEventListRestricted+0x2c>)
    2fcc:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2fce:	3118      	adds	r1, #24
    2fd0:	4b07      	ldr	r3, [pc, #28]	; (2ff0 <vTaskPlaceOnEventListRestricted+0x30>)
    2fd2:	4798      	blx	r3
    2fd4:	2d00      	cmp	r5, #0
    2fd6:	d001      	beq.n	2fdc <vTaskPlaceOnEventListRestricted+0x1c>
    2fd8:	2401      	movs	r4, #1
    2fda:	4264      	negs	r4, r4
    2fdc:	0029      	movs	r1, r5
    2fde:	0020      	movs	r0, r4
    2fe0:	4b04      	ldr	r3, [pc, #16]	; (2ff4 <vTaskPlaceOnEventListRestricted+0x34>)
    2fe2:	4798      	blx	r3
    2fe4:	bd70      	pop	{r4, r5, r6, pc}
    2fe6:	b672      	cpsid	i
    2fe8:	e7fe      	b.n	2fe8 <vTaskPlaceOnEventListRestricted+0x28>
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	20002844 	.word	0x20002844
    2ff0:	00001e81 	.word	0x00001e81
    2ff4:	00002bb9 	.word	0x00002bb9

00002ff8 <xTaskRemoveFromEventList>:
    2ff8:	b570      	push	{r4, r5, r6, lr}
    2ffa:	68c3      	ldr	r3, [r0, #12]
    2ffc:	68dc      	ldr	r4, [r3, #12]
    2ffe:	2c00      	cmp	r4, #0
    3000:	d027      	beq.n	3052 <xTaskRemoveFromEventList+0x5a>
    3002:	0025      	movs	r5, r4
    3004:	3518      	adds	r5, #24
    3006:	0028      	movs	r0, r5
    3008:	4b17      	ldr	r3, [pc, #92]	; (3068 <xTaskRemoveFromEventList+0x70>)
    300a:	4798      	blx	r3
    300c:	4b17      	ldr	r3, [pc, #92]	; (306c <xTaskRemoveFromEventList+0x74>)
    300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3010:	2b00      	cmp	r3, #0
    3012:	d120      	bne.n	3056 <xTaskRemoveFromEventList+0x5e>
    3014:	1d25      	adds	r5, r4, #4
    3016:	0028      	movs	r0, r5
    3018:	4b13      	ldr	r3, [pc, #76]	; (3068 <xTaskRemoveFromEventList+0x70>)
    301a:	4798      	blx	r3
    301c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    301e:	4b13      	ldr	r3, [pc, #76]	; (306c <xTaskRemoveFromEventList+0x74>)
    3020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3022:	429a      	cmp	r2, r3
    3024:	d901      	bls.n	302a <xTaskRemoveFromEventList+0x32>
    3026:	4b11      	ldr	r3, [pc, #68]	; (306c <xTaskRemoveFromEventList+0x74>)
    3028:	651a      	str	r2, [r3, #80]	; 0x50
    302a:	0093      	lsls	r3, r2, #2
    302c:	189b      	adds	r3, r3, r2
    302e:	009a      	lsls	r2, r3, #2
    3030:	480f      	ldr	r0, [pc, #60]	; (3070 <xTaskRemoveFromEventList+0x78>)
    3032:	3030      	adds	r0, #48	; 0x30
    3034:	1880      	adds	r0, r0, r2
    3036:	0029      	movs	r1, r5
    3038:	4b0e      	ldr	r3, [pc, #56]	; (3074 <xTaskRemoveFromEventList+0x7c>)
    303a:	4798      	blx	r3
    303c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    303e:	4b0b      	ldr	r3, [pc, #44]	; (306c <xTaskRemoveFromEventList+0x74>)
    3040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3044:	429a      	cmp	r2, r3
    3046:	d90c      	bls.n	3062 <xTaskRemoveFromEventList+0x6a>
    3048:	2201      	movs	r2, #1
    304a:	4b08      	ldr	r3, [pc, #32]	; (306c <xTaskRemoveFromEventList+0x74>)
    304c:	669a      	str	r2, [r3, #104]	; 0x68
    304e:	2001      	movs	r0, #1
    3050:	bd70      	pop	{r4, r5, r6, pc}
    3052:	b672      	cpsid	i
    3054:	e7fe      	b.n	3054 <xTaskRemoveFromEventList+0x5c>
    3056:	0029      	movs	r1, r5
    3058:	4805      	ldr	r0, [pc, #20]	; (3070 <xTaskRemoveFromEventList+0x78>)
    305a:	3014      	adds	r0, #20
    305c:	4b05      	ldr	r3, [pc, #20]	; (3074 <xTaskRemoveFromEventList+0x7c>)
    305e:	4798      	blx	r3
    3060:	e7ec      	b.n	303c <xTaskRemoveFromEventList+0x44>
    3062:	2000      	movs	r0, #0
    3064:	e7f4      	b.n	3050 <xTaskRemoveFromEventList+0x58>
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	00001ec9 	.word	0x00001ec9
    306c:	20002844 	.word	0x20002844
    3070:	200027c4 	.word	0x200027c4
    3074:	00001e81 	.word	0x00001e81

00003078 <vTaskInternalSetTimeOutState>:
    3078:	4b02      	ldr	r3, [pc, #8]	; (3084 <vTaskInternalSetTimeOutState+0xc>)
    307a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    307c:	6002      	str	r2, [r0, #0]
    307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3080:	6043      	str	r3, [r0, #4]
    3082:	4770      	bx	lr
    3084:	20002844 	.word	0x20002844

00003088 <xTaskCheckForTimeOut>:
    3088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    308a:	0005      	movs	r5, r0
    308c:	000c      	movs	r4, r1
    308e:	2800      	cmp	r0, #0
    3090:	d01a      	beq.n	30c8 <xTaskCheckForTimeOut+0x40>
    3092:	2900      	cmp	r1, #0
    3094:	d01a      	beq.n	30cc <xTaskCheckForTimeOut+0x44>
    3096:	4b14      	ldr	r3, [pc, #80]	; (30e8 <xTaskCheckForTimeOut+0x60>)
    3098:	4798      	blx	r3
    309a:	4b14      	ldr	r3, [pc, #80]	; (30ec <xTaskCheckForTimeOut+0x64>)
    309c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    309e:	6869      	ldr	r1, [r5, #4]
    30a0:	1a42      	subs	r2, r0, r1
    30a2:	6823      	ldr	r3, [r4, #0]
    30a4:	1c5e      	adds	r6, r3, #1
    30a6:	d01a      	beq.n	30de <xTaskCheckForTimeOut+0x56>
    30a8:	4e10      	ldr	r6, [pc, #64]	; (30ec <xTaskCheckForTimeOut+0x64>)
    30aa:	6e36      	ldr	r6, [r6, #96]	; 0x60
    30ac:	682f      	ldr	r7, [r5, #0]
    30ae:	42b7      	cmp	r7, r6
    30b0:	d001      	beq.n	30b6 <xTaskCheckForTimeOut+0x2e>
    30b2:	4288      	cmp	r0, r1
    30b4:	d215      	bcs.n	30e2 <xTaskCheckForTimeOut+0x5a>
    30b6:	429a      	cmp	r2, r3
    30b8:	d30a      	bcc.n	30d0 <xTaskCheckForTimeOut+0x48>
    30ba:	2300      	movs	r3, #0
    30bc:	6023      	str	r3, [r4, #0]
    30be:	2401      	movs	r4, #1
    30c0:	4b0b      	ldr	r3, [pc, #44]	; (30f0 <xTaskCheckForTimeOut+0x68>)
    30c2:	4798      	blx	r3
    30c4:	0020      	movs	r0, r4
    30c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30c8:	b672      	cpsid	i
    30ca:	e7fe      	b.n	30ca <xTaskCheckForTimeOut+0x42>
    30cc:	b672      	cpsid	i
    30ce:	e7fe      	b.n	30ce <xTaskCheckForTimeOut+0x46>
    30d0:	1a9b      	subs	r3, r3, r2
    30d2:	6023      	str	r3, [r4, #0]
    30d4:	0028      	movs	r0, r5
    30d6:	4b07      	ldr	r3, [pc, #28]	; (30f4 <xTaskCheckForTimeOut+0x6c>)
    30d8:	4798      	blx	r3
    30da:	2400      	movs	r4, #0
    30dc:	e7f0      	b.n	30c0 <xTaskCheckForTimeOut+0x38>
    30de:	2400      	movs	r4, #0
    30e0:	e7ee      	b.n	30c0 <xTaskCheckForTimeOut+0x38>
    30e2:	2401      	movs	r4, #1
    30e4:	e7ec      	b.n	30c0 <xTaskCheckForTimeOut+0x38>
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	00002005 	.word	0x00002005
    30ec:	20002844 	.word	0x20002844
    30f0:	0000201d 	.word	0x0000201d
    30f4:	00003079 	.word	0x00003079

000030f8 <vTaskMissedYield>:
    30f8:	2201      	movs	r2, #1
    30fa:	4b01      	ldr	r3, [pc, #4]	; (3100 <vTaskMissedYield+0x8>)
    30fc:	669a      	str	r2, [r3, #104]	; 0x68
    30fe:	4770      	bx	lr
    3100:	20002844 	.word	0x20002844

00003104 <xTaskGetSchedulerState>:
    3104:	4b06      	ldr	r3, [pc, #24]	; (3120 <xTaskGetSchedulerState+0x1c>)
    3106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3108:	2b00      	cmp	r3, #0
    310a:	d005      	beq.n	3118 <xTaskGetSchedulerState+0x14>
    310c:	4b04      	ldr	r3, [pc, #16]	; (3120 <xTaskGetSchedulerState+0x1c>)
    310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3110:	2b00      	cmp	r3, #0
    3112:	d103      	bne.n	311c <xTaskGetSchedulerState+0x18>
    3114:	2002      	movs	r0, #2
    3116:	4770      	bx	lr
    3118:	2001      	movs	r0, #1
    311a:	e7fc      	b.n	3116 <xTaskGetSchedulerState+0x12>
    311c:	2000      	movs	r0, #0
    311e:	e7fa      	b.n	3116 <xTaskGetSchedulerState+0x12>
    3120:	20002844 	.word	0x20002844

00003124 <xTaskPriorityDisinherit>:
    3124:	b570      	push	{r4, r5, r6, lr}
    3126:	1e04      	subs	r4, r0, #0
    3128:	d02c      	beq.n	3184 <xTaskPriorityDisinherit+0x60>
    312a:	4b19      	ldr	r3, [pc, #100]	; (3190 <xTaskPriorityDisinherit+0x6c>)
    312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    312e:	4298      	cmp	r0, r3
    3130:	d001      	beq.n	3136 <xTaskPriorityDisinherit+0x12>
    3132:	b672      	cpsid	i
    3134:	e7fe      	b.n	3134 <xTaskPriorityDisinherit+0x10>
    3136:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3138:	2b00      	cmp	r3, #0
    313a:	d101      	bne.n	3140 <xTaskPriorityDisinherit+0x1c>
    313c:	b672      	cpsid	i
    313e:	e7fe      	b.n	313e <xTaskPriorityDisinherit+0x1a>
    3140:	3b01      	subs	r3, #1
    3142:	6483      	str	r3, [r0, #72]	; 0x48
    3144:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3146:	6c41      	ldr	r1, [r0, #68]	; 0x44
    3148:	428a      	cmp	r2, r1
    314a:	d01d      	beq.n	3188 <xTaskPriorityDisinherit+0x64>
    314c:	2b00      	cmp	r3, #0
    314e:	d11d      	bne.n	318c <xTaskPriorityDisinherit+0x68>
    3150:	1d05      	adds	r5, r0, #4
    3152:	0028      	movs	r0, r5
    3154:	4b0f      	ldr	r3, [pc, #60]	; (3194 <xTaskPriorityDisinherit+0x70>)
    3156:	4798      	blx	r3
    3158:	6c63      	ldr	r3, [r4, #68]	; 0x44
    315a:	62e3      	str	r3, [r4, #44]	; 0x2c
    315c:	2205      	movs	r2, #5
    315e:	1ad2      	subs	r2, r2, r3
    3160:	61a2      	str	r2, [r4, #24]
    3162:	4a0b      	ldr	r2, [pc, #44]	; (3190 <xTaskPriorityDisinherit+0x6c>)
    3164:	6d12      	ldr	r2, [r2, #80]	; 0x50
    3166:	4293      	cmp	r3, r2
    3168:	d901      	bls.n	316e <xTaskPriorityDisinherit+0x4a>
    316a:	4a09      	ldr	r2, [pc, #36]	; (3190 <xTaskPriorityDisinherit+0x6c>)
    316c:	6513      	str	r3, [r2, #80]	; 0x50
    316e:	009a      	lsls	r2, r3, #2
    3170:	18d3      	adds	r3, r2, r3
    3172:	009a      	lsls	r2, r3, #2
    3174:	4808      	ldr	r0, [pc, #32]	; (3198 <xTaskPriorityDisinherit+0x74>)
    3176:	3030      	adds	r0, #48	; 0x30
    3178:	1880      	adds	r0, r0, r2
    317a:	0029      	movs	r1, r5
    317c:	4b07      	ldr	r3, [pc, #28]	; (319c <xTaskPriorityDisinherit+0x78>)
    317e:	4798      	blx	r3
    3180:	2001      	movs	r0, #1
    3182:	bd70      	pop	{r4, r5, r6, pc}
    3184:	2000      	movs	r0, #0
    3186:	e7fc      	b.n	3182 <xTaskPriorityDisinherit+0x5e>
    3188:	2000      	movs	r0, #0
    318a:	e7fa      	b.n	3182 <xTaskPriorityDisinherit+0x5e>
    318c:	2000      	movs	r0, #0
    318e:	e7f8      	b.n	3182 <xTaskPriorityDisinherit+0x5e>
    3190:	20002844 	.word	0x20002844
    3194:	00001ec9 	.word	0x00001ec9
    3198:	200027c4 	.word	0x200027c4
    319c:	00001e81 	.word	0x00001e81

000031a0 <prvGetNextExpireTime>:
    31a0:	4b06      	ldr	r3, [pc, #24]	; (31bc <prvGetNextExpireTime+0x1c>)
    31a2:	681a      	ldr	r2, [r3, #0]
    31a4:	6813      	ldr	r3, [r2, #0]
    31a6:	4259      	negs	r1, r3
    31a8:	414b      	adcs	r3, r1
    31aa:	6003      	str	r3, [r0, #0]
    31ac:	2b00      	cmp	r3, #0
    31ae:	d102      	bne.n	31b6 <prvGetNextExpireTime+0x16>
    31b0:	68d3      	ldr	r3, [r2, #12]
    31b2:	6818      	ldr	r0, [r3, #0]
    31b4:	4770      	bx	lr
    31b6:	2000      	movs	r0, #0
    31b8:	e7fc      	b.n	31b4 <prvGetNextExpireTime+0x14>
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	200028b0 	.word	0x200028b0

000031c0 <prvInsertTimerInActiveList>:
    31c0:	b510      	push	{r4, lr}
    31c2:	6041      	str	r1, [r0, #4]
    31c4:	6100      	str	r0, [r0, #16]
    31c6:	4291      	cmp	r1, r2
    31c8:	d80c      	bhi.n	31e4 <prvInsertTimerInActiveList+0x24>
    31ca:	1ad2      	subs	r2, r2, r3
    31cc:	6983      	ldr	r3, [r0, #24]
    31ce:	429a      	cmp	r2, r3
    31d0:	d301      	bcc.n	31d6 <prvInsertTimerInActiveList+0x16>
    31d2:	2001      	movs	r0, #1
    31d4:	e010      	b.n	31f8 <prvInsertTimerInActiveList+0x38>
    31d6:	1d01      	adds	r1, r0, #4
    31d8:	4b09      	ldr	r3, [pc, #36]	; (3200 <prvInsertTimerInActiveList+0x40>)
    31da:	6858      	ldr	r0, [r3, #4]
    31dc:	4b09      	ldr	r3, [pc, #36]	; (3204 <prvInsertTimerInActiveList+0x44>)
    31de:	4798      	blx	r3
    31e0:	2000      	movs	r0, #0
    31e2:	e009      	b.n	31f8 <prvInsertTimerInActiveList+0x38>
    31e4:	429a      	cmp	r2, r3
    31e6:	d201      	bcs.n	31ec <prvInsertTimerInActiveList+0x2c>
    31e8:	4299      	cmp	r1, r3
    31ea:	d206      	bcs.n	31fa <prvInsertTimerInActiveList+0x3a>
    31ec:	1d01      	adds	r1, r0, #4
    31ee:	4b04      	ldr	r3, [pc, #16]	; (3200 <prvInsertTimerInActiveList+0x40>)
    31f0:	6818      	ldr	r0, [r3, #0]
    31f2:	4b04      	ldr	r3, [pc, #16]	; (3204 <prvInsertTimerInActiveList+0x44>)
    31f4:	4798      	blx	r3
    31f6:	2000      	movs	r0, #0
    31f8:	bd10      	pop	{r4, pc}
    31fa:	2001      	movs	r0, #1
    31fc:	e7fc      	b.n	31f8 <prvInsertTimerInActiveList+0x38>
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	200028b0 	.word	0x200028b0
    3204:	00001e99 	.word	0x00001e99

00003208 <prvCheckForValidListAndQueue>:
    3208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    320a:	4b0e      	ldr	r3, [pc, #56]	; (3244 <prvCheckForValidListAndQueue+0x3c>)
    320c:	4798      	blx	r3
    320e:	4b0e      	ldr	r3, [pc, #56]	; (3248 <prvCheckForValidListAndQueue+0x40>)
    3210:	689b      	ldr	r3, [r3, #8]
    3212:	2b00      	cmp	r3, #0
    3214:	d002      	beq.n	321c <prvCheckForValidListAndQueue+0x14>
    3216:	4b0d      	ldr	r3, [pc, #52]	; (324c <prvCheckForValidListAndQueue+0x44>)
    3218:	4798      	blx	r3
    321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    321c:	4c0a      	ldr	r4, [pc, #40]	; (3248 <prvCheckForValidListAndQueue+0x40>)
    321e:	0026      	movs	r6, r4
    3220:	360c      	adds	r6, #12
    3222:	0030      	movs	r0, r6
    3224:	4f0a      	ldr	r7, [pc, #40]	; (3250 <prvCheckForValidListAndQueue+0x48>)
    3226:	47b8      	blx	r7
    3228:	0025      	movs	r5, r4
    322a:	3520      	adds	r5, #32
    322c:	0028      	movs	r0, r5
    322e:	47b8      	blx	r7
    3230:	6026      	str	r6, [r4, #0]
    3232:	6065      	str	r5, [r4, #4]
    3234:	2200      	movs	r2, #0
    3236:	210c      	movs	r1, #12
    3238:	2002      	movs	r0, #2
    323a:	4b06      	ldr	r3, [pc, #24]	; (3254 <prvCheckForValidListAndQueue+0x4c>)
    323c:	4798      	blx	r3
    323e:	60a0      	str	r0, [r4, #8]
    3240:	e7e9      	b.n	3216 <prvCheckForValidListAndQueue+0xe>
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	00002005 	.word	0x00002005
    3248:	200028b0 	.word	0x200028b0
    324c:	0000201d 	.word	0x0000201d
    3250:	00001e65 	.word	0x00001e65
    3254:	0000254d 	.word	0x0000254d

00003258 <xTimerCreateTimerTask>:
    3258:	b510      	push	{r4, lr}
    325a:	b082      	sub	sp, #8
    325c:	4b0c      	ldr	r3, [pc, #48]	; (3290 <xTimerCreateTimerTask+0x38>)
    325e:	4798      	blx	r3
    3260:	4b0c      	ldr	r3, [pc, #48]	; (3294 <xTimerCreateTimerTask+0x3c>)
    3262:	689b      	ldr	r3, [r3, #8]
    3264:	2b00      	cmp	r3, #0
    3266:	d00e      	beq.n	3286 <xTimerCreateTimerTask+0x2e>
    3268:	4b0a      	ldr	r3, [pc, #40]	; (3294 <xTimerCreateTimerTask+0x3c>)
    326a:	3334      	adds	r3, #52	; 0x34
    326c:	9301      	str	r3, [sp, #4]
    326e:	2302      	movs	r3, #2
    3270:	9300      	str	r3, [sp, #0]
    3272:	2300      	movs	r3, #0
    3274:	2240      	movs	r2, #64	; 0x40
    3276:	4908      	ldr	r1, [pc, #32]	; (3298 <xTimerCreateTimerTask+0x40>)
    3278:	4808      	ldr	r0, [pc, #32]	; (329c <xTimerCreateTimerTask+0x44>)
    327a:	4c09      	ldr	r4, [pc, #36]	; (32a0 <xTimerCreateTimerTask+0x48>)
    327c:	47a0      	blx	r4
    327e:	2800      	cmp	r0, #0
    3280:	d103      	bne.n	328a <xTimerCreateTimerTask+0x32>
    3282:	b672      	cpsid	i
    3284:	e7fe      	b.n	3284 <xTimerCreateTimerTask+0x2c>
    3286:	2000      	movs	r0, #0
    3288:	e7f9      	b.n	327e <xTimerCreateTimerTask+0x26>
    328a:	b002      	add	sp, #8
    328c:	bd10      	pop	{r4, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	00003209 	.word	0x00003209
    3294:	200028b0 	.word	0x200028b0
    3298:	000038e0 	.word	0x000038e0
    329c:	0000355d 	.word	0x0000355d
    32a0:	00002c29 	.word	0x00002c29

000032a4 <xTimerGenericCommand>:
    32a4:	b530      	push	{r4, r5, lr}
    32a6:	b085      	sub	sp, #20
    32a8:	0004      	movs	r4, r0
    32aa:	001d      	movs	r5, r3
    32ac:	2800      	cmp	r0, #0
    32ae:	d014      	beq.n	32da <xTimerGenericCommand+0x36>
    32b0:	4b13      	ldr	r3, [pc, #76]	; (3300 <xTimerGenericCommand+0x5c>)
    32b2:	6898      	ldr	r0, [r3, #8]
    32b4:	2800      	cmp	r0, #0
    32b6:	d021      	beq.n	32fc <xTimerGenericCommand+0x58>
    32b8:	9101      	str	r1, [sp, #4]
    32ba:	9202      	str	r2, [sp, #8]
    32bc:	9403      	str	r4, [sp, #12]
    32be:	2905      	cmp	r1, #5
    32c0:	dc15      	bgt.n	32ee <xTimerGenericCommand+0x4a>
    32c2:	4b10      	ldr	r3, [pc, #64]	; (3304 <xTimerGenericCommand+0x60>)
    32c4:	4798      	blx	r3
    32c6:	2802      	cmp	r0, #2
    32c8:	d009      	beq.n	32de <xTimerGenericCommand+0x3a>
    32ca:	4b0d      	ldr	r3, [pc, #52]	; (3300 <xTimerGenericCommand+0x5c>)
    32cc:	6898      	ldr	r0, [r3, #8]
    32ce:	2300      	movs	r3, #0
    32d0:	2200      	movs	r2, #0
    32d2:	a901      	add	r1, sp, #4
    32d4:	4c0c      	ldr	r4, [pc, #48]	; (3308 <xTimerGenericCommand+0x64>)
    32d6:	47a0      	blx	r4
    32d8:	e00e      	b.n	32f8 <xTimerGenericCommand+0x54>
    32da:	b672      	cpsid	i
    32dc:	e7fe      	b.n	32dc <xTimerGenericCommand+0x38>
    32de:	4b08      	ldr	r3, [pc, #32]	; (3300 <xTimerGenericCommand+0x5c>)
    32e0:	6898      	ldr	r0, [r3, #8]
    32e2:	2300      	movs	r3, #0
    32e4:	9a08      	ldr	r2, [sp, #32]
    32e6:	a901      	add	r1, sp, #4
    32e8:	4c07      	ldr	r4, [pc, #28]	; (3308 <xTimerGenericCommand+0x64>)
    32ea:	47a0      	blx	r4
    32ec:	e004      	b.n	32f8 <xTimerGenericCommand+0x54>
    32ee:	2300      	movs	r3, #0
    32f0:	002a      	movs	r2, r5
    32f2:	a901      	add	r1, sp, #4
    32f4:	4c05      	ldr	r4, [pc, #20]	; (330c <xTimerGenericCommand+0x68>)
    32f6:	47a0      	blx	r4
    32f8:	b005      	add	sp, #20
    32fa:	bd30      	pop	{r4, r5, pc}
    32fc:	2000      	movs	r0, #0
    32fe:	e7fb      	b.n	32f8 <xTimerGenericCommand+0x54>
    3300:	200028b0 	.word	0x200028b0
    3304:	00003105 	.word	0x00003105
    3308:	00002595 	.word	0x00002595
    330c:	00002725 	.word	0x00002725

00003310 <prvSwitchTimerLists>:
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	b082      	sub	sp, #8
    3314:	4b17      	ldr	r3, [pc, #92]	; (3374 <prvSwitchTimerLists+0x64>)
    3316:	681b      	ldr	r3, [r3, #0]
    3318:	681a      	ldr	r2, [r3, #0]
    331a:	2a00      	cmp	r2, #0
    331c:	d023      	beq.n	3366 <prvSwitchTimerLists+0x56>
    331e:	68db      	ldr	r3, [r3, #12]
    3320:	681e      	ldr	r6, [r3, #0]
    3322:	68dc      	ldr	r4, [r3, #12]
    3324:	1d25      	adds	r5, r4, #4
    3326:	0028      	movs	r0, r5
    3328:	4b13      	ldr	r3, [pc, #76]	; (3378 <prvSwitchTimerLists+0x68>)
    332a:	4798      	blx	r3
    332c:	0020      	movs	r0, r4
    332e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3330:	4798      	blx	r3
    3332:	69e3      	ldr	r3, [r4, #28]
    3334:	2b01      	cmp	r3, #1
    3336:	d1ed      	bne.n	3314 <prvSwitchTimerLists+0x4>
    3338:	69a3      	ldr	r3, [r4, #24]
    333a:	18f3      	adds	r3, r6, r3
    333c:	429e      	cmp	r6, r3
    333e:	d207      	bcs.n	3350 <prvSwitchTimerLists+0x40>
    3340:	6063      	str	r3, [r4, #4]
    3342:	6124      	str	r4, [r4, #16]
    3344:	4b0b      	ldr	r3, [pc, #44]	; (3374 <prvSwitchTimerLists+0x64>)
    3346:	6818      	ldr	r0, [r3, #0]
    3348:	0029      	movs	r1, r5
    334a:	4b0c      	ldr	r3, [pc, #48]	; (337c <prvSwitchTimerLists+0x6c>)
    334c:	4798      	blx	r3
    334e:	e7e1      	b.n	3314 <prvSwitchTimerLists+0x4>
    3350:	2300      	movs	r3, #0
    3352:	9300      	str	r3, [sp, #0]
    3354:	0032      	movs	r2, r6
    3356:	2100      	movs	r1, #0
    3358:	0020      	movs	r0, r4
    335a:	4c09      	ldr	r4, [pc, #36]	; (3380 <prvSwitchTimerLists+0x70>)
    335c:	47a0      	blx	r4
    335e:	2800      	cmp	r0, #0
    3360:	d1d8      	bne.n	3314 <prvSwitchTimerLists+0x4>
    3362:	b672      	cpsid	i
    3364:	e7fe      	b.n	3364 <prvSwitchTimerLists+0x54>
    3366:	4a03      	ldr	r2, [pc, #12]	; (3374 <prvSwitchTimerLists+0x64>)
    3368:	6851      	ldr	r1, [r2, #4]
    336a:	6011      	str	r1, [r2, #0]
    336c:	6053      	str	r3, [r2, #4]
    336e:	b002      	add	sp, #8
    3370:	bd70      	pop	{r4, r5, r6, pc}
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	200028b0 	.word	0x200028b0
    3378:	00001ec9 	.word	0x00001ec9
    337c:	00001e99 	.word	0x00001e99
    3380:	000032a5 	.word	0x000032a5

00003384 <prvSampleTimeNow>:
    3384:	b570      	push	{r4, r5, r6, lr}
    3386:	0005      	movs	r5, r0
    3388:	4b08      	ldr	r3, [pc, #32]	; (33ac <prvSampleTimeNow+0x28>)
    338a:	4798      	blx	r3
    338c:	0004      	movs	r4, r0
    338e:	4b08      	ldr	r3, [pc, #32]	; (33b0 <prvSampleTimeNow+0x2c>)
    3390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3392:	4298      	cmp	r0, r3
    3394:	d305      	bcc.n	33a2 <prvSampleTimeNow+0x1e>
    3396:	2300      	movs	r3, #0
    3398:	602b      	str	r3, [r5, #0]
    339a:	4b05      	ldr	r3, [pc, #20]	; (33b0 <prvSampleTimeNow+0x2c>)
    339c:	639c      	str	r4, [r3, #56]	; 0x38
    339e:	0020      	movs	r0, r4
    33a0:	bd70      	pop	{r4, r5, r6, pc}
    33a2:	4b04      	ldr	r3, [pc, #16]	; (33b4 <prvSampleTimeNow+0x30>)
    33a4:	4798      	blx	r3
    33a6:	2301      	movs	r3, #1
    33a8:	602b      	str	r3, [r5, #0]
    33aa:	e7f6      	b.n	339a <prvSampleTimeNow+0x16>
    33ac:	00002d11 	.word	0x00002d11
    33b0:	200028b0 	.word	0x200028b0
    33b4:	00003311 	.word	0x00003311

000033b8 <prvProcessExpiredTimer>:
    33b8:	b570      	push	{r4, r5, r6, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	0005      	movs	r5, r0
    33be:	000e      	movs	r6, r1
    33c0:	4b11      	ldr	r3, [pc, #68]	; (3408 <prvProcessExpiredTimer+0x50>)
    33c2:	681b      	ldr	r3, [r3, #0]
    33c4:	68db      	ldr	r3, [r3, #12]
    33c6:	68dc      	ldr	r4, [r3, #12]
    33c8:	1d20      	adds	r0, r4, #4
    33ca:	4b10      	ldr	r3, [pc, #64]	; (340c <prvProcessExpiredTimer+0x54>)
    33cc:	4798      	blx	r3
    33ce:	69e3      	ldr	r3, [r4, #28]
    33d0:	2b01      	cmp	r3, #1
    33d2:	d004      	beq.n	33de <prvProcessExpiredTimer+0x26>
    33d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    33d6:	0020      	movs	r0, r4
    33d8:	4798      	blx	r3
    33da:	b002      	add	sp, #8
    33dc:	bd70      	pop	{r4, r5, r6, pc}
    33de:	69a3      	ldr	r3, [r4, #24]
    33e0:	1959      	adds	r1, r3, r5
    33e2:	002b      	movs	r3, r5
    33e4:	0032      	movs	r2, r6
    33e6:	0020      	movs	r0, r4
    33e8:	4e09      	ldr	r6, [pc, #36]	; (3410 <prvProcessExpiredTimer+0x58>)
    33ea:	47b0      	blx	r6
    33ec:	2800      	cmp	r0, #0
    33ee:	d0f1      	beq.n	33d4 <prvProcessExpiredTimer+0x1c>
    33f0:	2300      	movs	r3, #0
    33f2:	9300      	str	r3, [sp, #0]
    33f4:	002a      	movs	r2, r5
    33f6:	2100      	movs	r1, #0
    33f8:	0020      	movs	r0, r4
    33fa:	4d06      	ldr	r5, [pc, #24]	; (3414 <prvProcessExpiredTimer+0x5c>)
    33fc:	47a8      	blx	r5
    33fe:	2800      	cmp	r0, #0
    3400:	d1e8      	bne.n	33d4 <prvProcessExpiredTimer+0x1c>
    3402:	b672      	cpsid	i
    3404:	e7fe      	b.n	3404 <prvProcessExpiredTimer+0x4c>
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	200028b0 	.word	0x200028b0
    340c:	00001ec9 	.word	0x00001ec9
    3410:	000031c1 	.word	0x000031c1
    3414:	000032a5 	.word	0x000032a5

00003418 <prvProcessTimerOrBlockTask>:
    3418:	b570      	push	{r4, r5, r6, lr}
    341a:	b082      	sub	sp, #8
    341c:	0005      	movs	r5, r0
    341e:	000c      	movs	r4, r1
    3420:	4b16      	ldr	r3, [pc, #88]	; (347c <prvProcessTimerOrBlockTask+0x64>)
    3422:	4798      	blx	r3
    3424:	a801      	add	r0, sp, #4
    3426:	4b16      	ldr	r3, [pc, #88]	; (3480 <prvProcessTimerOrBlockTask+0x68>)
    3428:	4798      	blx	r3
    342a:	0006      	movs	r6, r0
    342c:	9b01      	ldr	r3, [sp, #4]
    342e:	2b00      	cmp	r3, #0
    3430:	d121      	bne.n	3476 <prvProcessTimerOrBlockTask+0x5e>
    3432:	2c00      	cmp	r4, #0
    3434:	d101      	bne.n	343a <prvProcessTimerOrBlockTask+0x22>
    3436:	42a8      	cmp	r0, r5
    3438:	d213      	bcs.n	3462 <prvProcessTimerOrBlockTask+0x4a>
    343a:	2c00      	cmp	r4, #0
    343c:	d005      	beq.n	344a <prvProcessTimerOrBlockTask+0x32>
    343e:	4b11      	ldr	r3, [pc, #68]	; (3484 <prvProcessTimerOrBlockTask+0x6c>)
    3440:	685b      	ldr	r3, [r3, #4]
    3442:	681c      	ldr	r4, [r3, #0]
    3444:	4263      	negs	r3, r4
    3446:	415c      	adcs	r4, r3
    3448:	b2e4      	uxtb	r4, r4
    344a:	1ba9      	subs	r1, r5, r6
    344c:	4b0d      	ldr	r3, [pc, #52]	; (3484 <prvProcessTimerOrBlockTask+0x6c>)
    344e:	6898      	ldr	r0, [r3, #8]
    3450:	0022      	movs	r2, r4
    3452:	4b0d      	ldr	r3, [pc, #52]	; (3488 <prvProcessTimerOrBlockTask+0x70>)
    3454:	4798      	blx	r3
    3456:	4b0d      	ldr	r3, [pc, #52]	; (348c <prvProcessTimerOrBlockTask+0x74>)
    3458:	4798      	blx	r3
    345a:	2800      	cmp	r0, #0
    345c:	d008      	beq.n	3470 <prvProcessTimerOrBlockTask+0x58>
    345e:	b002      	add	sp, #8
    3460:	bd70      	pop	{r4, r5, r6, pc}
    3462:	4b0a      	ldr	r3, [pc, #40]	; (348c <prvProcessTimerOrBlockTask+0x74>)
    3464:	4798      	blx	r3
    3466:	0031      	movs	r1, r6
    3468:	0028      	movs	r0, r5
    346a:	4b09      	ldr	r3, [pc, #36]	; (3490 <prvProcessTimerOrBlockTask+0x78>)
    346c:	4798      	blx	r3
    346e:	e7f6      	b.n	345e <prvProcessTimerOrBlockTask+0x46>
    3470:	4b08      	ldr	r3, [pc, #32]	; (3494 <prvProcessTimerOrBlockTask+0x7c>)
    3472:	4798      	blx	r3
    3474:	e7f3      	b.n	345e <prvProcessTimerOrBlockTask+0x46>
    3476:	4b05      	ldr	r3, [pc, #20]	; (348c <prvProcessTimerOrBlockTask+0x74>)
    3478:	4798      	blx	r3
    347a:	e7f0      	b.n	345e <prvProcessTimerOrBlockTask+0x46>
    347c:	00002d01 	.word	0x00002d01
    3480:	00003385 	.word	0x00003385
    3484:	200028b0 	.word	0x200028b0
    3488:	0000296d 	.word	0x0000296d
    348c:	00002e25 	.word	0x00002e25
    3490:	000033b9 	.word	0x000033b9
    3494:	00001fed 	.word	0x00001fed

00003498 <prvProcessReceivedCommands>:
    3498:	b530      	push	{r4, r5, lr}
    349a:	b087      	sub	sp, #28
    349c:	4b27      	ldr	r3, [pc, #156]	; (353c <prvProcessReceivedCommands+0xa4>)
    349e:	6898      	ldr	r0, [r3, #8]
    34a0:	2200      	movs	r2, #0
    34a2:	a903      	add	r1, sp, #12
    34a4:	4b26      	ldr	r3, [pc, #152]	; (3540 <prvProcessReceivedCommands+0xa8>)
    34a6:	4798      	blx	r3
    34a8:	2800      	cmp	r0, #0
    34aa:	d045      	beq.n	3538 <prvProcessReceivedCommands+0xa0>
    34ac:	9b03      	ldr	r3, [sp, #12]
    34ae:	2b00      	cmp	r3, #0
    34b0:	dbf4      	blt.n	349c <prvProcessReceivedCommands+0x4>
    34b2:	9c05      	ldr	r4, [sp, #20]
    34b4:	6963      	ldr	r3, [r4, #20]
    34b6:	2b00      	cmp	r3, #0
    34b8:	d002      	beq.n	34c0 <prvProcessReceivedCommands+0x28>
    34ba:	1d20      	adds	r0, r4, #4
    34bc:	4b21      	ldr	r3, [pc, #132]	; (3544 <prvProcessReceivedCommands+0xac>)
    34be:	4798      	blx	r3
    34c0:	a802      	add	r0, sp, #8
    34c2:	4b21      	ldr	r3, [pc, #132]	; (3548 <prvProcessReceivedCommands+0xb0>)
    34c4:	4798      	blx	r3
    34c6:	9b03      	ldr	r3, [sp, #12]
    34c8:	2b09      	cmp	r3, #9
    34ca:	d8e7      	bhi.n	349c <prvProcessReceivedCommands+0x4>
    34cc:	009b      	lsls	r3, r3, #2
    34ce:	4a1f      	ldr	r2, [pc, #124]	; (354c <prvProcessReceivedCommands+0xb4>)
    34d0:	58d3      	ldr	r3, [r2, r3]
    34d2:	469f      	mov	pc, r3
    34d4:	9b04      	ldr	r3, [sp, #16]
    34d6:	69a2      	ldr	r2, [r4, #24]
    34d8:	4694      	mov	ip, r2
    34da:	4463      	add	r3, ip
    34dc:	0019      	movs	r1, r3
    34de:	9b04      	ldr	r3, [sp, #16]
    34e0:	0002      	movs	r2, r0
    34e2:	0020      	movs	r0, r4
    34e4:	4d1a      	ldr	r5, [pc, #104]	; (3550 <prvProcessReceivedCommands+0xb8>)
    34e6:	47a8      	blx	r5
    34e8:	2800      	cmp	r0, #0
    34ea:	d0d7      	beq.n	349c <prvProcessReceivedCommands+0x4>
    34ec:	0020      	movs	r0, r4
    34ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    34f0:	4798      	blx	r3
    34f2:	69e3      	ldr	r3, [r4, #28]
    34f4:	2b01      	cmp	r3, #1
    34f6:	d1d1      	bne.n	349c <prvProcessReceivedCommands+0x4>
    34f8:	9b04      	ldr	r3, [sp, #16]
    34fa:	69a1      	ldr	r1, [r4, #24]
    34fc:	468c      	mov	ip, r1
    34fe:	4463      	add	r3, ip
    3500:	001a      	movs	r2, r3
    3502:	2300      	movs	r3, #0
    3504:	9300      	str	r3, [sp, #0]
    3506:	2100      	movs	r1, #0
    3508:	0020      	movs	r0, r4
    350a:	4c12      	ldr	r4, [pc, #72]	; (3554 <prvProcessReceivedCommands+0xbc>)
    350c:	47a0      	blx	r4
    350e:	2800      	cmp	r0, #0
    3510:	d1c4      	bne.n	349c <prvProcessReceivedCommands+0x4>
    3512:	b672      	cpsid	i
    3514:	e7fe      	b.n	3514 <prvProcessReceivedCommands+0x7c>
    3516:	9904      	ldr	r1, [sp, #16]
    3518:	61a1      	str	r1, [r4, #24]
    351a:	2900      	cmp	r1, #0
    351c:	d006      	beq.n	352c <prvProcessReceivedCommands+0x94>
    351e:	1841      	adds	r1, r0, r1
    3520:	0003      	movs	r3, r0
    3522:	0002      	movs	r2, r0
    3524:	0020      	movs	r0, r4
    3526:	4c0a      	ldr	r4, [pc, #40]	; (3550 <prvProcessReceivedCommands+0xb8>)
    3528:	47a0      	blx	r4
    352a:	e7b7      	b.n	349c <prvProcessReceivedCommands+0x4>
    352c:	b672      	cpsid	i
    352e:	e7fe      	b.n	352e <prvProcessReceivedCommands+0x96>
    3530:	0020      	movs	r0, r4
    3532:	4b09      	ldr	r3, [pc, #36]	; (3558 <prvProcessReceivedCommands+0xc0>)
    3534:	4798      	blx	r3
    3536:	e7b1      	b.n	349c <prvProcessReceivedCommands+0x4>
    3538:	b007      	add	sp, #28
    353a:	bd30      	pop	{r4, r5, pc}
    353c:	200028b0 	.word	0x200028b0
    3540:	00002811 	.word	0x00002811
    3544:	00001ec9 	.word	0x00001ec9
    3548:	00003385 	.word	0x00003385
    354c:	000038b8 	.word	0x000038b8
    3550:	000031c1 	.word	0x000031c1
    3554:	000032a5 	.word	0x000032a5
    3558:	0000223d 	.word	0x0000223d

0000355c <prvTimerTask>:
    355c:	b500      	push	{lr}
    355e:	b083      	sub	sp, #12
    3560:	a801      	add	r0, sp, #4
    3562:	4b04      	ldr	r3, [pc, #16]	; (3574 <prvTimerTask+0x18>)
    3564:	4798      	blx	r3
    3566:	9901      	ldr	r1, [sp, #4]
    3568:	4b03      	ldr	r3, [pc, #12]	; (3578 <prvTimerTask+0x1c>)
    356a:	4798      	blx	r3
    356c:	4b03      	ldr	r3, [pc, #12]	; (357c <prvTimerTask+0x20>)
    356e:	4798      	blx	r3
    3570:	e7f6      	b.n	3560 <prvTimerTask+0x4>
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	000031a1 	.word	0x000031a1
    3578:	00003419 	.word	0x00003419
    357c:	00003499 	.word	0x00003499

00003580 <__ffssi2>:
    3580:	b510      	push	{r4, lr}
    3582:	2300      	movs	r3, #0
    3584:	2800      	cmp	r0, #0
    3586:	d002      	beq.n	358e <__ffssi2+0xe>
    3588:	f000 f804 	bl	3594 <__ctzsi2>
    358c:	1c43      	adds	r3, r0, #1
    358e:	0018      	movs	r0, r3
    3590:	bd10      	pop	{r4, pc}
    3592:	46c0      	nop			; (mov r8, r8)

00003594 <__ctzsi2>:
    3594:	4241      	negs	r1, r0
    3596:	4008      	ands	r0, r1
    3598:	211c      	movs	r1, #28
    359a:	2301      	movs	r3, #1
    359c:	041b      	lsls	r3, r3, #16
    359e:	4298      	cmp	r0, r3
    35a0:	d301      	bcc.n	35a6 <__ctzsi2+0x12>
    35a2:	0c00      	lsrs	r0, r0, #16
    35a4:	3910      	subs	r1, #16
    35a6:	0a1b      	lsrs	r3, r3, #8
    35a8:	4298      	cmp	r0, r3
    35aa:	d301      	bcc.n	35b0 <__ctzsi2+0x1c>
    35ac:	0a00      	lsrs	r0, r0, #8
    35ae:	3908      	subs	r1, #8
    35b0:	091b      	lsrs	r3, r3, #4
    35b2:	4298      	cmp	r0, r3
    35b4:	d301      	bcc.n	35ba <__ctzsi2+0x26>
    35b6:	0900      	lsrs	r0, r0, #4
    35b8:	3904      	subs	r1, #4
    35ba:	a202      	add	r2, pc, #8	; (adr r2, 35c4 <__ctzsi2+0x30>)
    35bc:	5c10      	ldrb	r0, [r2, r0]
    35be:	1a40      	subs	r0, r0, r1
    35c0:	4770      	bx	lr
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	1d1d1c1b 	.word	0x1d1d1c1b
    35c8:	1e1e1e1e 	.word	0x1e1e1e1e
    35cc:	1f1f1f1f 	.word	0x1f1f1f1f
    35d0:	1f1f1f1f 	.word	0x1f1f1f1f

000035d4 <__libc_init_array>:
    35d4:	b570      	push	{r4, r5, r6, lr}
    35d6:	2600      	movs	r6, #0
    35d8:	4d0c      	ldr	r5, [pc, #48]	; (360c <__libc_init_array+0x38>)
    35da:	4c0d      	ldr	r4, [pc, #52]	; (3610 <__libc_init_array+0x3c>)
    35dc:	1b64      	subs	r4, r4, r5
    35de:	10a4      	asrs	r4, r4, #2
    35e0:	42a6      	cmp	r6, r4
    35e2:	d109      	bne.n	35f8 <__libc_init_array+0x24>
    35e4:	2600      	movs	r6, #0
    35e6:	f000 f97f 	bl	38e8 <_init>
    35ea:	4d0a      	ldr	r5, [pc, #40]	; (3614 <__libc_init_array+0x40>)
    35ec:	4c0a      	ldr	r4, [pc, #40]	; (3618 <__libc_init_array+0x44>)
    35ee:	1b64      	subs	r4, r4, r5
    35f0:	10a4      	asrs	r4, r4, #2
    35f2:	42a6      	cmp	r6, r4
    35f4:	d105      	bne.n	3602 <__libc_init_array+0x2e>
    35f6:	bd70      	pop	{r4, r5, r6, pc}
    35f8:	00b3      	lsls	r3, r6, #2
    35fa:	58eb      	ldr	r3, [r5, r3]
    35fc:	4798      	blx	r3
    35fe:	3601      	adds	r6, #1
    3600:	e7ee      	b.n	35e0 <__libc_init_array+0xc>
    3602:	00b3      	lsls	r3, r6, #2
    3604:	58eb      	ldr	r3, [r5, r3]
    3606:	4798      	blx	r3
    3608:	3601      	adds	r6, #1
    360a:	e7f2      	b.n	35f2 <__libc_init_array+0x1e>
    360c:	000038f4 	.word	0x000038f4
    3610:	000038f4 	.word	0x000038f4
    3614:	000038f4 	.word	0x000038f4
    3618:	000038f8 	.word	0x000038f8

0000361c <memcpy>:
    361c:	2300      	movs	r3, #0
    361e:	b510      	push	{r4, lr}
    3620:	429a      	cmp	r2, r3
    3622:	d100      	bne.n	3626 <memcpy+0xa>
    3624:	bd10      	pop	{r4, pc}
    3626:	5ccc      	ldrb	r4, [r1, r3]
    3628:	54c4      	strb	r4, [r0, r3]
    362a:	3301      	adds	r3, #1
    362c:	e7f8      	b.n	3620 <memcpy+0x4>

0000362e <memset>:
    362e:	0003      	movs	r3, r0
    3630:	1882      	adds	r2, r0, r2
    3632:	4293      	cmp	r3, r2
    3634:	d100      	bne.n	3638 <memset+0xa>
    3636:	4770      	bx	lr
    3638:	7019      	strb	r1, [r3, #0]
    363a:	3301      	adds	r3, #1
    363c:	e7f9      	b.n	3632 <memset+0x4>
    363e:	0000      	movs	r0, r0
    3640:	682f2e2e 	.word	0x682f2e2e
    3644:	732f6c61 	.word	0x732f6c61
    3648:	682f6372 	.word	0x682f6372
    364c:	615f6c61 	.word	0x615f6c61
    3650:	79735f63 	.word	0x79735f63
    3654:	632e636e 	.word	0x632e636e
    3658:	00000000 	.word	0x00000000
    365c:	682f2e2e 	.word	0x682f2e2e
    3660:	732f6c61 	.word	0x732f6c61
    3664:	682f6372 	.word	0x682f6372
    3668:	615f6c61 	.word	0x615f6c61
    366c:	735f6364 	.word	0x735f6364
    3670:	2e636e79 	.word	0x2e636e79
    3674:	00000063 	.word	0x00000063
    3678:	682f2e2e 	.word	0x682f2e2e
    367c:	732f6c61 	.word	0x732f6c61
    3680:	682f6372 	.word	0x682f6372
    3684:	645f6c61 	.word	0x645f6c61
    3688:	735f6361 	.word	0x735f6361
    368c:	2e636e79 	.word	0x2e636e79
    3690:	00000063 	.word	0x00000063
    3694:	682f2e2e 	.word	0x682f2e2e
    3698:	732f6c61 	.word	0x732f6c61
    369c:	682f6372 	.word	0x682f6372
    36a0:	665f6c61 	.word	0x665f6c61
    36a4:	6873616c 	.word	0x6873616c
    36a8:	0000632e 	.word	0x0000632e
    36ac:	682f2e2e 	.word	0x682f2e2e
    36b0:	732f6c61 	.word	0x732f6c61
    36b4:	682f6372 	.word	0x682f6372
    36b8:	695f6c61 	.word	0x695f6c61
    36bc:	00632e6f 	.word	0x00632e6f
    36c0:	682f2e2e 	.word	0x682f2e2e
    36c4:	732f6c61 	.word	0x732f6c61
    36c8:	682f6372 	.word	0x682f6372
    36cc:	705f6c61 	.word	0x705f6c61
    36d0:	632e6d77 	.word	0x632e6d77
    36d4:	00000000 	.word	0x00000000
    36d8:	682f2e2e 	.word	0x682f2e2e
    36dc:	732f6c61 	.word	0x732f6c61
    36e0:	682f6372 	.word	0x682f6372
    36e4:	735f6c61 	.word	0x735f6c61
    36e8:	6d5f6970 	.word	0x6d5f6970
    36ec:	6e79735f 	.word	0x6e79735f
    36f0:	00632e63 	.word	0x00632e63
    36f4:	682f2e2e 	.word	0x682f2e2e
    36f8:	732f6c61 	.word	0x732f6c61
    36fc:	682f6372 	.word	0x682f6372
    3700:	745f6c61 	.word	0x745f6c61
    3704:	72656d69 	.word	0x72656d69
    3708:	0000632e 	.word	0x0000632e
    370c:	682f2e2e 	.word	0x682f2e2e
    3710:	732f6c61 	.word	0x732f6c61
    3714:	682f6372 	.word	0x682f6372
    3718:	755f6c61 	.word	0x755f6c61
    371c:	74726173 	.word	0x74726173
    3720:	7973615f 	.word	0x7973615f
    3724:	632e636e 	.word	0x632e636e
    3728:	00000000 	.word	0x00000000
    372c:	682f2e2e 	.word	0x682f2e2e
    3730:	752f6c61 	.word	0x752f6c61
    3734:	736c6974 	.word	0x736c6974
    3738:	6372732f 	.word	0x6372732f
    373c:	6974752f 	.word	0x6974752f
    3740:	6c5f736c 	.word	0x6c5f736c
    3744:	2e747369 	.word	0x2e747369
    3748:	00000063 	.word	0x00000063
    374c:	682f2e2e 	.word	0x682f2e2e
    3750:	752f6c61 	.word	0x752f6c61
    3754:	736c6974 	.word	0x736c6974
    3758:	6372732f 	.word	0x6372732f
    375c:	6974752f 	.word	0x6974752f
    3760:	725f736c 	.word	0x725f736c
    3764:	62676e69 	.word	0x62676e69
    3768:	65666675 	.word	0x65666675
    376c:	00632e72 	.word	0x00632e72

00003770 <_cfgs>:
    3770:	42004400 00000016 00000600 00000600     .D.B............
    3780:	00000000 682f2e2e 612f6c70 70682f63     ....../hpl/ac/hp
    3790:	63615f6c 0000632e                       l_ac.c..

00003798 <_adcs>:
    3798:	00000200 00000000 00000000 00000000     ................
	...
    37b4:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    37c4:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    37d4:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

000037e4 <_map>:
    37e4:	000000ff ffffffff 682f2e2e 652f6c70     ........../hpl/e
    37f4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    3804:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    3814:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....

00003824 <_usarts>:
    3824:	00000003 40310004 00030000 0000d8ad     ......1@........

00003834 <_i2cms>:
	...

0000384c <_i2css>:
	...

0000385c <sercomspi_regs>:
    385c:	0020000c 00020000 00000000 01000009     .. .............
    386c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    387c:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    388c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    389c:	00766372 454c4449 00000000 09632509     rcv.IDLE.....%c.
    38ac:	25097525 75250975 00000a0d 000034d4     %u.%u.%u.....4..
    38bc:	000034d4 000034d4 0000349c 00003516     .4...4...4...5..
    38cc:	00003530 000034d4 000034d4 0000349c     05...4...4...4..
    38dc:	00003516 20726d54 00637653              .5..Tmr Svc.

000038e8 <_init>:
    38e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38ee:	bc08      	pop	{r3}
    38f0:	469e      	mov	lr, r3
    38f2:	4770      	bx	lr

000038f4 <__init_array_start>:
    38f4:	000000cd 	.word	0x000000cd

000038f8 <_fini>:
    38f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38fe:	bc08      	pop	{r3}
    3900:	469e      	mov	lr, r3
    3902:	4770      	bx	lr

00003904 <__fini_array_start>:
    3904:	000000a5 	.word	0x000000a5
