
OP3SAT(1).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003788  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000108  20000000  00003788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000028a4  20000108  00003890  00020108  2**2
                  ALLOC
  3 .stack        00002004  200029ac  00006134  00020108  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  6 .debug_info   00035195  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f64  00000000  00000000  0005531e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000182d4  00000000  00000000  0005b282  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001770  00000000  00000000  00073556  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000018d0  00000000  00000000  00074cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017a5c  00000000  00000000  00076596  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b673  00000000  00000000  0008dff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068cdb  00000000  00000000  000a9665  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003c34  00000000  00000000  00112340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 49 00 20 1d 01 00 00 19 01 00 00 19 01 00 00     .I. ............
	...
      2c:	7d 1f 00 00 00 00 00 00 00 00 00 00 31 20 00 00     }...........1 ..
      3c:	75 20 00 00 19 01 00 00 19 01 00 00 19 01 00 00     u ..............
      4c:	19 01 00 00 29 12 00 00 4d 13 00 00 19 01 00 00     ....)...M.......
      5c:	19 01 00 00 19 01 00 00 19 01 00 00 f1 15 00 00     ................
      6c:	19 01 00 00 19 01 00 00 49 1c 00 00 5d 1c 00 00     ........I...]...
      7c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      8c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      9c:	19 01 00 00 19 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000108 	.word	0x20000108
      c4:	00000000 	.word	0x00000000
      c8:	00003788 	.word	0x00003788

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	2000010c 	.word	0x2000010c
      f8:	00003788 	.word	0x00003788
      fc:	00003788 	.word	0x00003788
     100:	00000000 	.word	0x00000000

00000104 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     104:	b510      	push	{r4, lr}
	system_init();
     106:	4b02      	ldr	r3, [pc, #8]	; (110 <atmel_start_init+0xc>)
     108:	4798      	blx	r3

	touch_init();
     10a:	4b02      	ldr	r3, [pc, #8]	; (114 <atmel_start_init+0x10>)
     10c:	4798      	blx	r3
}
     10e:	bd10      	pop	{r4, pc}
     110:	00000509 	.word	0x00000509
     114:	00001d21 	.word	0x00001d21

00000118 <Dummy_Handler>:
     118:	e7fe      	b.n	118 <Dummy_Handler>
	...

0000011c <Reset_Handler>:
     11c:	b510      	push	{r4, lr}
     11e:	4a12      	ldr	r2, [pc, #72]	; (168 <Reset_Handler+0x4c>)
     120:	4b12      	ldr	r3, [pc, #72]	; (16c <Reset_Handler+0x50>)
     122:	429a      	cmp	r2, r3
     124:	d009      	beq.n	13a <Reset_Handler+0x1e>
     126:	4b11      	ldr	r3, [pc, #68]	; (16c <Reset_Handler+0x50>)
     128:	4a0f      	ldr	r2, [pc, #60]	; (168 <Reset_Handler+0x4c>)
     12a:	e003      	b.n	134 <Reset_Handler+0x18>
     12c:	6811      	ldr	r1, [r2, #0]
     12e:	6019      	str	r1, [r3, #0]
     130:	3304      	adds	r3, #4
     132:	3204      	adds	r2, #4
     134:	490e      	ldr	r1, [pc, #56]	; (170 <Reset_Handler+0x54>)
     136:	428b      	cmp	r3, r1
     138:	d3f8      	bcc.n	12c <Reset_Handler+0x10>
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <Reset_Handler+0x58>)
     13c:	e002      	b.n	144 <Reset_Handler+0x28>
     13e:	2200      	movs	r2, #0
     140:	601a      	str	r2, [r3, #0]
     142:	3304      	adds	r3, #4
     144:	4a0c      	ldr	r2, [pc, #48]	; (178 <Reset_Handler+0x5c>)
     146:	4293      	cmp	r3, r2
     148:	d3f9      	bcc.n	13e <Reset_Handler+0x22>
     14a:	4a0c      	ldr	r2, [pc, #48]	; (17c <Reset_Handler+0x60>)
     14c:	21ff      	movs	r1, #255	; 0xff
     14e:	4b0c      	ldr	r3, [pc, #48]	; (180 <Reset_Handler+0x64>)
     150:	438b      	bics	r3, r1
     152:	6093      	str	r3, [r2, #8]
     154:	4a0b      	ldr	r2, [pc, #44]	; (184 <Reset_Handler+0x68>)
     156:	6851      	ldr	r1, [r2, #4]
     158:	2380      	movs	r3, #128	; 0x80
     15a:	430b      	orrs	r3, r1
     15c:	6053      	str	r3, [r2, #4]
     15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <Reset_Handler+0x6c>)
     160:	4798      	blx	r3
     162:	4b0a      	ldr	r3, [pc, #40]	; (18c <Reset_Handler+0x70>)
     164:	4798      	blx	r3
     166:	e7fe      	b.n	166 <Reset_Handler+0x4a>
     168:	00003788 	.word	0x00003788
     16c:	20000000 	.word	0x20000000
     170:	20000108 	.word	0x20000108
     174:	20000108 	.word	0x20000108
     178:	200029ac 	.word	0x200029ac
     17c:	e000ed00 	.word	0xe000ed00
     180:	00000000 	.word	0x00000000
     184:	41004000 	.word	0x41004000
     188:	00003455 	.word	0x00003455
     18c:	00001cd1 	.word	0x00001cd1

00000190 <PTC_0_clock_init>:
     190:	4a04      	ldr	r2, [pc, #16]	; (1a4 <PTC_0_clock_init+0x14>)
     192:	6a11      	ldr	r1, [r2, #32]
     194:	2380      	movs	r3, #128	; 0x80
     196:	031b      	lsls	r3, r3, #12
     198:	430b      	orrs	r3, r1
     19a:	6213      	str	r3, [r2, #32]
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <PTC_0_clock_init+0x18>)
     19e:	4b03      	ldr	r3, [pc, #12]	; (1ac <PTC_0_clock_init+0x1c>)
     1a0:	805a      	strh	r2, [r3, #2]
     1a2:	4770      	bx	lr
     1a4:	40000400 	.word	0x40000400
     1a8:	0000401b 	.word	0x0000401b
     1ac:	40000c00 	.word	0x40000c00

000001b0 <TIMER_0_init>:
     1b0:	b510      	push	{r4, lr}
     1b2:	4a08      	ldr	r2, [pc, #32]	; (1d4 <TIMER_0_init+0x24>)
     1b4:	6a11      	ldr	r1, [r2, #32]
     1b6:	2380      	movs	r3, #128	; 0x80
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	430b      	orrs	r3, r1
     1bc:	6213      	str	r3, [r2, #32]
     1be:	4a06      	ldr	r2, [pc, #24]	; (1d8 <TIMER_0_init+0x28>)
     1c0:	4b06      	ldr	r3, [pc, #24]	; (1dc <TIMER_0_init+0x2c>)
     1c2:	805a      	strh	r2, [r3, #2]
     1c4:	4b06      	ldr	r3, [pc, #24]	; (1e0 <TIMER_0_init+0x30>)
     1c6:	4798      	blx	r3
     1c8:	0002      	movs	r2, r0
     1ca:	4906      	ldr	r1, [pc, #24]	; (1e4 <TIMER_0_init+0x34>)
     1cc:	4806      	ldr	r0, [pc, #24]	; (1e8 <TIMER_0_init+0x38>)
     1ce:	4b07      	ldr	r3, [pc, #28]	; (1ec <TIMER_0_init+0x3c>)
     1d0:	4798      	blx	r3
     1d2:	bd10      	pop	{r4, pc}
     1d4:	40000400 	.word	0x40000400
     1d8:	00004013 	.word	0x00004013
     1dc:	40000c00 	.word	0x40000c00
     1e0:	00001c41 	.word	0x00001c41
     1e4:	42002400 	.word	0x42002400
     1e8:	20002988 	.word	0x20002988
     1ec:	00000a29 	.word	0x00000a29

000001f0 <ADC_0_CLOCK_init>:
     1f0:	4a04      	ldr	r2, [pc, #16]	; (204 <ADC_0_CLOCK_init+0x14>)
     1f2:	6a11      	ldr	r1, [r2, #32]
     1f4:	2380      	movs	r3, #128	; 0x80
     1f6:	025b      	lsls	r3, r3, #9
     1f8:	430b      	orrs	r3, r1
     1fa:	6213      	str	r3, [r2, #32]
     1fc:	4a02      	ldr	r2, [pc, #8]	; (208 <ADC_0_CLOCK_init+0x18>)
     1fe:	4b03      	ldr	r3, [pc, #12]	; (20c <ADC_0_CLOCK_init+0x1c>)
     200:	805a      	strh	r2, [r3, #2]
     202:	4770      	bx	lr
     204:	40000400 	.word	0x40000400
     208:	00004017 	.word	0x00004017
     20c:	40000c00 	.word	0x40000c00

00000210 <ADC_0_init>:
     210:	b510      	push	{r4, lr}
     212:	4b04      	ldr	r3, [pc, #16]	; (224 <ADC_0_init+0x14>)
     214:	4798      	blx	r3
     216:	2200      	movs	r2, #0
     218:	4903      	ldr	r1, [pc, #12]	; (228 <ADC_0_init+0x18>)
     21a:	4804      	ldr	r0, [pc, #16]	; (22c <ADC_0_init+0x1c>)
     21c:	4b04      	ldr	r3, [pc, #16]	; (230 <ADC_0_init+0x20>)
     21e:	4798      	blx	r3
     220:	bd10      	pop	{r4, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	000001f1 	.word	0x000001f1
     228:	42004000 	.word	0x42004000
     22c:	20002960 	.word	0x20002960
     230:	000005d1 	.word	0x000005d1

00000234 <EXTERNAL_IRQ_0_init>:
     234:	b510      	push	{r4, lr}
     236:	4a03      	ldr	r2, [pc, #12]	; (244 <EXTERNAL_IRQ_0_init+0x10>)
     238:	4b03      	ldr	r3, [pc, #12]	; (248 <EXTERNAL_IRQ_0_init+0x14>)
     23a:	805a      	strh	r2, [r3, #2]
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <EXTERNAL_IRQ_0_init+0x18>)
     23e:	4798      	blx	r3
     240:	bd10      	pop	{r4, pc}
     242:	46c0      	nop			; (mov r8, r8)
     244:	00004003 	.word	0x00004003
     248:	40000c00 	.word	0x40000c00
     24c:	000006ed 	.word	0x000006ed

00000250 <FLASH_0_CLOCK_init>:
     250:	4a02      	ldr	r2, [pc, #8]	; (25c <FLASH_0_CLOCK_init+0xc>)
     252:	69d3      	ldr	r3, [r2, #28]
     254:	2104      	movs	r1, #4
     256:	430b      	orrs	r3, r1
     258:	61d3      	str	r3, [r2, #28]
     25a:	4770      	bx	lr
     25c:	40000400 	.word	0x40000400

00000260 <FLASH_0_init>:
     260:	b510      	push	{r4, lr}
     262:	4b03      	ldr	r3, [pc, #12]	; (270 <FLASH_0_init+0x10>)
     264:	4798      	blx	r3
     266:	4903      	ldr	r1, [pc, #12]	; (274 <FLASH_0_init+0x14>)
     268:	4803      	ldr	r0, [pc, #12]	; (278 <FLASH_0_init+0x18>)
     26a:	4b04      	ldr	r3, [pc, #16]	; (27c <FLASH_0_init+0x1c>)
     26c:	4798      	blx	r3
     26e:	bd10      	pop	{r4, pc}
     270:	00000251 	.word	0x00000251
     274:	41004000 	.word	0x41004000
     278:	20002940 	.word	0x20002940
     27c:	00000739 	.word	0x00000739

00000280 <SPI_0_PORT_init>:
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	46ce      	mov	lr, r9
     284:	4647      	mov	r7, r8
     286:	b580      	push	{r7, lr}
     288:	22c0      	movs	r2, #192	; 0xc0
     28a:	05d2      	lsls	r2, r2, #23
     28c:	2401      	movs	r4, #1
     28e:	6154      	str	r4, [r2, #20]
     290:	6094      	str	r4, [r2, #8]
     292:	4b25      	ldr	r3, [pc, #148]	; (328 <SPI_0_PORT_init+0xa8>)
     294:	4925      	ldr	r1, [pc, #148]	; (32c <SPI_0_PORT_init+0xac>)
     296:	6299      	str	r1, [r3, #40]	; 0x28
     298:	27c0      	movs	r7, #192	; 0xc0
     29a:	063f      	lsls	r7, r7, #24
     29c:	629f      	str	r7, [r3, #40]	; 0x28
     29e:	2040      	movs	r0, #64	; 0x40
     2a0:	5c19      	ldrb	r1, [r3, r0]
     2a2:	43a1      	bics	r1, r4
     2a4:	2501      	movs	r5, #1
     2a6:	4329      	orrs	r1, r5
     2a8:	b2c9      	uxtb	r1, r1
     2aa:	5419      	strb	r1, [r3, r0]
     2ac:	2630      	movs	r6, #48	; 0x30
     2ae:	5d99      	ldrb	r1, [r3, r6]
     2b0:	3831      	subs	r0, #49	; 0x31
     2b2:	4681      	mov	r9, r0
     2b4:	4381      	bics	r1, r0
     2b6:	4688      	mov	r8, r1
     2b8:	2103      	movs	r1, #3
     2ba:	468c      	mov	ip, r1
     2bc:	4661      	mov	r1, ip
     2be:	4640      	mov	r0, r8
     2c0:	4308      	orrs	r0, r1
     2c2:	b2c1      	uxtb	r1, r0
     2c4:	5599      	strb	r1, [r3, r6]
     2c6:	2102      	movs	r1, #2
     2c8:	6151      	str	r1, [r2, #20]
     2ca:	6091      	str	r1, [r2, #8]
     2cc:	4918      	ldr	r1, [pc, #96]	; (330 <SPI_0_PORT_init+0xb0>)
     2ce:	6299      	str	r1, [r3, #40]	; 0x28
     2d0:	629f      	str	r7, [r3, #40]	; 0x28
     2d2:	2741      	movs	r7, #65	; 0x41
     2d4:	5dd9      	ldrb	r1, [r3, r7]
     2d6:	43a1      	bics	r1, r4
     2d8:	4329      	orrs	r1, r5
     2da:	b2c9      	uxtb	r1, r1
     2dc:	55d9      	strb	r1, [r3, r7]
     2de:	5d99      	ldrb	r1, [r3, r6]
     2e0:	3f32      	subs	r7, #50	; 0x32
     2e2:	4039      	ands	r1, r7
     2e4:	2730      	movs	r7, #48	; 0x30
     2e6:	4339      	orrs	r1, r7
     2e8:	b2c9      	uxtb	r1, r1
     2ea:	5599      	strb	r1, [r3, r6]
     2ec:	2180      	movs	r1, #128	; 0x80
     2ee:	02c9      	lsls	r1, r1, #11
     2f0:	6051      	str	r1, [r2, #4]
     2f2:	4a10      	ldr	r2, [pc, #64]	; (334 <SPI_0_PORT_init+0xb4>)
     2f4:	629a      	str	r2, [r3, #40]	; 0x28
     2f6:	4a10      	ldr	r2, [pc, #64]	; (338 <SPI_0_PORT_init+0xb8>)
     2f8:	629a      	str	r2, [r3, #40]	; 0x28
     2fa:	2152      	movs	r1, #82	; 0x52
     2fc:	5c5a      	ldrb	r2, [r3, r1]
     2fe:	3e2c      	subs	r6, #44	; 0x2c
     300:	43b2      	bics	r2, r6
     302:	545a      	strb	r2, [r3, r1]
     304:	5c5a      	ldrb	r2, [r3, r1]
     306:	43a2      	bics	r2, r4
     308:	432a      	orrs	r2, r5
     30a:	b2d2      	uxtb	r2, r2
     30c:	545a      	strb	r2, [r3, r1]
     30e:	3919      	subs	r1, #25
     310:	5c5a      	ldrb	r2, [r3, r1]
     312:	4648      	mov	r0, r9
     314:	4382      	bics	r2, r0
     316:	2002      	movs	r0, #2
     318:	4302      	orrs	r2, r0
     31a:	b2d2      	uxtb	r2, r2
     31c:	545a      	strb	r2, [r3, r1]
     31e:	bc0c      	pop	{r2, r3}
     320:	4690      	mov	r8, r2
     322:	4699      	mov	r9, r3
     324:	bdf0      	pop	{r4, r5, r6, r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	41004400 	.word	0x41004400
     32c:	40000001 	.word	0x40000001
     330:	40000002 	.word	0x40000002
     334:	40020000 	.word	0x40020000
     338:	c0020004 	.word	0xc0020004

0000033c <SPI_0_CLOCK_init>:
     33c:	4a04      	ldr	r2, [pc, #16]	; (350 <SPI_0_CLOCK_init+0x14>)
     33e:	6a13      	ldr	r3, [r2, #32]
     340:	2108      	movs	r1, #8
     342:	430b      	orrs	r3, r1
     344:	6213      	str	r3, [r2, #32]
     346:	4a03      	ldr	r2, [pc, #12]	; (354 <SPI_0_CLOCK_init+0x18>)
     348:	4b03      	ldr	r3, [pc, #12]	; (358 <SPI_0_CLOCK_init+0x1c>)
     34a:	805a      	strh	r2, [r3, #2]
     34c:	4770      	bx	lr
     34e:	46c0      	nop			; (mov r8, r8)
     350:	40000400 	.word	0x40000400
     354:	0000400e 	.word	0x0000400e
     358:	40000c00 	.word	0x40000c00

0000035c <SPI_0_init>:
     35c:	b510      	push	{r4, lr}
     35e:	4b04      	ldr	r3, [pc, #16]	; (370 <SPI_0_init+0x14>)
     360:	4798      	blx	r3
     362:	4904      	ldr	r1, [pc, #16]	; (374 <SPI_0_init+0x18>)
     364:	4804      	ldr	r0, [pc, #16]	; (378 <SPI_0_init+0x1c>)
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <SPI_0_init+0x20>)
     368:	4798      	blx	r3
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <SPI_0_init+0x24>)
     36c:	4798      	blx	r3
     36e:	bd10      	pop	{r4, pc}
     370:	0000033d 	.word	0x0000033d
     374:	42000c00 	.word	0x42000c00
     378:	20002970 	.word	0x20002970
     37c:	00000855 	.word	0x00000855
     380:	00000281 	.word	0x00000281

00000384 <SERIAL_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SERIAL_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2120      	movs	r1, #32
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SERIAL_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SERIAL_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004010 	.word	0x00004010
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SERIAL_PORT_init>:
     3a4:	b530      	push	{r4, r5, lr}
     3a6:	4b0f      	ldr	r3, [pc, #60]	; (3e4 <SERIAL_PORT_init+0x40>)
     3a8:	2258      	movs	r2, #88	; 0x58
     3aa:	5c99      	ldrb	r1, [r3, r2]
     3ac:	2501      	movs	r5, #1
     3ae:	43a9      	bics	r1, r5
     3b0:	2401      	movs	r4, #1
     3b2:	4321      	orrs	r1, r4
     3b4:	b2c9      	uxtb	r1, r1
     3b6:	5499      	strb	r1, [r3, r2]
     3b8:	203c      	movs	r0, #60	; 0x3c
     3ba:	5c19      	ldrb	r1, [r3, r0]
     3bc:	3a49      	subs	r2, #73	; 0x49
     3be:	4391      	bics	r1, r2
     3c0:	2202      	movs	r2, #2
     3c2:	4311      	orrs	r1, r2
     3c4:	b2c9      	uxtb	r1, r1
     3c6:	5419      	strb	r1, [r3, r0]
     3c8:	2159      	movs	r1, #89	; 0x59
     3ca:	5c5a      	ldrb	r2, [r3, r1]
     3cc:	43aa      	bics	r2, r5
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
     3d2:	545a      	strb	r2, [r3, r1]
     3d4:	5c1a      	ldrb	r2, [r3, r0]
     3d6:	394a      	subs	r1, #74	; 0x4a
     3d8:	400a      	ands	r2, r1
     3da:	2120      	movs	r1, #32
     3dc:	430a      	orrs	r2, r1
     3de:	b2d2      	uxtb	r2, r2
     3e0:	541a      	strb	r2, [r3, r0]
     3e2:	bd30      	pop	{r4, r5, pc}
     3e4:	41004400 	.word	0x41004400

000003e8 <SERIAL_init>:
     3e8:	b510      	push	{r4, lr}
     3ea:	b082      	sub	sp, #8
     3ec:	4b06      	ldr	r3, [pc, #24]	; (408 <SERIAL_init+0x20>)
     3ee:	4798      	blx	r3
     3f0:	2300      	movs	r3, #0
     3f2:	9300      	str	r3, [sp, #0]
     3f4:	3310      	adds	r3, #16
     3f6:	4a05      	ldr	r2, [pc, #20]	; (40c <SERIAL_init+0x24>)
     3f8:	4905      	ldr	r1, [pc, #20]	; (410 <SERIAL_init+0x28>)
     3fa:	4806      	ldr	r0, [pc, #24]	; (414 <SERIAL_init+0x2c>)
     3fc:	4c06      	ldr	r4, [pc, #24]	; (418 <SERIAL_init+0x30>)
     3fe:	47a0      	blx	r4
     400:	4b06      	ldr	r3, [pc, #24]	; (41c <SERIAL_init+0x34>)
     402:	4798      	blx	r3
     404:	b002      	add	sp, #8
     406:	bd10      	pop	{r4, pc}
     408:	00000385 	.word	0x00000385
     40c:	20000124 	.word	0x20000124
     410:	42001400 	.word	0x42001400
     414:	200028d4 	.word	0x200028d4
     418:	00000bd9 	.word	0x00000bd9
     41c:	000003a5 	.word	0x000003a5

00000420 <delay_driver_init>:
     420:	b510      	push	{r4, lr}
     422:	4802      	ldr	r0, [pc, #8]	; (42c <delay_driver_init+0xc>)
     424:	4b02      	ldr	r3, [pc, #8]	; (430 <delay_driver_init+0x10>)
     426:	4798      	blx	r3
     428:	bd10      	pop	{r4, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	e000e010 	.word	0xe000e010
     430:	00000675 	.word	0x00000675

00000434 <PWM_0_CLOCK_init>:
     434:	4a04      	ldr	r2, [pc, #16]	; (448 <PWM_0_CLOCK_init+0x14>)
     436:	6a11      	ldr	r1, [r2, #32]
     438:	2380      	movs	r3, #128	; 0x80
     43a:	005b      	lsls	r3, r3, #1
     43c:	430b      	orrs	r3, r1
     43e:	6213      	str	r3, [r2, #32]
     440:	4a02      	ldr	r2, [pc, #8]	; (44c <PWM_0_CLOCK_init+0x18>)
     442:	4b03      	ldr	r3, [pc, #12]	; (450 <PWM_0_CLOCK_init+0x1c>)
     444:	805a      	strh	r2, [r3, #2]
     446:	4770      	bx	lr
     448:	40000400 	.word	0x40000400
     44c:	00004013 	.word	0x00004013
     450:	40000c00 	.word	0x40000c00

00000454 <PWM_0_init>:
     454:	b510      	push	{r4, lr}
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <PWM_0_init+0x18>)
     458:	4798      	blx	r3
     45a:	4b05      	ldr	r3, [pc, #20]	; (470 <PWM_0_init+0x1c>)
     45c:	4798      	blx	r3
     45e:	0002      	movs	r2, r0
     460:	4904      	ldr	r1, [pc, #16]	; (474 <PWM_0_init+0x20>)
     462:	4805      	ldr	r0, [pc, #20]	; (478 <PWM_0_init+0x24>)
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <PWM_0_init+0x28>)
     466:	4798      	blx	r3
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	00000435 	.word	0x00000435
     470:	00001c45 	.word	0x00001c45
     474:	42002000 	.word	0x42002000
     478:	20002924 	.word	0x20002924
     47c:	0000080d 	.word	0x0000080d

00000480 <AC_0_CLOCK_init>:
     480:	4a05      	ldr	r2, [pc, #20]	; (498 <AC_0_CLOCK_init+0x18>)
     482:	6a11      	ldr	r1, [r2, #32]
     484:	2380      	movs	r3, #128	; 0x80
     486:	029b      	lsls	r3, r3, #10
     488:	430b      	orrs	r3, r1
     48a:	6213      	str	r3, [r2, #32]
     48c:	4b03      	ldr	r3, [pc, #12]	; (49c <AC_0_CLOCK_init+0x1c>)
     48e:	4a04      	ldr	r2, [pc, #16]	; (4a0 <AC_0_CLOCK_init+0x20>)
     490:	805a      	strh	r2, [r3, #2]
     492:	4a04      	ldr	r2, [pc, #16]	; (4a4 <AC_0_CLOCK_init+0x24>)
     494:	805a      	strh	r2, [r3, #2]
     496:	4770      	bx	lr
     498:	40000400 	.word	0x40000400
     49c:	40000c00 	.word	0x40000c00
     4a0:	00004018 	.word	0x00004018
     4a4:	00004019 	.word	0x00004019

000004a8 <AC_0_init>:
     4a8:	b510      	push	{r4, lr}
     4aa:	4b03      	ldr	r3, [pc, #12]	; (4b8 <AC_0_init+0x10>)
     4ac:	4798      	blx	r3
     4ae:	4903      	ldr	r1, [pc, #12]	; (4bc <AC_0_init+0x14>)
     4b0:	4803      	ldr	r0, [pc, #12]	; (4c0 <AC_0_init+0x18>)
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <AC_0_init+0x1c>)
     4b4:	4798      	blx	r3
     4b6:	bd10      	pop	{r4, pc}
     4b8:	00000481 	.word	0x00000481
     4bc:	42004400 	.word	0x42004400
     4c0:	2000295c 	.word	0x2000295c
     4c4:	00000599 	.word	0x00000599

000004c8 <DAC_0_CLOCK_init>:
     4c8:	4a04      	ldr	r2, [pc, #16]	; (4dc <DAC_0_CLOCK_init+0x14>)
     4ca:	6a11      	ldr	r1, [r2, #32]
     4cc:	2380      	movs	r3, #128	; 0x80
     4ce:	02db      	lsls	r3, r3, #11
     4d0:	430b      	orrs	r3, r1
     4d2:	6213      	str	r3, [r2, #32]
     4d4:	4a02      	ldr	r2, [pc, #8]	; (4e0 <DAC_0_CLOCK_init+0x18>)
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <DAC_0_CLOCK_init+0x1c>)
     4d8:	805a      	strh	r2, [r3, #2]
     4da:	4770      	bx	lr
     4dc:	40000400 	.word	0x40000400
     4e0:	0000401a 	.word	0x0000401a
     4e4:	40000c00 	.word	0x40000c00

000004e8 <DAC_0_init>:
     4e8:	b510      	push	{r4, lr}
     4ea:	4b03      	ldr	r3, [pc, #12]	; (4f8 <DAC_0_init+0x10>)
     4ec:	4798      	blx	r3
     4ee:	4903      	ldr	r1, [pc, #12]	; (4fc <DAC_0_init+0x14>)
     4f0:	4803      	ldr	r0, [pc, #12]	; (500 <DAC_0_init+0x18>)
     4f2:	4b04      	ldr	r3, [pc, #16]	; (504 <DAC_0_init+0x1c>)
     4f4:	4798      	blx	r3
     4f6:	bd10      	pop	{r4, pc}
     4f8:	000004c9 	.word	0x000004c9
     4fc:	42004800 	.word	0x42004800
     500:	20002964 	.word	0x20002964
     504:	00000625 	.word	0x00000625

00000508 <system_init>:
     508:	b510      	push	{r4, lr}
     50a:	4b15      	ldr	r3, [pc, #84]	; (560 <system_init+0x58>)
     50c:	4798      	blx	r3
     50e:	22c0      	movs	r2, #192	; 0xc0
     510:	05d2      	lsls	r2, r2, #23
     512:	2180      	movs	r1, #128	; 0x80
     514:	01c9      	lsls	r1, r1, #7
     516:	6151      	str	r1, [r2, #20]
     518:	6091      	str	r1, [r2, #8]
     51a:	4b12      	ldr	r3, [pc, #72]	; (564 <system_init+0x5c>)
     51c:	4812      	ldr	r0, [pc, #72]	; (568 <system_init+0x60>)
     51e:	6298      	str	r0, [r3, #40]	; 0x28
     520:	20c0      	movs	r0, #192	; 0xc0
     522:	0600      	lsls	r0, r0, #24
     524:	6298      	str	r0, [r3, #40]	; 0x28
     526:	6151      	str	r1, [r2, #20]
     528:	214e      	movs	r1, #78	; 0x4e
     52a:	5c5a      	ldrb	r2, [r3, r1]
     52c:	2001      	movs	r0, #1
     52e:	4382      	bics	r2, r0
     530:	545a      	strb	r2, [r3, r1]
     532:	4b0e      	ldr	r3, [pc, #56]	; (56c <system_init+0x64>)
     534:	4798      	blx	r3
     536:	4b0e      	ldr	r3, [pc, #56]	; (570 <system_init+0x68>)
     538:	4798      	blx	r3
     53a:	4b0e      	ldr	r3, [pc, #56]	; (574 <system_init+0x6c>)
     53c:	4798      	blx	r3
     53e:	4b0e      	ldr	r3, [pc, #56]	; (578 <system_init+0x70>)
     540:	4798      	blx	r3
     542:	4b0e      	ldr	r3, [pc, #56]	; (57c <system_init+0x74>)
     544:	4798      	blx	r3
     546:	4b0e      	ldr	r3, [pc, #56]	; (580 <system_init+0x78>)
     548:	4798      	blx	r3
     54a:	4b0e      	ldr	r3, [pc, #56]	; (584 <system_init+0x7c>)
     54c:	4798      	blx	r3
     54e:	4b0e      	ldr	r3, [pc, #56]	; (588 <system_init+0x80>)
     550:	4798      	blx	r3
     552:	4b0e      	ldr	r3, [pc, #56]	; (58c <system_init+0x84>)
     554:	4798      	blx	r3
     556:	4b0e      	ldr	r3, [pc, #56]	; (590 <system_init+0x88>)
     558:	4798      	blx	r3
     55a:	4b0e      	ldr	r3, [pc, #56]	; (594 <system_init+0x8c>)
     55c:	4798      	blx	r3
     55e:	bd10      	pop	{r4, pc}
     560:	000010f9 	.word	0x000010f9
     564:	41004400 	.word	0x41004400
     568:	40004000 	.word	0x40004000
     56c:	00000211 	.word	0x00000211
     570:	00000235 	.word	0x00000235
     574:	00000261 	.word	0x00000261
     578:	0000035d 	.word	0x0000035d
     57c:	000003e9 	.word	0x000003e9
     580:	00000421 	.word	0x00000421
     584:	00000455 	.word	0x00000455
     588:	000001b1 	.word	0x000001b1
     58c:	000004a9 	.word	0x000004a9
     590:	000004e9 	.word	0x000004e9
     594:	00000191 	.word	0x00000191

00000598 <ac_sync_init>:
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	0004      	movs	r4, r0
     59c:	000d      	movs	r5, r1
     59e:	2800      	cmp	r0, #0
     5a0:	d00d      	beq.n	5be <ac_sync_init+0x26>
     5a2:	2900      	cmp	r1, #0
     5a4:	d009      	beq.n	5ba <ac_sync_init+0x22>
     5a6:	2001      	movs	r0, #1
     5a8:	2231      	movs	r2, #49	; 0x31
     5aa:	4906      	ldr	r1, [pc, #24]	; (5c4 <ac_sync_init+0x2c>)
     5ac:	4b06      	ldr	r3, [pc, #24]	; (5c8 <ac_sync_init+0x30>)
     5ae:	4798      	blx	r3
     5b0:	0029      	movs	r1, r5
     5b2:	0020      	movs	r0, r4
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <ac_sync_init+0x34>)
     5b6:	4798      	blx	r3
     5b8:	bd70      	pop	{r4, r5, r6, pc}
     5ba:	2000      	movs	r0, #0
     5bc:	e7f4      	b.n	5a8 <ac_sync_init+0x10>
     5be:	2000      	movs	r0, #0
     5c0:	e7f2      	b.n	5a8 <ac_sync_init+0x10>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	000034c0 	.word	0x000034c0
     5c8:	00000d19 	.word	0x00000d19
     5cc:	00000f3d 	.word	0x00000f3d

000005d0 <adc_sync_init>:
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
     5d6:	2800      	cmp	r0, #0
     5d8:	d00d      	beq.n	5f6 <adc_sync_init+0x26>
     5da:	2900      	cmp	r1, #0
     5dc:	d009      	beq.n	5f2 <adc_sync_init+0x22>
     5de:	2001      	movs	r0, #1
     5e0:	2239      	movs	r2, #57	; 0x39
     5e2:	4906      	ldr	r1, [pc, #24]	; (5fc <adc_sync_init+0x2c>)
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <adc_sync_init+0x30>)
     5e6:	4798      	blx	r3
     5e8:	0029      	movs	r1, r5
     5ea:	0020      	movs	r0, r4
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <adc_sync_init+0x34>)
     5ee:	4798      	blx	r3
     5f0:	bd70      	pop	{r4, r5, r6, pc}
     5f2:	2000      	movs	r0, #0
     5f4:	e7f4      	b.n	5e0 <adc_sync_init+0x10>
     5f6:	2000      	movs	r0, #0
     5f8:	e7f2      	b.n	5e0 <adc_sync_init+0x10>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	000034dc 	.word	0x000034dc
     600:	00000d19 	.word	0x00000d19
     604:	000010b5 	.word	0x000010b5

00000608 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     608:	f3ef 8310 	mrs	r3, PRIMASK
     60c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     60e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     610:	f3bf 8f5f 	dmb	sy
     614:	4770      	bx	lr

00000616 <atomic_leave_critical>:
     616:	f3bf 8f5f 	dmb	sy
     61a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     61c:	f383 8810 	msr	PRIMASK, r3
     620:	4770      	bx	lr
	...

00000624 <dac_sync_init>:
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0004      	movs	r4, r0
     628:	000d      	movs	r5, r1
     62a:	2800      	cmp	r0, #0
     62c:	d010      	beq.n	650 <dac_sync_init+0x2c>
     62e:	2900      	cmp	r1, #0
     630:	d00c      	beq.n	64c <dac_sync_init+0x28>
     632:	2001      	movs	r0, #1
     634:	2232      	movs	r2, #50	; 0x32
     636:	490c      	ldr	r1, [pc, #48]	; (668 <dac_sync_init+0x44>)
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <dac_sync_init+0x48>)
     63a:	4798      	blx	r3
     63c:	0029      	movs	r1, r5
     63e:	0020      	movs	r0, r4
     640:	4b0b      	ldr	r3, [pc, #44]	; (670 <dac_sync_init+0x4c>)
     642:	4798      	blx	r3
     644:	2800      	cmp	r0, #0
     646:	d10e      	bne.n	666 <dac_sync_init+0x42>
     648:	2300      	movs	r3, #0
     64a:	e00a      	b.n	662 <dac_sync_init+0x3e>
     64c:	2000      	movs	r0, #0
     64e:	e7f1      	b.n	634 <dac_sync_init+0x10>
     650:	2000      	movs	r0, #0
     652:	e7ef      	b.n	634 <dac_sync_init+0x10>
     654:	00da      	lsls	r2, r3, #3
     656:	18a2      	adds	r2, r4, r2
     658:	2100      	movs	r1, #0
     65a:	6051      	str	r1, [r2, #4]
     65c:	6091      	str	r1, [r2, #8]
     65e:	3301      	adds	r3, #1
     660:	b2db      	uxtb	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	d0f6      	beq.n	654 <dac_sync_init+0x30>
     666:	bd70      	pop	{r4, r5, r6, pc}
     668:	000034f8 	.word	0x000034f8
     66c:	00000d19 	.word	0x00000d19
     670:	0000116d 	.word	0x0000116d

00000674 <delay_init>:
     674:	b510      	push	{r4, lr}
     676:	4b02      	ldr	r3, [pc, #8]	; (680 <delay_init+0xc>)
     678:	6018      	str	r0, [r3, #0]
     67a:	4b02      	ldr	r3, [pc, #8]	; (684 <delay_init+0x10>)
     67c:	4798      	blx	r3
     67e:	bd10      	pop	{r4, pc}
     680:	20000134 	.word	0x20000134
     684:	00001919 	.word	0x00001919

00000688 <delay_ms>:
     688:	b510      	push	{r4, lr}
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <delay_ms+0x14>)
     68c:	681c      	ldr	r4, [r3, #0]
     68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <delay_ms+0x18>)
     690:	4798      	blx	r3
     692:	0001      	movs	r1, r0
     694:	0020      	movs	r0, r4
     696:	4b03      	ldr	r3, [pc, #12]	; (6a4 <delay_ms+0x1c>)
     698:	4798      	blx	r3
     69a:	bd10      	pop	{r4, pc}
     69c:	20000134 	.word	0x20000134
     6a0:	000010ed 	.word	0x000010ed
     6a4:	00001925 	.word	0x00001925

000006a8 <process_ext_irq>:
     6a8:	b570      	push	{r4, r5, r6, lr}
     6aa:	2501      	movs	r5, #1
     6ac:	2400      	movs	r4, #0
     6ae:	e007      	b.n	6c0 <process_ext_irq+0x18>
     6b0:	4a0d      	ldr	r2, [pc, #52]	; (6e8 <process_ext_irq+0x40>)
     6b2:	58b3      	ldr	r3, [r6, r2]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d000      	beq.n	6ba <process_ext_irq+0x12>
     6b8:	4798      	blx	r3
     6ba:	bd70      	pop	{r4, r5, r6, pc}
     6bc:	3a01      	subs	r2, #1
     6be:	b2d5      	uxtb	r5, r2
     6c0:	42ac      	cmp	r4, r5
     6c2:	d8fa      	bhi.n	6ba <process_ext_irq+0x12>
     6c4:	192b      	adds	r3, r5, r4
     6c6:	105b      	asrs	r3, r3, #1
     6c8:	b2da      	uxtb	r2, r3
     6ca:	2a00      	cmp	r2, #0
     6cc:	d1f5      	bne.n	6ba <process_ext_irq+0x12>
     6ce:	21ff      	movs	r1, #255	; 0xff
     6d0:	400b      	ands	r3, r1
     6d2:	00de      	lsls	r6, r3, #3
     6d4:	4904      	ldr	r1, [pc, #16]	; (6e8 <process_ext_irq+0x40>)
     6d6:	1989      	adds	r1, r1, r6
     6d8:	6849      	ldr	r1, [r1, #4]
     6da:	4281      	cmp	r1, r0
     6dc:	d0e8      	beq.n	6b0 <process_ext_irq+0x8>
     6de:	d2ed      	bcs.n	6bc <process_ext_irq+0x14>
     6e0:	3201      	adds	r2, #1
     6e2:	b2d4      	uxtb	r4, r2
     6e4:	e7ec      	b.n	6c0 <process_ext_irq+0x18>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	20000138 	.word	0x20000138

000006ec <ext_irq_init>:
     6ec:	b510      	push	{r4, lr}
     6ee:	2300      	movs	r3, #0
     6f0:	2b00      	cmp	r3, #0
     6f2:	d003      	beq.n	6fc <ext_irq_init+0x10>
     6f4:	4807      	ldr	r0, [pc, #28]	; (714 <ext_irq_init+0x28>)
     6f6:	4b08      	ldr	r3, [pc, #32]	; (718 <ext_irq_init+0x2c>)
     6f8:	4798      	blx	r3
     6fa:	bd10      	pop	{r4, pc}
     6fc:	4a07      	ldr	r2, [pc, #28]	; (71c <ext_irq_init+0x30>)
     6fe:	00d9      	lsls	r1, r3, #3
     700:	1850      	adds	r0, r2, r1
     702:	2401      	movs	r4, #1
     704:	4264      	negs	r4, r4
     706:	6044      	str	r4, [r0, #4]
     708:	2000      	movs	r0, #0
     70a:	5088      	str	r0, [r1, r2]
     70c:	3301      	adds	r3, #1
     70e:	b29b      	uxth	r3, r3
     710:	e7ee      	b.n	6f0 <ext_irq_init+0x4>
     712:	46c0      	nop			; (mov r8, r8)
     714:	000006a9 	.word	0x000006a9
     718:	00001199 	.word	0x00001199
     71c:	20000138 	.word	0x20000138

00000720 <flash_ready>:
     720:	b510      	push	{r4, lr}
     722:	6943      	ldr	r3, [r0, #20]
     724:	2b00      	cmp	r3, #0
     726:	d000      	beq.n	72a <flash_ready+0xa>
     728:	4798      	blx	r3
     72a:	bd10      	pop	{r4, pc}

0000072c <flash_error>:
     72c:	b510      	push	{r4, lr}
     72e:	6983      	ldr	r3, [r0, #24]
     730:	2b00      	cmp	r3, #0
     732:	d000      	beq.n	736 <flash_error+0xa>
     734:	4798      	blx	r3
     736:	bd10      	pop	{r4, pc}

00000738 <flash_init>:
     738:	b570      	push	{r4, r5, r6, lr}
     73a:	0004      	movs	r4, r0
     73c:	000d      	movs	r5, r1
     73e:	2800      	cmp	r0, #0
     740:	d013      	beq.n	76a <flash_init+0x32>
     742:	2900      	cmp	r1, #0
     744:	d00f      	beq.n	766 <flash_init+0x2e>
     746:	2001      	movs	r0, #1
     748:	2238      	movs	r2, #56	; 0x38
     74a:	4909      	ldr	r1, [pc, #36]	; (770 <flash_init+0x38>)
     74c:	4b09      	ldr	r3, [pc, #36]	; (774 <flash_init+0x3c>)
     74e:	4798      	blx	r3
     750:	0029      	movs	r1, r5
     752:	0020      	movs	r0, r4
     754:	4b08      	ldr	r3, [pc, #32]	; (778 <flash_init+0x40>)
     756:	4798      	blx	r3
     758:	2800      	cmp	r0, #0
     75a:	d103      	bne.n	764 <flash_init+0x2c>
     75c:	4b07      	ldr	r3, [pc, #28]	; (77c <flash_init+0x44>)
     75e:	6023      	str	r3, [r4, #0]
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <flash_init+0x48>)
     762:	6063      	str	r3, [r4, #4]
     764:	bd70      	pop	{r4, r5, r6, pc}
     766:	2000      	movs	r0, #0
     768:	e7ee      	b.n	748 <flash_init+0x10>
     76a:	2000      	movs	r0, #0
     76c:	e7ec      	b.n	748 <flash_init+0x10>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00003514 	.word	0x00003514
     774:	00000d19 	.word	0x00000d19
     778:	000012ed 	.word	0x000012ed
     77c:	00000721 	.word	0x00000721
     780:	0000072d 	.word	0x0000072d

00000784 <io_write>:
     784:	b570      	push	{r4, r5, r6, lr}
     786:	0004      	movs	r4, r0
     788:	000d      	movs	r5, r1
     78a:	0016      	movs	r6, r2
     78c:	2800      	cmp	r0, #0
     78e:	d00e      	beq.n	7ae <io_write+0x2a>
     790:	2900      	cmp	r1, #0
     792:	d00a      	beq.n	7aa <io_write+0x26>
     794:	2001      	movs	r0, #1
     796:	2234      	movs	r2, #52	; 0x34
     798:	4906      	ldr	r1, [pc, #24]	; (7b4 <io_write+0x30>)
     79a:	4b07      	ldr	r3, [pc, #28]	; (7b8 <io_write+0x34>)
     79c:	4798      	blx	r3
     79e:	6823      	ldr	r3, [r4, #0]
     7a0:	0032      	movs	r2, r6
     7a2:	0029      	movs	r1, r5
     7a4:	0020      	movs	r0, r4
     7a6:	4798      	blx	r3
     7a8:	bd70      	pop	{r4, r5, r6, pc}
     7aa:	2000      	movs	r0, #0
     7ac:	e7f3      	b.n	796 <io_write+0x12>
     7ae:	2000      	movs	r0, #0
     7b0:	e7f1      	b.n	796 <io_write+0x12>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	0000352c 	.word	0x0000352c
     7b8:	00000d19 	.word	0x00000d19

000007bc <io_read>:
     7bc:	b570      	push	{r4, r5, r6, lr}
     7be:	0004      	movs	r4, r0
     7c0:	000d      	movs	r5, r1
     7c2:	0016      	movs	r6, r2
     7c4:	2800      	cmp	r0, #0
     7c6:	d00e      	beq.n	7e6 <io_read+0x2a>
     7c8:	2900      	cmp	r1, #0
     7ca:	d00a      	beq.n	7e2 <io_read+0x26>
     7cc:	2001      	movs	r0, #1
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	4906      	ldr	r1, [pc, #24]	; (7ec <io_read+0x30>)
     7d2:	4b07      	ldr	r3, [pc, #28]	; (7f0 <io_read+0x34>)
     7d4:	4798      	blx	r3
     7d6:	6863      	ldr	r3, [r4, #4]
     7d8:	0032      	movs	r2, r6
     7da:	0029      	movs	r1, r5
     7dc:	0020      	movs	r0, r4
     7de:	4798      	blx	r3
     7e0:	bd70      	pop	{r4, r5, r6, pc}
     7e2:	2000      	movs	r0, #0
     7e4:	e7f3      	b.n	7ce <io_read+0x12>
     7e6:	2000      	movs	r0, #0
     7e8:	e7f1      	b.n	7ce <io_read+0x12>
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	0000352c 	.word	0x0000352c
     7f0:	00000d19 	.word	0x00000d19

000007f4 <pwm_period_expired>:
     7f4:	b510      	push	{r4, lr}
     7f6:	6943      	ldr	r3, [r0, #20]
     7f8:	2b00      	cmp	r3, #0
     7fa:	d000      	beq.n	7fe <pwm_period_expired+0xa>
     7fc:	4798      	blx	r3
     7fe:	bd10      	pop	{r4, pc}

00000800 <pwm_detect_fault>:
     800:	b510      	push	{r4, lr}
     802:	6983      	ldr	r3, [r0, #24]
     804:	2b00      	cmp	r3, #0
     806:	d000      	beq.n	80a <pwm_detect_fault+0xa>
     808:	4798      	blx	r3
     80a:	bd10      	pop	{r4, pc}

0000080c <pwm_init>:
     80c:	b570      	push	{r4, r5, r6, lr}
     80e:	0004      	movs	r4, r0
     810:	000d      	movs	r5, r1
     812:	2800      	cmp	r0, #0
     814:	d012      	beq.n	83c <pwm_init+0x30>
     816:	2900      	cmp	r1, #0
     818:	d00e      	beq.n	838 <pwm_init+0x2c>
     81a:	2001      	movs	r0, #1
     81c:	2233      	movs	r2, #51	; 0x33
     81e:	4908      	ldr	r1, [pc, #32]	; (840 <pwm_init+0x34>)
     820:	4b08      	ldr	r3, [pc, #32]	; (844 <pwm_init+0x38>)
     822:	4798      	blx	r3
     824:	0029      	movs	r1, r5
     826:	0020      	movs	r0, r4
     828:	4b07      	ldr	r3, [pc, #28]	; (848 <pwm_init+0x3c>)
     82a:	4798      	blx	r3
     82c:	4b07      	ldr	r3, [pc, #28]	; (84c <pwm_init+0x40>)
     82e:	6023      	str	r3, [r4, #0]
     830:	4b07      	ldr	r3, [pc, #28]	; (850 <pwm_init+0x44>)
     832:	6063      	str	r3, [r4, #4]
     834:	2000      	movs	r0, #0
     836:	bd70      	pop	{r4, r5, r6, pc}
     838:	2000      	movs	r0, #0
     83a:	e7ef      	b.n	81c <pwm_init+0x10>
     83c:	2000      	movs	r0, #0
     83e:	e7ed      	b.n	81c <pwm_init+0x10>
     840:	00003540 	.word	0x00003540
     844:	00000d19 	.word	0x00000d19
     848:	00001b4d 	.word	0x00001b4d
     84c:	000007f5 	.word	0x000007f5
     850:	00000801 	.word	0x00000801

00000854 <spi_m_sync_init>:
     854:	b570      	push	{r4, r5, r6, lr}
     856:	0004      	movs	r4, r0
     858:	000d      	movs	r5, r1
     85a:	2800      	cmp	r0, #0
     85c:	d017      	beq.n	88e <spi_m_sync_init+0x3a>
     85e:	2900      	cmp	r1, #0
     860:	d013      	beq.n	88a <spi_m_sync_init+0x36>
     862:	2001      	movs	r0, #1
     864:	2240      	movs	r2, #64	; 0x40
     866:	490b      	ldr	r1, [pc, #44]	; (894 <spi_m_sync_init+0x40>)
     868:	4b0b      	ldr	r3, [pc, #44]	; (898 <spi_m_sync_init+0x44>)
     86a:	4798      	blx	r3
     86c:	6065      	str	r5, [r4, #4]
     86e:	1d20      	adds	r0, r4, #4
     870:	0029      	movs	r1, r5
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <spi_m_sync_init+0x48>)
     874:	4798      	blx	r3
     876:	2800      	cmp	r0, #0
     878:	db06      	blt.n	888 <spi_m_sync_init+0x34>
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <spi_m_sync_init+0x4c>)
     87c:	82a3      	strh	r3, [r4, #20]
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <spi_m_sync_init+0x50>)
     880:	6123      	str	r3, [r4, #16]
     882:	4b09      	ldr	r3, [pc, #36]	; (8a8 <spi_m_sync_init+0x54>)
     884:	60e3      	str	r3, [r4, #12]
     886:	2000      	movs	r0, #0
     888:	bd70      	pop	{r4, r5, r6, pc}
     88a:	2000      	movs	r0, #0
     88c:	e7ea      	b.n	864 <spi_m_sync_init+0x10>
     88e:	2000      	movs	r0, #0
     890:	e7e8      	b.n	864 <spi_m_sync_init+0x10>
     892:	46c0      	nop			; (mov r8, r8)
     894:	00003558 	.word	0x00003558
     898:	00000d19 	.word	0x00000d19
     89c:	00001605 	.word	0x00001605
     8a0:	ffff8000 	.word	0xffff8000
     8a4:	00000931 	.word	0x00000931
     8a8:	000008f5 	.word	0x000008f5

000008ac <spi_m_sync_transfer>:
     8ac:	b530      	push	{r4, r5, lr}
     8ae:	b087      	sub	sp, #28
     8b0:	0004      	movs	r4, r0
     8b2:	000d      	movs	r5, r1
     8b4:	2800      	cmp	r0, #0
     8b6:	d015      	beq.n	8e4 <spi_m_sync_transfer+0x38>
     8b8:	2900      	cmp	r1, #0
     8ba:	d011      	beq.n	8e0 <spi_m_sync_transfer+0x34>
     8bc:	2001      	movs	r0, #1
     8be:	22b3      	movs	r2, #179	; 0xb3
     8c0:	4909      	ldr	r1, [pc, #36]	; (8e8 <spi_m_sync_transfer+0x3c>)
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <spi_m_sync_transfer+0x40>)
     8c4:	4798      	blx	r3
     8c6:	682b      	ldr	r3, [r5, #0]
     8c8:	9303      	str	r3, [sp, #12]
     8ca:	686b      	ldr	r3, [r5, #4]
     8cc:	9304      	str	r3, [sp, #16]
     8ce:	68ab      	ldr	r3, [r5, #8]
     8d0:	9301      	str	r3, [sp, #4]
     8d2:	9305      	str	r3, [sp, #20]
     8d4:	1d20      	adds	r0, r4, #4
     8d6:	a903      	add	r1, sp, #12
     8d8:	4b05      	ldr	r3, [pc, #20]	; (8f0 <spi_m_sync_transfer+0x44>)
     8da:	4798      	blx	r3
     8dc:	b007      	add	sp, #28
     8de:	bd30      	pop	{r4, r5, pc}
     8e0:	2000      	movs	r0, #0
     8e2:	e7ec      	b.n	8be <spi_m_sync_transfer+0x12>
     8e4:	2000      	movs	r0, #0
     8e6:	e7ea      	b.n	8be <spi_m_sync_transfer+0x12>
     8e8:	00003558 	.word	0x00003558
     8ec:	00000d19 	.word	0x00000d19
     8f0:	000017c1 	.word	0x000017c1

000008f4 <_spi_m_sync_io_write>:
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	b084      	sub	sp, #16
     8f8:	0004      	movs	r4, r0
     8fa:	000e      	movs	r6, r1
     8fc:	0015      	movs	r5, r2
     8fe:	1e43      	subs	r3, r0, #1
     900:	4198      	sbcs	r0, r3
     902:	b2c0      	uxtb	r0, r0
     904:	22a3      	movs	r2, #163	; 0xa3
     906:	4907      	ldr	r1, [pc, #28]	; (924 <_spi_m_sync_io_write+0x30>)
     908:	4b07      	ldr	r3, [pc, #28]	; (928 <_spi_m_sync_io_write+0x34>)
     90a:	4798      	blx	r3
     90c:	0020      	movs	r0, r4
     90e:	380c      	subs	r0, #12
     910:	2300      	movs	r3, #0
     912:	9302      	str	r3, [sp, #8]
     914:	9601      	str	r6, [sp, #4]
     916:	9503      	str	r5, [sp, #12]
     918:	a901      	add	r1, sp, #4
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <_spi_m_sync_io_write+0x38>)
     91c:	4798      	blx	r3
     91e:	b004      	add	sp, #16
     920:	bd70      	pop	{r4, r5, r6, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	00003558 	.word	0x00003558
     928:	00000d19 	.word	0x00000d19
     92c:	000008ad 	.word	0x000008ad

00000930 <_spi_m_sync_io_read>:
     930:	b570      	push	{r4, r5, r6, lr}
     932:	b084      	sub	sp, #16
     934:	0004      	movs	r4, r0
     936:	000e      	movs	r6, r1
     938:	0015      	movs	r5, r2
     93a:	1e43      	subs	r3, r0, #1
     93c:	4198      	sbcs	r0, r3
     93e:	b2c0      	uxtb	r0, r0
     940:	2287      	movs	r2, #135	; 0x87
     942:	4907      	ldr	r1, [pc, #28]	; (960 <_spi_m_sync_io_read+0x30>)
     944:	4b07      	ldr	r3, [pc, #28]	; (964 <_spi_m_sync_io_read+0x34>)
     946:	4798      	blx	r3
     948:	0020      	movs	r0, r4
     94a:	380c      	subs	r0, #12
     94c:	9602      	str	r6, [sp, #8]
     94e:	2300      	movs	r3, #0
     950:	9301      	str	r3, [sp, #4]
     952:	9503      	str	r5, [sp, #12]
     954:	a901      	add	r1, sp, #4
     956:	4b04      	ldr	r3, [pc, #16]	; (968 <_spi_m_sync_io_read+0x38>)
     958:	4798      	blx	r3
     95a:	b004      	add	sp, #16
     95c:	bd70      	pop	{r4, r5, r6, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	00003558 	.word	0x00003558
     964:	00000d19 	.word	0x00000d19
     968:	000008ad 	.word	0x000008ad

0000096c <timer_add_timer_task>:
     96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     96e:	6806      	ldr	r6, [r0, #0]
     970:	2e00      	cmp	r6, #0
     972:	d002      	beq.n	97a <timer_add_timer_task+0xe>
     974:	0033      	movs	r3, r6
     976:	2500      	movs	r5, #0
     978:	e00c      	b.n	994 <timer_add_timer_task+0x28>
     97a:	4b10      	ldr	r3, [pc, #64]	; (9bc <timer_add_timer_task+0x50>)
     97c:	4798      	blx	r3
     97e:	e018      	b.n	9b2 <timer_add_timer_task+0x46>
     980:	689f      	ldr	r7, [r3, #8]
     982:	46bc      	mov	ip, r7
     984:	4464      	add	r4, ip
     986:	1aa4      	subs	r4, r4, r2
     988:	3401      	adds	r4, #1
     98a:	688f      	ldr	r7, [r1, #8]
     98c:	42bc      	cmp	r4, r7
     98e:	d20b      	bcs.n	9a8 <timer_add_timer_task+0x3c>
     990:	001d      	movs	r5, r3
     992:	681b      	ldr	r3, [r3, #0]
     994:	2b00      	cmp	r3, #0
     996:	d007      	beq.n	9a8 <timer_add_timer_task+0x3c>
     998:	685c      	ldr	r4, [r3, #4]
     99a:	4294      	cmp	r4, r2
     99c:	d8f0      	bhi.n	980 <timer_add_timer_task+0x14>
     99e:	1aa4      	subs	r4, r4, r2
     9a0:	689f      	ldr	r7, [r3, #8]
     9a2:	46bc      	mov	ip, r7
     9a4:	4464      	add	r4, ip
     9a6:	e7f0      	b.n	98a <timer_add_timer_task+0x1e>
     9a8:	42b3      	cmp	r3, r6
     9aa:	d003      	beq.n	9b4 <timer_add_timer_task+0x48>
     9ac:	0028      	movs	r0, r5
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <timer_add_timer_task+0x54>)
     9b0:	4798      	blx	r3
     9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9b4:	4b01      	ldr	r3, [pc, #4]	; (9bc <timer_add_timer_task+0x50>)
     9b6:	4798      	blx	r3
     9b8:	e7fb      	b.n	9b2 <timer_add_timer_task+0x46>
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	00000d39 	.word	0x00000d39
     9c0:	00000d65 	.word	0x00000d65

000009c4 <timer_process_counted>:
     9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c6:	0005      	movs	r5, r0
     9c8:	6944      	ldr	r4, [r0, #20]
     9ca:	6903      	ldr	r3, [r0, #16]
     9cc:	1c5e      	adds	r6, r3, #1
     9ce:	6106      	str	r6, [r0, #16]
     9d0:	7e03      	ldrb	r3, [r0, #24]
     9d2:	07db      	lsls	r3, r3, #31
     9d4:	d402      	bmi.n	9dc <timer_process_counted+0x18>
     9d6:	7e03      	ldrb	r3, [r0, #24]
     9d8:	079b      	lsls	r3, r3, #30
     9da:	d50a      	bpl.n	9f2 <timer_process_counted+0x2e>
     9dc:	7e2b      	ldrb	r3, [r5, #24]
     9de:	2202      	movs	r2, #2
     9e0:	4313      	orrs	r3, r2
     9e2:	b2db      	uxtb	r3, r3
     9e4:	762b      	strb	r3, [r5, #24]
     9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9e8:	696f      	ldr	r7, [r5, #20]
     9ea:	68e3      	ldr	r3, [r4, #12]
     9ec:	0020      	movs	r0, r4
     9ee:	4798      	blx	r3
     9f0:	003c      	movs	r4, r7
     9f2:	2c00      	cmp	r4, #0
     9f4:	d0f7      	beq.n	9e6 <timer_process_counted+0x22>
     9f6:	6863      	ldr	r3, [r4, #4]
     9f8:	1af3      	subs	r3, r6, r3
     9fa:	68a2      	ldr	r2, [r4, #8]
     9fc:	4293      	cmp	r3, r2
     9fe:	d3f2      	bcc.n	9e6 <timer_process_counted+0x22>
     a00:	002f      	movs	r7, r5
     a02:	3714      	adds	r7, #20
     a04:	0038      	movs	r0, r7
     a06:	4b06      	ldr	r3, [pc, #24]	; (a20 <timer_process_counted+0x5c>)
     a08:	4798      	blx	r3
     a0a:	7c23      	ldrb	r3, [r4, #16]
     a0c:	2b01      	cmp	r3, #1
     a0e:	d1eb      	bne.n	9e8 <timer_process_counted+0x24>
     a10:	6066      	str	r6, [r4, #4]
     a12:	0032      	movs	r2, r6
     a14:	0021      	movs	r1, r4
     a16:	0038      	movs	r0, r7
     a18:	4b02      	ldr	r3, [pc, #8]	; (a24 <timer_process_counted+0x60>)
     a1a:	4798      	blx	r3
     a1c:	e7e4      	b.n	9e8 <timer_process_counted+0x24>
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00000d6d 	.word	0x00000d6d
     a24:	0000096d 	.word	0x0000096d

00000a28 <timer_init>:
     a28:	b570      	push	{r4, r5, r6, lr}
     a2a:	0004      	movs	r4, r0
     a2c:	000d      	movs	r5, r1
     a2e:	2800      	cmp	r0, #0
     a30:	d012      	beq.n	a58 <timer_init+0x30>
     a32:	2900      	cmp	r1, #0
     a34:	d00e      	beq.n	a54 <timer_init+0x2c>
     a36:	2001      	movs	r0, #1
     a38:	223b      	movs	r2, #59	; 0x3b
     a3a:	4908      	ldr	r1, [pc, #32]	; (a5c <timer_init+0x34>)
     a3c:	4b08      	ldr	r3, [pc, #32]	; (a60 <timer_init+0x38>)
     a3e:	4798      	blx	r3
     a40:	0029      	movs	r1, r5
     a42:	0020      	movs	r0, r4
     a44:	4b07      	ldr	r3, [pc, #28]	; (a64 <timer_init+0x3c>)
     a46:	4798      	blx	r3
     a48:	2300      	movs	r3, #0
     a4a:	6123      	str	r3, [r4, #16]
     a4c:	4b06      	ldr	r3, [pc, #24]	; (a68 <timer_init+0x40>)
     a4e:	6023      	str	r3, [r4, #0]
     a50:	2000      	movs	r0, #0
     a52:	bd70      	pop	{r4, r5, r6, pc}
     a54:	2000      	movs	r0, #0
     a56:	e7ef      	b.n	a38 <timer_init+0x10>
     a58:	2000      	movs	r0, #0
     a5a:	e7ed      	b.n	a38 <timer_init+0x10>
     a5c:	00003574 	.word	0x00003574
     a60:	00000d19 	.word	0x00000d19
     a64:	00001a29 	.word	0x00001a29
     a68:	000009c5 	.word	0x000009c5

00000a6c <usart_transmission_complete>:
     a6c:	b510      	push	{r4, lr}
     a6e:	3808      	subs	r0, #8
     a70:	2300      	movs	r3, #0
     a72:	6303      	str	r3, [r0, #48]	; 0x30
     a74:	6a43      	ldr	r3, [r0, #36]	; 0x24
     a76:	2b00      	cmp	r3, #0
     a78:	d000      	beq.n	a7c <usart_transmission_complete+0x10>
     a7a:	4798      	blx	r3
     a7c:	bd10      	pop	{r4, pc}

00000a7e <usart_error>:
     a7e:	b510      	push	{r4, lr}
     a80:	3808      	subs	r0, #8
     a82:	2300      	movs	r3, #0
     a84:	6303      	str	r3, [r0, #48]	; 0x30
     a86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     a88:	2b00      	cmp	r3, #0
     a8a:	d000      	beq.n	a8e <usart_error+0x10>
     a8c:	4798      	blx	r3
     a8e:	bd10      	pop	{r4, pc}

00000a90 <usart_fill_rx_buffer>:
     a90:	b510      	push	{r4, lr}
     a92:	0004      	movs	r4, r0
     a94:	302c      	adds	r0, #44	; 0x2c
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <usart_fill_rx_buffer+0x18>)
     a98:	4798      	blx	r3
     a9a:	6a23      	ldr	r3, [r4, #32]
     a9c:	3c08      	subs	r4, #8
     a9e:	2b00      	cmp	r3, #0
     aa0:	d001      	beq.n	aa6 <usart_fill_rx_buffer+0x16>
     aa2:	0020      	movs	r0, r4
     aa4:	4798      	blx	r3
     aa6:	bd10      	pop	{r4, pc}
     aa8:	00000e19 	.word	0x00000e19

00000aac <usart_async_write>:
     aac:	b570      	push	{r4, r5, r6, lr}
     aae:	0004      	movs	r4, r0
     ab0:	000e      	movs	r6, r1
     ab2:	0015      	movs	r5, r2
     ab4:	2800      	cmp	r0, #0
     ab6:	d01d      	beq.n	af4 <usart_async_write+0x48>
     ab8:	2900      	cmp	r1, #0
     aba:	d01d      	beq.n	af8 <usart_async_write+0x4c>
     abc:	2a00      	cmp	r2, #0
     abe:	d11d      	bne.n	afc <usart_async_write+0x50>
     ac0:	2000      	movs	r0, #0
     ac2:	223c      	movs	r2, #60	; 0x3c
     ac4:	32ff      	adds	r2, #255	; 0xff
     ac6:	4910      	ldr	r1, [pc, #64]	; (b08 <usart_async_write+0x5c>)
     ac8:	4b10      	ldr	r3, [pc, #64]	; (b0c <usart_async_write+0x60>)
     aca:	4798      	blx	r3
     acc:	2344      	movs	r3, #68	; 0x44
     ace:	5ae2      	ldrh	r2, [r4, r3]
     ad0:	3308      	adds	r3, #8
     ad2:	5ae3      	ldrh	r3, [r4, r3]
     ad4:	429a      	cmp	r2, r3
     ad6:	d113      	bne.n	b00 <usart_async_write+0x54>
     ad8:	64a6      	str	r6, [r4, #72]	; 0x48
     ada:	234c      	movs	r3, #76	; 0x4c
     adc:	52e5      	strh	r5, [r4, r3]
     ade:	2200      	movs	r2, #0
     ae0:	3b08      	subs	r3, #8
     ae2:	52e2      	strh	r2, [r4, r3]
     ae4:	3b43      	subs	r3, #67	; 0x43
     ae6:	6323      	str	r3, [r4, #48]	; 0x30
     ae8:	0020      	movs	r0, r4
     aea:	3008      	adds	r0, #8
     aec:	4b08      	ldr	r3, [pc, #32]	; (b10 <usart_async_write+0x64>)
     aee:	4798      	blx	r3
     af0:	0028      	movs	r0, r5
     af2:	bd70      	pop	{r4, r5, r6, pc}
     af4:	2000      	movs	r0, #0
     af6:	e7e4      	b.n	ac2 <usart_async_write+0x16>
     af8:	2000      	movs	r0, #0
     afa:	e7e2      	b.n	ac2 <usart_async_write+0x16>
     afc:	2001      	movs	r0, #1
     afe:	e7e0      	b.n	ac2 <usart_async_write+0x16>
     b00:	201c      	movs	r0, #28
     b02:	4240      	negs	r0, r0
     b04:	e7f5      	b.n	af2 <usart_async_write+0x46>
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	0000358c 	.word	0x0000358c
     b0c:	00000d19 	.word	0x00000d19
     b10:	0000157f 	.word	0x0000157f

00000b14 <usart_process_byte_sent>:
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	0004      	movs	r4, r0
     b18:	0002      	movs	r2, r0
     b1a:	3a08      	subs	r2, #8
     b1c:	2344      	movs	r3, #68	; 0x44
     b1e:	5ad3      	ldrh	r3, [r2, r3]
     b20:	214c      	movs	r1, #76	; 0x4c
     b22:	5a52      	ldrh	r2, [r2, r1]
     b24:	4293      	cmp	r3, r2
     b26:	d00d      	beq.n	b44 <usart_process_byte_sent+0x30>
     b28:	0002      	movs	r2, r0
     b2a:	6c01      	ldr	r1, [r0, #64]	; 0x40
     b2c:	3a08      	subs	r2, #8
     b2e:	1c5d      	adds	r5, r3, #1
     b30:	2044      	movs	r0, #68	; 0x44
     b32:	5215      	strh	r5, [r2, r0]
     b34:	5cc9      	ldrb	r1, [r1, r3]
     b36:	0020      	movs	r0, r4
     b38:	4b04      	ldr	r3, [pc, #16]	; (b4c <usart_process_byte_sent+0x38>)
     b3a:	4798      	blx	r3
     b3c:	0020      	movs	r0, r4
     b3e:	4b04      	ldr	r3, [pc, #16]	; (b50 <usart_process_byte_sent+0x3c>)
     b40:	4798      	blx	r3
     b42:	bd70      	pop	{r4, r5, r6, pc}
     b44:	4b03      	ldr	r3, [pc, #12]	; (b54 <usart_process_byte_sent+0x40>)
     b46:	4798      	blx	r3
     b48:	e7fb      	b.n	b42 <usart_process_byte_sent+0x2e>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00001577 	.word	0x00001577
     b50:	0000157f 	.word	0x0000157f
     b54:	00001587 	.word	0x00001587

00000b58 <usart_async_read>:
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	b085      	sub	sp, #20
     b5c:	0004      	movs	r4, r0
     b5e:	000d      	movs	r5, r1
     b60:	0016      	movs	r6, r2
     b62:	2800      	cmp	r0, #0
     b64:	d017      	beq.n	b96 <usart_async_read+0x3e>
     b66:	2900      	cmp	r1, #0
     b68:	d017      	beq.n	b9a <usart_async_read+0x42>
     b6a:	2a00      	cmp	r2, #0
     b6c:	d117      	bne.n	b9e <usart_async_read+0x46>
     b6e:	2000      	movs	r0, #0
     b70:	22ac      	movs	r2, #172	; 0xac
     b72:	0052      	lsls	r2, r2, #1
     b74:	4912      	ldr	r1, [pc, #72]	; (bc0 <usart_async_read+0x68>)
     b76:	4b13      	ldr	r3, [pc, #76]	; (bc4 <usart_async_read+0x6c>)
     b78:	4798      	blx	r3
     b7a:	a803      	add	r0, sp, #12
     b7c:	4b12      	ldr	r3, [pc, #72]	; (bc8 <usart_async_read+0x70>)
     b7e:	4798      	blx	r3
     b80:	3434      	adds	r4, #52	; 0x34
     b82:	0020      	movs	r0, r4
     b84:	9401      	str	r4, [sp, #4]
     b86:	4b11      	ldr	r3, [pc, #68]	; (bcc <usart_async_read+0x74>)
     b88:	4798      	blx	r3
     b8a:	0007      	movs	r7, r0
     b8c:	a803      	add	r0, sp, #12
     b8e:	4b10      	ldr	r3, [pc, #64]	; (bd0 <usart_async_read+0x78>)
     b90:	4798      	blx	r3
     b92:	2400      	movs	r4, #0
     b94:	e00b      	b.n	bae <usart_async_read+0x56>
     b96:	2000      	movs	r0, #0
     b98:	e7ea      	b.n	b70 <usart_async_read+0x18>
     b9a:	2000      	movs	r0, #0
     b9c:	e7e8      	b.n	b70 <usart_async_read+0x18>
     b9e:	2001      	movs	r0, #1
     ba0:	e7e6      	b.n	b70 <usart_async_read+0x18>
     ba2:	3401      	adds	r4, #1
     ba4:	b2a4      	uxth	r4, r4
     ba6:	1869      	adds	r1, r5, r1
     ba8:	9801      	ldr	r0, [sp, #4]
     baa:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <usart_async_read+0x7c>)
     bac:	4798      	blx	r3
     bae:	0021      	movs	r1, r4
     bb0:	42a7      	cmp	r7, r4
     bb2:	d901      	bls.n	bb8 <usart_async_read+0x60>
     bb4:	42b4      	cmp	r4, r6
     bb6:	d3f4      	bcc.n	ba2 <usart_async_read+0x4a>
     bb8:	0020      	movs	r0, r4
     bba:	b005      	add	sp, #20
     bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	0000358c 	.word	0x0000358c
     bc4:	00000d19 	.word	0x00000d19
     bc8:	00000609 	.word	0x00000609
     bcc:	00000e59 	.word	0x00000e59
     bd0:	00000617 	.word	0x00000617
     bd4:	00000dcd 	.word	0x00000dcd

00000bd8 <usart_async_init>:
     bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bda:	0004      	movs	r4, r0
     bdc:	000d      	movs	r5, r1
     bde:	0016      	movs	r6, r2
     be0:	001f      	movs	r7, r3
     be2:	2800      	cmp	r0, #0
     be4:	d026      	beq.n	c34 <usart_async_init+0x5c>
     be6:	2900      	cmp	r1, #0
     be8:	d026      	beq.n	c38 <usart_async_init+0x60>
     bea:	2a00      	cmp	r2, #0
     bec:	d026      	beq.n	c3c <usart_async_init+0x64>
     bee:	2b00      	cmp	r3, #0
     bf0:	d126      	bne.n	c40 <usart_async_init+0x68>
     bf2:	2000      	movs	r0, #0
     bf4:	223a      	movs	r2, #58	; 0x3a
     bf6:	4915      	ldr	r1, [pc, #84]	; (c4c <usart_async_init+0x74>)
     bf8:	4b15      	ldr	r3, [pc, #84]	; (c50 <usart_async_init+0x78>)
     bfa:	4798      	blx	r3
     bfc:	0020      	movs	r0, r4
     bfe:	3034      	adds	r0, #52	; 0x34
     c00:	003a      	movs	r2, r7
     c02:	0031      	movs	r1, r6
     c04:	4b13      	ldr	r3, [pc, #76]	; (c54 <usart_async_init+0x7c>)
     c06:	4798      	blx	r3
     c08:	2800      	cmp	r0, #0
     c0a:	d11b      	bne.n	c44 <usart_async_init+0x6c>
     c0c:	0020      	movs	r0, r4
     c0e:	3008      	adds	r0, #8
     c10:	0029      	movs	r1, r5
     c12:	4b11      	ldr	r3, [pc, #68]	; (c58 <usart_async_init+0x80>)
     c14:	4798      	blx	r3
     c16:	2800      	cmp	r0, #0
     c18:	d10b      	bne.n	c32 <usart_async_init+0x5a>
     c1a:	4b10      	ldr	r3, [pc, #64]	; (c5c <usart_async_init+0x84>)
     c1c:	6063      	str	r3, [r4, #4]
     c1e:	4b10      	ldr	r3, [pc, #64]	; (c60 <usart_async_init+0x88>)
     c20:	6023      	str	r3, [r4, #0]
     c22:	4b10      	ldr	r3, [pc, #64]	; (c64 <usart_async_init+0x8c>)
     c24:	60a3      	str	r3, [r4, #8]
     c26:	4b10      	ldr	r3, [pc, #64]	; (c68 <usart_async_init+0x90>)
     c28:	60e3      	str	r3, [r4, #12]
     c2a:	4b10      	ldr	r3, [pc, #64]	; (c6c <usart_async_init+0x94>)
     c2c:	6123      	str	r3, [r4, #16]
     c2e:	4b10      	ldr	r3, [pc, #64]	; (c70 <usart_async_init+0x98>)
     c30:	6163      	str	r3, [r4, #20]
     c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c34:	2000      	movs	r0, #0
     c36:	e7dd      	b.n	bf4 <usart_async_init+0x1c>
     c38:	2000      	movs	r0, #0
     c3a:	e7db      	b.n	bf4 <usart_async_init+0x1c>
     c3c:	2000      	movs	r0, #0
     c3e:	e7d9      	b.n	bf4 <usart_async_init+0x1c>
     c40:	2001      	movs	r0, #1
     c42:	e7d7      	b.n	bf4 <usart_async_init+0x1c>
     c44:	200d      	movs	r0, #13
     c46:	4240      	negs	r0, r0
     c48:	e7f3      	b.n	c32 <usart_async_init+0x5a>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	0000358c 	.word	0x0000358c
     c50:	00000d19 	.word	0x00000d19
     c54:	00000d81 	.word	0x00000d81
     c58:	000014d9 	.word	0x000014d9
     c5c:	00000b59 	.word	0x00000b59
     c60:	00000aad 	.word	0x00000aad
     c64:	00000b15 	.word	0x00000b15
     c68:	00000a91 	.word	0x00000a91
     c6c:	00000a6d 	.word	0x00000a6d
     c70:	00000a7f 	.word	0x00000a7f

00000c74 <usart_async_enable>:
     c74:	b510      	push	{r4, lr}
     c76:	0004      	movs	r4, r0
     c78:	1e43      	subs	r3, r0, #1
     c7a:	4198      	sbcs	r0, r3
     c7c:	b2c0      	uxtb	r0, r0
     c7e:	2261      	movs	r2, #97	; 0x61
     c80:	4904      	ldr	r1, [pc, #16]	; (c94 <usart_async_enable+0x20>)
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <usart_async_enable+0x24>)
     c84:	4798      	blx	r3
     c86:	0020      	movs	r0, r4
     c88:	3008      	adds	r0, #8
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <usart_async_enable+0x28>)
     c8c:	4798      	blx	r3
     c8e:	2000      	movs	r0, #0
     c90:	bd10      	pop	{r4, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	0000358c 	.word	0x0000358c
     c98:	00000d19 	.word	0x00000d19
     c9c:	00001565 	.word	0x00001565

00000ca0 <usart_async_register_callback>:
     ca0:	b570      	push	{r4, r5, r6, lr}
     ca2:	0005      	movs	r5, r0
     ca4:	000e      	movs	r6, r1
     ca6:	0014      	movs	r4, r2
     ca8:	1e43      	subs	r3, r0, #1
     caa:	4198      	sbcs	r0, r3
     cac:	b2c0      	uxtb	r0, r0
     cae:	2283      	movs	r2, #131	; 0x83
     cb0:	4916      	ldr	r1, [pc, #88]	; (d0c <usart_async_register_callback+0x6c>)
     cb2:	4b17      	ldr	r3, [pc, #92]	; (d10 <usart_async_register_callback+0x70>)
     cb4:	4798      	blx	r3
     cb6:	2e01      	cmp	r6, #1
     cb8:	d011      	beq.n	cde <usart_async_register_callback+0x3e>
     cba:	2e00      	cmp	r6, #0
     cbc:	d004      	beq.n	cc8 <usart_async_register_callback+0x28>
     cbe:	2e02      	cmp	r6, #2
     cc0:	d018      	beq.n	cf4 <usart_async_register_callback+0x54>
     cc2:	200d      	movs	r0, #13
     cc4:	4240      	negs	r0, r0
     cc6:	e009      	b.n	cdc <usart_async_register_callback+0x3c>
     cc8:	62ac      	str	r4, [r5, #40]	; 0x28
     cca:	1e62      	subs	r2, r4, #1
     ccc:	4194      	sbcs	r4, r2
     cce:	b2e2      	uxtb	r2, r4
     cd0:	0028      	movs	r0, r5
     cd2:	3008      	adds	r0, #8
     cd4:	2101      	movs	r1, #1
     cd6:	4b0f      	ldr	r3, [pc, #60]	; (d14 <usart_async_register_callback+0x74>)
     cd8:	4798      	blx	r3
     cda:	2000      	movs	r0, #0
     cdc:	bd70      	pop	{r4, r5, r6, pc}
     cde:	626c      	str	r4, [r5, #36]	; 0x24
     ce0:	1e62      	subs	r2, r4, #1
     ce2:	4194      	sbcs	r4, r2
     ce4:	b2e2      	uxtb	r2, r4
     ce6:	0028      	movs	r0, r5
     ce8:	3008      	adds	r0, #8
     cea:	2102      	movs	r1, #2
     cec:	4b09      	ldr	r3, [pc, #36]	; (d14 <usart_async_register_callback+0x74>)
     cee:	4798      	blx	r3
     cf0:	2000      	movs	r0, #0
     cf2:	e7f3      	b.n	cdc <usart_async_register_callback+0x3c>
     cf4:	62ec      	str	r4, [r5, #44]	; 0x2c
     cf6:	1e62      	subs	r2, r4, #1
     cf8:	4194      	sbcs	r4, r2
     cfa:	b2e2      	uxtb	r2, r4
     cfc:	0028      	movs	r0, r5
     cfe:	3008      	adds	r0, #8
     d00:	2103      	movs	r1, #3
     d02:	4b04      	ldr	r3, [pc, #16]	; (d14 <usart_async_register_callback+0x74>)
     d04:	4798      	blx	r3
     d06:	2000      	movs	r0, #0
     d08:	e7e8      	b.n	cdc <usart_async_register_callback+0x3c>
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	0000358c 	.word	0x0000358c
     d10:	00000d19 	.word	0x00000d19
     d14:	00001591 	.word	0x00001591

00000d18 <assert>:
     d18:	2800      	cmp	r0, #0
     d1a:	d100      	bne.n	d1e <assert+0x6>
     d1c:	be00      	bkpt	0x0000
     d1e:	4770      	bx	lr

00000d20 <is_list_element>:
     d20:	6803      	ldr	r3, [r0, #0]
     d22:	2b00      	cmp	r3, #0
     d24:	d003      	beq.n	d2e <is_list_element+0xe>
     d26:	428b      	cmp	r3, r1
     d28:	d003      	beq.n	d32 <is_list_element+0x12>
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	e7f9      	b.n	d22 <is_list_element+0x2>
     d2e:	2000      	movs	r0, #0
     d30:	4770      	bx	lr
     d32:	2001      	movs	r0, #1
     d34:	e7fc      	b.n	d30 <is_list_element+0x10>
	...

00000d38 <list_insert_as_head>:
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	0004      	movs	r4, r0
     d3c:	000d      	movs	r5, r1
     d3e:	4b06      	ldr	r3, [pc, #24]	; (d58 <list_insert_as_head+0x20>)
     d40:	4798      	blx	r3
     d42:	2301      	movs	r3, #1
     d44:	4058      	eors	r0, r3
     d46:	b2c0      	uxtb	r0, r0
     d48:	2239      	movs	r2, #57	; 0x39
     d4a:	4904      	ldr	r1, [pc, #16]	; (d5c <list_insert_as_head+0x24>)
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <list_insert_as_head+0x28>)
     d4e:	4798      	blx	r3
     d50:	6823      	ldr	r3, [r4, #0]
     d52:	602b      	str	r3, [r5, #0]
     d54:	6025      	str	r5, [r4, #0]
     d56:	bd70      	pop	{r4, r5, r6, pc}
     d58:	00000d21 	.word	0x00000d21
     d5c:	000035ac 	.word	0x000035ac
     d60:	00000d19 	.word	0x00000d19

00000d64 <list_insert_after>:
     d64:	6803      	ldr	r3, [r0, #0]
     d66:	600b      	str	r3, [r1, #0]
     d68:	6001      	str	r1, [r0, #0]
     d6a:	4770      	bx	lr

00000d6c <list_remove_head>:
     d6c:	6803      	ldr	r3, [r0, #0]
     d6e:	2b00      	cmp	r3, #0
     d70:	d003      	beq.n	d7a <list_remove_head+0xe>
     d72:	681a      	ldr	r2, [r3, #0]
     d74:	6002      	str	r2, [r0, #0]
     d76:	0018      	movs	r0, r3
     d78:	4770      	bx	lr
     d7a:	2000      	movs	r0, #0
     d7c:	e7fc      	b.n	d78 <list_remove_head+0xc>
	...

00000d80 <ringbuffer_init>:
     d80:	b570      	push	{r4, r5, r6, lr}
     d82:	0004      	movs	r4, r0
     d84:	000e      	movs	r6, r1
     d86:	0015      	movs	r5, r2
     d88:	2800      	cmp	r0, #0
     d8a:	d012      	beq.n	db2 <ringbuffer_init+0x32>
     d8c:	2900      	cmp	r1, #0
     d8e:	d012      	beq.n	db6 <ringbuffer_init+0x36>
     d90:	2a00      	cmp	r2, #0
     d92:	d112      	bne.n	dba <ringbuffer_init+0x3a>
     d94:	2000      	movs	r0, #0
     d96:	2228      	movs	r2, #40	; 0x28
     d98:	490a      	ldr	r1, [pc, #40]	; (dc4 <ringbuffer_init+0x44>)
     d9a:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <ringbuffer_init+0x48>)
     d9c:	4798      	blx	r3
     d9e:	1e6b      	subs	r3, r5, #1
     da0:	422b      	tst	r3, r5
     da2:	d10c      	bne.n	dbe <ringbuffer_init+0x3e>
     da4:	6063      	str	r3, [r4, #4]
     da6:	2300      	movs	r3, #0
     da8:	60a3      	str	r3, [r4, #8]
     daa:	60e3      	str	r3, [r4, #12]
     dac:	6026      	str	r6, [r4, #0]
     dae:	2000      	movs	r0, #0
     db0:	bd70      	pop	{r4, r5, r6, pc}
     db2:	2000      	movs	r0, #0
     db4:	e7ef      	b.n	d96 <ringbuffer_init+0x16>
     db6:	2000      	movs	r0, #0
     db8:	e7ed      	b.n	d96 <ringbuffer_init+0x16>
     dba:	2001      	movs	r0, #1
     dbc:	e7eb      	b.n	d96 <ringbuffer_init+0x16>
     dbe:	200d      	movs	r0, #13
     dc0:	4240      	negs	r0, r0
     dc2:	e7f5      	b.n	db0 <ringbuffer_init+0x30>
     dc4:	000035cc 	.word	0x000035cc
     dc8:	00000d19 	.word	0x00000d19

00000dcc <ringbuffer_get>:
     dcc:	b570      	push	{r4, r5, r6, lr}
     dce:	0004      	movs	r4, r0
     dd0:	000d      	movs	r5, r1
     dd2:	2800      	cmp	r0, #0
     dd4:	d016      	beq.n	e04 <ringbuffer_get+0x38>
     dd6:	2900      	cmp	r1, #0
     dd8:	d012      	beq.n	e00 <ringbuffer_get+0x34>
     dda:	2001      	movs	r0, #1
     ddc:	2240      	movs	r2, #64	; 0x40
     dde:	490c      	ldr	r1, [pc, #48]	; (e10 <ringbuffer_get+0x44>)
     de0:	4b0c      	ldr	r3, [pc, #48]	; (e14 <ringbuffer_get+0x48>)
     de2:	4798      	blx	r3
     de4:	68a3      	ldr	r3, [r4, #8]
     de6:	68e2      	ldr	r2, [r4, #12]
     de8:	429a      	cmp	r2, r3
     dea:	d00d      	beq.n	e08 <ringbuffer_get+0x3c>
     dec:	6862      	ldr	r2, [r4, #4]
     dee:	4013      	ands	r3, r2
     df0:	6822      	ldr	r2, [r4, #0]
     df2:	5cd3      	ldrb	r3, [r2, r3]
     df4:	702b      	strb	r3, [r5, #0]
     df6:	68a3      	ldr	r3, [r4, #8]
     df8:	3301      	adds	r3, #1
     dfa:	60a3      	str	r3, [r4, #8]
     dfc:	2000      	movs	r0, #0
     dfe:	bd70      	pop	{r4, r5, r6, pc}
     e00:	2000      	movs	r0, #0
     e02:	e7eb      	b.n	ddc <ringbuffer_get+0x10>
     e04:	2000      	movs	r0, #0
     e06:	e7e9      	b.n	ddc <ringbuffer_get+0x10>
     e08:	200a      	movs	r0, #10
     e0a:	4240      	negs	r0, r0
     e0c:	e7f7      	b.n	dfe <ringbuffer_get+0x32>
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	000035cc 	.word	0x000035cc
     e14:	00000d19 	.word	0x00000d19

00000e18 <ringbuffer_put>:
     e18:	b570      	push	{r4, r5, r6, lr}
     e1a:	0004      	movs	r4, r0
     e1c:	000d      	movs	r5, r1
     e1e:	1e43      	subs	r3, r0, #1
     e20:	4198      	sbcs	r0, r3
     e22:	b2c0      	uxtb	r0, r0
     e24:	2251      	movs	r2, #81	; 0x51
     e26:	490a      	ldr	r1, [pc, #40]	; (e50 <ringbuffer_put+0x38>)
     e28:	4b0a      	ldr	r3, [pc, #40]	; (e54 <ringbuffer_put+0x3c>)
     e2a:	4798      	blx	r3
     e2c:	6863      	ldr	r3, [r4, #4]
     e2e:	68e2      	ldr	r2, [r4, #12]
     e30:	4013      	ands	r3, r2
     e32:	6822      	ldr	r2, [r4, #0]
     e34:	54d5      	strb	r5, [r2, r3]
     e36:	68e3      	ldr	r3, [r4, #12]
     e38:	68a2      	ldr	r2, [r4, #8]
     e3a:	1a9a      	subs	r2, r3, r2
     e3c:	6861      	ldr	r1, [r4, #4]
     e3e:	428a      	cmp	r2, r1
     e40:	d901      	bls.n	e46 <ringbuffer_put+0x2e>
     e42:	1a59      	subs	r1, r3, r1
     e44:	60a1      	str	r1, [r4, #8]
     e46:	3301      	adds	r3, #1
     e48:	60e3      	str	r3, [r4, #12]
     e4a:	2000      	movs	r0, #0
     e4c:	bd70      	pop	{r4, r5, r6, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	000035cc 	.word	0x000035cc
     e54:	00000d19 	.word	0x00000d19

00000e58 <ringbuffer_num>:
     e58:	b510      	push	{r4, lr}
     e5a:	0004      	movs	r4, r0
     e5c:	1e43      	subs	r3, r0, #1
     e5e:	4198      	sbcs	r0, r3
     e60:	b2c0      	uxtb	r0, r0
     e62:	2267      	movs	r2, #103	; 0x67
     e64:	4903      	ldr	r1, [pc, #12]	; (e74 <ringbuffer_num+0x1c>)
     e66:	4b04      	ldr	r3, [pc, #16]	; (e78 <ringbuffer_num+0x20>)
     e68:	4798      	blx	r3
     e6a:	68e0      	ldr	r0, [r4, #12]
     e6c:	68a3      	ldr	r3, [r4, #8]
     e6e:	1ac0      	subs	r0, r0, r3
     e70:	bd10      	pop	{r4, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	000035cc 	.word	0x000035cc
     e78:	00000d19 	.word	0x00000d19

00000e7c <_get_ac_cfg>:
     e7c:	b510      	push	{r4, lr}
     e7e:	2300      	movs	r3, #0
     e80:	2b00      	cmp	r3, #0
     e82:	d001      	beq.n	e88 <_get_ac_cfg+0xc>
     e84:	2000      	movs	r0, #0
     e86:	bd10      	pop	{r4, pc}
     e88:	009a      	lsls	r2, r3, #2
     e8a:	18d2      	adds	r2, r2, r3
     e8c:	0091      	lsls	r1, r2, #2
     e8e:	4a05      	ldr	r2, [pc, #20]	; (ea4 <_get_ac_cfg+0x28>)
     e90:	588a      	ldr	r2, [r1, r2]
     e92:	4282      	cmp	r2, r0
     e94:	d002      	beq.n	e9c <_get_ac_cfg+0x20>
     e96:	3301      	adds	r3, #1
     e98:	b2db      	uxtb	r3, r3
     e9a:	e7f1      	b.n	e80 <_get_ac_cfg+0x4>
     e9c:	4801      	ldr	r0, [pc, #4]	; (ea4 <_get_ac_cfg+0x28>)
     e9e:	1840      	adds	r0, r0, r1
     ea0:	e7f1      	b.n	e86 <_get_ac_cfg+0xa>
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	000035f0 	.word	0x000035f0

00000ea8 <_ac_init>:
     ea8:	b510      	push	{r4, lr}
     eaa:	0004      	movs	r4, r0
     eac:	1e43      	subs	r3, r0, #1
     eae:	4198      	sbcs	r0, r3
     eb0:	b2c0      	uxtb	r0, r0
     eb2:	22fa      	movs	r2, #250	; 0xfa
     eb4:	491e      	ldr	r1, [pc, #120]	; (f30 <_ac_init+0x88>)
     eb6:	4b1f      	ldr	r3, [pc, #124]	; (f34 <_ac_init+0x8c>)
     eb8:	4798      	blx	r3
     eba:	0020      	movs	r0, r4
     ebc:	4b1e      	ldr	r3, [pc, #120]	; (f38 <_ac_init+0x90>)
     ebe:	4798      	blx	r3
     ec0:	2800      	cmp	r0, #0
     ec2:	d031      	beq.n	f28 <_ac_init+0x80>
     ec4:	7a63      	ldrb	r3, [r4, #9]
     ec6:	09db      	lsrs	r3, r3, #7
     ec8:	d1fc      	bne.n	ec4 <_ac_init+0x1c>
     eca:	7a63      	ldrb	r3, [r4, #9]
     ecc:	09db      	lsrs	r3, r3, #7
     ece:	d1fc      	bne.n	eca <_ac_init+0x22>
     ed0:	7823      	ldrb	r3, [r4, #0]
     ed2:	079b      	lsls	r3, r3, #30
     ed4:	d507      	bpl.n	ee6 <_ac_init+0x3e>
     ed6:	2300      	movs	r3, #0
     ed8:	7023      	strb	r3, [r4, #0]
     eda:	7a63      	ldrb	r3, [r4, #9]
     edc:	09db      	lsrs	r3, r3, #7
     ede:	d1fc      	bne.n	eda <_ac_init+0x32>
     ee0:	7a63      	ldrb	r3, [r4, #9]
     ee2:	09db      	lsrs	r3, r3, #7
     ee4:	d1fc      	bne.n	ee0 <_ac_init+0x38>
     ee6:	2301      	movs	r3, #1
     ee8:	7023      	strb	r3, [r4, #0]
     eea:	7a63      	ldrb	r3, [r4, #9]
     eec:	09db      	lsrs	r3, r3, #7
     eee:	d1fc      	bne.n	eea <_ac_init+0x42>
     ef0:	7a63      	ldrb	r3, [r4, #9]
     ef2:	09db      	lsrs	r3, r3, #7
     ef4:	d1fc      	bne.n	ef0 <_ac_init+0x48>
     ef6:	6883      	ldr	r3, [r0, #8]
     ef8:	6123      	str	r3, [r4, #16]
     efa:	7a63      	ldrb	r3, [r4, #9]
     efc:	09db      	lsrs	r3, r3, #7
     efe:	d1fc      	bne.n	efa <_ac_init+0x52>
     f00:	68c3      	ldr	r3, [r0, #12]
     f02:	6163      	str	r3, [r4, #20]
     f04:	7a63      	ldrb	r3, [r4, #9]
     f06:	09db      	lsrs	r3, r3, #7
     f08:	d1fc      	bne.n	f04 <_ac_init+0x5c>
     f0a:	7c02      	ldrb	r2, [r0, #16]
     f0c:	3320      	adds	r3, #32
     f0e:	54e2      	strb	r2, [r4, r3]
     f10:	7c42      	ldrb	r2, [r0, #17]
     f12:	3301      	adds	r3, #1
     f14:	54e2      	strb	r2, [r4, r3]
     f16:	88c3      	ldrh	r3, [r0, #6]
     f18:	8063      	strh	r3, [r4, #2]
     f1a:	7943      	ldrb	r3, [r0, #5]
     f1c:	7023      	strb	r3, [r4, #0]
     f1e:	7a63      	ldrb	r3, [r4, #9]
     f20:	09db      	lsrs	r3, r3, #7
     f22:	d1fc      	bne.n	f1e <_ac_init+0x76>
     f24:	2000      	movs	r0, #0
     f26:	bd10      	pop	{r4, pc}
     f28:	200a      	movs	r0, #10
     f2a:	4240      	negs	r0, r0
     f2c:	e7fb      	b.n	f26 <_ac_init+0x7e>
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	00003604 	.word	0x00003604
     f34:	00000d19 	.word	0x00000d19
     f38:	00000e7d 	.word	0x00000e7d

00000f3c <_ac_sync_init>:
     f3c:	b570      	push	{r4, r5, r6, lr}
     f3e:	0005      	movs	r5, r0
     f40:	000c      	movs	r4, r1
     f42:	1e43      	subs	r3, r0, #1
     f44:	4198      	sbcs	r0, r3
     f46:	b2c0      	uxtb	r0, r0
     f48:	2262      	movs	r2, #98	; 0x62
     f4a:	4904      	ldr	r1, [pc, #16]	; (f5c <_ac_sync_init+0x20>)
     f4c:	4b04      	ldr	r3, [pc, #16]	; (f60 <_ac_sync_init+0x24>)
     f4e:	4798      	blx	r3
     f50:	602c      	str	r4, [r5, #0]
     f52:	0020      	movs	r0, r4
     f54:	4b03      	ldr	r3, [pc, #12]	; (f64 <_ac_sync_init+0x28>)
     f56:	4798      	blx	r3
     f58:	bd70      	pop	{r4, r5, r6, pc}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	00003604 	.word	0x00003604
     f60:	00000d19 	.word	0x00000d19
     f64:	00000ea9 	.word	0x00000ea9

00000f68 <_adc_get_hardware_index>:
     f68:	2000      	movs	r0, #0
     f6a:	4770      	bx	lr

00000f6c <_adc_get_regs>:
     f6c:	b510      	push	{r4, lr}
     f6e:	4b0b      	ldr	r3, [pc, #44]	; (f9c <_adc_get_regs+0x30>)
     f70:	4798      	blx	r3
     f72:	0002      	movs	r2, r0
     f74:	2000      	movs	r0, #0
     f76:	2800      	cmp	r0, #0
     f78:	d006      	beq.n	f88 <_adc_get_regs+0x1c>
     f7a:	227f      	movs	r2, #127	; 0x7f
     f7c:	4908      	ldr	r1, [pc, #32]	; (fa0 <_adc_get_regs+0x34>)
     f7e:	2000      	movs	r0, #0
     f80:	4b08      	ldr	r3, [pc, #32]	; (fa4 <_adc_get_regs+0x38>)
     f82:	4798      	blx	r3
     f84:	2000      	movs	r0, #0
     f86:	bd10      	pop	{r4, pc}
     f88:	00c3      	lsls	r3, r0, #3
     f8a:	1a1b      	subs	r3, r3, r0
     f8c:	0099      	lsls	r1, r3, #2
     f8e:	4b06      	ldr	r3, [pc, #24]	; (fa8 <_adc_get_regs+0x3c>)
     f90:	5ccb      	ldrb	r3, [r1, r3]
     f92:	429a      	cmp	r2, r3
     f94:	d0f7      	beq.n	f86 <_adc_get_regs+0x1a>
     f96:	3001      	adds	r0, #1
     f98:	b2c0      	uxtb	r0, r0
     f9a:	e7ec      	b.n	f76 <_adc_get_regs+0xa>
     f9c:	00000f69 	.word	0x00000f69
     fa0:	00003634 	.word	0x00003634
     fa4:	00000d19 	.word	0x00000d19
     fa8:	00003618 	.word	0x00003618

00000fac <_adc_init>:
     fac:	b570      	push	{r4, r5, r6, lr}
     fae:	0004      	movs	r4, r0
     fb0:	000d      	movs	r5, r1
     fb2:	4b3a      	ldr	r3, [pc, #232]	; (109c <_adc_init+0xf0>)
     fb4:	18c0      	adds	r0, r0, r3
     fb6:	4243      	negs	r3, r0
     fb8:	4158      	adcs	r0, r3
     fba:	b2c0      	uxtb	r0, r0
     fbc:	2294      	movs	r2, #148	; 0x94
     fbe:	4938      	ldr	r1, [pc, #224]	; (10a0 <_adc_init+0xf4>)
     fc0:	4b38      	ldr	r3, [pc, #224]	; (10a4 <_adc_init+0xf8>)
     fc2:	4798      	blx	r3
     fc4:	4b38      	ldr	r3, [pc, #224]	; (10a8 <_adc_init+0xfc>)
     fc6:	681a      	ldr	r2, [r3, #0]
     fc8:	08d2      	lsrs	r2, r2, #3
     fca:	0212      	lsls	r2, r2, #8
     fcc:	23e0      	movs	r3, #224	; 0xe0
     fce:	00db      	lsls	r3, r3, #3
     fd0:	401a      	ands	r2, r3
     fd2:	4936      	ldr	r1, [pc, #216]	; (10ac <_adc_init+0x100>)
     fd4:	680b      	ldr	r3, [r1, #0]
     fd6:	6849      	ldr	r1, [r1, #4]
     fd8:	0149      	lsls	r1, r1, #5
     fda:	0edb      	lsrs	r3, r3, #27
     fdc:	430b      	orrs	r3, r1
     fde:	21ff      	movs	r1, #255	; 0xff
     fe0:	400b      	ands	r3, r1
     fe2:	431a      	orrs	r2, r3
     fe4:	7e63      	ldrb	r3, [r4, #25]
     fe6:	09db      	lsrs	r3, r3, #7
     fe8:	d1fc      	bne.n	fe4 <_adc_init+0x38>
     fea:	7823      	ldrb	r3, [r4, #0]
     fec:	079b      	lsls	r3, r3, #30
     fee:	d504      	bpl.n	ffa <_adc_init+0x4e>
     ff0:	2300      	movs	r3, #0
     ff2:	7023      	strb	r3, [r4, #0]
     ff4:	7e63      	ldrb	r3, [r4, #25]
     ff6:	09db      	lsrs	r3, r3, #7
     ff8:	d1fc      	bne.n	ff4 <_adc_init+0x48>
     ffa:	2301      	movs	r3, #1
     ffc:	7023      	strb	r3, [r4, #0]
     ffe:	7e63      	ldrb	r3, [r4, #25]
    1000:	09db      	lsrs	r3, r3, #7
    1002:	d1fc      	bne.n	ffe <_adc_init+0x52>
    1004:	8522      	strh	r2, [r4, #40]	; 0x28
    1006:	00ea      	lsls	r2, r5, #3
    1008:	1b52      	subs	r2, r2, r5
    100a:	0091      	lsls	r1, r2, #2
    100c:	4b28      	ldr	r3, [pc, #160]	; (10b0 <_adc_init+0x104>)
    100e:	185b      	adds	r3, r3, r1
    1010:	789a      	ldrb	r2, [r3, #2]
    1012:	7062      	strb	r2, [r4, #1]
    1014:	78da      	ldrb	r2, [r3, #3]
    1016:	70a2      	strb	r2, [r4, #2]
    1018:	791a      	ldrb	r2, [r3, #4]
    101a:	70e2      	strb	r2, [r4, #3]
    101c:	7c1a      	ldrb	r2, [r3, #16]
    101e:	7522      	strb	r2, [r4, #20]
    1020:	8ada      	ldrh	r2, [r3, #22]
    1022:	84a2      	strh	r2, [r4, #36]	; 0x24
    1024:	8b1a      	ldrh	r2, [r3, #24]
    1026:	84e2      	strh	r2, [r4, #38]	; 0x26
    1028:	7e99      	ldrb	r1, [r3, #26]
    102a:	222a      	movs	r2, #42	; 0x2a
    102c:	54a1      	strb	r1, [r4, r2]
    102e:	88db      	ldrh	r3, [r3, #6]
    1030:	80a3      	strh	r3, [r4, #4]
    1032:	7e63      	ldrb	r3, [r4, #25]
    1034:	09db      	lsrs	r3, r3, #7
    1036:	d1fc      	bne.n	1032 <_adc_init+0x86>
    1038:	00eb      	lsls	r3, r5, #3
    103a:	1b5b      	subs	r3, r3, r5
    103c:	009a      	lsls	r2, r3, #2
    103e:	4b1c      	ldr	r3, [pc, #112]	; (10b0 <_adc_init+0x104>)
    1040:	189b      	adds	r3, r3, r2
    1042:	68db      	ldr	r3, [r3, #12]
    1044:	6123      	str	r3, [r4, #16]
    1046:	7e63      	ldrb	r3, [r4, #25]
    1048:	09db      	lsrs	r3, r3, #7
    104a:	d1fc      	bne.n	1046 <_adc_init+0x9a>
    104c:	00eb      	lsls	r3, r5, #3
    104e:	1b5b      	subs	r3, r3, r5
    1050:	009a      	lsls	r2, r3, #2
    1052:	4b17      	ldr	r3, [pc, #92]	; (10b0 <_adc_init+0x104>)
    1054:	189b      	adds	r3, r3, r2
    1056:	7a1b      	ldrb	r3, [r3, #8]
    1058:	7223      	strb	r3, [r4, #8]
    105a:	7e63      	ldrb	r3, [r4, #25]
    105c:	09db      	lsrs	r3, r3, #7
    105e:	d1fc      	bne.n	105a <_adc_init+0xae>
    1060:	00eb      	lsls	r3, r5, #3
    1062:	1b5b      	subs	r3, r3, r5
    1064:	009a      	lsls	r2, r3, #2
    1066:	4b12      	ldr	r3, [pc, #72]	; (10b0 <_adc_init+0x104>)
    1068:	189b      	adds	r3, r3, r2
    106a:	8a5b      	ldrh	r3, [r3, #18]
    106c:	83a3      	strh	r3, [r4, #28]
    106e:	7e63      	ldrb	r3, [r4, #25]
    1070:	09db      	lsrs	r3, r3, #7
    1072:	d1fc      	bne.n	106e <_adc_init+0xc2>
    1074:	00eb      	lsls	r3, r5, #3
    1076:	1b5b      	subs	r3, r3, r5
    1078:	009a      	lsls	r2, r3, #2
    107a:	4b0d      	ldr	r3, [pc, #52]	; (10b0 <_adc_init+0x104>)
    107c:	189b      	adds	r3, r3, r2
    107e:	8a9b      	ldrh	r3, [r3, #20]
    1080:	8423      	strh	r3, [r4, #32]
    1082:	7e63      	ldrb	r3, [r4, #25]
    1084:	09db      	lsrs	r3, r3, #7
    1086:	d1fc      	bne.n	1082 <_adc_init+0xd6>
    1088:	00eb      	lsls	r3, r5, #3
    108a:	1b5d      	subs	r5, r3, r5
    108c:	00aa      	lsls	r2, r5, #2
    108e:	4b08      	ldr	r3, [pc, #32]	; (10b0 <_adc_init+0x104>)
    1090:	189b      	adds	r3, r3, r2
    1092:	785b      	ldrb	r3, [r3, #1]
    1094:	7023      	strb	r3, [r4, #0]
    1096:	2000      	movs	r0, #0
    1098:	bd70      	pop	{r4, r5, r6, pc}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	bdffc000 	.word	0xbdffc000
    10a0:	00003634 	.word	0x00003634
    10a4:	00000d19 	.word	0x00000d19
    10a8:	00806024 	.word	0x00806024
    10ac:	00806020 	.word	0x00806020
    10b0:	00003618 	.word	0x00003618

000010b4 <_adc_sync_init>:
    10b4:	b570      	push	{r4, r5, r6, lr}
    10b6:	0005      	movs	r5, r0
    10b8:	000c      	movs	r4, r1
    10ba:	1e43      	subs	r3, r0, #1
    10bc:	4198      	sbcs	r0, r3
    10be:	b2c0      	uxtb	r0, r0
    10c0:	22c5      	movs	r2, #197	; 0xc5
    10c2:	4906      	ldr	r1, [pc, #24]	; (10dc <_adc_sync_init+0x28>)
    10c4:	4b06      	ldr	r3, [pc, #24]	; (10e0 <_adc_sync_init+0x2c>)
    10c6:	4798      	blx	r3
    10c8:	602c      	str	r4, [r5, #0]
    10ca:	0020      	movs	r0, r4
    10cc:	4b05      	ldr	r3, [pc, #20]	; (10e4 <_adc_sync_init+0x30>)
    10ce:	4798      	blx	r3
    10d0:	0001      	movs	r1, r0
    10d2:	0020      	movs	r0, r4
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <_adc_sync_init+0x34>)
    10d6:	4798      	blx	r3
    10d8:	bd70      	pop	{r4, r5, r6, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00003634 	.word	0x00003634
    10e0:	00000d19 	.word	0x00000d19
    10e4:	00000f6d 	.word	0x00000f6d
    10e8:	00000fad 	.word	0x00000fad

000010ec <_get_cycles_for_ms>:
    10ec:	2364      	movs	r3, #100	; 0x64
    10ee:	4358      	muls	r0, r3
    10f0:	0083      	lsls	r3, r0, #2
    10f2:	181b      	adds	r3, r3, r0
    10f4:	0058      	lsls	r0, r3, #1
    10f6:	4770      	bx	lr

000010f8 <_init_chip>:
    10f8:	b510      	push	{r4, lr}
    10fa:	4b06      	ldr	r3, [pc, #24]	; (1114 <_init_chip+0x1c>)
    10fc:	685a      	ldr	r2, [r3, #4]
    10fe:	605a      	str	r2, [r3, #4]
    1100:	4b05      	ldr	r3, [pc, #20]	; (1118 <_init_chip+0x20>)
    1102:	4798      	blx	r3
    1104:	4b05      	ldr	r3, [pc, #20]	; (111c <_init_chip+0x24>)
    1106:	4798      	blx	r3
    1108:	4b05      	ldr	r3, [pc, #20]	; (1120 <_init_chip+0x28>)
    110a:	4798      	blx	r3
    110c:	20ff      	movs	r0, #255	; 0xff
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <_init_chip+0x2c>)
    1110:	4798      	blx	r3
    1112:	bd10      	pop	{r4, pc}
    1114:	41004000 	.word	0x41004000
    1118:	0000137d 	.word	0x0000137d
    111c:	000018a9 	.word	0x000018a9
    1120:	000018f5 	.word	0x000018f5
    1124:	000012cd 	.word	0x000012cd

00001128 <_dac_init>:
    1128:	79c3      	ldrb	r3, [r0, #7]
    112a:	09db      	lsrs	r3, r3, #7
    112c:	d1fc      	bne.n	1128 <_dac_init>
    112e:	79c3      	ldrb	r3, [r0, #7]
    1130:	09db      	lsrs	r3, r3, #7
    1132:	d1fc      	bne.n	112e <_dac_init+0x6>
    1134:	7803      	ldrb	r3, [r0, #0]
    1136:	079b      	lsls	r3, r3, #30
    1138:	d507      	bpl.n	114a <_dac_init+0x22>
    113a:	2300      	movs	r3, #0
    113c:	7003      	strb	r3, [r0, #0]
    113e:	79c3      	ldrb	r3, [r0, #7]
    1140:	09db      	lsrs	r3, r3, #7
    1142:	d1fc      	bne.n	113e <_dac_init+0x16>
    1144:	79c3      	ldrb	r3, [r0, #7]
    1146:	09db      	lsrs	r3, r3, #7
    1148:	d1fc      	bne.n	1144 <_dac_init+0x1c>
    114a:	2301      	movs	r3, #1
    114c:	7003      	strb	r3, [r0, #0]
    114e:	79c3      	ldrb	r3, [r0, #7]
    1150:	09db      	lsrs	r3, r3, #7
    1152:	d1fc      	bne.n	114e <_dac_init+0x26>
    1154:	79c3      	ldrb	r3, [r0, #7]
    1156:	09db      	lsrs	r3, r3, #7
    1158:	d1fc      	bne.n	1154 <_dac_init+0x2c>
    115a:	7083      	strb	r3, [r0, #2]
    115c:	2201      	movs	r2, #1
    115e:	7042      	strb	r2, [r0, #1]
    1160:	7003      	strb	r3, [r0, #0]
    1162:	79c3      	ldrb	r3, [r0, #7]
    1164:	09db      	lsrs	r3, r3, #7
    1166:	d1fc      	bne.n	1162 <_dac_init+0x3a>
    1168:	2000      	movs	r0, #0
    116a:	4770      	bx	lr

0000116c <_dac_sync_init>:
    116c:	b570      	push	{r4, r5, r6, lr}
    116e:	0005      	movs	r5, r0
    1170:	000c      	movs	r4, r1
    1172:	1e43      	subs	r3, r0, #1
    1174:	4198      	sbcs	r0, r3
    1176:	b2c0      	uxtb	r0, r0
    1178:	2249      	movs	r2, #73	; 0x49
    117a:	4904      	ldr	r1, [pc, #16]	; (118c <_dac_sync_init+0x20>)
    117c:	4b04      	ldr	r3, [pc, #16]	; (1190 <_dac_sync_init+0x24>)
    117e:	4798      	blx	r3
    1180:	602c      	str	r4, [r5, #0]
    1182:	0020      	movs	r0, r4
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <_dac_sync_init+0x28>)
    1186:	4798      	blx	r3
    1188:	bd70      	pop	{r4, r5, r6, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	0000364c 	.word	0x0000364c
    1190:	00000d19 	.word	0x00000d19
    1194:	00001129 	.word	0x00001129

00001198 <_ext_irq_init>:
    1198:	4b20      	ldr	r3, [pc, #128]	; (121c <_ext_irq_init+0x84>)
    119a:	785b      	ldrb	r3, [r3, #1]
    119c:	09db      	lsrs	r3, r3, #7
    119e:	d1fb      	bne.n	1198 <_ext_irq_init>
    11a0:	4b1e      	ldr	r3, [pc, #120]	; (121c <_ext_irq_init+0x84>)
    11a2:	785b      	ldrb	r3, [r3, #1]
    11a4:	09db      	lsrs	r3, r3, #7
    11a6:	d1fb      	bne.n	11a0 <_ext_irq_init+0x8>
    11a8:	4b1c      	ldr	r3, [pc, #112]	; (121c <_ext_irq_init+0x84>)
    11aa:	781b      	ldrb	r3, [r3, #0]
    11ac:	079b      	lsls	r3, r3, #30
    11ae:	d50a      	bpl.n	11c6 <_ext_irq_init+0x2e>
    11b0:	2200      	movs	r2, #0
    11b2:	4b1a      	ldr	r3, [pc, #104]	; (121c <_ext_irq_init+0x84>)
    11b4:	701a      	strb	r2, [r3, #0]
    11b6:	4b19      	ldr	r3, [pc, #100]	; (121c <_ext_irq_init+0x84>)
    11b8:	785b      	ldrb	r3, [r3, #1]
    11ba:	09db      	lsrs	r3, r3, #7
    11bc:	d1fb      	bne.n	11b6 <_ext_irq_init+0x1e>
    11be:	4b17      	ldr	r3, [pc, #92]	; (121c <_ext_irq_init+0x84>)
    11c0:	785b      	ldrb	r3, [r3, #1]
    11c2:	09db      	lsrs	r3, r3, #7
    11c4:	d1fb      	bne.n	11be <_ext_irq_init+0x26>
    11c6:	2201      	movs	r2, #1
    11c8:	4b14      	ldr	r3, [pc, #80]	; (121c <_ext_irq_init+0x84>)
    11ca:	701a      	strb	r2, [r3, #0]
    11cc:	4b13      	ldr	r3, [pc, #76]	; (121c <_ext_irq_init+0x84>)
    11ce:	785b      	ldrb	r3, [r3, #1]
    11d0:	09db      	lsrs	r3, r3, #7
    11d2:	d1fb      	bne.n	11cc <_ext_irq_init+0x34>
    11d4:	4b11      	ldr	r3, [pc, #68]	; (121c <_ext_irq_init+0x84>)
    11d6:	785b      	ldrb	r3, [r3, #1]
    11d8:	09db      	lsrs	r3, r3, #7
    11da:	d1fb      	bne.n	11d4 <_ext_irq_init+0x3c>
    11dc:	4b0f      	ldr	r3, [pc, #60]	; (121c <_ext_irq_init+0x84>)
    11de:	2200      	movs	r2, #0
    11e0:	709a      	strb	r2, [r3, #2]
    11e2:	605a      	str	r2, [r3, #4]
    11e4:	615a      	str	r2, [r3, #20]
    11e6:	619a      	str	r2, [r3, #24]
    11e8:	61da      	str	r2, [r3, #28]
    11ea:	781a      	ldrb	r2, [r3, #0]
    11ec:	2102      	movs	r1, #2
    11ee:	430a      	orrs	r2, r1
    11f0:	b2d2      	uxtb	r2, r2
    11f2:	701a      	strb	r2, [r3, #0]
    11f4:	4b09      	ldr	r3, [pc, #36]	; (121c <_ext_irq_init+0x84>)
    11f6:	785b      	ldrb	r3, [r3, #1]
    11f8:	09db      	lsrs	r3, r3, #7
    11fa:	d1fb      	bne.n	11f4 <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11fc:	4b08      	ldr	r3, [pc, #32]	; (1220 <_ext_irq_init+0x88>)
    11fe:	2210      	movs	r2, #16
    1200:	2180      	movs	r1, #128	; 0x80
    1202:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1208:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    120c:	3101      	adds	r1, #1
    120e:	31ff      	adds	r1, #255	; 0xff
    1210:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1212:	601a      	str	r2, [r3, #0]
    1214:	4b03      	ldr	r3, [pc, #12]	; (1224 <_ext_irq_init+0x8c>)
    1216:	6018      	str	r0, [r3, #0]
    1218:	2000      	movs	r0, #0
    121a:	4770      	bx	lr
    121c:	40001800 	.word	0x40001800
    1220:	e000e100 	.word	0xe000e100
    1224:	20000140 	.word	0x20000140

00001228 <EIC_Handler>:
    1228:	b530      	push	{r4, r5, lr}
    122a:	b083      	sub	sp, #12
    122c:	4b21      	ldr	r3, [pc, #132]	; (12b4 <EIC_Handler+0x8c>)
    122e:	691a      	ldr	r2, [r3, #16]
    1230:	68d9      	ldr	r1, [r3, #12]
    1232:	400a      	ands	r2, r1
    1234:	9201      	str	r2, [sp, #4]
    1236:	9a01      	ldr	r2, [sp, #4]
    1238:	611a      	str	r2, [r3, #16]
    123a:	4b1f      	ldr	r3, [pc, #124]	; (12b8 <EIC_Handler+0x90>)
    123c:	6818      	ldr	r0, [r3, #0]
    123e:	1e43      	subs	r3, r0, #1
    1240:	4198      	sbcs	r0, r3
    1242:	b2c0      	uxtb	r0, r0
    1244:	22d2      	movs	r2, #210	; 0xd2
    1246:	491d      	ldr	r1, [pc, #116]	; (12bc <EIC_Handler+0x94>)
    1248:	4b1d      	ldr	r3, [pc, #116]	; (12c0 <EIC_Handler+0x98>)
    124a:	4798      	blx	r3
    124c:	e027      	b.n	129e <EIC_Handler+0x76>
    124e:	3901      	subs	r1, #1
    1250:	b2cd      	uxtb	r5, r1
    1252:	42ac      	cmp	r4, r5
    1254:	d80d      	bhi.n	1272 <EIC_Handler+0x4a>
    1256:	192a      	adds	r2, r5, r4
    1258:	1052      	asrs	r2, r2, #1
    125a:	b2d1      	uxtb	r1, r2
    125c:	23ff      	movs	r3, #255	; 0xff
    125e:	4013      	ands	r3, r2
    1260:	00db      	lsls	r3, r3, #3
    1262:	4a18      	ldr	r2, [pc, #96]	; (12c4 <EIC_Handler+0x9c>)
    1264:	5c9b      	ldrb	r3, [r3, r2]
    1266:	4283      	cmp	r3, r0
    1268:	d003      	beq.n	1272 <EIC_Handler+0x4a>
    126a:	daf0      	bge.n	124e <EIC_Handler+0x26>
    126c:	3101      	adds	r1, #1
    126e:	b2cc      	uxtb	r4, r1
    1270:	e7ef      	b.n	1252 <EIC_Handler+0x2a>
    1272:	2201      	movs	r2, #1
    1274:	4082      	lsls	r2, r0
    1276:	9b01      	ldr	r3, [sp, #4]
    1278:	4393      	bics	r3, r2
    127a:	9301      	str	r3, [sp, #4]
    127c:	9801      	ldr	r0, [sp, #4]
    127e:	4b12      	ldr	r3, [pc, #72]	; (12c8 <EIC_Handler+0xa0>)
    1280:	4798      	blx	r3
    1282:	3801      	subs	r0, #1
    1284:	b240      	sxtb	r0, r0
    1286:	1c43      	adds	r3, r0, #1
    1288:	d002      	beq.n	1290 <EIC_Handler+0x68>
    128a:	2500      	movs	r5, #0
    128c:	2400      	movs	r4, #0
    128e:	e7e0      	b.n	1252 <EIC_Handler+0x2a>
    1290:	4b08      	ldr	r3, [pc, #32]	; (12b4 <EIC_Handler+0x8c>)
    1292:	691a      	ldr	r2, [r3, #16]
    1294:	68d9      	ldr	r1, [r3, #12]
    1296:	400a      	ands	r2, r1
    1298:	9201      	str	r2, [sp, #4]
    129a:	9a01      	ldr	r2, [sp, #4]
    129c:	611a      	str	r2, [r3, #16]
    129e:	9b01      	ldr	r3, [sp, #4]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d005      	beq.n	12b0 <EIC_Handler+0x88>
    12a4:	9801      	ldr	r0, [sp, #4]
    12a6:	4b08      	ldr	r3, [pc, #32]	; (12c8 <EIC_Handler+0xa0>)
    12a8:	4798      	blx	r3
    12aa:	3801      	subs	r0, #1
    12ac:	b240      	sxtb	r0, r0
    12ae:	e7ea      	b.n	1286 <EIC_Handler+0x5e>
    12b0:	b003      	add	sp, #12
    12b2:	bd30      	pop	{r4, r5, pc}
    12b4:	40001800 	.word	0x40001800
    12b8:	20000140 	.word	0x20000140
    12bc:	0000366c 	.word	0x0000366c
    12c0:	00000d19 	.word	0x00000d19
    12c4:	00003664 	.word	0x00003664
    12c8:	00003401 	.word	0x00003401

000012cc <_gclk_init_generators_by_fref>:
    12cc:	07c3      	lsls	r3, r0, #31
    12ce:	d50a      	bpl.n	12e6 <_gclk_init_generators_by_fref+0x1a>
    12d0:	4b05      	ldr	r3, [pc, #20]	; (12e8 <_gclk_init_generators_by_fref+0x1c>)
    12d2:	2280      	movs	r2, #128	; 0x80
    12d4:	0052      	lsls	r2, r2, #1
    12d6:	609a      	str	r2, [r3, #8]
    12d8:	2283      	movs	r2, #131	; 0x83
    12da:	0252      	lsls	r2, r2, #9
    12dc:	605a      	str	r2, [r3, #4]
    12de:	4b02      	ldr	r3, [pc, #8]	; (12e8 <_gclk_init_generators_by_fref+0x1c>)
    12e0:	785b      	ldrb	r3, [r3, #1]
    12e2:	09db      	lsrs	r3, r3, #7
    12e4:	d1fb      	bne.n	12de <_gclk_init_generators_by_fref+0x12>
    12e6:	4770      	bx	lr
    12e8:	40000c00 	.word	0x40000c00

000012ec <_flash_init>:
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	0005      	movs	r5, r0
    12f0:	000c      	movs	r4, r1
    12f2:	2800      	cmp	r0, #0
    12f4:	d01c      	beq.n	1330 <_flash_init+0x44>
    12f6:	4b10      	ldr	r3, [pc, #64]	; (1338 <_flash_init+0x4c>)
    12f8:	4299      	cmp	r1, r3
    12fa:	d01b      	beq.n	1334 <_flash_init+0x48>
    12fc:	2000      	movs	r0, #0
    12fe:	2246      	movs	r2, #70	; 0x46
    1300:	490e      	ldr	r1, [pc, #56]	; (133c <_flash_init+0x50>)
    1302:	4b0f      	ldr	r3, [pc, #60]	; (1340 <_flash_init+0x54>)
    1304:	4798      	blx	r3
    1306:	612c      	str	r4, [r5, #16]
    1308:	6862      	ldr	r2, [r4, #4]
    130a:	239e      	movs	r3, #158	; 0x9e
    130c:	4013      	ands	r3, r2
    130e:	6063      	str	r3, [r4, #4]
    1310:	4b0c      	ldr	r3, [pc, #48]	; (1344 <_flash_init+0x58>)
    1312:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1314:	4b0c      	ldr	r3, [pc, #48]	; (1348 <_flash_init+0x5c>)
    1316:	2220      	movs	r2, #32
    1318:	2180      	movs	r1, #128	; 0x80
    131a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    131c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1320:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1324:	3101      	adds	r1, #1
    1326:	31ff      	adds	r1, #255	; 0xff
    1328:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    132a:	601a      	str	r2, [r3, #0]
    132c:	2000      	movs	r0, #0
    132e:	bd70      	pop	{r4, r5, r6, pc}
    1330:	2000      	movs	r0, #0
    1332:	e7e4      	b.n	12fe <_flash_init+0x12>
    1334:	2001      	movs	r0, #1
    1336:	e7e2      	b.n	12fe <_flash_init+0x12>
    1338:	41004000 	.word	0x41004000
    133c:	00003684 	.word	0x00003684
    1340:	00000d19 	.word	0x00000d19
    1344:	20000144 	.word	0x20000144
    1348:	e000e100 	.word	0xe000e100

0000134c <NVMCTRL_Handler>:
    134c:	b510      	push	{r4, lr}
    134e:	4b0a      	ldr	r3, [pc, #40]	; (1378 <NVMCTRL_Handler+0x2c>)
    1350:	6818      	ldr	r0, [r3, #0]
    1352:	6903      	ldr	r3, [r0, #16]
    1354:	7d1a      	ldrb	r2, [r3, #20]
    1356:	07d2      	lsls	r2, r2, #31
    1358:	d504      	bpl.n	1364 <NVMCTRL_Handler+0x18>
    135a:	6803      	ldr	r3, [r0, #0]
    135c:	2b00      	cmp	r3, #0
    135e:	d000      	beq.n	1362 <NVMCTRL_Handler+0x16>
    1360:	4798      	blx	r3
    1362:	bd10      	pop	{r4, pc}
    1364:	7d1a      	ldrb	r2, [r3, #20]
    1366:	0792      	lsls	r2, r2, #30
    1368:	d5fb      	bpl.n	1362 <NVMCTRL_Handler+0x16>
    136a:	2202      	movs	r2, #2
    136c:	751a      	strb	r2, [r3, #20]
    136e:	6843      	ldr	r3, [r0, #4]
    1370:	2b00      	cmp	r3, #0
    1372:	d0f6      	beq.n	1362 <NVMCTRL_Handler+0x16>
    1374:	4798      	blx	r3
    1376:	e7f4      	b.n	1362 <NVMCTRL_Handler+0x16>
    1378:	20000144 	.word	0x20000144

0000137c <_pm_init>:
    137c:	4b06      	ldr	r3, [pc, #24]	; (1398 <_pm_init+0x1c>)
    137e:	7a1a      	ldrb	r2, [r3, #8]
    1380:	b2d2      	uxtb	r2, r2
    1382:	721a      	strb	r2, [r3, #8]
    1384:	7a5a      	ldrb	r2, [r3, #9]
    1386:	b2d2      	uxtb	r2, r2
    1388:	725a      	strb	r2, [r3, #9]
    138a:	7a9a      	ldrb	r2, [r3, #10]
    138c:	b2d2      	uxtb	r2, r2
    138e:	729a      	strb	r2, [r3, #10]
    1390:	7ada      	ldrb	r2, [r3, #11]
    1392:	b2d2      	uxtb	r2, r2
    1394:	72da      	strb	r2, [r3, #11]
    1396:	4770      	bx	lr
    1398:	40000400 	.word	0x40000400

0000139c <_sercom_get_hardware_index>:
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <_sercom_get_hardware_index+0xc>)
    139e:	469c      	mov	ip, r3
    13a0:	4460      	add	r0, ip
    13a2:	0a80      	lsrs	r0, r0, #10
    13a4:	b2c0      	uxtb	r0, r0
    13a6:	4770      	bx	lr
    13a8:	bdfff800 	.word	0xbdfff800

000013ac <_sercom_usart_interrupt_handler>:
    13ac:	b510      	push	{r4, lr}
    13ae:	6983      	ldr	r3, [r0, #24]
    13b0:	7b9a      	ldrb	r2, [r3, #14]
    13b2:	07d2      	lsls	r2, r2, #31
    13b4:	d502      	bpl.n	13bc <_sercom_usart_interrupt_handler+0x10>
    13b6:	7b5a      	ldrb	r2, [r3, #13]
    13b8:	07d2      	lsls	r2, r2, #31
    13ba:	d40e      	bmi.n	13da <_sercom_usart_interrupt_handler+0x2e>
    13bc:	7b9a      	ldrb	r2, [r3, #14]
    13be:	0792      	lsls	r2, r2, #30
    13c0:	d502      	bpl.n	13c8 <_sercom_usart_interrupt_handler+0x1c>
    13c2:	7b5a      	ldrb	r2, [r3, #13]
    13c4:	0792      	lsls	r2, r2, #30
    13c6:	d40d      	bmi.n	13e4 <_sercom_usart_interrupt_handler+0x38>
    13c8:	7b9a      	ldrb	r2, [r3, #14]
    13ca:	0752      	lsls	r2, r2, #29
    13cc:	d504      	bpl.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
    13ce:	8a1a      	ldrh	r2, [r3, #16]
    13d0:	0752      	lsls	r2, r2, #29
    13d2:	d00c      	beq.n	13ee <_sercom_usart_interrupt_handler+0x42>
    13d4:	4a08      	ldr	r2, [pc, #32]	; (13f8 <_sercom_usart_interrupt_handler+0x4c>)
    13d6:	821a      	strh	r2, [r3, #16]
    13d8:	bd10      	pop	{r4, pc}
    13da:	2201      	movs	r2, #1
    13dc:	731a      	strb	r2, [r3, #12]
    13de:	6803      	ldr	r3, [r0, #0]
    13e0:	4798      	blx	r3
    13e2:	e7f9      	b.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
    13e4:	2202      	movs	r2, #2
    13e6:	731a      	strb	r2, [r3, #12]
    13e8:	6883      	ldr	r3, [r0, #8]
    13ea:	4798      	blx	r3
    13ec:	e7f4      	b.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
    13ee:	6842      	ldr	r2, [r0, #4]
    13f0:	8b19      	ldrh	r1, [r3, #24]
    13f2:	b2c9      	uxtb	r1, r1
    13f4:	4790      	blx	r2
    13f6:	e7ef      	b.n	13d8 <_sercom_usart_interrupt_handler+0x2c>
    13f8:	ffff8007 	.word	0xffff8007

000013fc <_sercom_get_irq_num>:
    13fc:	b510      	push	{r4, lr}
    13fe:	4b02      	ldr	r3, [pc, #8]	; (1408 <_sercom_get_irq_num+0xc>)
    1400:	4798      	blx	r3
    1402:	3007      	adds	r0, #7
    1404:	b2c0      	uxtb	r0, r0
    1406:	bd10      	pop	{r4, pc}
    1408:	0000139d 	.word	0x0000139d

0000140c <_sercom_init_irq_param>:
    140c:	4b03      	ldr	r3, [pc, #12]	; (141c <_sercom_init_irq_param+0x10>)
    140e:	4298      	cmp	r0, r3
    1410:	d000      	beq.n	1414 <_sercom_init_irq_param+0x8>
    1412:	4770      	bx	lr
    1414:	4b02      	ldr	r3, [pc, #8]	; (1420 <_sercom_init_irq_param+0x14>)
    1416:	6019      	str	r1, [r3, #0]
    1418:	e7fb      	b.n	1412 <_sercom_init_irq_param+0x6>
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	42001400 	.word	0x42001400
    1420:	20000148 	.word	0x20000148

00001424 <_get_sercom_index>:
    1424:	b510      	push	{r4, lr}
    1426:	4b0a      	ldr	r3, [pc, #40]	; (1450 <_get_sercom_index+0x2c>)
    1428:	4798      	blx	r3
    142a:	0003      	movs	r3, r0
    142c:	2000      	movs	r0, #0
    142e:	2800      	cmp	r0, #0
    1430:	d006      	beq.n	1440 <_get_sercom_index+0x1c>
    1432:	4a08      	ldr	r2, [pc, #32]	; (1454 <_get_sercom_index+0x30>)
    1434:	4908      	ldr	r1, [pc, #32]	; (1458 <_get_sercom_index+0x34>)
    1436:	2000      	movs	r0, #0
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <_get_sercom_index+0x38>)
    143a:	4798      	blx	r3
    143c:	2000      	movs	r0, #0
    143e:	bd10      	pop	{r4, pc}
    1440:	0102      	lsls	r2, r0, #4
    1442:	4907      	ldr	r1, [pc, #28]	; (1460 <_get_sercom_index+0x3c>)
    1444:	5c52      	ldrb	r2, [r2, r1]
    1446:	4293      	cmp	r3, r2
    1448:	d0f9      	beq.n	143e <_get_sercom_index+0x1a>
    144a:	3001      	adds	r0, #1
    144c:	b2c0      	uxtb	r0, r0
    144e:	e7ee      	b.n	142e <_get_sercom_index+0xa>
    1450:	0000139d 	.word	0x0000139d
    1454:	0000024e 	.word	0x0000024e
    1458:	000036ec 	.word	0x000036ec
    145c:	00000d19 	.word	0x00000d19
    1460:	000036a4 	.word	0x000036a4

00001464 <_usart_init>:
    1464:	b510      	push	{r4, lr}
    1466:	0004      	movs	r4, r0
    1468:	4b19      	ldr	r3, [pc, #100]	; (14d0 <_usart_init+0x6c>)
    146a:	4798      	blx	r3
    146c:	8a23      	ldrh	r3, [r4, #16]
    146e:	0bdb      	lsrs	r3, r3, #15
    1470:	d1fc      	bne.n	146c <_usart_init+0x8>
    1472:	8a23      	ldrh	r3, [r4, #16]
    1474:	0bdb      	lsrs	r3, r3, #15
    1476:	d1fc      	bne.n	1472 <_usart_init+0xe>
    1478:	6823      	ldr	r3, [r4, #0]
    147a:	079b      	lsls	r3, r3, #30
    147c:	d507      	bpl.n	148e <_usart_init+0x2a>
    147e:	2300      	movs	r3, #0
    1480:	6023      	str	r3, [r4, #0]
    1482:	8a23      	ldrh	r3, [r4, #16]
    1484:	0bdb      	lsrs	r3, r3, #15
    1486:	d1fc      	bne.n	1482 <_usart_init+0x1e>
    1488:	8a23      	ldrh	r3, [r4, #16]
    148a:	0bdb      	lsrs	r3, r3, #15
    148c:	d1fc      	bne.n	1488 <_usart_init+0x24>
    148e:	2301      	movs	r3, #1
    1490:	6023      	str	r3, [r4, #0]
    1492:	8a23      	ldrh	r3, [r4, #16]
    1494:	0bdb      	lsrs	r3, r3, #15
    1496:	d1fc      	bne.n	1492 <_usart_init+0x2e>
    1498:	8a23      	ldrh	r3, [r4, #16]
    149a:	0bdb      	lsrs	r3, r3, #15
    149c:	d1fc      	bne.n	1498 <_usart_init+0x34>
    149e:	0102      	lsls	r2, r0, #4
    14a0:	4b0c      	ldr	r3, [pc, #48]	; (14d4 <_usart_init+0x70>)
    14a2:	189b      	adds	r3, r3, r2
    14a4:	685b      	ldr	r3, [r3, #4]
    14a6:	6023      	str	r3, [r4, #0]
    14a8:	8a23      	ldrh	r3, [r4, #16]
    14aa:	0bdb      	lsrs	r3, r3, #15
    14ac:	d1fc      	bne.n	14a8 <_usart_init+0x44>
    14ae:	0102      	lsls	r2, r0, #4
    14b0:	4b08      	ldr	r3, [pc, #32]	; (14d4 <_usart_init+0x70>)
    14b2:	189b      	adds	r3, r3, r2
    14b4:	689b      	ldr	r3, [r3, #8]
    14b6:	6063      	str	r3, [r4, #4]
    14b8:	8a23      	ldrh	r3, [r4, #16]
    14ba:	0bdb      	lsrs	r3, r3, #15
    14bc:	d1fc      	bne.n	14b8 <_usart_init+0x54>
    14be:	0100      	lsls	r0, r0, #4
    14c0:	4b04      	ldr	r3, [pc, #16]	; (14d4 <_usart_init+0x70>)
    14c2:	1818      	adds	r0, r3, r0
    14c4:	8983      	ldrh	r3, [r0, #12]
    14c6:	8163      	strh	r3, [r4, #10]
    14c8:	7b83      	ldrb	r3, [r0, #14]
    14ca:	7223      	strb	r3, [r4, #8]
    14cc:	2000      	movs	r0, #0
    14ce:	bd10      	pop	{r4, pc}
    14d0:	00001425 	.word	0x00001425
    14d4:	000036a4 	.word	0x000036a4

000014d8 <_usart_async_init>:
    14d8:	b570      	push	{r4, r5, r6, lr}
    14da:	0006      	movs	r6, r0
    14dc:	000c      	movs	r4, r1
    14de:	1e43      	subs	r3, r0, #1
    14e0:	4198      	sbcs	r0, r3
    14e2:	b2c0      	uxtb	r0, r0
    14e4:	22b1      	movs	r2, #177	; 0xb1
    14e6:	4919      	ldr	r1, [pc, #100]	; (154c <_usart_async_init+0x74>)
    14e8:	4b19      	ldr	r3, [pc, #100]	; (1550 <_usart_async_init+0x78>)
    14ea:	4798      	blx	r3
    14ec:	0020      	movs	r0, r4
    14ee:	4b19      	ldr	r3, [pc, #100]	; (1554 <_usart_async_init+0x7c>)
    14f0:	4798      	blx	r3
    14f2:	1e05      	subs	r5, r0, #0
    14f4:	d001      	beq.n	14fa <_usart_async_init+0x22>
    14f6:	0028      	movs	r0, r5
    14f8:	bd70      	pop	{r4, r5, r6, pc}
    14fa:	61b4      	str	r4, [r6, #24]
    14fc:	0031      	movs	r1, r6
    14fe:	0020      	movs	r0, r4
    1500:	4b15      	ldr	r3, [pc, #84]	; (1558 <_usart_async_init+0x80>)
    1502:	4798      	blx	r3
    1504:	0020      	movs	r0, r4
    1506:	4b15      	ldr	r3, [pc, #84]	; (155c <_usart_async_init+0x84>)
    1508:	4798      	blx	r3
    150a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    150c:	2b00      	cmp	r3, #0
    150e:	db0a      	blt.n	1526 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1510:	211f      	movs	r1, #31
    1512:	4001      	ands	r1, r0
    1514:	2201      	movs	r2, #1
    1516:	408a      	lsls	r2, r1
    1518:	2180      	movs	r1, #128	; 0x80
    151a:	4c11      	ldr	r4, [pc, #68]	; (1560 <_usart_async_init+0x88>)
    151c:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    151e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1522:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1526:	2b00      	cmp	r3, #0
    1528:	db07      	blt.n	153a <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    152a:	211f      	movs	r1, #31
    152c:	4001      	ands	r1, r0
    152e:	2201      	movs	r2, #1
    1530:	408a      	lsls	r2, r1
    1532:	21c0      	movs	r1, #192	; 0xc0
    1534:	0049      	lsls	r1, r1, #1
    1536:	4c0a      	ldr	r4, [pc, #40]	; (1560 <_usart_async_init+0x88>)
    1538:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    153a:	2b00      	cmp	r3, #0
    153c:	dbdb      	blt.n	14f6 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    153e:	231f      	movs	r3, #31
    1540:	4018      	ands	r0, r3
    1542:	3b1e      	subs	r3, #30
    1544:	4083      	lsls	r3, r0
    1546:	4a06      	ldr	r2, [pc, #24]	; (1560 <_usart_async_init+0x88>)
    1548:	6013      	str	r3, [r2, #0]
    154a:	e7d4      	b.n	14f6 <_usart_async_init+0x1e>
    154c:	000036ec 	.word	0x000036ec
    1550:	00000d19 	.word	0x00000d19
    1554:	00001465 	.word	0x00001465
    1558:	0000140d 	.word	0x0000140d
    155c:	000013fd 	.word	0x000013fd
    1560:	e000e100 	.word	0xe000e100

00001564 <_usart_async_enable>:
    1564:	6982      	ldr	r2, [r0, #24]
    1566:	6813      	ldr	r3, [r2, #0]
    1568:	2102      	movs	r1, #2
    156a:	430b      	orrs	r3, r1
    156c:	6013      	str	r3, [r2, #0]
    156e:	8a13      	ldrh	r3, [r2, #16]
    1570:	0bdb      	lsrs	r3, r3, #15
    1572:	d1fc      	bne.n	156e <_usart_async_enable+0xa>
    1574:	4770      	bx	lr

00001576 <_usart_async_write_byte>:
    1576:	6983      	ldr	r3, [r0, #24]
    1578:	b289      	uxth	r1, r1
    157a:	8319      	strh	r1, [r3, #24]
    157c:	4770      	bx	lr

0000157e <_usart_async_enable_byte_sent_irq>:
    157e:	6983      	ldr	r3, [r0, #24]
    1580:	2201      	movs	r2, #1
    1582:	735a      	strb	r2, [r3, #13]
    1584:	4770      	bx	lr

00001586 <_usart_async_enable_tx_done_irq>:
    1586:	6983      	ldr	r3, [r0, #24]
    1588:	2202      	movs	r2, #2
    158a:	735a      	strb	r2, [r3, #13]
    158c:	4770      	bx	lr
	...

00001590 <_usart_async_set_irq_state>:
    1590:	b570      	push	{r4, r5, r6, lr}
    1592:	0004      	movs	r4, r0
    1594:	000d      	movs	r5, r1
    1596:	0016      	movs	r6, r2
    1598:	1e43      	subs	r3, r0, #1
    159a:	4198      	sbcs	r0, r3
    159c:	b2c0      	uxtb	r0, r0
    159e:	2284      	movs	r2, #132	; 0x84
    15a0:	0092      	lsls	r2, r2, #2
    15a2:	4911      	ldr	r1, [pc, #68]	; (15e8 <_usart_async_set_irq_state+0x58>)
    15a4:	4b11      	ldr	r3, [pc, #68]	; (15ec <_usart_async_set_irq_state+0x5c>)
    15a6:	4798      	blx	r3
    15a8:	2d00      	cmp	r5, #0
    15aa:	d009      	beq.n	15c0 <_usart_async_set_irq_state+0x30>
    15ac:	2d02      	cmp	r5, #2
    15ae:	d007      	beq.n	15c0 <_usart_async_set_irq_state+0x30>
    15b0:	2d01      	cmp	r5, #1
    15b2:	d10f      	bne.n	15d4 <_usart_async_set_irq_state+0x44>
    15b4:	69a3      	ldr	r3, [r4, #24]
    15b6:	2e00      	cmp	r6, #0
    15b8:	d013      	beq.n	15e2 <_usart_async_set_irq_state+0x52>
    15ba:	2204      	movs	r2, #4
    15bc:	735a      	strb	r2, [r3, #13]
    15be:	e009      	b.n	15d4 <_usart_async_set_irq_state+0x44>
    15c0:	69a3      	ldr	r3, [r4, #24]
    15c2:	2e00      	cmp	r6, #0
    15c4:	d107      	bne.n	15d6 <_usart_async_set_irq_state+0x46>
    15c6:	2201      	movs	r2, #1
    15c8:	731a      	strb	r2, [r3, #12]
    15ca:	69a3      	ldr	r3, [r4, #24]
    15cc:	2e00      	cmp	r6, #0
    15ce:	d105      	bne.n	15dc <_usart_async_set_irq_state+0x4c>
    15d0:	2202      	movs	r2, #2
    15d2:	731a      	strb	r2, [r3, #12]
    15d4:	bd70      	pop	{r4, r5, r6, pc}
    15d6:	2201      	movs	r2, #1
    15d8:	735a      	strb	r2, [r3, #13]
    15da:	e7f6      	b.n	15ca <_usart_async_set_irq_state+0x3a>
    15dc:	2202      	movs	r2, #2
    15de:	735a      	strb	r2, [r3, #13]
    15e0:	e7f8      	b.n	15d4 <_usart_async_set_irq_state+0x44>
    15e2:	2204      	movs	r2, #4
    15e4:	731a      	strb	r2, [r3, #12]
    15e6:	e7f5      	b.n	15d4 <_usart_async_set_irq_state+0x44>
    15e8:	000036ec 	.word	0x000036ec
    15ec:	00000d19 	.word	0x00000d19

000015f0 <SERCOM3_Handler>:
    15f0:	b510      	push	{r4, lr}
    15f2:	4b02      	ldr	r3, [pc, #8]	; (15fc <SERCOM3_Handler+0xc>)
    15f4:	6818      	ldr	r0, [r3, #0]
    15f6:	4b02      	ldr	r3, [pc, #8]	; (1600 <SERCOM3_Handler+0x10>)
    15f8:	4798      	blx	r3
    15fa:	bd10      	pop	{r4, pc}
    15fc:	20000148 	.word	0x20000148
    1600:	000013ad 	.word	0x000013ad

00001604 <_spi_m_sync_init>:
    1604:	b570      	push	{r4, r5, r6, lr}
    1606:	0006      	movs	r6, r0
    1608:	000c      	movs	r4, r1
    160a:	0008      	movs	r0, r1
    160c:	4b62      	ldr	r3, [pc, #392]	; (1798 <_spi_m_sync_init+0x194>)
    160e:	4798      	blx	r3
    1610:	2300      	movs	r3, #0
    1612:	2b00      	cmp	r3, #0
    1614:	d100      	bne.n	1618 <_spi_m_sync_init+0x14>
    1616:	e06c      	b.n	16f2 <_spi_m_sync_init+0xee>
    1618:	2500      	movs	r5, #0
    161a:	2e00      	cmp	r6, #0
    161c:	d100      	bne.n	1620 <_spi_m_sync_init+0x1c>
    161e:	e074      	b.n	170a <_spi_m_sync_init+0x106>
    1620:	2c00      	cmp	r4, #0
    1622:	d100      	bne.n	1626 <_spi_m_sync_init+0x22>
    1624:	e06f      	b.n	1706 <_spi_m_sync_init+0x102>
    1626:	2001      	movs	r0, #1
    1628:	4a5c      	ldr	r2, [pc, #368]	; (179c <_spi_m_sync_init+0x198>)
    162a:	495d      	ldr	r1, [pc, #372]	; (17a0 <_spi_m_sync_init+0x19c>)
    162c:	4b5d      	ldr	r3, [pc, #372]	; (17a4 <_spi_m_sync_init+0x1a0>)
    162e:	4798      	blx	r3
    1630:	2d00      	cmp	r5, #0
    1632:	d100      	bne.n	1636 <_spi_m_sync_init+0x32>
    1634:	e0ac      	b.n	1790 <_spi_m_sync_init+0x18c>
    1636:	8a23      	ldrh	r3, [r4, #16]
    1638:	0bdb      	lsrs	r3, r3, #15
    163a:	d1fc      	bne.n	1636 <_spi_m_sync_init+0x32>
    163c:	8a23      	ldrh	r3, [r4, #16]
    163e:	0bdb      	lsrs	r3, r3, #15
    1640:	d1fc      	bne.n	163c <_spi_m_sync_init+0x38>
    1642:	6823      	ldr	r3, [r4, #0]
    1644:	079b      	lsls	r3, r3, #30
    1646:	d507      	bpl.n	1658 <_spi_m_sync_init+0x54>
    1648:	2300      	movs	r3, #0
    164a:	6023      	str	r3, [r4, #0]
    164c:	8a23      	ldrh	r3, [r4, #16]
    164e:	0bdb      	lsrs	r3, r3, #15
    1650:	d1fc      	bne.n	164c <_spi_m_sync_init+0x48>
    1652:	8a23      	ldrh	r3, [r4, #16]
    1654:	0bdb      	lsrs	r3, r3, #15
    1656:	d1fc      	bne.n	1652 <_spi_m_sync_init+0x4e>
    1658:	2301      	movs	r3, #1
    165a:	6023      	str	r3, [r4, #0]
    165c:	8a23      	ldrh	r3, [r4, #16]
    165e:	0bdb      	lsrs	r3, r3, #15
    1660:	d1fc      	bne.n	165c <_spi_m_sync_init+0x58>
    1662:	8a23      	ldrh	r3, [r4, #16]
    1664:	0bdb      	lsrs	r3, r3, #15
    1666:	d1fc      	bne.n	1662 <_spi_m_sync_init+0x5e>
    1668:	6034      	str	r4, [r6, #0]
    166a:	782b      	ldrb	r3, [r5, #0]
    166c:	786a      	ldrb	r2, [r5, #1]
    166e:	0212      	lsls	r2, r2, #8
    1670:	431a      	orrs	r2, r3
    1672:	78ab      	ldrb	r3, [r5, #2]
    1674:	041b      	lsls	r3, r3, #16
    1676:	431a      	orrs	r2, r3
    1678:	78eb      	ldrb	r3, [r5, #3]
    167a:	061b      	lsls	r3, r3, #24
    167c:	4313      	orrs	r3, r2
    167e:	221c      	movs	r2, #28
    1680:	4013      	ands	r3, r2
    1682:	2b08      	cmp	r3, #8
    1684:	d043      	beq.n	170e <_spi_m_sync_init+0x10a>
    1686:	2c00      	cmp	r4, #0
    1688:	d100      	bne.n	168c <_spi_m_sync_init+0x88>
    168a:	e07d      	b.n	1788 <_spi_m_sync_init+0x184>
    168c:	2d00      	cmp	r5, #0
    168e:	d100      	bne.n	1692 <_spi_m_sync_init+0x8e>
    1690:	e078      	b.n	1784 <_spi_m_sync_init+0x180>
    1692:	2001      	movs	r0, #1
    1694:	4a44      	ldr	r2, [pc, #272]	; (17a8 <_spi_m_sync_init+0x1a4>)
    1696:	4942      	ldr	r1, [pc, #264]	; (17a0 <_spi_m_sync_init+0x19c>)
    1698:	4b42      	ldr	r3, [pc, #264]	; (17a4 <_spi_m_sync_init+0x1a0>)
    169a:	4798      	blx	r3
    169c:	782b      	ldrb	r3, [r5, #0]
    169e:	786a      	ldrb	r2, [r5, #1]
    16a0:	0212      	lsls	r2, r2, #8
    16a2:	431a      	orrs	r2, r3
    16a4:	78ab      	ldrb	r3, [r5, #2]
    16a6:	041b      	lsls	r3, r3, #16
    16a8:	431a      	orrs	r2, r3
    16aa:	78eb      	ldrb	r3, [r5, #3]
    16ac:	061b      	lsls	r3, r3, #24
    16ae:	4313      	orrs	r3, r2
    16b0:	4a3e      	ldr	r2, [pc, #248]	; (17ac <_spi_m_sync_init+0x1a8>)
    16b2:	4013      	ands	r3, r2
    16b4:	6023      	str	r3, [r4, #0]
    16b6:	8a23      	ldrh	r3, [r4, #16]
    16b8:	0bdb      	lsrs	r3, r3, #15
    16ba:	d1fc      	bne.n	16b6 <_spi_m_sync_init+0xb2>
    16bc:	792b      	ldrb	r3, [r5, #4]
    16be:	796a      	ldrb	r2, [r5, #5]
    16c0:	0212      	lsls	r2, r2, #8
    16c2:	431a      	orrs	r2, r3
    16c4:	79ab      	ldrb	r3, [r5, #6]
    16c6:	041b      	lsls	r3, r3, #16
    16c8:	431a      	orrs	r2, r3
    16ca:	79eb      	ldrb	r3, [r5, #7]
    16cc:	061b      	lsls	r3, r3, #24
    16ce:	4313      	orrs	r3, r2
    16d0:	4a37      	ldr	r2, [pc, #220]	; (17b0 <_spi_m_sync_init+0x1ac>)
    16d2:	4013      	ands	r3, r2
    16d4:	2280      	movs	r2, #128	; 0x80
    16d6:	0292      	lsls	r2, r2, #10
    16d8:	4313      	orrs	r3, r2
    16da:	6063      	str	r3, [r4, #4]
    16dc:	7b2b      	ldrb	r3, [r5, #12]
    16de:	72a3      	strb	r3, [r4, #10]
    16e0:	7b6b      	ldrb	r3, [r5, #13]
    16e2:	7223      	strb	r3, [r4, #8]
    16e4:	792b      	ldrb	r3, [r5, #4]
    16e6:	075b      	lsls	r3, r3, #29
    16e8:	d150      	bne.n	178c <_spi_m_sync_init+0x188>
    16ea:	2301      	movs	r3, #1
    16ec:	7133      	strb	r3, [r6, #4]
    16ee:	2000      	movs	r0, #0
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    16f2:	2801      	cmp	r0, #1
    16f4:	d002      	beq.n	16fc <_spi_m_sync_init+0xf8>
    16f6:	3301      	adds	r3, #1
    16f8:	b2db      	uxtb	r3, r3
    16fa:	e78a      	b.n	1612 <_spi_m_sync_init+0xe>
    16fc:	011d      	lsls	r5, r3, #4
    16fe:	4b2d      	ldr	r3, [pc, #180]	; (17b4 <_spi_m_sync_init+0x1b0>)
    1700:	3338      	adds	r3, #56	; 0x38
    1702:	195d      	adds	r5, r3, r5
    1704:	e789      	b.n	161a <_spi_m_sync_init+0x16>
    1706:	2000      	movs	r0, #0
    1708:	e78e      	b.n	1628 <_spi_m_sync_init+0x24>
    170a:	2000      	movs	r0, #0
    170c:	e78c      	b.n	1628 <_spi_m_sync_init+0x24>
    170e:	2c00      	cmp	r4, #0
    1710:	d036      	beq.n	1780 <_spi_m_sync_init+0x17c>
    1712:	2d00      	cmp	r5, #0
    1714:	d032      	beq.n	177c <_spi_m_sync_init+0x178>
    1716:	2001      	movs	r0, #1
    1718:	4a27      	ldr	r2, [pc, #156]	; (17b8 <_spi_m_sync_init+0x1b4>)
    171a:	4921      	ldr	r1, [pc, #132]	; (17a0 <_spi_m_sync_init+0x19c>)
    171c:	4b21      	ldr	r3, [pc, #132]	; (17a4 <_spi_m_sync_init+0x1a0>)
    171e:	4798      	blx	r3
    1720:	782b      	ldrb	r3, [r5, #0]
    1722:	786a      	ldrb	r2, [r5, #1]
    1724:	0212      	lsls	r2, r2, #8
    1726:	431a      	orrs	r2, r3
    1728:	78ab      	ldrb	r3, [r5, #2]
    172a:	041b      	lsls	r3, r3, #16
    172c:	431a      	orrs	r2, r3
    172e:	78eb      	ldrb	r3, [r5, #3]
    1730:	061b      	lsls	r3, r3, #24
    1732:	4313      	orrs	r3, r2
    1734:	4a1d      	ldr	r2, [pc, #116]	; (17ac <_spi_m_sync_init+0x1a8>)
    1736:	4013      	ands	r3, r2
    1738:	6023      	str	r3, [r4, #0]
    173a:	8a23      	ldrh	r3, [r4, #16]
    173c:	0bdb      	lsrs	r3, r3, #15
    173e:	d1fc      	bne.n	173a <_spi_m_sync_init+0x136>
    1740:	792b      	ldrb	r3, [r5, #4]
    1742:	796a      	ldrb	r2, [r5, #5]
    1744:	0212      	lsls	r2, r2, #8
    1746:	431a      	orrs	r2, r3
    1748:	79ab      	ldrb	r3, [r5, #6]
    174a:	041b      	lsls	r3, r3, #16
    174c:	431a      	orrs	r2, r3
    174e:	79eb      	ldrb	r3, [r5, #7]
    1750:	061b      	lsls	r3, r3, #24
    1752:	4313      	orrs	r3, r2
    1754:	4a19      	ldr	r2, [pc, #100]	; (17bc <_spi_m_sync_init+0x1b8>)
    1756:	4313      	orrs	r3, r2
    1758:	6063      	str	r3, [r4, #4]
    175a:	7a2b      	ldrb	r3, [r5, #8]
    175c:	7a6a      	ldrb	r2, [r5, #9]
    175e:	0212      	lsls	r2, r2, #8
    1760:	431a      	orrs	r2, r3
    1762:	7aab      	ldrb	r3, [r5, #10]
    1764:	041b      	lsls	r3, r3, #16
    1766:	431a      	orrs	r2, r3
    1768:	7aeb      	ldrb	r3, [r5, #11]
    176a:	061b      	lsls	r3, r3, #24
    176c:	4313      	orrs	r3, r2
    176e:	6163      	str	r3, [r4, #20]
    1770:	7b6b      	ldrb	r3, [r5, #13]
    1772:	7223      	strb	r3, [r4, #8]
    1774:	8a23      	ldrh	r3, [r4, #16]
    1776:	0bdb      	lsrs	r3, r3, #15
    1778:	d1fc      	bne.n	1774 <_spi_m_sync_init+0x170>
    177a:	e7b3      	b.n	16e4 <_spi_m_sync_init+0xe0>
    177c:	2000      	movs	r0, #0
    177e:	e7cb      	b.n	1718 <_spi_m_sync_init+0x114>
    1780:	2000      	movs	r0, #0
    1782:	e7c9      	b.n	1718 <_spi_m_sync_init+0x114>
    1784:	2000      	movs	r0, #0
    1786:	e785      	b.n	1694 <_spi_m_sync_init+0x90>
    1788:	2000      	movs	r0, #0
    178a:	e783      	b.n	1694 <_spi_m_sync_init+0x90>
    178c:	2302      	movs	r3, #2
    178e:	e7ad      	b.n	16ec <_spi_m_sync_init+0xe8>
    1790:	200d      	movs	r0, #13
    1792:	4240      	negs	r0, r0
    1794:	e7ac      	b.n	16f0 <_spi_m_sync_init+0xec>
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	0000139d 	.word	0x0000139d
    179c:	000008cb 	.word	0x000008cb
    17a0:	000036ec 	.word	0x000036ec
    17a4:	00000d19 	.word	0x00000d19
    17a8:	0000089a 	.word	0x0000089a
    17ac:	fffffefc 	.word	0xfffffefc
    17b0:	fffd3fbf 	.word	0xfffd3fbf
    17b4:	000036a4 	.word	0x000036a4
    17b8:	000008ab 	.word	0x000008ab
    17bc:	00020040 	.word	0x00020040

000017c0 <_spi_m_sync_trans>:
    17c0:	b570      	push	{r4, r5, r6, lr}
    17c2:	b088      	sub	sp, #32
    17c4:	000d      	movs	r5, r1
    17c6:	6804      	ldr	r4, [r0, #0]
    17c8:	680b      	ldr	r3, [r1, #0]
    17ca:	9303      	str	r3, [sp, #12]
    17cc:	684b      	ldr	r3, [r1, #4]
    17ce:	9304      	str	r3, [sp, #16]
    17d0:	2300      	movs	r3, #0
    17d2:	9305      	str	r3, [sp, #20]
    17d4:	9306      	str	r3, [sp, #24]
    17d6:	7906      	ldrb	r6, [r0, #4]
    17d8:	2800      	cmp	r0, #0
    17da:	d014      	beq.n	1806 <_spi_m_sync_trans+0x46>
    17dc:	2c00      	cmp	r4, #0
    17de:	d010      	beq.n	1802 <_spi_m_sync_trans+0x42>
    17e0:	2001      	movs	r0, #1
    17e2:	4a2d      	ldr	r2, [pc, #180]	; (1898 <_spi_m_sync_trans+0xd8>)
    17e4:	492d      	ldr	r1, [pc, #180]	; (189c <_spi_m_sync_trans+0xdc>)
    17e6:	4b2e      	ldr	r3, [pc, #184]	; (18a0 <_spi_m_sync_trans+0xe0>)
    17e8:	4798      	blx	r3
    17ea:	8a23      	ldrh	r3, [r4, #16]
    17ec:	0bdb      	lsrs	r3, r3, #15
    17ee:	d14f      	bne.n	1890 <_spi_m_sync_trans+0xd0>
    17f0:	8a23      	ldrh	r3, [r4, #16]
    17f2:	0bdb      	lsrs	r3, r3, #15
    17f4:	d1fc      	bne.n	17f0 <_spi_m_sync_trans+0x30>
    17f6:	6823      	ldr	r3, [r4, #0]
    17f8:	079b      	lsls	r3, r3, #30
    17fa:	d418      	bmi.n	182e <_spi_m_sync_trans+0x6e>
    17fc:	2014      	movs	r0, #20
    17fe:	4240      	negs	r0, r0
    1800:	e044      	b.n	188c <_spi_m_sync_trans+0xcc>
    1802:	2000      	movs	r0, #0
    1804:	e7ed      	b.n	17e2 <_spi_m_sync_trans+0x22>
    1806:	2000      	movs	r0, #0
    1808:	e7eb      	b.n	17e2 <_spi_m_sync_trans+0x22>
    180a:	2200      	movs	r2, #0
    180c:	e026      	b.n	185c <_spi_m_sync_trans+0x9c>
    180e:	7858      	ldrb	r0, [r3, #1]
    1810:	0200      	lsls	r0, r0, #8
    1812:	4301      	orrs	r1, r0
    1814:	3302      	adds	r3, #2
    1816:	9303      	str	r3, [sp, #12]
    1818:	3201      	adds	r2, #1
    181a:	9205      	str	r2, [sp, #20]
    181c:	b289      	uxth	r1, r1
    181e:	8321      	strh	r1, [r4, #24]
    1820:	9805      	ldr	r0, [sp, #20]
    1822:	68ab      	ldr	r3, [r5, #8]
    1824:	4298      	cmp	r0, r3
    1826:	d302      	bcc.n	182e <_spi_m_sync_trans+0x6e>
    1828:	9a06      	ldr	r2, [sp, #24]
    182a:	4293      	cmp	r3, r2
    182c:	d929      	bls.n	1882 <_spi_m_sync_trans+0xc2>
    182e:	7ba3      	ldrb	r3, [r4, #14]
    1830:	b2db      	uxtb	r3, r3
    1832:	075a      	lsls	r2, r3, #29
    1834:	d5e9      	bpl.n	180a <_spi_m_sync_trans+0x4a>
    1836:	8b22      	ldrh	r2, [r4, #24]
    1838:	b292      	uxth	r2, r2
    183a:	9904      	ldr	r1, [sp, #16]
    183c:	2900      	cmp	r1, #0
    183e:	d008      	beq.n	1852 <_spi_m_sync_trans+0x92>
    1840:	1c48      	adds	r0, r1, #1
    1842:	9004      	str	r0, [sp, #16]
    1844:	700a      	strb	r2, [r1, #0]
    1846:	2e01      	cmp	r6, #1
    1848:	d903      	bls.n	1852 <_spi_m_sync_trans+0x92>
    184a:	1c88      	adds	r0, r1, #2
    184c:	9004      	str	r0, [sp, #16]
    184e:	0a12      	lsrs	r2, r2, #8
    1850:	704a      	strb	r2, [r1, #1]
    1852:	9a06      	ldr	r2, [sp, #24]
    1854:	9201      	str	r2, [sp, #4]
    1856:	3201      	adds	r2, #1
    1858:	9206      	str	r2, [sp, #24]
    185a:	2201      	movs	r2, #1
    185c:	2a00      	cmp	r2, #0
    185e:	d1df      	bne.n	1820 <_spi_m_sync_trans+0x60>
    1860:	9906      	ldr	r1, [sp, #24]
    1862:	9a05      	ldr	r2, [sp, #20]
    1864:	4291      	cmp	r1, r2
    1866:	d3db      	bcc.n	1820 <_spi_m_sync_trans+0x60>
    1868:	07db      	lsls	r3, r3, #31
    186a:	d5d9      	bpl.n	1820 <_spi_m_sync_trans+0x60>
    186c:	9b03      	ldr	r3, [sp, #12]
    186e:	2b00      	cmp	r3, #0
    1870:	d005      	beq.n	187e <_spi_m_sync_trans+0xbe>
    1872:	1c59      	adds	r1, r3, #1
    1874:	9103      	str	r1, [sp, #12]
    1876:	7819      	ldrb	r1, [r3, #0]
    1878:	2e01      	cmp	r6, #1
    187a:	d8c8      	bhi.n	180e <_spi_m_sync_trans+0x4e>
    187c:	e7cc      	b.n	1818 <_spi_m_sync_trans+0x58>
    187e:	4909      	ldr	r1, [pc, #36]	; (18a4 <_spi_m_sync_trans+0xe4>)
    1880:	e7ca      	b.n	1818 <_spi_m_sync_trans+0x58>
    1882:	7ba3      	ldrb	r3, [r4, #14]
    1884:	079b      	lsls	r3, r3, #30
    1886:	d0fc      	beq.n	1882 <_spi_m_sync_trans+0xc2>
    1888:	2303      	movs	r3, #3
    188a:	73a3      	strb	r3, [r4, #14]
    188c:	b008      	add	sp, #32
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	2004      	movs	r0, #4
    1892:	4240      	negs	r0, r0
    1894:	e7fa      	b.n	188c <_spi_m_sync_trans+0xcc>
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	00000a29 	.word	0x00000a29
    189c:	000036ec 	.word	0x000036ec
    18a0:	00000d19 	.word	0x00000d19
    18a4:	000001ff 	.word	0x000001ff

000018a8 <_sysctrl_init_sources>:
    18a8:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <_sysctrl_init_sources+0x40>)
    18aa:	6a19      	ldr	r1, [r3, #32]
    18ac:	0c09      	lsrs	r1, r1, #16
    18ae:	6a1a      	ldr	r2, [r3, #32]
    18b0:	0f92      	lsrs	r2, r2, #30
    18b2:	0792      	lsls	r2, r2, #30
    18b4:	0409      	lsls	r1, r1, #16
    18b6:	480d      	ldr	r0, [pc, #52]	; (18ec <_sysctrl_init_sources+0x44>)
    18b8:	4001      	ands	r1, r0
    18ba:	430a      	orrs	r2, r1
    18bc:	490c      	ldr	r1, [pc, #48]	; (18f0 <_sysctrl_init_sources+0x48>)
    18be:	430a      	orrs	r2, r1
    18c0:	621a      	str	r2, [r3, #32]
    18c2:	699a      	ldr	r2, [r3, #24]
    18c4:	2102      	movs	r1, #2
    18c6:	430a      	orrs	r2, r1
    18c8:	619a      	str	r2, [r3, #24]
    18ca:	7f1a      	ldrb	r2, [r3, #28]
    18cc:	311d      	adds	r1, #29
    18ce:	400a      	ands	r2, r1
    18d0:	771a      	strb	r2, [r3, #28]
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <_sysctrl_init_sources+0x40>)
    18d4:	68db      	ldr	r3, [r3, #12]
    18d6:	071b      	lsls	r3, r3, #28
    18d8:	d5fb      	bpl.n	18d2 <_sysctrl_init_sources+0x2a>
    18da:	4a03      	ldr	r2, [pc, #12]	; (18e8 <_sysctrl_init_sources+0x40>)
    18dc:	6a13      	ldr	r3, [r2, #32]
    18de:	2180      	movs	r1, #128	; 0x80
    18e0:	430b      	orrs	r3, r1
    18e2:	6213      	str	r3, [r2, #32]
    18e4:	4770      	bx	lr
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	40000800 	.word	0x40000800
    18ec:	0fff0000 	.word	0x0fff0000
    18f0:	00000302 	.word	0x00000302

000018f4 <_sysctrl_init_referenced_generators>:
    18f4:	4a02      	ldr	r2, [pc, #8]	; (1900 <_sysctrl_init_referenced_generators+0xc>)
    18f6:	6993      	ldr	r3, [r2, #24]
    18f8:	2102      	movs	r1, #2
    18fa:	438b      	bics	r3, r1
    18fc:	6193      	str	r3, [r2, #24]
    18fe:	4770      	bx	lr
    1900:	40000800 	.word	0x40000800

00001904 <_system_time_init>:
    1904:	4b02      	ldr	r3, [pc, #8]	; (1910 <_system_time_init+0xc>)
    1906:	4a03      	ldr	r2, [pc, #12]	; (1914 <_system_time_init+0x10>)
    1908:	605a      	str	r2, [r3, #4]
    190a:	2205      	movs	r2, #5
    190c:	601a      	str	r2, [r3, #0]
    190e:	4770      	bx	lr
    1910:	e000e010 	.word	0xe000e010
    1914:	00ffffff 	.word	0x00ffffff

00001918 <_delay_init>:
    1918:	b510      	push	{r4, lr}
    191a:	4b01      	ldr	r3, [pc, #4]	; (1920 <_delay_init+0x8>)
    191c:	4798      	blx	r3
    191e:	bd10      	pop	{r4, pc}
    1920:	00001905 	.word	0x00001905

00001924 <_delay_cycles>:
    1924:	0e08      	lsrs	r0, r1, #24
    1926:	e00b      	b.n	1940 <_delay_cycles+0x1c>
    1928:	4b0b      	ldr	r3, [pc, #44]	; (1958 <_delay_cycles+0x34>)
    192a:	480c      	ldr	r0, [pc, #48]	; (195c <_delay_cycles+0x38>)
    192c:	6058      	str	r0, [r3, #4]
    192e:	6098      	str	r0, [r3, #8]
    1930:	4b09      	ldr	r3, [pc, #36]	; (1958 <_delay_cycles+0x34>)
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	03db      	lsls	r3, r3, #15
    1936:	d5fb      	bpl.n	1930 <_delay_cycles+0xc>
    1938:	4b09      	ldr	r3, [pc, #36]	; (1960 <_delay_cycles+0x3c>)
    193a:	469c      	mov	ip, r3
    193c:	4461      	add	r1, ip
    193e:	0010      	movs	r0, r2
    1940:	1e42      	subs	r2, r0, #1
    1942:	b2d2      	uxtb	r2, r2
    1944:	2800      	cmp	r0, #0
    1946:	d1ef      	bne.n	1928 <_delay_cycles+0x4>
    1948:	4b03      	ldr	r3, [pc, #12]	; (1958 <_delay_cycles+0x34>)
    194a:	6059      	str	r1, [r3, #4]
    194c:	6099      	str	r1, [r3, #8]
    194e:	4b02      	ldr	r3, [pc, #8]	; (1958 <_delay_cycles+0x34>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	03db      	lsls	r3, r3, #15
    1954:	d5fb      	bpl.n	194e <_delay_cycles+0x2a>
    1956:	4770      	bx	lr
    1958:	e000e010 	.word	0xe000e010
    195c:	00ffffff 	.word	0x00ffffff
    1960:	ff000001 	.word	0xff000001

00001964 <tc_interrupt_handler>:
    1964:	b510      	push	{r4, lr}
    1966:	68c3      	ldr	r3, [r0, #12]
    1968:	7b9a      	ldrb	r2, [r3, #14]
    196a:	07d2      	lsls	r2, r2, #31
    196c:	d400      	bmi.n	1970 <tc_interrupt_handler+0xc>
    196e:	bd10      	pop	{r4, pc}
    1970:	2201      	movs	r2, #1
    1972:	739a      	strb	r2, [r3, #14]
    1974:	6803      	ldr	r3, [r0, #0]
    1976:	4798      	blx	r3
    1978:	e7f9      	b.n	196e <tc_interrupt_handler+0xa>

0000197a <tc_pwm_interrupt_handler>:
    197a:	b570      	push	{r4, r5, r6, lr}
    197c:	0005      	movs	r5, r0
    197e:	6904      	ldr	r4, [r0, #16]
    1980:	7ba3      	ldrb	r3, [r4, #14]
    1982:	07db      	lsls	r3, r3, #31
    1984:	d505      	bpl.n	1992 <tc_pwm_interrupt_handler+0x18>
    1986:	2301      	movs	r3, #1
    1988:	73a3      	strb	r3, [r4, #14]
    198a:	6803      	ldr	r3, [r0, #0]
    198c:	2b00      	cmp	r3, #0
    198e:	d000      	beq.n	1992 <tc_pwm_interrupt_handler+0x18>
    1990:	4798      	blx	r3
    1992:	7b63      	ldrb	r3, [r4, #13]
    1994:	079b      	lsls	r3, r3, #30
    1996:	d506      	bpl.n	19a6 <tc_pwm_interrupt_handler+0x2c>
    1998:	2302      	movs	r3, #2
    199a:	73a3      	strb	r3, [r4, #14]
    199c:	686b      	ldr	r3, [r5, #4]
    199e:	2b00      	cmp	r3, #0
    19a0:	d001      	beq.n	19a6 <tc_pwm_interrupt_handler+0x2c>
    19a2:	0028      	movs	r0, r5
    19a4:	4798      	blx	r3
    19a6:	bd70      	pop	{r4, r5, r6, pc}

000019a8 <tc_get_hardware_index>:
    19a8:	4b02      	ldr	r3, [pc, #8]	; (19b4 <tc_get_hardware_index+0xc>)
    19aa:	469c      	mov	ip, r3
    19ac:	4460      	add	r0, ip
    19ae:	0a80      	lsrs	r0, r0, #10
    19b0:	b2c0      	uxtb	r0, r0
    19b2:	4770      	bx	lr
    19b4:	bdffe000 	.word	0xbdffe000

000019b8 <_tc_init_irq_param>:
    19b8:	4b06      	ldr	r3, [pc, #24]	; (19d4 <_tc_init_irq_param+0x1c>)
    19ba:	4298      	cmp	r0, r3
    19bc:	d003      	beq.n	19c6 <_tc_init_irq_param+0xe>
    19be:	4b06      	ldr	r3, [pc, #24]	; (19d8 <_tc_init_irq_param+0x20>)
    19c0:	4298      	cmp	r0, r3
    19c2:	d003      	beq.n	19cc <_tc_init_irq_param+0x14>
    19c4:	4770      	bx	lr
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <_tc_init_irq_param+0x24>)
    19c8:	6019      	str	r1, [r3, #0]
    19ca:	e7f8      	b.n	19be <_tc_init_irq_param+0x6>
    19cc:	4b03      	ldr	r3, [pc, #12]	; (19dc <_tc_init_irq_param+0x24>)
    19ce:	6059      	str	r1, [r3, #4]
    19d0:	e7f8      	b.n	19c4 <_tc_init_irq_param+0xc>
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	42002000 	.word	0x42002000
    19d8:	42002400 	.word	0x42002400
    19dc:	2000014c 	.word	0x2000014c

000019e0 <get_tc_index>:
    19e0:	b510      	push	{r4, lr}
    19e2:	4b0d      	ldr	r3, [pc, #52]	; (1a18 <get_tc_index+0x38>)
    19e4:	4798      	blx	r3
    19e6:	2300      	movs	r3, #0
    19e8:	2b01      	cmp	r3, #1
    19ea:	d80b      	bhi.n	1a04 <get_tc_index+0x24>
    19ec:	009a      	lsls	r2, r3, #2
    19ee:	18d2      	adds	r2, r2, r3
    19f0:	0091      	lsls	r1, r2, #2
    19f2:	4a0a      	ldr	r2, [pc, #40]	; (1a1c <get_tc_index+0x3c>)
    19f4:	5c8a      	ldrb	r2, [r1, r2]
    19f6:	4290      	cmp	r0, r2
    19f8:	d002      	beq.n	1a00 <get_tc_index+0x20>
    19fa:	3301      	adds	r3, #1
    19fc:	b2db      	uxtb	r3, r3
    19fe:	e7f3      	b.n	19e8 <get_tc_index+0x8>
    1a00:	b258      	sxtb	r0, r3
    1a02:	e007      	b.n	1a14 <get_tc_index+0x34>
    1a04:	22f8      	movs	r2, #248	; 0xf8
    1a06:	32ff      	adds	r2, #255	; 0xff
    1a08:	4905      	ldr	r1, [pc, #20]	; (1a20 <get_tc_index+0x40>)
    1a0a:	2000      	movs	r0, #0
    1a0c:	4b05      	ldr	r3, [pc, #20]	; (1a24 <get_tc_index+0x44>)
    1a0e:	4798      	blx	r3
    1a10:	2001      	movs	r0, #1
    1a12:	4240      	negs	r0, r0
    1a14:	bd10      	pop	{r4, pc}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	000019a9 	.word	0x000019a9
    1a1c:	20000000 	.word	0x20000000
    1a20:	00003708 	.word	0x00003708
    1a24:	00000d19 	.word	0x00000d19

00001a28 <_timer_init>:
    1a28:	b570      	push	{r4, r5, r6, lr}
    1a2a:	0006      	movs	r6, r0
    1a2c:	000c      	movs	r4, r1
    1a2e:	0008      	movs	r0, r1
    1a30:	4b3f      	ldr	r3, [pc, #252]	; (1b30 <_timer_init+0x108>)
    1a32:	4798      	blx	r3
    1a34:	0005      	movs	r5, r0
    1a36:	60f4      	str	r4, [r6, #12]
    1a38:	229f      	movs	r2, #159	; 0x9f
    1a3a:	493e      	ldr	r1, [pc, #248]	; (1b34 <_timer_init+0x10c>)
    1a3c:	2001      	movs	r0, #1
    1a3e:	4b3e      	ldr	r3, [pc, #248]	; (1b38 <_timer_init+0x110>)
    1a40:	4798      	blx	r3
    1a42:	7be3      	ldrb	r3, [r4, #15]
    1a44:	09db      	lsrs	r3, r3, #7
    1a46:	d1fc      	bne.n	1a42 <_timer_init+0x1a>
    1a48:	8823      	ldrh	r3, [r4, #0]
    1a4a:	079b      	lsls	r3, r3, #30
    1a4c:	d504      	bpl.n	1a58 <_timer_init+0x30>
    1a4e:	2300      	movs	r3, #0
    1a50:	8023      	strh	r3, [r4, #0]
    1a52:	7be3      	ldrb	r3, [r4, #15]
    1a54:	09db      	lsrs	r3, r3, #7
    1a56:	d1fc      	bne.n	1a52 <_timer_init+0x2a>
    1a58:	2301      	movs	r3, #1
    1a5a:	8023      	strh	r3, [r4, #0]
    1a5c:	7be3      	ldrb	r3, [r4, #15]
    1a5e:	09db      	lsrs	r3, r3, #7
    1a60:	d1fc      	bne.n	1a5c <_timer_init+0x34>
    1a62:	00aa      	lsls	r2, r5, #2
    1a64:	1952      	adds	r2, r2, r5
    1a66:	0091      	lsls	r1, r2, #2
    1a68:	4b34      	ldr	r3, [pc, #208]	; (1b3c <_timer_init+0x114>)
    1a6a:	185b      	adds	r3, r3, r1
    1a6c:	885a      	ldrh	r2, [r3, #2]
    1a6e:	8022      	strh	r2, [r4, #0]
    1a70:	7919      	ldrb	r1, [r3, #4]
    1a72:	7221      	strb	r1, [r4, #8]
    1a74:	88db      	ldrh	r3, [r3, #6]
    1a76:	8163      	strh	r3, [r4, #10]
    1a78:	230c      	movs	r3, #12
    1a7a:	4013      	ands	r3, r2
    1a7c:	2b08      	cmp	r3, #8
    1a7e:	d039      	beq.n	1af4 <_timer_init+0xcc>
    1a80:	2b00      	cmp	r3, #0
    1a82:	d143      	bne.n	1b0c <_timer_init+0xe4>
    1a84:	4a2d      	ldr	r2, [pc, #180]	; (1b3c <_timer_init+0x114>)
    1a86:	00ab      	lsls	r3, r5, #2
    1a88:	1958      	adds	r0, r3, r5
    1a8a:	0081      	lsls	r1, r0, #2
    1a8c:	0008      	movs	r0, r1
    1a8e:	1851      	adds	r1, r2, r1
    1a90:	8989      	ldrh	r1, [r1, #12]
    1a92:	8321      	strh	r1, [r4, #24]
    1a94:	1812      	adds	r2, r2, r0
    1a96:	8a13      	ldrh	r3, [r2, #16]
    1a98:	8363      	strh	r3, [r4, #26]
    1a9a:	2301      	movs	r3, #1
    1a9c:	7363      	strb	r3, [r4, #13]
    1a9e:	0031      	movs	r1, r6
    1aa0:	0020      	movs	r0, r4
    1aa2:	4b27      	ldr	r3, [pc, #156]	; (1b40 <_timer_init+0x118>)
    1aa4:	4798      	blx	r3
    1aa6:	0020      	movs	r0, r4
    1aa8:	4b26      	ldr	r3, [pc, #152]	; (1b44 <_timer_init+0x11c>)
    1aaa:	4798      	blx	r3
    1aac:	300d      	adds	r0, #13
    1aae:	b2c0      	uxtb	r0, r0
    1ab0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	db0a      	blt.n	1acc <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ab6:	211f      	movs	r1, #31
    1ab8:	4001      	ands	r1, r0
    1aba:	2201      	movs	r2, #1
    1abc:	408a      	lsls	r2, r1
    1abe:	2180      	movs	r1, #128	; 0x80
    1ac0:	4c21      	ldr	r4, [pc, #132]	; (1b48 <_timer_init+0x120>)
    1ac2:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ac8:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1acc:	2b00      	cmp	r3, #0
    1ace:	db07      	blt.n	1ae0 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad0:	211f      	movs	r1, #31
    1ad2:	4001      	ands	r1, r0
    1ad4:	2201      	movs	r2, #1
    1ad6:	408a      	lsls	r2, r1
    1ad8:	21c0      	movs	r1, #192	; 0xc0
    1ada:	0049      	lsls	r1, r1, #1
    1adc:	4c1a      	ldr	r4, [pc, #104]	; (1b48 <_timer_init+0x120>)
    1ade:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	db05      	blt.n	1af0 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ae4:	231f      	movs	r3, #31
    1ae6:	4018      	ands	r0, r3
    1ae8:	3b1e      	subs	r3, #30
    1aea:	4083      	lsls	r3, r0
    1aec:	4a16      	ldr	r2, [pc, #88]	; (1b48 <_timer_init+0x120>)
    1aee:	6013      	str	r3, [r2, #0]
    1af0:	2000      	movs	r0, #0
    1af2:	bd70      	pop	{r4, r5, r6, pc}
    1af4:	4a11      	ldr	r2, [pc, #68]	; (1b3c <_timer_init+0x114>)
    1af6:	00ab      	lsls	r3, r5, #2
    1af8:	1958      	adds	r0, r3, r5
    1afa:	0081      	lsls	r1, r0, #2
    1afc:	0008      	movs	r0, r1
    1afe:	1851      	adds	r1, r2, r1
    1b00:	68c9      	ldr	r1, [r1, #12]
    1b02:	61a1      	str	r1, [r4, #24]
    1b04:	1812      	adds	r2, r2, r0
    1b06:	6913      	ldr	r3, [r2, #16]
    1b08:	61e3      	str	r3, [r4, #28]
    1b0a:	e7c6      	b.n	1a9a <_timer_init+0x72>
    1b0c:	2b04      	cmp	r3, #4
    1b0e:	d1c4      	bne.n	1a9a <_timer_init+0x72>
    1b10:	490a      	ldr	r1, [pc, #40]	; (1b3c <_timer_init+0x114>)
    1b12:	00ab      	lsls	r3, r5, #2
    1b14:	1958      	adds	r0, r3, r5
    1b16:	0082      	lsls	r2, r0, #2
    1b18:	188a      	adds	r2, r1, r2
    1b1a:	7b10      	ldrb	r0, [r2, #12]
    1b1c:	7620      	strb	r0, [r4, #24]
    1b1e:	7c12      	ldrb	r2, [r2, #16]
    1b20:	7662      	strb	r2, [r4, #25]
    1b22:	195d      	adds	r5, r3, r5
    1b24:	00ab      	lsls	r3, r5, #2
    1b26:	18c9      	adds	r1, r1, r3
    1b28:	7a0b      	ldrb	r3, [r1, #8]
    1b2a:	7523      	strb	r3, [r4, #20]
    1b2c:	e7b5      	b.n	1a9a <_timer_init+0x72>
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	000019e1 	.word	0x000019e1
    1b34:	00003708 	.word	0x00003708
    1b38:	00000d19 	.word	0x00000d19
    1b3c:	20000000 	.word	0x20000000
    1b40:	000019b9 	.word	0x000019b9
    1b44:	000019a9 	.word	0x000019a9
    1b48:	e000e100 	.word	0xe000e100

00001b4c <_pwm_init>:
    1b4c:	b570      	push	{r4, r5, r6, lr}
    1b4e:	0005      	movs	r5, r0
    1b50:	000c      	movs	r4, r1
    1b52:	0008      	movs	r0, r1
    1b54:	4b35      	ldr	r3, [pc, #212]	; (1c2c <_pwm_init+0xe0>)
    1b56:	4798      	blx	r3
    1b58:	612c      	str	r4, [r5, #16]
    1b5a:	7be3      	ldrb	r3, [r4, #15]
    1b5c:	09db      	lsrs	r3, r3, #7
    1b5e:	d1fc      	bne.n	1b5a <_pwm_init+0xe>
    1b60:	8823      	ldrh	r3, [r4, #0]
    1b62:	079b      	lsls	r3, r3, #30
    1b64:	d504      	bpl.n	1b70 <_pwm_init+0x24>
    1b66:	2300      	movs	r3, #0
    1b68:	8023      	strh	r3, [r4, #0]
    1b6a:	7be3      	ldrb	r3, [r4, #15]
    1b6c:	09db      	lsrs	r3, r3, #7
    1b6e:	d1fc      	bne.n	1b6a <_pwm_init+0x1e>
    1b70:	2301      	movs	r3, #1
    1b72:	8023      	strh	r3, [r4, #0]
    1b74:	7be3      	ldrb	r3, [r4, #15]
    1b76:	09db      	lsrs	r3, r3, #7
    1b78:	d1fc      	bne.n	1b74 <_pwm_init+0x28>
    1b7a:	0082      	lsls	r2, r0, #2
    1b7c:	1812      	adds	r2, r2, r0
    1b7e:	0091      	lsls	r1, r2, #2
    1b80:	4b2b      	ldr	r3, [pc, #172]	; (1c30 <_pwm_init+0xe4>)
    1b82:	185b      	adds	r3, r3, r1
    1b84:	885a      	ldrh	r2, [r3, #2]
    1b86:	8022      	strh	r2, [r4, #0]
    1b88:	7919      	ldrb	r1, [r3, #4]
    1b8a:	7221      	strb	r1, [r4, #8]
    1b8c:	88db      	ldrh	r3, [r3, #6]
    1b8e:	8163      	strh	r3, [r4, #10]
    1b90:	230c      	movs	r3, #12
    1b92:	4013      	ands	r3, r2
    1b94:	2b08      	cmp	r3, #8
    1b96:	d037      	beq.n	1c08 <_pwm_init+0xbc>
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d141      	bne.n	1c20 <_pwm_init+0xd4>
    1b9c:	4a24      	ldr	r2, [pc, #144]	; (1c30 <_pwm_init+0xe4>)
    1b9e:	0083      	lsls	r3, r0, #2
    1ba0:	181e      	adds	r6, r3, r0
    1ba2:	00b1      	lsls	r1, r6, #2
    1ba4:	000e      	movs	r6, r1
    1ba6:	1851      	adds	r1, r2, r1
    1ba8:	8989      	ldrh	r1, [r1, #12]
    1baa:	8321      	strh	r1, [r4, #24]
    1bac:	1992      	adds	r2, r2, r6
    1bae:	8a13      	ldrh	r3, [r2, #16]
    1bb0:	8363      	strh	r3, [r4, #26]
    1bb2:	0029      	movs	r1, r5
    1bb4:	0020      	movs	r0, r4
    1bb6:	4b1f      	ldr	r3, [pc, #124]	; (1c34 <_pwm_init+0xe8>)
    1bb8:	4798      	blx	r3
    1bba:	0020      	movs	r0, r4
    1bbc:	4b1e      	ldr	r3, [pc, #120]	; (1c38 <_pwm_init+0xec>)
    1bbe:	4798      	blx	r3
    1bc0:	300d      	adds	r0, #13
    1bc2:	b2c0      	uxtb	r0, r0
    1bc4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	db0a      	blt.n	1be0 <_pwm_init+0x94>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bca:	211f      	movs	r1, #31
    1bcc:	4001      	ands	r1, r0
    1bce:	2201      	movs	r2, #1
    1bd0:	408a      	lsls	r2, r1
    1bd2:	2180      	movs	r1, #128	; 0x80
    1bd4:	4c19      	ldr	r4, [pc, #100]	; (1c3c <_pwm_init+0xf0>)
    1bd6:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bdc:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1be0:	2b00      	cmp	r3, #0
    1be2:	db07      	blt.n	1bf4 <_pwm_init+0xa8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be4:	211f      	movs	r1, #31
    1be6:	4001      	ands	r1, r0
    1be8:	2201      	movs	r2, #1
    1bea:	408a      	lsls	r2, r1
    1bec:	21c0      	movs	r1, #192	; 0xc0
    1bee:	0049      	lsls	r1, r1, #1
    1bf0:	4c12      	ldr	r4, [pc, #72]	; (1c3c <_pwm_init+0xf0>)
    1bf2:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	db16      	blt.n	1c26 <_pwm_init+0xda>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf8:	231f      	movs	r3, #31
    1bfa:	4018      	ands	r0, r3
    1bfc:	3b1e      	subs	r3, #30
    1bfe:	4083      	lsls	r3, r0
    1c00:	4a0e      	ldr	r2, [pc, #56]	; (1c3c <_pwm_init+0xf0>)
    1c02:	6013      	str	r3, [r2, #0]
    1c04:	2000      	movs	r0, #0
    1c06:	bd70      	pop	{r4, r5, r6, pc}
    1c08:	4a09      	ldr	r2, [pc, #36]	; (1c30 <_pwm_init+0xe4>)
    1c0a:	0083      	lsls	r3, r0, #2
    1c0c:	181e      	adds	r6, r3, r0
    1c0e:	00b1      	lsls	r1, r6, #2
    1c10:	000e      	movs	r6, r1
    1c12:	1851      	adds	r1, r2, r1
    1c14:	68c9      	ldr	r1, [r1, #12]
    1c16:	61a1      	str	r1, [r4, #24]
    1c18:	1992      	adds	r2, r2, r6
    1c1a:	6913      	ldr	r3, [r2, #16]
    1c1c:	61e3      	str	r3, [r4, #28]
    1c1e:	e7c8      	b.n	1bb2 <_pwm_init+0x66>
    1c20:	2001      	movs	r0, #1
    1c22:	4240      	negs	r0, r0
    1c24:	e7ef      	b.n	1c06 <_pwm_init+0xba>
    1c26:	2000      	movs	r0, #0
    1c28:	e7ed      	b.n	1c06 <_pwm_init+0xba>
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	000019e1 	.word	0x000019e1
    1c30:	20000000 	.word	0x20000000
    1c34:	000019b9 	.word	0x000019b9
    1c38:	000019a9 	.word	0x000019a9
    1c3c:	e000e100 	.word	0xe000e100

00001c40 <_tc_get_timer>:
    1c40:	2000      	movs	r0, #0
    1c42:	4770      	bx	lr

00001c44 <_tc_get_pwm>:
    1c44:	2000      	movs	r0, #0
    1c46:	4770      	bx	lr

00001c48 <TC0_Handler>:
    1c48:	b510      	push	{r4, lr}
    1c4a:	4b02      	ldr	r3, [pc, #8]	; (1c54 <TC0_Handler+0xc>)
    1c4c:	6818      	ldr	r0, [r3, #0]
    1c4e:	4b02      	ldr	r3, [pc, #8]	; (1c58 <TC0_Handler+0x10>)
    1c50:	4798      	blx	r3
    1c52:	bd10      	pop	{r4, pc}
    1c54:	2000014c 	.word	0x2000014c
    1c58:	0000197b 	.word	0x0000197b

00001c5c <TC1_Handler>:
    1c5c:	b510      	push	{r4, lr}
    1c5e:	4b02      	ldr	r3, [pc, #8]	; (1c68 <TC1_Handler+0xc>)
    1c60:	6858      	ldr	r0, [r3, #4]
    1c62:	4b02      	ldr	r3, [pc, #8]	; (1c6c <TC1_Handler+0x10>)
    1c64:	4798      	blx	r3
    1c66:	bd10      	pop	{r4, pc}
    1c68:	2000014c 	.word	0x2000014c
    1c6c:	00001965 	.word	0x00001965

00001c70 <receiver>:
		xQueueSend(output, &flag, portMAX_DELAY);
	}
}

void receiver(void *pvParameters)
{
    1c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c72:	b087      	sub	sp, #28
    1c74:	9001      	str	r0, [sp, #4]
	volatile uint8_t help[4] = "help";
    1c76:	4b10      	ldr	r3, [pc, #64]	; (1cb8 <receiver+0x48>)
    1c78:	9305      	str	r3, [sp, #20]
	QueueBuffer anything;
	QueueHandle_t input = (QueueHandle_t)pvParameters;
	BaseType_t n;
	io_write(&SERIAL.io, help, 4);
    1c7a:	2204      	movs	r2, #4
    1c7c:	a905      	add	r1, sp, #20
    1c7e:	480f      	ldr	r0, [pc, #60]	; (1cbc <receiver+0x4c>)
    1c80:	4b0f      	ldr	r3, [pc, #60]	; (1cc0 <receiver+0x50>)
    1c82:	4798      	blx	r3
    1c84:	e00b      	b.n	1c9e <receiver+0x2e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1c86:	26c0      	movs	r6, #192	; 0xc0
    1c88:	05f6      	lsls	r6, r6, #23
    1c8a:	2780      	movs	r7, #128	; 0x80
    1c8c:	01ff      	lsls	r7, r7, #7
    1c8e:	61f7      	str	r7, [r6, #28]
		}
		//gpio_set_pin_level()
		
		if (1) {
			gpio_toggle_pin_level(BLINK);
			delay_ms(750);
    1c90:	4d0c      	ldr	r5, [pc, #48]	; (1cc4 <receiver+0x54>)
    1c92:	0028      	movs	r0, r5
    1c94:	4c0c      	ldr	r4, [pc, #48]	; (1cc8 <receiver+0x58>)
    1c96:	47a0      	blx	r4
    1c98:	61f7      	str	r7, [r6, #28]
			gpio_toggle_pin_level(BLINK);
			delay_ms(750);
    1c9a:	0028      	movs	r0, r5
    1c9c:	47a0      	blx	r4
		if((n = xQueueReceive(input, &anything, 10)) == pdPASS) {
    1c9e:	220a      	movs	r2, #10
    1ca0:	a903      	add	r1, sp, #12
    1ca2:	9801      	ldr	r0, [sp, #4]
    1ca4:	4b09      	ldr	r3, [pc, #36]	; (1ccc <receiver+0x5c>)
    1ca6:	4798      	blx	r3
    1ca8:	2801      	cmp	r0, #1
    1caa:	d1ec      	bne.n	1c86 <receiver+0x16>
			io_write(&SERIAL.io, help, 4);
    1cac:	2204      	movs	r2, #4
    1cae:	a905      	add	r1, sp, #20
    1cb0:	4802      	ldr	r0, [pc, #8]	; (1cbc <receiver+0x4c>)
    1cb2:	4b03      	ldr	r3, [pc, #12]	; (1cc0 <receiver+0x50>)
    1cb4:	4798      	blx	r3
    1cb6:	e7e6      	b.n	1c86 <receiver+0x16>
    1cb8:	706c6568 	.word	0x706c6568
    1cbc:	200028d4 	.word	0x200028d4
    1cc0:	00000785 	.word	0x00000785
    1cc4:	000002ee 	.word	0x000002ee
    1cc8:	00000689 	.word	0x00000689
    1ccc:	00002691 	.word	0x00002691

00001cd0 <main>:
{
    1cd0:	b510      	push	{r4, lr}
    1cd2:	b082      	sub	sp, #8
	atmel_start_init();
    1cd4:	4b0b      	ldr	r3, [pc, #44]	; (1d04 <main+0x34>)
    1cd6:	4798      	blx	r3
	async_setup();
    1cd8:	4b0b      	ldr	r3, [pc, #44]	; (1d08 <main+0x38>)
    1cda:	4798      	blx	r3
	Q1 = xQueueCreate((UBaseType_t) 2, (UBaseType_t) sizeof(QueueBuffer));
    1cdc:	2200      	movs	r2, #0
    1cde:	2108      	movs	r1, #8
    1ce0:	2002      	movs	r0, #2
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <main+0x3c>)
    1ce4:	4798      	blx	r3
    1ce6:	0003      	movs	r3, r0
	xTaskCreate(receiver, "rcv", configMINIMAL_STACK_SIZE, (void *) Q1, 2, NULL);
    1ce8:	2200      	movs	r2, #0
    1cea:	9201      	str	r2, [sp, #4]
    1cec:	3202      	adds	r2, #2
    1cee:	9200      	str	r2, [sp, #0]
    1cf0:	323e      	adds	r2, #62	; 0x3e
    1cf2:	4907      	ldr	r1, [pc, #28]	; (1d10 <main+0x40>)
    1cf4:	4807      	ldr	r0, [pc, #28]	; (1d14 <main+0x44>)
    1cf6:	4c08      	ldr	r4, [pc, #32]	; (1d18 <main+0x48>)
    1cf8:	47a0      	blx	r4
	vTaskStartScheduler();
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <main+0x4c>)
    1cfc:	4798      	blx	r3
}
    1cfe:	2000      	movs	r0, #0
    1d00:	b002      	add	sp, #8
    1d02:	bd10      	pop	{r4, pc}
    1d04:	00000105 	.word	0x00000105
    1d08:	00001e19 	.word	0x00001e19
    1d0c:	000023cd 	.word	0x000023cd
    1d10:	0000371c 	.word	0x0000371c
    1d14:	00001c71 	.word	0x00001c71
    1d18:	00002aa9 	.word	0x00002aa9
    1d1c:	00002b19 	.word	0x00002b19

00001d20 <touch_init>:
#include <atmel_start.h>

#include "touch.h"
void touch_init(void)
{
}
    1d20:	4770      	bx	lr

00001d22 <serial_tx_cb>:


static void serial_tx_cb(const struct usart_async_descriptor *const io_descr)
{
	
}
    1d22:	4770      	bx	lr

00001d24 <serial_rx_cb>:
{
    1d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d26:	46ce      	mov	lr, r9
    1d28:	4647      	mov	r7, r8
    1d2a:	b580      	push	{r7, lr}
    1d2c:	b083      	sub	sp, #12
	count = io_read(&SERIAL.io, &ch, 1);
    1d2e:	2201      	movs	r2, #1
    1d30:	466b      	mov	r3, sp
    1d32:	1dd9      	adds	r1, r3, #7
    1d34:	482e      	ldr	r0, [pc, #184]	; (1df0 <serial_rx_cb+0xcc>)
    1d36:	4b2f      	ldr	r3, [pc, #188]	; (1df4 <serial_rx_cb+0xd0>)
    1d38:	4798      	blx	r3
    1d3a:	b2c1      	uxtb	r1, r0
	if (serial_receiving == 0)
    1d3c:	4b2e      	ldr	r3, [pc, #184]	; (1df8 <serial_rx_cb+0xd4>)
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d112      	bne.n	1d6a <serial_rx_cb+0x46>
		if(ch != '\r' && ch != '\n')
    1d44:	466b      	mov	r3, sp
    1d46:	79da      	ldrb	r2, [r3, #7]
    1d48:	2a0d      	cmp	r2, #13
    1d4a:	d024      	beq.n	1d96 <serial_rx_cb+0x72>
    1d4c:	2a0a      	cmp	r2, #10
    1d4e:	d022      	beq.n	1d96 <serial_rx_cb+0x72>
			serial_receiving = 1;
    1d50:	4b29      	ldr	r3, [pc, #164]	; (1df8 <serial_rx_cb+0xd4>)
    1d52:	2001      	movs	r0, #1
    1d54:	7018      	strb	r0, [r3, #0]
			byteCount = 0;
    1d56:	2000      	movs	r0, #0
    1d58:	7058      	strb	r0, [r3, #1]
			rx_buffer[byteCount] = ch;
    1d5a:	7858      	ldrb	r0, [r3, #1]
    1d5c:	1818      	adds	r0, r3, r0
    1d5e:	7102      	strb	r2, [r0, #4]
			byteCount += count;
    1d60:	7858      	ldrb	r0, [r3, #1]
    1d62:	1840      	adds	r0, r0, r1
    1d64:	b2c0      	uxtb	r0, r0
    1d66:	7058      	strb	r0, [r3, #1]
    1d68:	e015      	b.n	1d96 <serial_rx_cb+0x72>
		rx_buffer[byteCount] = ch;
    1d6a:	4b23      	ldr	r3, [pc, #140]	; (1df8 <serial_rx_cb+0xd4>)
    1d6c:	785a      	ldrb	r2, [r3, #1]
    1d6e:	4668      	mov	r0, sp
    1d70:	79c4      	ldrb	r4, [r0, #7]
    1d72:	189a      	adds	r2, r3, r2
    1d74:	7114      	strb	r4, [r2, #4]
		byteCount += count;
    1d76:	7858      	ldrb	r0, [r3, #1]
    1d78:	1840      	adds	r0, r0, r1
    1d7a:	b2c0      	uxtb	r0, r0
    1d7c:	7058      	strb	r0, [r3, #1]
		if (ch == '\r' || ch == '\n')
    1d7e:	2c0d      	cmp	r4, #13
    1d80:	d00e      	beq.n	1da0 <serial_rx_cb+0x7c>
    1d82:	2c0a      	cmp	r4, #10
    1d84:	d00c      	beq.n	1da0 <serial_rx_cb+0x7c>
		if (byteCount >= SERIAL_BUFFER_SIZE)
    1d86:	4b1c      	ldr	r3, [pc, #112]	; (1df8 <serial_rx_cb+0xd4>)
    1d88:	785b      	ldrb	r3, [r3, #1]
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	2bc7      	cmp	r3, #199	; 0xc7
    1d8e:	d902      	bls.n	1d96 <serial_rx_cb+0x72>
			byteCount = 0;
    1d90:	2200      	movs	r2, #0
    1d92:	4b19      	ldr	r3, [pc, #100]	; (1df8 <serial_rx_cb+0xd4>)
    1d94:	705a      	strb	r2, [r3, #1]
}
    1d96:	b003      	add	sp, #12
    1d98:	bc0c      	pop	{r2, r3}
    1d9a:	4690      	mov	r8, r2
    1d9c:	4699      	mov	r9, r3
    1d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			totalBytes = byteCount - 2;
    1da0:	4c15      	ldr	r4, [pc, #84]	; (1df8 <serial_rx_cb+0xd4>)
    1da2:	7863      	ldrb	r3, [r4, #1]
    1da4:	3b02      	subs	r3, #2
    1da6:	b2db      	uxtb	r3, r3
    1da8:	4d14      	ldr	r5, [pc, #80]	; (1dfc <serial_rx_cb+0xd8>)
    1daa:	274c      	movs	r7, #76	; 0x4c
    1dac:	55eb      	strb	r3, [r5, r7]
			serial_receiving = 0;
    1dae:	2300      	movs	r3, #0
    1db0:	7023      	strb	r3, [r4, #0]
			serial_complete = 0;
    1db2:	224d      	movs	r2, #77	; 0x4d
    1db4:	54ab      	strb	r3, [r5, r2]
			memcpy(&tx_buffer[20], &rx_buffer[0], SERIAL_BUFFER_SIZE);
    1db6:	4b12      	ldr	r3, [pc, #72]	; (1e00 <serial_rx_cb+0xdc>)
    1db8:	4699      	mov	r9, r3
    1dba:	0018      	movs	r0, r3
    1dbc:	3014      	adds	r0, #20
    1dbe:	3404      	adds	r4, #4
    1dc0:	327b      	adds	r2, #123	; 0x7b
    1dc2:	0021      	movs	r1, r4
    1dc4:	4b0f      	ldr	r3, [pc, #60]	; (1e04 <serial_rx_cb+0xe0>)
    1dc6:	4798      	blx	r3
			Qbuffer.buffer = rx_buffer;
    1dc8:	490f      	ldr	r1, [pc, #60]	; (1e08 <serial_rx_cb+0xe4>)
    1dca:	600c      	str	r4, [r1, #0]
			xQueueSendFromISR(Q1, &Qbuffer, configMAX_PRIORITIES-1);
    1dcc:	2300      	movs	r3, #0
    1dce:	2204      	movs	r2, #4
    1dd0:	2000      	movs	r0, #0
    1dd2:	4e0e      	ldr	r6, [pc, #56]	; (1e0c <serial_rx_cb+0xe8>)
    1dd4:	47b0      	blx	r6
			io_write(&SERIAL.io, tx_buffer, totalBytes + 22);
    1dd6:	5dea      	ldrb	r2, [r5, r7]
    1dd8:	3216      	adds	r2, #22
    1dda:	4649      	mov	r1, r9
    1ddc:	4804      	ldr	r0, [pc, #16]	; (1df0 <serial_rx_cb+0xcc>)
    1dde:	4b0c      	ldr	r3, [pc, #48]	; (1e10 <serial_rx_cb+0xec>)
    1de0:	4798      	blx	r3
			memset(&rx_buffer, 0x00, SERIAL_BUFFER_SIZE);
    1de2:	22c8      	movs	r2, #200	; 0xc8
    1de4:	2100      	movs	r1, #0
    1de6:	0020      	movs	r0, r4
    1de8:	4b0a      	ldr	r3, [pc, #40]	; (1e14 <serial_rx_cb+0xf0>)
    1dea:	4798      	blx	r3
    1dec:	e7cb      	b.n	1d86 <serial_rx_cb+0x62>
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	200028d4 	.word	0x200028d4
    1df4:	000007bd 	.word	0x000007bd
    1df8:	20000154 	.word	0x20000154
    1dfc:	200001d4 	.word	0x200001d4
    1e00:	20000028 	.word	0x20000028
    1e04:	0000349d 	.word	0x0000349d
    1e08:	200029a4 	.word	0x200029a4
    1e0c:	000025a5 	.word	0x000025a5
    1e10:	00000785 	.word	0x00000785
    1e14:	000034af 	.word	0x000034af

00001e18 <async_setup>:

void async_setup(void)
{
    1e18:	b570      	push	{r4, r5, r6, lr}
	
	usart_async_register_callback(&SERIAL, USART_ASYNC_TXC_CB, serial_tx_cb);
    1e1a:	4c07      	ldr	r4, [pc, #28]	; (1e38 <async_setup+0x20>)
    1e1c:	4a07      	ldr	r2, [pc, #28]	; (1e3c <async_setup+0x24>)
    1e1e:	2101      	movs	r1, #1
    1e20:	0020      	movs	r0, r4
    1e22:	4d07      	ldr	r5, [pc, #28]	; (1e40 <async_setup+0x28>)
    1e24:	47a8      	blx	r5
	usart_async_register_callback(&SERIAL, USART_ASYNC_RXC_CB, serial_rx_cb);
    1e26:	4a07      	ldr	r2, [pc, #28]	; (1e44 <async_setup+0x2c>)
    1e28:	2100      	movs	r1, #0
    1e2a:	0020      	movs	r0, r4
    1e2c:	47a8      	blx	r5
	usart_async_enable(&SERIAL);
    1e2e:	0020      	movs	r0, r4
    1e30:	4b05      	ldr	r3, [pc, #20]	; (1e48 <async_setup+0x30>)
    1e32:	4798      	blx	r3
    1e34:	bd70      	pop	{r4, r5, r6, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	200028d4 	.word	0x200028d4
    1e3c:	00001d23 	.word	0x00001d23
    1e40:	00000ca1 	.word	0x00000ca1
    1e44:	00001d25 	.word	0x00001d25
    1e48:	00000c75 	.word	0x00000c75

00001e4c <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    1e4c:	0003      	movs	r3, r0
    1e4e:	3308      	adds	r3, #8
    1e50:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e52:	2201      	movs	r2, #1
    1e54:	4252      	negs	r2, r2
    1e56:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    1e58:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    1e5a:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    1e5c:	2300      	movs	r3, #0
    1e5e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
	listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
    1e60:	4770      	bx	lr

00001e62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1e62:	2300      	movs	r3, #0
    1e64:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
    1e66:	4770      	bx	lr

00001e68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    1e68:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    1e6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1e6c:	689a      	ldr	r2, [r3, #8]
    1e6e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1e70:	689a      	ldr	r2, [r3, #8]
    1e72:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    1e74:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    1e76:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1e78:	6803      	ldr	r3, [r0, #0]
    1e7a:	3301      	adds	r3, #1
    1e7c:	6003      	str	r3, [r0, #0]
}
    1e7e:	4770      	bx	lr

00001e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    1e80:	b530      	push	{r4, r5, lr}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1e82:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    1e84:	1c63      	adds	r3, r4, #1
    1e86:	d002      	beq.n	1e8e <vListInsert+0xe>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1e88:	0002      	movs	r2, r0
    1e8a:	3208      	adds	r2, #8
    1e8c:	e002      	b.n	1e94 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
    1e8e:	6902      	ldr	r2, [r0, #16]
    1e90:	e004      	b.n	1e9c <vListInsert+0x1c>
		     pxIterator
		     = pxIterator
    1e92:	001a      	movs	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1e94:	6853      	ldr	r3, [r2, #4]
    1e96:	681d      	ldr	r5, [r3, #0]
    1e98:	42ac      	cmp	r4, r5
    1e9a:	d2fa      	bcs.n	1e92 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    1e9c:	6853      	ldr	r3, [r2, #4]
    1e9e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1ea0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    1ea2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    1ea4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    1ea6:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1ea8:	6803      	ldr	r3, [r0, #0]
    1eaa:	3301      	adds	r3, #1
    1eac:	6003      	str	r3, [r0, #0]
}
    1eae:	bd30      	pop	{r4, r5, pc}

00001eb0 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    1eb0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1eb2:	6842      	ldr	r2, [r0, #4]
    1eb4:	6881      	ldr	r1, [r0, #8]
    1eb6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1eb8:	6882      	ldr	r2, [r0, #8]
    1eba:	6841      	ldr	r1, [r0, #4]
    1ebc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    1ebe:	685a      	ldr	r2, [r3, #4]
    1ec0:	4290      	cmp	r0, r2
    1ec2:	d006      	beq.n	1ed2 <uxListRemove+0x22>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ec4:	2200      	movs	r2, #0
    1ec6:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    1ec8:	681a      	ldr	r2, [r3, #0]
    1eca:	3a01      	subs	r2, #1
    1ecc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1ece:	6818      	ldr	r0, [r3, #0]
}
    1ed0:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ed2:	6882      	ldr	r2, [r0, #8]
    1ed4:	605a      	str	r2, [r3, #4]
    1ed6:	e7f5      	b.n	1ec4 <uxListRemove+0x14>

00001ed8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    1ed8:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0UL;
    1eda:	2300      	movs	r3, #0
    1edc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    1ede:	4b06      	ldr	r3, [pc, #24]	; (1ef8 <prvTaskExitError+0x20>)
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	3301      	adds	r3, #1
    1ee4:	d001      	beq.n	1eea <prvTaskExitError+0x12>
    1ee6:	b672      	cpsid	i
    1ee8:	e7fe      	b.n	1ee8 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    1eea:	b672      	cpsid	i
	while (ulDummy == 0) {
    1eec:	9b01      	ldr	r3, [sp, #4]
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d0fc      	beq.n	1eec <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1ef2:	b002      	add	sp, #8
    1ef4:	4770      	bx	lr
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	20000104 	.word	0x20000104
    1efc:	00000000 	.word	0x00000000

00001f00 <vPortStartFirstTask>:
void vPortStartFirstTask(void)
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1f00:	4a0b      	ldr	r2, [pc, #44]	; (1f30 <pxCurrentTCBConst2>)
    1f02:	6813      	ldr	r3, [r2, #0]
    1f04:	6818      	ldr	r0, [r3, #0]
    1f06:	3020      	adds	r0, #32
    1f08:	f380 8809 	msr	PSP, r0
    1f0c:	2002      	movs	r0, #2
    1f0e:	f380 8814 	msr	CONTROL, r0
    1f12:	f3bf 8f6f 	isb	sy
    1f16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1f18:	46ae      	mov	lr, r5
    1f1a:	bc08      	pop	{r3}
    1f1c:	bc04      	pop	{r2}
    1f1e:	b662      	cpsie	i
    1f20:	4718      	bx	r3
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	46c0      	nop			; (mov r8, r8)
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	46c0      	nop			; (mov r8, r8)
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	46c0      	nop			; (mov r8, r8)
    1f2e:	46c0      	nop			; (mov r8, r8)

00001f30 <pxCurrentTCBConst2>:
    1f30:	20002870 	.word	0x20002870

00001f34 <prvSetupTimerInterrupt>:
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL)          = 0UL;
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <prvSetupTimerInterrupt+0x18>)
    1f36:	2200      	movs	r2, #0
    1f38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1f3a:	4905      	ldr	r1, [pc, #20]	; (1f50 <prvSetupTimerInterrupt+0x1c>)
    1f3c:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = (configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    1f3e:	4905      	ldr	r1, [pc, #20]	; (1f54 <prvSetupTimerInterrupt+0x20>)
    1f40:	4a05      	ldr	r2, [pc, #20]	; (1f58 <prvSetupTimerInterrupt+0x24>)
    1f42:	6011      	str	r1, [r2, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1f44:	2207      	movs	r2, #7
    1f46:	601a      	str	r2, [r3, #0]
}
    1f48:	4770      	bx	lr
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	e000e010 	.word	0xe000e010
    1f50:	e000e018 	.word	0xe000e018
    1f54:	000003e7 	.word	0x000003e7
    1f58:	e000e014 	.word	0xe000e014

00001f5c <pxPortInitialiseStack>:
{
    1f5c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    1f5e:	1f03      	subs	r3, r0, #4
    1f60:	2480      	movs	r4, #128	; 0x80
    1f62:	0464      	lsls	r4, r4, #17
    1f64:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = (StackType_t)pxCode; /* PC */
    1f66:	3b04      	subs	r3, #4
    1f68:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    1f6a:	3b04      	subs	r3, #4
    1f6c:	4902      	ldr	r1, [pc, #8]	; (1f78 <pxPortInitialiseStack+0x1c>)
    1f6e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = (StackType_t)pvParameters;            /* R0 */
    1f70:	3b14      	subs	r3, #20
    1f72:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;                                    /* R11..R4. */
    1f74:	3840      	subs	r0, #64	; 0x40
}
    1f76:	bd10      	pop	{r4, pc}
    1f78:	00001ed9 	.word	0x00001ed9

00001f7c <SVCall_Handler>:
}
    1f7c:	4770      	bx	lr
	...

00001f80 <xPortStartScheduler>:
{
    1f80:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1f82:	4b0c      	ldr	r3, [pc, #48]	; (1fb4 <xPortStartScheduler+0x34>)
    1f84:	6819      	ldr	r1, [r3, #0]
    1f86:	22ff      	movs	r2, #255	; 0xff
    1f88:	0412      	lsls	r2, r2, #16
    1f8a:	430a      	orrs	r2, r1
    1f8c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1f8e:	6819      	ldr	r1, [r3, #0]
    1f90:	22ff      	movs	r2, #255	; 0xff
    1f92:	0612      	lsls	r2, r2, #24
    1f94:	430a      	orrs	r2, r1
    1f96:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
    1f98:	4b07      	ldr	r3, [pc, #28]	; (1fb8 <xPortStartScheduler+0x38>)
    1f9a:	4798      	blx	r3
	uxCriticalNesting = 0;
    1f9c:	2200      	movs	r2, #0
    1f9e:	4b07      	ldr	r3, [pc, #28]	; (1fbc <xPortStartScheduler+0x3c>)
    1fa0:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
    1fa2:	4b07      	ldr	r3, [pc, #28]	; (1fc0 <xPortStartScheduler+0x40>)
    1fa4:	4798      	blx	r3
	vTaskSwitchContext();
    1fa6:	4b07      	ldr	r3, [pc, #28]	; (1fc4 <xPortStartScheduler+0x44>)
    1fa8:	4798      	blx	r3
	prvTaskExitError();
    1faa:	4b07      	ldr	r3, [pc, #28]	; (1fc8 <xPortStartScheduler+0x48>)
    1fac:	4798      	blx	r3
}
    1fae:	2000      	movs	r0, #0
    1fb0:	bd10      	pop	{r4, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	e000ed20 	.word	0xe000ed20
    1fb8:	00001f35 	.word	0x00001f35
    1fbc:	20000104 	.word	0x20000104
    1fc0:	00001f01 	.word	0x00001f01
    1fc4:	00002d95 	.word	0x00002d95
    1fc8:	00001ed9 	.word	0x00001ed9

00001fcc <vPortYield>:
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1fcc:	2280      	movs	r2, #128	; 0x80
    1fce:	0552      	lsls	r2, r2, #21
    1fd0:	4b03      	ldr	r3, [pc, #12]	; (1fe0 <vPortYield+0x14>)
    1fd2:	601a      	str	r2, [r3, #0]
	__asm volatile("dsb" ::: "memory");
    1fd4:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    1fd8:	f3bf 8f6f 	isb	sy
}
    1fdc:	4770      	bx	lr
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	e000ed04 	.word	0xe000ed04

00001fe4 <vPortEnterCritical>:
	portDISABLE_INTERRUPTS();
    1fe4:	b672      	cpsid	i
	uxCriticalNesting++;
    1fe6:	4a04      	ldr	r2, [pc, #16]	; (1ff8 <vPortEnterCritical+0x14>)
    1fe8:	6813      	ldr	r3, [r2, #0]
    1fea:	3301      	adds	r3, #1
    1fec:	6013      	str	r3, [r2, #0]
	__asm volatile("dsb" ::: "memory");
    1fee:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    1ff2:	f3bf 8f6f 	isb	sy
}
    1ff6:	4770      	bx	lr
    1ff8:	20000104 	.word	0x20000104

00001ffc <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    1ffc:	4b06      	ldr	r3, [pc, #24]	; (2018 <STACK_SIZE+0x18>)
    1ffe:	681b      	ldr	r3, [r3, #0]
    2000:	2b00      	cmp	r3, #0
    2002:	d101      	bne.n	2008 <STACK_SIZE+0x8>
    2004:	b672      	cpsid	i
    2006:	e7fe      	b.n	2006 <STACK_SIZE+0x6>
	uxCriticalNesting--;
    2008:	3b01      	subs	r3, #1
    200a:	4a03      	ldr	r2, [pc, #12]	; (2018 <STACK_SIZE+0x18>)
    200c:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    200e:	2b00      	cmp	r3, #0
    2010:	d100      	bne.n	2014 <STACK_SIZE+0x14>
		portENABLE_INTERRUPTS();
    2012:	b662      	cpsie	i
}
    2014:	4770      	bx	lr
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	20000104 	.word	0x20000104

0000201c <ulSetInterruptMaskFromISR>:
	__asm volatile(" mrs r0, PRIMASK	\n"
    201c:	f3ef 8010 	mrs	r0, PRIMASK
    2020:	b672      	cpsid	i
    2022:	4770      	bx	lr

00002024 <vClearInterruptMaskFromISR>:
	__asm volatile(" msr PRIMASK, r0	\n"
    2024:	f380 8810 	msr	PRIMASK, r0
    2028:	4770      	bx	lr
    202a:	0000      	movs	r0, r0
    202c:	0000      	movs	r0, r0
	...

00002030 <PendSV_Handler>:
	__asm volatile(
    2030:	f3ef 8009 	mrs	r0, PSP
    2034:	4b0e      	ldr	r3, [pc, #56]	; (2070 <pxCurrentTCBConst>)
    2036:	681a      	ldr	r2, [r3, #0]
    2038:	3820      	subs	r0, #32
    203a:	6010      	str	r0, [r2, #0]
    203c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    203e:	4644      	mov	r4, r8
    2040:	464d      	mov	r5, r9
    2042:	4656      	mov	r6, sl
    2044:	465f      	mov	r7, fp
    2046:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2048:	b508      	push	{r3, lr}
    204a:	b672      	cpsid	i
    204c:	f000 fea2 	bl	2d94 <vTaskSwitchContext>
    2050:	b662      	cpsie	i
    2052:	bc0c      	pop	{r2, r3}
    2054:	6811      	ldr	r1, [r2, #0]
    2056:	6808      	ldr	r0, [r1, #0]
    2058:	3010      	adds	r0, #16
    205a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    205c:	46a0      	mov	r8, r4
    205e:	46a9      	mov	r9, r5
    2060:	46b2      	mov	sl, r6
    2062:	46bb      	mov	fp, r7
    2064:	f380 8809 	msr	PSP, r0
    2068:	3820      	subs	r0, #32
    206a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    206c:	4718      	bx	r3
    206e:	46c0      	nop			; (mov r8, r8)

00002070 <pxCurrentTCBConst>:
    2070:	20002870 	.word	0x20002870

00002074 <SysTick_Handler>:
{
    2074:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2076:	4b07      	ldr	r3, [pc, #28]	; (2094 <SysTick_Handler+0x20>)
    2078:	4798      	blx	r3
    207a:	0004      	movs	r4, r0
		if (xTaskIncrementTick() != pdFALSE) {
    207c:	4b06      	ldr	r3, [pc, #24]	; (2098 <SysTick_Handler+0x24>)
    207e:	4798      	blx	r3
    2080:	2800      	cmp	r0, #0
    2082:	d003      	beq.n	208c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2084:	2280      	movs	r2, #128	; 0x80
    2086:	0552      	lsls	r2, r2, #21
    2088:	4b04      	ldr	r3, [pc, #16]	; (209c <SysTick_Handler+0x28>)
    208a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulPreviousMask);
    208c:	0020      	movs	r0, r4
    208e:	4b04      	ldr	r3, [pc, #16]	; (20a0 <SysTick_Handler+0x2c>)
    2090:	4798      	blx	r3
}
    2092:	bd10      	pop	{r4, pc}
    2094:	0000201d 	.word	0x0000201d
    2098:	00002b9d 	.word	0x00002b9d
    209c:	e000ed04 	.word	0xe000ed04
    20a0:	00002025 	.word	0x00002025

000020a4 <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    20a4:	b570      	push	{r4, r5, r6, lr}
    20a6:	0004      	movs	r4, r0
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    20a8:	0743      	lsls	r3, r0, #29
    20aa:	d002      	beq.n	20b2 <pvPortMalloc+0xe>
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    20ac:	2307      	movs	r3, #7
    20ae:	439c      	bics	r4, r3
    20b0:	3408      	adds	r4, #8
		}
	}
#endif

	vTaskSuspendAll();
    20b2:	4b11      	ldr	r3, [pc, #68]	; (20f8 <pvPortMalloc+0x54>)
    20b4:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    20b6:	4b11      	ldr	r3, [pc, #68]	; (20fc <pvPortMalloc+0x58>)
    20b8:	681b      	ldr	r3, [r3, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d010      	beq.n	20e0 <pvPortMalloc+0x3c>
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    20be:	4b10      	ldr	r3, [pc, #64]	; (2100 <pvPortMalloc+0x5c>)
    20c0:	685b      	ldr	r3, [r3, #4]
    20c2:	18e4      	adds	r4, r4, r3
    20c4:	4a0f      	ldr	r2, [pc, #60]	; (2104 <pvPortMalloc+0x60>)
    20c6:	4294      	cmp	r4, r2
    20c8:	d811      	bhi.n	20ee <pvPortMalloc+0x4a>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    20ca:	42a3      	cmp	r3, r4
    20cc:	d211      	bcs.n	20f2 <pvPortMalloc+0x4e>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    20ce:	4a0b      	ldr	r2, [pc, #44]	; (20fc <pvPortMalloc+0x58>)
    20d0:	6815      	ldr	r5, [r2, #0]
    20d2:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    20d4:	4b0a      	ldr	r3, [pc, #40]	; (2100 <pvPortMalloc+0x5c>)
    20d6:	605c      	str	r4, [r3, #4]
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    20d8:	4b0b      	ldr	r3, [pc, #44]	; (2108 <pvPortMalloc+0x64>)
    20da:	4798      	blx	r3
		}
	}
#endif

	return pvReturn;
}
    20dc:	0028      	movs	r0, r5
    20de:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    20e0:	4a06      	ldr	r2, [pc, #24]	; (20fc <pvPortMalloc+0x58>)
    20e2:	0013      	movs	r3, r2
    20e4:	330c      	adds	r3, #12
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    20e6:	2107      	movs	r1, #7
    20e8:	438b      	bics	r3, r1
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    20ea:	6013      	str	r3, [r2, #0]
    20ec:	e7e7      	b.n	20be <pvPortMalloc+0x1a>
	void *          pvReturn       = NULL;
    20ee:	2500      	movs	r5, #0
    20f0:	e7f2      	b.n	20d8 <pvPortMalloc+0x34>
    20f2:	2500      	movs	r5, #0
    20f4:	e7f0      	b.n	20d8 <pvPortMalloc+0x34>
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	00002b81 	.word	0x00002b81
    20fc:	20000224 	.word	0x20000224
    2100:	200027a4 	.word	0x200027a4
    2104:	00002577 	.word	0x00002577
    2108:	00002ca5 	.word	0x00002ca5

0000210c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    210c:	2800      	cmp	r0, #0
    210e:	d001      	beq.n	2114 <vPortFree+0x8>
    2110:	b672      	cpsid	i
    2112:	e7fe      	b.n	2112 <vPortFree+0x6>
}
    2114:	4770      	bx	lr
	...

00002118 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    2118:	b510      	push	{r4, lr}
    211a:	0004      	movs	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    211c:	4b06      	ldr	r3, [pc, #24]	; (2138 <prvIsQueueFull+0x20>)
    211e:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    2120:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2122:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2124:	429a      	cmp	r2, r3
    2126:	d004      	beq.n	2132 <prvIsQueueFull+0x1a>
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
    2128:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
    212a:	4b04      	ldr	r3, [pc, #16]	; (213c <prvIsQueueFull+0x24>)
    212c:	4798      	blx	r3

	return xReturn;
}
    212e:	0020      	movs	r0, r4
    2130:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    2132:	2401      	movs	r4, #1
    2134:	e7f9      	b.n	212a <prvIsQueueFull+0x12>
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	00001fe5 	.word	0x00001fe5
    213c:	00001ffd 	.word	0x00001ffd

00002140 <prvIsQueueEmpty>:
{
    2140:	b510      	push	{r4, lr}
    2142:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
    2144:	4b05      	ldr	r3, [pc, #20]	; (215c <prvIsQueueEmpty+0x1c>)
    2146:	4798      	blx	r3
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    2148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    214a:	2b00      	cmp	r3, #0
    214c:	d004      	beq.n	2158 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
    214e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    2150:	4b03      	ldr	r3, [pc, #12]	; (2160 <prvIsQueueEmpty+0x20>)
    2152:	4798      	blx	r3
}
    2154:	0020      	movs	r0, r4
    2156:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    2158:	2401      	movs	r4, #1
    215a:	e7f9      	b.n	2150 <prvIsQueueEmpty+0x10>
    215c:	00001fe5 	.word	0x00001fe5
    2160:	00001ffd 	.word	0x00001ffd

00002164 <prvCopyDataToQueue>:
{
    2164:	b570      	push	{r4, r5, r6, lr}
    2166:	0004      	movs	r4, r0
    2168:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    216a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    216c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    216e:	2a00      	cmp	r2, #0
    2170:	d10a      	bne.n	2188 <prvCopyDataToQueue+0x24>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    2172:	6803      	ldr	r3, [r0, #0]
    2174:	2b00      	cmp	r3, #0
    2176:	d12e      	bne.n	21d6 <prvCopyDataToQueue+0x72>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    2178:	6840      	ldr	r0, [r0, #4]
    217a:	4b1b      	ldr	r3, [pc, #108]	; (21e8 <prvCopyDataToQueue+0x84>)
    217c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    217e:	2300      	movs	r3, #0
    2180:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    2182:	3501      	adds	r5, #1
    2184:	63a5      	str	r5, [r4, #56]	; 0x38
}
    2186:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    2188:	2e00      	cmp	r6, #0
    218a:	d10e      	bne.n	21aa <prvCopyDataToQueue+0x46>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    218c:	6880      	ldr	r0, [r0, #8]
    218e:	4b17      	ldr	r3, [pc, #92]	; (21ec <prvCopyDataToQueue+0x88>)
    2190:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2192:	68a3      	ldr	r3, [r4, #8]
    2194:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2196:	4694      	mov	ip, r2
    2198:	4463      	add	r3, ip
    219a:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    219c:	6862      	ldr	r2, [r4, #4]
    219e:	4293      	cmp	r3, r2
    21a0:	d31b      	bcc.n	21da <prvCopyDataToQueue+0x76>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    21a2:	6823      	ldr	r3, [r4, #0]
    21a4:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    21a6:	2000      	movs	r0, #0
    21a8:	e7eb      	b.n	2182 <prvCopyDataToQueue+0x1e>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    21aa:	68c0      	ldr	r0, [r0, #12]
    21ac:	4b0f      	ldr	r3, [pc, #60]	; (21ec <prvCopyDataToQueue+0x88>)
    21ae:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    21b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    21b2:	425b      	negs	r3, r3
    21b4:	68e2      	ldr	r2, [r4, #12]
    21b6:	18d2      	adds	r2, r2, r3
    21b8:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    21ba:	6821      	ldr	r1, [r4, #0]
    21bc:	428a      	cmp	r2, r1
    21be:	d203      	bcs.n	21c8 <prvCopyDataToQueue+0x64>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    21c0:	6862      	ldr	r2, [r4, #4]
    21c2:	4694      	mov	ip, r2
    21c4:	4463      	add	r3, ip
    21c6:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    21c8:	2e02      	cmp	r6, #2
    21ca:	d108      	bne.n	21de <prvCopyDataToQueue+0x7a>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    21cc:	2d00      	cmp	r5, #0
    21ce:	d008      	beq.n	21e2 <prvCopyDataToQueue+0x7e>
				--uxMessagesWaiting;
    21d0:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    21d2:	2000      	movs	r0, #0
    21d4:	e7d5      	b.n	2182 <prvCopyDataToQueue+0x1e>
    21d6:	2000      	movs	r0, #0
    21d8:	e7d3      	b.n	2182 <prvCopyDataToQueue+0x1e>
    21da:	2000      	movs	r0, #0
    21dc:	e7d1      	b.n	2182 <prvCopyDataToQueue+0x1e>
    21de:	2000      	movs	r0, #0
    21e0:	e7cf      	b.n	2182 <prvCopyDataToQueue+0x1e>
    21e2:	2000      	movs	r0, #0
    21e4:	e7cd      	b.n	2182 <prvCopyDataToQueue+0x1e>
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	00002fa5 	.word	0x00002fa5
    21ec:	0000349d 	.word	0x0000349d

000021f0 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    21f0:	b570      	push	{r4, r5, r6, lr}
    21f2:	b082      	sub	sp, #8
    21f4:	9001      	str	r0, [sp, #4]
    21f6:	000a      	movs	r2, r1
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    21f8:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    21fa:	2c00      	cmp	r4, #0
    21fc:	d005      	beq.n	220a <prvNotifyQueueSetContainer+0x1a>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    21fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2200:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2202:	4299      	cmp	r1, r3
    2204:	d303      	bcc.n	220e <prvNotifyQueueSetContainer+0x1e>
    2206:	b672      	cpsid	i
    2208:	e7fe      	b.n	2208 <prvNotifyQueueSetContainer+0x18>
	configASSERT(pxQueueSetContainer);
    220a:	b672      	cpsid	i
    220c:	e7fe      	b.n	220c <prvNotifyQueueSetContainer+0x1c>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    220e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2210:	428b      	cmp	r3, r1
    2212:	d803      	bhi.n	221c <prvNotifyQueueSetContainer+0x2c>
	BaseType_t xReturn             = pdFALSE;
    2214:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    2216:	0030      	movs	r0, r6
    2218:	b002      	add	sp, #8
    221a:	bd70      	pop	{r4, r5, r6, pc}
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    221c:	2345      	movs	r3, #69	; 0x45
    221e:	5ce5      	ldrb	r5, [r4, r3]
    2220:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    2222:	a901      	add	r1, sp, #4
    2224:	0020      	movs	r0, r4
    2226:	4b0a      	ldr	r3, [pc, #40]	; (2250 <prvNotifyQueueSetContainer+0x60>)
    2228:	4798      	blx	r3
    222a:	0006      	movs	r6, r0
		if (cTxLock == queueUNLOCKED) {
    222c:	1c6b      	adds	r3, r5, #1
    222e:	d10a      	bne.n	2246 <prvNotifyQueueSetContainer+0x56>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    2230:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2232:	2b00      	cmp	r3, #0
    2234:	d0ef      	beq.n	2216 <prvNotifyQueueSetContainer+0x26>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    2236:	0020      	movs	r0, r4
    2238:	3024      	adds	r0, #36	; 0x24
    223a:	4b06      	ldr	r3, [pc, #24]	; (2254 <prvNotifyQueueSetContainer+0x64>)
    223c:	4798      	blx	r3
    223e:	2800      	cmp	r0, #0
    2240:	d0e9      	beq.n	2216 <prvNotifyQueueSetContainer+0x26>
					xReturn = pdTRUE;
    2242:	2601      	movs	r6, #1
	return xReturn;
    2244:	e7e7      	b.n	2216 <prvNotifyQueueSetContainer+0x26>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    2246:	3501      	adds	r5, #1
    2248:	b26d      	sxtb	r5, r5
    224a:	2345      	movs	r3, #69	; 0x45
    224c:	54e5      	strb	r5, [r4, r3]
    224e:	e7e2      	b.n	2216 <prvNotifyQueueSetContainer+0x26>
    2250:	00002165 	.word	0x00002165
    2254:	00002e79 	.word	0x00002e79

00002258 <prvCopyDataFromQueue>:
{
    2258:	b510      	push	{r4, lr}
    225a:	000c      	movs	r4, r1
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    225c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    225e:	2a00      	cmp	r2, #0
    2260:	d00b      	beq.n	227a <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2262:	68c3      	ldr	r3, [r0, #12]
    2264:	189b      	adds	r3, r3, r2
    2266:	60c3      	str	r3, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    2268:	6841      	ldr	r1, [r0, #4]
    226a:	428b      	cmp	r3, r1
    226c:	d301      	bcc.n	2272 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    226e:	6803      	ldr	r3, [r0, #0]
    2270:	60c3      	str	r3, [r0, #12]
		             (void *)pxQueue->u.pcReadFrom,
    2272:	68c1      	ldr	r1, [r0, #12]
		(void)memcpy((void *)pvBuffer,
    2274:	0020      	movs	r0, r4
    2276:	4b01      	ldr	r3, [pc, #4]	; (227c <prvCopyDataFromQueue+0x24>)
    2278:	4798      	blx	r3
}
    227a:	bd10      	pop	{r4, pc}
    227c:	0000349d 	.word	0x0000349d

00002280 <prvUnlockQueue>:
{
    2280:	b570      	push	{r4, r5, r6, lr}
    2282:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
    2284:	4b21      	ldr	r3, [pc, #132]	; (230c <prvUnlockQueue+0x8c>)
    2286:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    2288:	2345      	movs	r3, #69	; 0x45
    228a:	5cec      	ldrb	r4, [r5, r3]
    228c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    228e:	e00a      	b.n	22a6 <prvUnlockQueue+0x26>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    2290:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2292:	2b00      	cmp	r3, #0
    2294:	d018      	beq.n	22c8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2296:	0028      	movs	r0, r5
    2298:	3024      	adds	r0, #36	; 0x24
    229a:	4b1d      	ldr	r3, [pc, #116]	; (2310 <prvUnlockQueue+0x90>)
    229c:	4798      	blx	r3
    229e:	2800      	cmp	r0, #0
    22a0:	d10f      	bne.n	22c2 <prvUnlockQueue+0x42>
			--cTxLock;
    22a2:	3c01      	subs	r4, #1
    22a4:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    22a6:	2c00      	cmp	r4, #0
    22a8:	dd0e      	ble.n	22c8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    22aa:	6cab      	ldr	r3, [r5, #72]	; 0x48
    22ac:	2b00      	cmp	r3, #0
    22ae:	d0ef      	beq.n	2290 <prvUnlockQueue+0x10>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    22b0:	2100      	movs	r1, #0
    22b2:	0028      	movs	r0, r5
    22b4:	4b17      	ldr	r3, [pc, #92]	; (2314 <prvUnlockQueue+0x94>)
    22b6:	4798      	blx	r3
    22b8:	2800      	cmp	r0, #0
    22ba:	d0f2      	beq.n	22a2 <prvUnlockQueue+0x22>
						vTaskMissedYield();
    22bc:	4b16      	ldr	r3, [pc, #88]	; (2318 <prvUnlockQueue+0x98>)
    22be:	4798      	blx	r3
    22c0:	e7ef      	b.n	22a2 <prvUnlockQueue+0x22>
							vTaskMissedYield();
    22c2:	4b15      	ldr	r3, [pc, #84]	; (2318 <prvUnlockQueue+0x98>)
    22c4:	4798      	blx	r3
    22c6:	e7ec      	b.n	22a2 <prvUnlockQueue+0x22>
		pxQueue->cTxLock = queueUNLOCKED;
    22c8:	22ff      	movs	r2, #255	; 0xff
    22ca:	2345      	movs	r3, #69	; 0x45
    22cc:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
    22ce:	4b13      	ldr	r3, [pc, #76]	; (231c <prvUnlockQueue+0x9c>)
    22d0:	4798      	blx	r3
	taskENTER_CRITICAL();
    22d2:	4b0e      	ldr	r3, [pc, #56]	; (230c <prvUnlockQueue+0x8c>)
    22d4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    22d6:	2344      	movs	r3, #68	; 0x44
    22d8:	5cec      	ldrb	r4, [r5, r3]
    22da:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    22dc:	e001      	b.n	22e2 <prvUnlockQueue+0x62>
				--cRxLock;
    22de:	3c01      	subs	r4, #1
    22e0:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    22e2:	2c00      	cmp	r4, #0
    22e4:	dd0b      	ble.n	22fe <prvUnlockQueue+0x7e>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    22e6:	692b      	ldr	r3, [r5, #16]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d008      	beq.n	22fe <prvUnlockQueue+0x7e>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    22ec:	0028      	movs	r0, r5
    22ee:	3010      	adds	r0, #16
    22f0:	4b07      	ldr	r3, [pc, #28]	; (2310 <prvUnlockQueue+0x90>)
    22f2:	4798      	blx	r3
    22f4:	2800      	cmp	r0, #0
    22f6:	d0f2      	beq.n	22de <prvUnlockQueue+0x5e>
					vTaskMissedYield();
    22f8:	4b07      	ldr	r3, [pc, #28]	; (2318 <prvUnlockQueue+0x98>)
    22fa:	4798      	blx	r3
    22fc:	e7ef      	b.n	22de <prvUnlockQueue+0x5e>
		pxQueue->cRxLock = queueUNLOCKED;
    22fe:	22ff      	movs	r2, #255	; 0xff
    2300:	2344      	movs	r3, #68	; 0x44
    2302:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
    2304:	4b05      	ldr	r3, [pc, #20]	; (231c <prvUnlockQueue+0x9c>)
    2306:	4798      	blx	r3
}
    2308:	bd70      	pop	{r4, r5, r6, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	00001fe5 	.word	0x00001fe5
    2310:	00002e79 	.word	0x00002e79
    2314:	000021f1 	.word	0x000021f1
    2318:	00002f79 	.word	0x00002f79
    231c:	00001ffd 	.word	0x00001ffd

00002320 <xQueueGenericReset>:
{
    2320:	b570      	push	{r4, r5, r6, lr}
    2322:	0004      	movs	r4, r0
    2324:	000d      	movs	r5, r1
	configASSERT(pxQueue);
    2326:	2800      	cmp	r0, #0
    2328:	d023      	beq.n	2372 <xQueueGenericReset+0x52>
	taskENTER_CRITICAL();
    232a:	4b18      	ldr	r3, [pc, #96]	; (238c <xQueueGenericReset+0x6c>)
    232c:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    232e:	6822      	ldr	r2, [r4, #0]
    2330:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2332:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2334:	0001      	movs	r1, r0
    2336:	4359      	muls	r1, r3
    2338:	1851      	adds	r1, r2, r1
    233a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    233c:	2100      	movs	r1, #0
    233e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    2340:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    2342:	3b01      	subs	r3, #1
    2344:	4343      	muls	r3, r0
    2346:	18d3      	adds	r3, r2, r3
    2348:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    234a:	23ff      	movs	r3, #255	; 0xff
    234c:	2244      	movs	r2, #68	; 0x44
    234e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock           = queueUNLOCKED;
    2350:	3201      	adds	r2, #1
    2352:	54a3      	strb	r3, [r4, r2]
		if (xNewQueue == pdFALSE) {
    2354:	2d00      	cmp	r5, #0
    2356:	d111      	bne.n	237c <xQueueGenericReset+0x5c>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2358:	6923      	ldr	r3, [r4, #16]
    235a:	2b00      	cmp	r3, #0
    235c:	d005      	beq.n	236a <xQueueGenericReset+0x4a>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    235e:	0020      	movs	r0, r4
    2360:	3010      	adds	r0, #16
    2362:	4b0b      	ldr	r3, [pc, #44]	; (2390 <xQueueGenericReset+0x70>)
    2364:	4798      	blx	r3
    2366:	2800      	cmp	r0, #0
    2368:	d105      	bne.n	2376 <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
    236a:	4b0a      	ldr	r3, [pc, #40]	; (2394 <xQueueGenericReset+0x74>)
    236c:	4798      	blx	r3
}
    236e:	2001      	movs	r0, #1
    2370:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxQueue);
    2372:	b672      	cpsid	i
    2374:	e7fe      	b.n	2374 <xQueueGenericReset+0x54>
					queueYIELD_IF_USING_PREEMPTION();
    2376:	4b08      	ldr	r3, [pc, #32]	; (2398 <xQueueGenericReset+0x78>)
    2378:	4798      	blx	r3
    237a:	e7f6      	b.n	236a <xQueueGenericReset+0x4a>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    237c:	0020      	movs	r0, r4
    237e:	3010      	adds	r0, #16
    2380:	4d06      	ldr	r5, [pc, #24]	; (239c <xQueueGenericReset+0x7c>)
    2382:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    2384:	0020      	movs	r0, r4
    2386:	3024      	adds	r0, #36	; 0x24
    2388:	47a8      	blx	r5
    238a:	e7ee      	b.n	236a <xQueueGenericReset+0x4a>
    238c:	00001fe5 	.word	0x00001fe5
    2390:	00002e79 	.word	0x00002e79
    2394:	00001ffd 	.word	0x00001ffd
    2398:	00001fcd 	.word	0x00001fcd
    239c:	00001e4d 	.word	0x00001e4d

000023a0 <prvInitialiseNewQueue>:
{
    23a0:	b570      	push	{r4, r5, r6, lr}
    23a2:	001d      	movs	r5, r3
    23a4:	9c04      	ldr	r4, [sp, #16]
	if (uxItemSize == (UBaseType_t)0) {
    23a6:	2900      	cmp	r1, #0
    23a8:	d00b      	beq.n	23c2 <prvInitialiseNewQueue+0x22>
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    23aa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    23ac:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    23ae:	6421      	str	r1, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    23b0:	2101      	movs	r1, #1
    23b2:	0020      	movs	r0, r4
    23b4:	4b04      	ldr	r3, [pc, #16]	; (23c8 <prvInitialiseNewQueue+0x28>)
    23b6:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    23b8:	2350      	movs	r3, #80	; 0x50
    23ba:	54e5      	strb	r5, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    23bc:	2300      	movs	r3, #0
    23be:	64a3      	str	r3, [r4, #72]	; 0x48
}
    23c0:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    23c2:	6024      	str	r4, [r4, #0]
    23c4:	e7f2      	b.n	23ac <prvInitialiseNewQueue+0xc>
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	00002321 	.word	0x00002321

000023cc <xQueueGenericCreate>:
{
    23cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ce:	b083      	sub	sp, #12
    23d0:	0006      	movs	r6, r0
    23d2:	000f      	movs	r7, r1
    23d4:	0015      	movs	r5, r2
	configASSERT(uxQueueLength > (UBaseType_t)0);
    23d6:	2800      	cmp	r0, #0
    23d8:	d101      	bne.n	23de <xQueueGenericCreate+0x12>
    23da:	b672      	cpsid	i
    23dc:	e7fe      	b.n	23dc <xQueueGenericCreate+0x10>
	if (uxItemSize == (UBaseType_t)0) {
    23de:	2900      	cmp	r1, #0
    23e0:	d002      	beq.n	23e8 <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = (size_t)(
    23e2:	0008      	movs	r0, r1
    23e4:	4370      	muls	r0, r6
    23e6:	e000      	b.n	23ea <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = (size_t)0;
    23e8:	2000      	movs	r0, #0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    23ea:	3054      	adds	r0, #84	; 0x54
    23ec:	4b07      	ldr	r3, [pc, #28]	; (240c <xQueueGenericCreate+0x40>)
    23ee:	4798      	blx	r3
    23f0:	1e04      	subs	r4, r0, #0
	if (pxNewQueue != NULL) {
    23f2:	d007      	beq.n	2404 <xQueueGenericCreate+0x38>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    23f4:	0002      	movs	r2, r0
    23f6:	3254      	adds	r2, #84	; 0x54
		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
    23f8:	9000      	str	r0, [sp, #0]
    23fa:	002b      	movs	r3, r5
    23fc:	0039      	movs	r1, r7
    23fe:	0030      	movs	r0, r6
    2400:	4d03      	ldr	r5, [pc, #12]	; (2410 <xQueueGenericCreate+0x44>)
    2402:	47a8      	blx	r5
}
    2404:	0020      	movs	r0, r4
    2406:	b003      	add	sp, #12
    2408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	000020a5 	.word	0x000020a5
    2410:	000023a1 	.word	0x000023a1

00002414 <xQueueGenericSend>:
{
    2414:	b5f0      	push	{r4, r5, r6, r7, lr}
    2416:	b085      	sub	sp, #20
    2418:	0004      	movs	r4, r0
    241a:	000f      	movs	r7, r1
    241c:	9201      	str	r2, [sp, #4]
    241e:	001e      	movs	r6, r3
	configASSERT(pxQueue);
    2420:	2800      	cmp	r0, #0
    2422:	d006      	beq.n	2432 <xQueueGenericSend+0x1e>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2424:	2900      	cmp	r1, #0
    2426:	d006      	beq.n	2436 <xQueueGenericSend+0x22>
    2428:	2501      	movs	r5, #1
    242a:	2d00      	cmp	r5, #0
    242c:	d10a      	bne.n	2444 <xQueueGenericSend+0x30>
    242e:	b672      	cpsid	i
    2430:	e7fe      	b.n	2430 <xQueueGenericSend+0x1c>
	configASSERT(pxQueue);
    2432:	b672      	cpsid	i
    2434:	e7fe      	b.n	2434 <xQueueGenericSend+0x20>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2436:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2438:	2b00      	cmp	r3, #0
    243a:	d101      	bne.n	2440 <xQueueGenericSend+0x2c>
    243c:	2501      	movs	r5, #1
    243e:	e7f4      	b.n	242a <xQueueGenericSend+0x16>
    2440:	2500      	movs	r5, #0
    2442:	e7f2      	b.n	242a <xQueueGenericSend+0x16>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    2444:	2e02      	cmp	r6, #2
    2446:	d003      	beq.n	2450 <xQueueGenericSend+0x3c>
    2448:	2d00      	cmp	r5, #0
    244a:	d106      	bne.n	245a <xQueueGenericSend+0x46>
    244c:	b672      	cpsid	i
    244e:	e7fe      	b.n	244e <xQueueGenericSend+0x3a>
    2450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2452:	2b01      	cmp	r3, #1
    2454:	d0f8      	beq.n	2448 <xQueueGenericSend+0x34>
    2456:	2500      	movs	r5, #0
    2458:	e7f6      	b.n	2448 <xQueueGenericSend+0x34>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    245a:	4b44      	ldr	r3, [pc, #272]	; (256c <xQueueGenericSend+0x158>)
    245c:	4798      	blx	r3
    245e:	2800      	cmp	r0, #0
    2460:	d103      	bne.n	246a <xQueueGenericSend+0x56>
    2462:	9b01      	ldr	r3, [sp, #4]
    2464:	2b00      	cmp	r3, #0
    2466:	d000      	beq.n	246a <xQueueGenericSend+0x56>
    2468:	2500      	movs	r5, #0
    246a:	2d00      	cmp	r5, #0
    246c:	d101      	bne.n	2472 <xQueueGenericSend+0x5e>
    246e:	b672      	cpsid	i
    2470:	e7fe      	b.n	2470 <xQueueGenericSend+0x5c>
    2472:	2500      	movs	r5, #0
    2474:	e042      	b.n	24fc <xQueueGenericSend+0xe8>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    2476:	0032      	movs	r2, r6
    2478:	0039      	movs	r1, r7
    247a:	0020      	movs	r0, r4
    247c:	4b3c      	ldr	r3, [pc, #240]	; (2570 <xQueueGenericSend+0x15c>)
    247e:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    2480:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2482:	2b00      	cmp	r3, #0
    2484:	d00c      	beq.n	24a0 <xQueueGenericSend+0x8c>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    2486:	0031      	movs	r1, r6
    2488:	0020      	movs	r0, r4
    248a:	4b3a      	ldr	r3, [pc, #232]	; (2574 <xQueueGenericSend+0x160>)
    248c:	4798      	blx	r3
    248e:	2800      	cmp	r0, #0
    2490:	d001      	beq.n	2496 <xQueueGenericSend+0x82>
							queueYIELD_IF_USING_PREEMPTION();
    2492:	4b39      	ldr	r3, [pc, #228]	; (2578 <xQueueGenericSend+0x164>)
    2494:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2496:	4b39      	ldr	r3, [pc, #228]	; (257c <xQueueGenericSend+0x168>)
    2498:	4798      	blx	r3
				return pdPASS;
    249a:	2001      	movs	r0, #1
}
    249c:	b005      	add	sp, #20
    249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    24a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24a2:	2b00      	cmp	r3, #0
    24a4:	d008      	beq.n	24b8 <xQueueGenericSend+0xa4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    24a6:	0020      	movs	r0, r4
    24a8:	3024      	adds	r0, #36	; 0x24
    24aa:	4b35      	ldr	r3, [pc, #212]	; (2580 <xQueueGenericSend+0x16c>)
    24ac:	4798      	blx	r3
    24ae:	2800      	cmp	r0, #0
    24b0:	d0f1      	beq.n	2496 <xQueueGenericSend+0x82>
								queueYIELD_IF_USING_PREEMPTION();
    24b2:	4b31      	ldr	r3, [pc, #196]	; (2578 <xQueueGenericSend+0x164>)
    24b4:	4798      	blx	r3
    24b6:	e7ee      	b.n	2496 <xQueueGenericSend+0x82>
						} else if (xYieldRequired != pdFALSE) {
    24b8:	2800      	cmp	r0, #0
    24ba:	d0ec      	beq.n	2496 <xQueueGenericSend+0x82>
							queueYIELD_IF_USING_PREEMPTION();
    24bc:	4b2e      	ldr	r3, [pc, #184]	; (2578 <xQueueGenericSend+0x164>)
    24be:	4798      	blx	r3
    24c0:	e7e9      	b.n	2496 <xQueueGenericSend+0x82>
					taskEXIT_CRITICAL();
    24c2:	4b2e      	ldr	r3, [pc, #184]	; (257c <xQueueGenericSend+0x168>)
    24c4:	4798      	blx	r3
					return errQUEUE_FULL;
    24c6:	2000      	movs	r0, #0
    24c8:	e7e8      	b.n	249c <xQueueGenericSend+0x88>
		prvLockQueue(pxQueue);
    24ca:	4b2c      	ldr	r3, [pc, #176]	; (257c <xQueueGenericSend+0x168>)
    24cc:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    24ce:	a901      	add	r1, sp, #4
    24d0:	a802      	add	r0, sp, #8
    24d2:	4b2c      	ldr	r3, [pc, #176]	; (2584 <xQueueGenericSend+0x170>)
    24d4:	4798      	blx	r3
    24d6:	2800      	cmp	r0, #0
    24d8:	d141      	bne.n	255e <xQueueGenericSend+0x14a>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    24da:	0020      	movs	r0, r4
    24dc:	4b2a      	ldr	r3, [pc, #168]	; (2588 <xQueueGenericSend+0x174>)
    24de:	4798      	blx	r3
    24e0:	2800      	cmp	r0, #0
    24e2:	d036      	beq.n	2552 <xQueueGenericSend+0x13e>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    24e4:	0020      	movs	r0, r4
    24e6:	3010      	adds	r0, #16
    24e8:	9901      	ldr	r1, [sp, #4]
    24ea:	4b28      	ldr	r3, [pc, #160]	; (258c <xQueueGenericSend+0x178>)
    24ec:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    24ee:	0020      	movs	r0, r4
    24f0:	4b27      	ldr	r3, [pc, #156]	; (2590 <xQueueGenericSend+0x17c>)
    24f2:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    24f4:	4b27      	ldr	r3, [pc, #156]	; (2594 <xQueueGenericSend+0x180>)
    24f6:	4798      	blx	r3
    24f8:	2800      	cmp	r0, #0
    24fa:	d027      	beq.n	254c <xQueueGenericSend+0x138>
		taskENTER_CRITICAL();
    24fc:	4b26      	ldr	r3, [pc, #152]	; (2598 <xQueueGenericSend+0x184>)
    24fe:	4798      	blx	r3
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    2500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2502:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2504:	4293      	cmp	r3, r2
    2506:	d3b6      	bcc.n	2476 <xQueueGenericSend+0x62>
    2508:	2e02      	cmp	r6, #2
    250a:	d0b4      	beq.n	2476 <xQueueGenericSend+0x62>
				if (xTicksToWait == (TickType_t)0) {
    250c:	9b01      	ldr	r3, [sp, #4]
    250e:	2b00      	cmp	r3, #0
    2510:	d0d7      	beq.n	24c2 <xQueueGenericSend+0xae>
				} else if (xEntryTimeSet == pdFALSE) {
    2512:	2d00      	cmp	r5, #0
    2514:	d103      	bne.n	251e <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    2516:	a802      	add	r0, sp, #8
    2518:	4b20      	ldr	r3, [pc, #128]	; (259c <xQueueGenericSend+0x188>)
    251a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    251c:	3501      	adds	r5, #1
		taskEXIT_CRITICAL();
    251e:	4b17      	ldr	r3, [pc, #92]	; (257c <xQueueGenericSend+0x168>)
    2520:	4798      	blx	r3
		vTaskSuspendAll();
    2522:	4b1f      	ldr	r3, [pc, #124]	; (25a0 <xQueueGenericSend+0x18c>)
    2524:	4798      	blx	r3
		prvLockQueue(pxQueue);
    2526:	4b1c      	ldr	r3, [pc, #112]	; (2598 <xQueueGenericSend+0x184>)
    2528:	4798      	blx	r3
    252a:	2344      	movs	r3, #68	; 0x44
    252c:	5ce3      	ldrb	r3, [r4, r3]
    252e:	b25b      	sxtb	r3, r3
    2530:	3301      	adds	r3, #1
    2532:	d102      	bne.n	253a <xQueueGenericSend+0x126>
    2534:	2200      	movs	r2, #0
    2536:	2344      	movs	r3, #68	; 0x44
    2538:	54e2      	strb	r2, [r4, r3]
    253a:	2345      	movs	r3, #69	; 0x45
    253c:	5ce3      	ldrb	r3, [r4, r3]
    253e:	b25b      	sxtb	r3, r3
    2540:	3301      	adds	r3, #1
    2542:	d1c2      	bne.n	24ca <xQueueGenericSend+0xb6>
    2544:	2200      	movs	r2, #0
    2546:	2345      	movs	r3, #69	; 0x45
    2548:	54e2      	strb	r2, [r4, r3]
    254a:	e7be      	b.n	24ca <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
    254c:	4b0a      	ldr	r3, [pc, #40]	; (2578 <xQueueGenericSend+0x164>)
    254e:	4798      	blx	r3
    2550:	e7d4      	b.n	24fc <xQueueGenericSend+0xe8>
				prvUnlockQueue(pxQueue);
    2552:	0020      	movs	r0, r4
    2554:	4b0e      	ldr	r3, [pc, #56]	; (2590 <xQueueGenericSend+0x17c>)
    2556:	4798      	blx	r3
				(void)xTaskResumeAll();
    2558:	4b0e      	ldr	r3, [pc, #56]	; (2594 <xQueueGenericSend+0x180>)
    255a:	4798      	blx	r3
    255c:	e7ce      	b.n	24fc <xQueueGenericSend+0xe8>
			prvUnlockQueue(pxQueue);
    255e:	0020      	movs	r0, r4
    2560:	4b0b      	ldr	r3, [pc, #44]	; (2590 <xQueueGenericSend+0x17c>)
    2562:	4798      	blx	r3
			(void)xTaskResumeAll();
    2564:	4b0b      	ldr	r3, [pc, #44]	; (2594 <xQueueGenericSend+0x180>)
    2566:	4798      	blx	r3
			return errQUEUE_FULL;
    2568:	2000      	movs	r0, #0
    256a:	e797      	b.n	249c <xQueueGenericSend+0x88>
    256c:	00002f85 	.word	0x00002f85
    2570:	00002165 	.word	0x00002165
    2574:	000021f1 	.word	0x000021f1
    2578:	00001fcd 	.word	0x00001fcd
    257c:	00001ffd 	.word	0x00001ffd
    2580:	00002e79 	.word	0x00002e79
    2584:	00002f09 	.word	0x00002f09
    2588:	00002119 	.word	0x00002119
    258c:	00002e15 	.word	0x00002e15
    2590:	00002281 	.word	0x00002281
    2594:	00002ca5 	.word	0x00002ca5
    2598:	00001fe5 	.word	0x00001fe5
    259c:	00002ef9 	.word	0x00002ef9
    25a0:	00002b81 	.word	0x00002b81

000025a4 <xQueueGenericSendFromISR>:
{
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	b083      	sub	sp, #12
    25a8:	0004      	movs	r4, r0
    25aa:	9100      	str	r1, [sp, #0]
    25ac:	0017      	movs	r7, r2
    25ae:	001d      	movs	r5, r3
	configASSERT(pxQueue);
    25b0:	2800      	cmp	r0, #0
    25b2:	d007      	beq.n	25c4 <xQueueGenericSendFromISR+0x20>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    25b4:	9b00      	ldr	r3, [sp, #0]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d006      	beq.n	25c8 <xQueueGenericSendFromISR+0x24>
    25ba:	2301      	movs	r3, #1
    25bc:	2b00      	cmp	r3, #0
    25be:	d10a      	bne.n	25d6 <xQueueGenericSendFromISR+0x32>
    25c0:	b672      	cpsid	i
    25c2:	e7fe      	b.n	25c2 <xQueueGenericSendFromISR+0x1e>
	configASSERT(pxQueue);
    25c4:	b672      	cpsid	i
    25c6:	e7fe      	b.n	25c6 <xQueueGenericSendFromISR+0x22>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    25c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    25ca:	2b00      	cmp	r3, #0
    25cc:	d101      	bne.n	25d2 <xQueueGenericSendFromISR+0x2e>
    25ce:	3301      	adds	r3, #1
    25d0:	e7f4      	b.n	25bc <xQueueGenericSendFromISR+0x18>
    25d2:	2300      	movs	r3, #0
    25d4:	e7f2      	b.n	25bc <xQueueGenericSendFromISR+0x18>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    25d6:	2d02      	cmp	r5, #2
    25d8:	d003      	beq.n	25e2 <xQueueGenericSendFromISR+0x3e>
    25da:	2b00      	cmp	r3, #0
    25dc:	d106      	bne.n	25ec <xQueueGenericSendFromISR+0x48>
    25de:	b672      	cpsid	i
    25e0:	e7fe      	b.n	25e0 <xQueueGenericSendFromISR+0x3c>
    25e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    25e4:	2a01      	cmp	r2, #1
    25e6:	d0f8      	beq.n	25da <xQueueGenericSendFromISR+0x36>
    25e8:	2300      	movs	r3, #0
    25ea:	e7f6      	b.n	25da <xQueueGenericSendFromISR+0x36>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    25ec:	4b23      	ldr	r3, [pc, #140]	; (267c <xQueueGenericSendFromISR+0xd8>)
    25ee:	4798      	blx	r3
    25f0:	9001      	str	r0, [sp, #4]
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    25f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    25f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    25f6:	4293      	cmp	r3, r2
    25f8:	d301      	bcc.n	25fe <xQueueGenericSendFromISR+0x5a>
    25fa:	2d02      	cmp	r5, #2
    25fc:	d132      	bne.n	2664 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
    25fe:	2345      	movs	r3, #69	; 0x45
    2600:	5ce6      	ldrb	r6, [r4, r3]
    2602:	b276      	sxtb	r6, r6
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    2604:	002a      	movs	r2, r5
    2606:	9900      	ldr	r1, [sp, #0]
    2608:	0020      	movs	r0, r4
    260a:	4b1d      	ldr	r3, [pc, #116]	; (2680 <xQueueGenericSendFromISR+0xdc>)
    260c:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    260e:	1c73      	adds	r3, r6, #1
    2610:	d122      	bne.n	2658 <xQueueGenericSendFromISR+0xb4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    2612:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2614:	2b00      	cmp	r3, #0
    2616:	d010      	beq.n	263a <xQueueGenericSendFromISR+0x96>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    2618:	0029      	movs	r1, r5
    261a:	0020      	movs	r0, r4
    261c:	4b19      	ldr	r3, [pc, #100]	; (2684 <xQueueGenericSendFromISR+0xe0>)
    261e:	4798      	blx	r3
    2620:	2800      	cmp	r0, #0
    2622:	d021      	beq.n	2668 <xQueueGenericSendFromISR+0xc4>
							if (pxHigherPriorityTaskWoken != NULL) {
    2624:	2f00      	cmp	r7, #0
    2626:	d021      	beq.n	266c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    2628:	2301      	movs	r3, #1
    262a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
    262c:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    262e:	9801      	ldr	r0, [sp, #4]
    2630:	4b15      	ldr	r3, [pc, #84]	; (2688 <xQueueGenericSendFromISR+0xe4>)
    2632:	4798      	blx	r3
}
    2634:	0020      	movs	r0, r4
    2636:	b003      	add	sp, #12
    2638:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    263a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    263c:	2b00      	cmp	r3, #0
    263e:	d017      	beq.n	2670 <xQueueGenericSendFromISR+0xcc>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2640:	0020      	movs	r0, r4
    2642:	3024      	adds	r0, #36	; 0x24
    2644:	4b11      	ldr	r3, [pc, #68]	; (268c <xQueueGenericSendFromISR+0xe8>)
    2646:	4798      	blx	r3
    2648:	2800      	cmp	r0, #0
    264a:	d013      	beq.n	2674 <xQueueGenericSendFromISR+0xd0>
								if (pxHigherPriorityTaskWoken != NULL) {
    264c:	2f00      	cmp	r7, #0
    264e:	d013      	beq.n	2678 <xQueueGenericSendFromISR+0xd4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    2650:	2301      	movs	r3, #1
    2652:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
    2654:	2401      	movs	r4, #1
    2656:	e7ea      	b.n	262e <xQueueGenericSendFromISR+0x8a>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    2658:	1c73      	adds	r3, r6, #1
    265a:	b25b      	sxtb	r3, r3
    265c:	2245      	movs	r2, #69	; 0x45
    265e:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    2660:	2401      	movs	r4, #1
    2662:	e7e4      	b.n	262e <xQueueGenericSendFromISR+0x8a>
			xReturn = errQUEUE_FULL;
    2664:	2400      	movs	r4, #0
    2666:	e7e2      	b.n	262e <xQueueGenericSendFromISR+0x8a>
			xReturn = pdPASS;
    2668:	2401      	movs	r4, #1
    266a:	e7e0      	b.n	262e <xQueueGenericSendFromISR+0x8a>
    266c:	2401      	movs	r4, #1
    266e:	e7de      	b.n	262e <xQueueGenericSendFromISR+0x8a>
    2670:	2401      	movs	r4, #1
    2672:	e7dc      	b.n	262e <xQueueGenericSendFromISR+0x8a>
    2674:	2401      	movs	r4, #1
    2676:	e7da      	b.n	262e <xQueueGenericSendFromISR+0x8a>
    2678:	2401      	movs	r4, #1
    267a:	e7d8      	b.n	262e <xQueueGenericSendFromISR+0x8a>
    267c:	0000201d 	.word	0x0000201d
    2680:	00002165 	.word	0x00002165
    2684:	000021f1 	.word	0x000021f1
    2688:	00002025 	.word	0x00002025
    268c:	00002e79 	.word	0x00002e79

00002690 <xQueueReceive>:
{
    2690:	b5f0      	push	{r4, r5, r6, r7, lr}
    2692:	b085      	sub	sp, #20
    2694:	0004      	movs	r4, r0
    2696:	000e      	movs	r6, r1
    2698:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    269a:	2800      	cmp	r0, #0
    269c:	d006      	beq.n	26ac <xQueueReceive+0x1c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    269e:	2900      	cmp	r1, #0
    26a0:	d006      	beq.n	26b0 <xQueueReceive+0x20>
    26a2:	2501      	movs	r5, #1
    26a4:	2d00      	cmp	r5, #0
    26a6:	d10a      	bne.n	26be <xQueueReceive+0x2e>
    26a8:	b672      	cpsid	i
    26aa:	e7fe      	b.n	26aa <xQueueReceive+0x1a>
	configASSERT((pxQueue));
    26ac:	b672      	cpsid	i
    26ae:	e7fe      	b.n	26ae <xQueueReceive+0x1e>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    26b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    26b2:	2b00      	cmp	r3, #0
    26b4:	d101      	bne.n	26ba <xQueueReceive+0x2a>
    26b6:	2501      	movs	r5, #1
    26b8:	e7f4      	b.n	26a4 <xQueueReceive+0x14>
    26ba:	2500      	movs	r5, #0
    26bc:	e7f2      	b.n	26a4 <xQueueReceive+0x14>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    26be:	4b3e      	ldr	r3, [pc, #248]	; (27b8 <xQueueReceive+0x128>)
    26c0:	4798      	blx	r3
    26c2:	2800      	cmp	r0, #0
    26c4:	d103      	bne.n	26ce <xQueueReceive+0x3e>
    26c6:	9b01      	ldr	r3, [sp, #4]
    26c8:	2b00      	cmp	r3, #0
    26ca:	d000      	beq.n	26ce <xQueueReceive+0x3e>
    26cc:	2500      	movs	r5, #0
    26ce:	2d00      	cmp	r5, #0
    26d0:	d101      	bne.n	26d6 <xQueueReceive+0x46>
    26d2:	b672      	cpsid	i
    26d4:	e7fe      	b.n	26d4 <xQueueReceive+0x44>
    26d6:	2700      	movs	r7, #0
    26d8:	e02b      	b.n	2732 <xQueueReceive+0xa2>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    26da:	0031      	movs	r1, r6
    26dc:	0020      	movs	r0, r4
    26de:	4b37      	ldr	r3, [pc, #220]	; (27bc <xQueueReceive+0x12c>)
    26e0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    26e2:	3d01      	subs	r5, #1
    26e4:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    26e6:	6923      	ldr	r3, [r4, #16]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d007      	beq.n	26fc <xQueueReceive+0x6c>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    26ec:	0020      	movs	r0, r4
    26ee:	3010      	adds	r0, #16
    26f0:	4b33      	ldr	r3, [pc, #204]	; (27c0 <xQueueReceive+0x130>)
    26f2:	4798      	blx	r3
    26f4:	2800      	cmp	r0, #0
    26f6:	d001      	beq.n	26fc <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
    26f8:	4b32      	ldr	r3, [pc, #200]	; (27c4 <xQueueReceive+0x134>)
    26fa:	4798      	blx	r3
				taskEXIT_CRITICAL();
    26fc:	4b32      	ldr	r3, [pc, #200]	; (27c8 <xQueueReceive+0x138>)
    26fe:	4798      	blx	r3
				return pdPASS;
    2700:	2001      	movs	r0, #1
}
    2702:	b005      	add	sp, #20
    2704:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    2706:	4b30      	ldr	r3, [pc, #192]	; (27c8 <xQueueReceive+0x138>)
    2708:	4798      	blx	r3
					return errQUEUE_EMPTY;
    270a:	2000      	movs	r0, #0
    270c:	e7f9      	b.n	2702 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState(&xTimeOut);
    270e:	a802      	add	r0, sp, #8
    2710:	4b2e      	ldr	r3, [pc, #184]	; (27cc <xQueueReceive+0x13c>)
    2712:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2714:	3701      	adds	r7, #1
    2716:	e016      	b.n	2746 <xQueueReceive+0xb6>
		prvLockQueue(pxQueue);
    2718:	2200      	movs	r2, #0
    271a:	2344      	movs	r3, #68	; 0x44
    271c:	54e2      	strb	r2, [r4, r3]
    271e:	e01d      	b.n	275c <xQueueReceive+0xcc>
    2720:	2200      	movs	r2, #0
    2722:	2345      	movs	r3, #69	; 0x45
    2724:	54e2      	strb	r2, [r4, r3]
    2726:	e01e      	b.n	2766 <xQueueReceive+0xd6>
				prvUnlockQueue(pxQueue);
    2728:	0020      	movs	r0, r4
    272a:	4b29      	ldr	r3, [pc, #164]	; (27d0 <xQueueReceive+0x140>)
    272c:	4798      	blx	r3
				(void)xTaskResumeAll();
    272e:	4b29      	ldr	r3, [pc, #164]	; (27d4 <xQueueReceive+0x144>)
    2730:	4798      	blx	r3
		taskENTER_CRITICAL();
    2732:	4b29      	ldr	r3, [pc, #164]	; (27d8 <xQueueReceive+0x148>)
    2734:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2736:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    2738:	2d00      	cmp	r5, #0
    273a:	d1ce      	bne.n	26da <xQueueReceive+0x4a>
				if (xTicksToWait == (TickType_t)0) {
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	2b00      	cmp	r3, #0
    2740:	d0e1      	beq.n	2706 <xQueueReceive+0x76>
				} else if (xEntryTimeSet == pdFALSE) {
    2742:	2f00      	cmp	r7, #0
    2744:	d0e3      	beq.n	270e <xQueueReceive+0x7e>
		taskEXIT_CRITICAL();
    2746:	4b20      	ldr	r3, [pc, #128]	; (27c8 <xQueueReceive+0x138>)
    2748:	4798      	blx	r3
		vTaskSuspendAll();
    274a:	4b24      	ldr	r3, [pc, #144]	; (27dc <xQueueReceive+0x14c>)
    274c:	4798      	blx	r3
		prvLockQueue(pxQueue);
    274e:	4b22      	ldr	r3, [pc, #136]	; (27d8 <xQueueReceive+0x148>)
    2750:	4798      	blx	r3
    2752:	2344      	movs	r3, #68	; 0x44
    2754:	5ce3      	ldrb	r3, [r4, r3]
    2756:	b25b      	sxtb	r3, r3
    2758:	3301      	adds	r3, #1
    275a:	d0dd      	beq.n	2718 <xQueueReceive+0x88>
    275c:	2345      	movs	r3, #69	; 0x45
    275e:	5ce3      	ldrb	r3, [r4, r3]
    2760:	b25b      	sxtb	r3, r3
    2762:	3301      	adds	r3, #1
    2764:	d0dc      	beq.n	2720 <xQueueReceive+0x90>
    2766:	4b18      	ldr	r3, [pc, #96]	; (27c8 <xQueueReceive+0x138>)
    2768:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    276a:	a901      	add	r1, sp, #4
    276c:	a802      	add	r0, sp, #8
    276e:	4b1c      	ldr	r3, [pc, #112]	; (27e0 <xQueueReceive+0x150>)
    2770:	4798      	blx	r3
    2772:	2800      	cmp	r0, #0
    2774:	d113      	bne.n	279e <xQueueReceive+0x10e>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    2776:	0020      	movs	r0, r4
    2778:	4b1a      	ldr	r3, [pc, #104]	; (27e4 <xQueueReceive+0x154>)
    277a:	4798      	blx	r3
    277c:	2800      	cmp	r0, #0
    277e:	d0d3      	beq.n	2728 <xQueueReceive+0x98>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    2780:	0020      	movs	r0, r4
    2782:	3024      	adds	r0, #36	; 0x24
    2784:	9901      	ldr	r1, [sp, #4]
    2786:	4b18      	ldr	r3, [pc, #96]	; (27e8 <xQueueReceive+0x158>)
    2788:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    278a:	0020      	movs	r0, r4
    278c:	4b10      	ldr	r3, [pc, #64]	; (27d0 <xQueueReceive+0x140>)
    278e:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    2790:	4b10      	ldr	r3, [pc, #64]	; (27d4 <xQueueReceive+0x144>)
    2792:	4798      	blx	r3
    2794:	2800      	cmp	r0, #0
    2796:	d1cc      	bne.n	2732 <xQueueReceive+0xa2>
					portYIELD_WITHIN_API();
    2798:	4b0a      	ldr	r3, [pc, #40]	; (27c4 <xQueueReceive+0x134>)
    279a:	4798      	blx	r3
    279c:	e7c9      	b.n	2732 <xQueueReceive+0xa2>
			prvUnlockQueue(pxQueue);
    279e:	0020      	movs	r0, r4
    27a0:	4b0b      	ldr	r3, [pc, #44]	; (27d0 <xQueueReceive+0x140>)
    27a2:	4798      	blx	r3
			(void)xTaskResumeAll();
    27a4:	4b0b      	ldr	r3, [pc, #44]	; (27d4 <xQueueReceive+0x144>)
    27a6:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    27a8:	0020      	movs	r0, r4
    27aa:	4b0e      	ldr	r3, [pc, #56]	; (27e4 <xQueueReceive+0x154>)
    27ac:	4798      	blx	r3
    27ae:	2800      	cmp	r0, #0
    27b0:	d0bf      	beq.n	2732 <xQueueReceive+0xa2>
				return errQUEUE_EMPTY;
    27b2:	2000      	movs	r0, #0
    27b4:	e7a5      	b.n	2702 <xQueueReceive+0x72>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	00002f85 	.word	0x00002f85
    27bc:	00002259 	.word	0x00002259
    27c0:	00002e79 	.word	0x00002e79
    27c4:	00001fcd 	.word	0x00001fcd
    27c8:	00001ffd 	.word	0x00001ffd
    27cc:	00002ef9 	.word	0x00002ef9
    27d0:	00002281 	.word	0x00002281
    27d4:	00002ca5 	.word	0x00002ca5
    27d8:	00001fe5 	.word	0x00001fe5
    27dc:	00002b81 	.word	0x00002b81
    27e0:	00002f09 	.word	0x00002f09
    27e4:	00002141 	.word	0x00002141
    27e8:	00002e15 	.word	0x00002e15

000027ec <vQueueWaitForMessageRestricted>:
{
    27ec:	b570      	push	{r4, r5, r6, lr}
    27ee:	0004      	movs	r4, r0
    27f0:	000d      	movs	r5, r1
    27f2:	0016      	movs	r6, r2
	prvLockQueue(pxQueue);
    27f4:	4b11      	ldr	r3, [pc, #68]	; (283c <vQueueWaitForMessageRestricted+0x50>)
    27f6:	4798      	blx	r3
    27f8:	2344      	movs	r3, #68	; 0x44
    27fa:	5ce3      	ldrb	r3, [r4, r3]
    27fc:	b25b      	sxtb	r3, r3
    27fe:	3301      	adds	r3, #1
    2800:	d00d      	beq.n	281e <vQueueWaitForMessageRestricted+0x32>
    2802:	2345      	movs	r3, #69	; 0x45
    2804:	5ce3      	ldrb	r3, [r4, r3]
    2806:	b25b      	sxtb	r3, r3
    2808:	3301      	adds	r3, #1
    280a:	d00c      	beq.n	2826 <vQueueWaitForMessageRestricted+0x3a>
    280c:	4b0c      	ldr	r3, [pc, #48]	; (2840 <vQueueWaitForMessageRestricted+0x54>)
    280e:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    2810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2812:	2b00      	cmp	r3, #0
    2814:	d00b      	beq.n	282e <vQueueWaitForMessageRestricted+0x42>
	prvUnlockQueue(pxQueue);
    2816:	0020      	movs	r0, r4
    2818:	4b0a      	ldr	r3, [pc, #40]	; (2844 <vQueueWaitForMessageRestricted+0x58>)
    281a:	4798      	blx	r3
}
    281c:	bd70      	pop	{r4, r5, r6, pc}
	prvLockQueue(pxQueue);
    281e:	2200      	movs	r2, #0
    2820:	2344      	movs	r3, #68	; 0x44
    2822:	54e2      	strb	r2, [r4, r3]
    2824:	e7ed      	b.n	2802 <vQueueWaitForMessageRestricted+0x16>
    2826:	2200      	movs	r2, #0
    2828:	2345      	movs	r3, #69	; 0x45
    282a:	54e2      	strb	r2, [r4, r3]
    282c:	e7ee      	b.n	280c <vQueueWaitForMessageRestricted+0x20>
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    282e:	0020      	movs	r0, r4
    2830:	3024      	adds	r0, #36	; 0x24
    2832:	0032      	movs	r2, r6
    2834:	0029      	movs	r1, r5
    2836:	4b04      	ldr	r3, [pc, #16]	; (2848 <vQueueWaitForMessageRestricted+0x5c>)
    2838:	4798      	blx	r3
    283a:	e7ec      	b.n	2816 <vQueueWaitForMessageRestricted+0x2a>
    283c:	00001fe5 	.word	0x00001fe5
    2840:	00001ffd 	.word	0x00001ffd
    2844:	00002281 	.word	0x00002281
    2848:	00002e41 	.word	0x00002e41

0000284c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    284c:	4b0a      	ldr	r3, [pc, #40]	; (2878 <prvResetNextTaskUnblockTime+0x2c>)
    284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	d109      	bne.n	286a <prvResetNextTaskUnblockTime+0x1e>
    2856:	3301      	adds	r3, #1
    2858:	2b00      	cmp	r3, #0
    285a:	d108      	bne.n	286e <prvResetNextTaskUnblockTime+0x22>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    285c:	4b06      	ldr	r3, [pc, #24]	; (2878 <prvResetNextTaskUnblockTime+0x2c>)
    285e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2860:	68d2      	ldr	r2, [r2, #12]
    2862:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    2864:	6852      	ldr	r2, [r2, #4]
    2866:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
    2868:	4770      	bx	lr
	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    286a:	2300      	movs	r3, #0
    286c:	e7f4      	b.n	2858 <prvResetNextTaskUnblockTime+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
    286e:	2201      	movs	r2, #1
    2870:	4252      	negs	r2, r2
    2872:	4b01      	ldr	r3, [pc, #4]	; (2878 <prvResetNextTaskUnblockTime+0x2c>)
    2874:	62da      	str	r2, [r3, #44]	; 0x2c
    2876:	e7f7      	b.n	2868 <prvResetNextTaskUnblockTime+0x1c>
    2878:	200027ac 	.word	0x200027ac

0000287c <prvInitialiseNewTask>:
{
    287c:	b5f0      	push	{r4, r5, r6, r7, lr}
    287e:	46c6      	mov	lr, r8
    2880:	b500      	push	{lr}
    2882:	b082      	sub	sp, #8
    2884:	9000      	str	r0, [sp, #0]
    2886:	000f      	movs	r7, r1
    2888:	0015      	movs	r5, r2
    288a:	9301      	str	r3, [sp, #4]
    288c:	9c08      	ldr	r4, [sp, #32]
    288e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    2890:	0092      	lsls	r2, r2, #2
    2892:	21a5      	movs	r1, #165	; 0xa5
    2894:	6b30      	ldr	r0, [r6, #48]	; 0x30
    2896:	4b1f      	ldr	r3, [pc, #124]	; (2914 <prvInitialiseNewTask+0x98>)
    2898:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    289a:	4b1f      	ldr	r3, [pc, #124]	; (2918 <prvInitialiseNewTask+0x9c>)
    289c:	18eb      	adds	r3, r5, r3
    289e:	009b      	lsls	r3, r3, #2
    28a0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    28a2:	4694      	mov	ip, r2
    28a4:	4463      	add	r3, ip
		                      & (~(
    28a6:	2207      	movs	r2, #7
    28a8:	4393      	bics	r3, r2
    28aa:	4698      	mov	r8, r3
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    28ac:	2300      	movs	r3, #0
    28ae:	2b07      	cmp	r3, #7
    28b0:	d809      	bhi.n	28c6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pcTaskName[x] = pcName[x];
    28b2:	18f9      	adds	r1, r7, r3
    28b4:	7808      	ldrb	r0, [r1, #0]
    28b6:	18f2      	adds	r2, r6, r3
    28b8:	3234      	adds	r2, #52	; 0x34
    28ba:	7010      	strb	r0, [r2, #0]
		if (pcName[x] == 0x00) {
    28bc:	780a      	ldrb	r2, [r1, #0]
    28be:	2a00      	cmp	r2, #0
    28c0:	d001      	beq.n	28c6 <prvInitialiseNewTask+0x4a>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    28c2:	3301      	adds	r3, #1
    28c4:	e7f3      	b.n	28ae <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    28c6:	2200      	movs	r2, #0
    28c8:	233b      	movs	r3, #59	; 0x3b
    28ca:	54f2      	strb	r2, [r6, r3]
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    28cc:	2c04      	cmp	r4, #4
    28ce:	d900      	bls.n	28d2 <prvInitialiseNewTask+0x56>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    28d0:	2404      	movs	r4, #4
	pxNewTCB->uxPriority = uxPriority;
    28d2:	62f4      	str	r4, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    28d4:	6474      	str	r4, [r6, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    28d6:	2500      	movs	r5, #0
    28d8:	64b5      	str	r5, [r6, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    28da:	1d30      	adds	r0, r6, #4
    28dc:	4f0f      	ldr	r7, [pc, #60]	; (291c <prvInitialiseNewTask+0xa0>)
    28de:	47b8      	blx	r7
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    28e0:	0030      	movs	r0, r6
    28e2:	3018      	adds	r0, #24
    28e4:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    28e6:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE(
    28e8:	2305      	movs	r3, #5
    28ea:	1b1c      	subs	r4, r3, r4
    28ec:	61b4      	str	r4, [r6, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    28ee:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    28f0:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    28f2:	334b      	adds	r3, #75	; 0x4b
    28f4:	54f5      	strb	r5, [r6, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    28f6:	9a01      	ldr	r2, [sp, #4]
    28f8:	9900      	ldr	r1, [sp, #0]
    28fa:	4640      	mov	r0, r8
    28fc:	4b08      	ldr	r3, [pc, #32]	; (2920 <prvInitialiseNewTask+0xa4>)
    28fe:	4798      	blx	r3
    2900:	6030      	str	r0, [r6, #0]
	if ((void *)pxCreatedTask != NULL) {
    2902:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2904:	2b00      	cmp	r3, #0
    2906:	d000      	beq.n	290a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    2908:	601e      	str	r6, [r3, #0]
}
    290a:	b002      	add	sp, #8
    290c:	bc04      	pop	{r2}
    290e:	4690      	mov	r8, r2
    2910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	000034af 	.word	0x000034af
    2918:	3fffffff 	.word	0x3fffffff
    291c:	00001e63 	.word	0x00001e63
    2920:	00001f5d 	.word	0x00001f5d

00002924 <prvIdleTask>:
{
    2924:	b510      	push	{r4, lr}
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    2926:	4b03      	ldr	r3, [pc, #12]	; (2934 <prvIdleTask+0x10>)
    2928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    292a:	2b01      	cmp	r3, #1
    292c:	d9fb      	bls.n	2926 <prvIdleTask+0x2>
				taskYIELD();
    292e:	4b02      	ldr	r3, [pc, #8]	; (2938 <prvIdleTask+0x14>)
    2930:	4798      	blx	r3
    2932:	e7f8      	b.n	2926 <prvIdleTask+0x2>
    2934:	200027ac 	.word	0x200027ac
    2938:	00001fcd 	.word	0x00001fcd

0000293c <prvInitialiseTaskLists>:
{
    293c:	b5f0      	push	{r4, r5, r6, r7, lr}
    293e:	46c6      	mov	lr, r8
    2940:	b500      	push	{lr}
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    2942:	2400      	movs	r4, #0
    2944:	e008      	b.n	2958 <prvInitialiseTaskLists+0x1c>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    2946:	00a3      	lsls	r3, r4, #2
    2948:	191b      	adds	r3, r3, r4
    294a:	009a      	lsls	r2, r3, #2
    294c:	480f      	ldr	r0, [pc, #60]	; (298c <prvInitialiseTaskLists+0x50>)
    294e:	3030      	adds	r0, #48	; 0x30
    2950:	1880      	adds	r0, r0, r2
    2952:	4b0f      	ldr	r3, [pc, #60]	; (2990 <prvInitialiseTaskLists+0x54>)
    2954:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    2956:	3401      	adds	r4, #1
    2958:	2c04      	cmp	r4, #4
    295a:	d9f4      	bls.n	2946 <prvInitialiseTaskLists+0xa>
	vListInitialise(&xDelayedTaskList1);
    295c:	4d0d      	ldr	r5, [pc, #52]	; (2994 <prvInitialiseTaskLists+0x58>)
    295e:	2314      	movs	r3, #20
    2960:	4698      	mov	r8, r3
    2962:	44a8      	add	r8, r5
    2964:	4640      	mov	r0, r8
    2966:	4c0a      	ldr	r4, [pc, #40]	; (2990 <prvInitialiseTaskLists+0x54>)
    2968:	47a0      	blx	r4
	vListInitialise(&xDelayedTaskList2);
    296a:	002f      	movs	r7, r5
    296c:	3728      	adds	r7, #40	; 0x28
    296e:	0038      	movs	r0, r7
    2970:	47a0      	blx	r4
	vListInitialise(&xPendingReadyList);
    2972:	4e06      	ldr	r6, [pc, #24]	; (298c <prvInitialiseTaskLists+0x50>)
    2974:	0030      	movs	r0, r6
    2976:	3014      	adds	r0, #20
    2978:	47a0      	blx	r4
		vListInitialise(&xSuspendedTaskList);
    297a:	0030      	movs	r0, r6
    297c:	47a0      	blx	r4
	pxDelayedTaskList         = &xDelayedTaskList1;
    297e:	4643      	mov	r3, r8
    2980:	62b3      	str	r3, [r6, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2982:	63ef      	str	r7, [r5, #60]	; 0x3c
}
    2984:	bc04      	pop	{r2}
    2986:	4690      	mov	r8, r2
    2988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	200027ac 	.word	0x200027ac
    2990:	00001e4d 	.word	0x00001e4d
    2994:	2000282c 	.word	0x2000282c

00002998 <prvAddNewTaskToReadyList>:
{
    2998:	b510      	push	{r4, lr}
    299a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
    299c:	4b1f      	ldr	r3, [pc, #124]	; (2a1c <prvAddNewTaskToReadyList+0x84>)
    299e:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    29a0:	4b1f      	ldr	r3, [pc, #124]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    29a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    29a4:	3201      	adds	r2, #1
    29a6:	641a      	str	r2, [r3, #64]	; 0x40
		if (pxCurrentTCB == NULL) {
    29a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    29aa:	2b00      	cmp	r3, #0
    29ac:	d02b      	beq.n	2a06 <prvAddNewTaskToReadyList+0x6e>
			if (xSchedulerRunning == pdFALSE) {
    29ae:	4b1c      	ldr	r3, [pc, #112]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    29b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    29b2:	2b00      	cmp	r3, #0
    29b4:	d107      	bne.n	29c6 <prvAddNewTaskToReadyList+0x2e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    29b6:	4b1a      	ldr	r3, [pc, #104]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    29b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    29ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    29bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    29be:	4293      	cmp	r3, r2
    29c0:	d801      	bhi.n	29c6 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
    29c2:	4b17      	ldr	r3, [pc, #92]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    29c4:	645c      	str	r4, [r3, #68]	; 0x44
		uxTaskNumber++;
    29c6:	4916      	ldr	r1, [pc, #88]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    29c8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    29ca:	3301      	adds	r3, #1
    29cc:	64cb      	str	r3, [r1, #76]	; 0x4c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    29ce:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    29d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    29d2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    29d4:	429a      	cmp	r2, r3
    29d6:	d900      	bls.n	29da <prvAddNewTaskToReadyList+0x42>
    29d8:	650a      	str	r2, [r1, #80]	; 0x50
    29da:	1d21      	adds	r1, r4, #4
    29dc:	0093      	lsls	r3, r2, #2
    29de:	189b      	adds	r3, r3, r2
    29e0:	009a      	lsls	r2, r3, #2
    29e2:	4810      	ldr	r0, [pc, #64]	; (2a24 <prvAddNewTaskToReadyList+0x8c>)
    29e4:	3030      	adds	r0, #48	; 0x30
    29e6:	1880      	adds	r0, r0, r2
    29e8:	4b0f      	ldr	r3, [pc, #60]	; (2a28 <prvAddNewTaskToReadyList+0x90>)
    29ea:	4798      	blx	r3
	taskEXIT_CRITICAL();
    29ec:	4b0f      	ldr	r3, [pc, #60]	; (2a2c <prvAddNewTaskToReadyList+0x94>)
    29ee:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    29f0:	4b0b      	ldr	r3, [pc, #44]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    29f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    29f4:	2b00      	cmp	r3, #0
    29f6:	d005      	beq.n	2a04 <prvAddNewTaskToReadyList+0x6c>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    29f8:	4b09      	ldr	r3, [pc, #36]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    29fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    29fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2a00:	429a      	cmp	r2, r3
    2a02:	d308      	bcc.n	2a16 <prvAddNewTaskToReadyList+0x7e>
}
    2a04:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
    2a06:	4b06      	ldr	r3, [pc, #24]	; (2a20 <prvAddNewTaskToReadyList+0x88>)
    2a08:	645c      	str	r4, [r3, #68]	; 0x44
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    2a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a0c:	2b01      	cmp	r3, #1
    2a0e:	d1da      	bne.n	29c6 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
    2a10:	4b07      	ldr	r3, [pc, #28]	; (2a30 <prvAddNewTaskToReadyList+0x98>)
    2a12:	4798      	blx	r3
    2a14:	e7d7      	b.n	29c6 <prvAddNewTaskToReadyList+0x2e>
			taskYIELD_IF_USING_PREEMPTION();
    2a16:	4b07      	ldr	r3, [pc, #28]	; (2a34 <prvAddNewTaskToReadyList+0x9c>)
    2a18:	4798      	blx	r3
}
    2a1a:	e7f3      	b.n	2a04 <prvAddNewTaskToReadyList+0x6c>
    2a1c:	00001fe5 	.word	0x00001fe5
    2a20:	2000282c 	.word	0x2000282c
    2a24:	200027ac 	.word	0x200027ac
    2a28:	00001e69 	.word	0x00001e69
    2a2c:	00001ffd 	.word	0x00001ffd
    2a30:	0000293d 	.word	0x0000293d
    2a34:	00001fcd 	.word	0x00001fcd

00002a38 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    2a38:	b570      	push	{r4, r5, r6, lr}
    2a3a:	0004      	movs	r4, r0
    2a3c:	000d      	movs	r5, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    2a3e:	4b15      	ldr	r3, [pc, #84]	; (2a94 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a40:	6d5e      	ldr	r6, [r3, #84]	; 0x54
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    2a42:	6c58      	ldr	r0, [r3, #68]	; 0x44
    2a44:	3004      	adds	r0, #4
    2a46:	4b14      	ldr	r3, [pc, #80]	; (2a98 <prvAddCurrentTaskToDelayedList+0x60>)
    2a48:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2a4a:	1c63      	adds	r3, r4, #1
    2a4c:	d012      	beq.n	2a74 <prvAddCurrentTaskToDelayedList+0x3c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2a4e:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    2a50:	4b10      	ldr	r3, [pc, #64]	; (2a94 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2a54:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    2a56:	42a6      	cmp	r6, r4
    2a58:	d815      	bhi.n	2a86 <prvAddCurrentTaskToDelayedList+0x4e>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2a5a:	4d10      	ldr	r5, [pc, #64]	; (2a9c <prvAddCurrentTaskToDelayedList+0x64>)
    2a5c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2a5e:	4b0d      	ldr	r3, [pc, #52]	; (2a94 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a60:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2a62:	3104      	adds	r1, #4
    2a64:	4b0e      	ldr	r3, [pc, #56]	; (2aa0 <prvAddCurrentTaskToDelayedList+0x68>)
    2a66:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    2a68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2a6a:	429c      	cmp	r4, r3
    2a6c:	d211      	bcs.n	2a92 <prvAddCurrentTaskToDelayedList+0x5a>
					xNextTaskUnblockTime = xTimeToWake;
    2a6e:	4b0b      	ldr	r3, [pc, #44]	; (2a9c <prvAddCurrentTaskToDelayedList+0x64>)
    2a70:	62dc      	str	r4, [r3, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		(void)xCanBlockIndefinitely;
	}
#endif /* INCLUDE_vTaskSuspend */
}
    2a72:	e00e      	b.n	2a92 <prvAddCurrentTaskToDelayedList+0x5a>
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2a74:	2d00      	cmp	r5, #0
    2a76:	d0ea      	beq.n	2a4e <prvAddCurrentTaskToDelayedList+0x16>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    2a78:	4b06      	ldr	r3, [pc, #24]	; (2a94 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2a7c:	3104      	adds	r1, #4
    2a7e:	4807      	ldr	r0, [pc, #28]	; (2a9c <prvAddCurrentTaskToDelayedList+0x64>)
    2a80:	4b08      	ldr	r3, [pc, #32]	; (2aa4 <prvAddCurrentTaskToDelayedList+0x6c>)
    2a82:	4798      	blx	r3
    2a84:	e005      	b.n	2a92 <prvAddCurrentTaskToDelayedList+0x5a>
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2a86:	4b03      	ldr	r3, [pc, #12]	; (2a94 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2a8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2a8c:	3104      	adds	r1, #4
    2a8e:	4b04      	ldr	r3, [pc, #16]	; (2aa0 <prvAddCurrentTaskToDelayedList+0x68>)
    2a90:	4798      	blx	r3
}
    2a92:	bd70      	pop	{r4, r5, r6, pc}
    2a94:	2000282c 	.word	0x2000282c
    2a98:	00001eb1 	.word	0x00001eb1
    2a9c:	200027ac 	.word	0x200027ac
    2aa0:	00001e81 	.word	0x00001e81
    2aa4:	00001e69 	.word	0x00001e69

00002aa8 <xTaskCreate>:
{
    2aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aaa:	b087      	sub	sp, #28
    2aac:	9004      	str	r0, [sp, #16]
    2aae:	9105      	str	r1, [sp, #20]
    2ab0:	0014      	movs	r4, r2
    2ab2:	001f      	movs	r7, r3
		pxStack = (StackType_t *)pvPortMalloc(
    2ab4:	0090      	lsls	r0, r2, #2
    2ab6:	4b14      	ldr	r3, [pc, #80]	; (2b08 <xTaskCreate+0x60>)
    2ab8:	4798      	blx	r3
    2aba:	1e06      	subs	r6, r0, #0
		if (pxStack != NULL) {
    2abc:	d01e      	beq.n	2afc <xTaskCreate+0x54>
			pxNewTCB = (TCB_t *)pvPortMalloc(
    2abe:	2054      	movs	r0, #84	; 0x54
    2ac0:	4b11      	ldr	r3, [pc, #68]	; (2b08 <xTaskCreate+0x60>)
    2ac2:	4798      	blx	r3
    2ac4:	1e05      	subs	r5, r0, #0
			if (pxNewTCB != NULL) {
    2ac6:	d015      	beq.n	2af4 <xTaskCreate+0x4c>
				pxNewTCB->pxStack = pxStack;
    2ac8:	6306      	str	r6, [r0, #48]	; 0x30
	if (pxNewTCB != NULL) {
    2aca:	2d00      	cmp	r5, #0
    2acc:	d018      	beq.n	2b00 <xTaskCreate+0x58>
		prvInitialiseNewTask(
    2ace:	2300      	movs	r3, #0
    2ad0:	9303      	str	r3, [sp, #12]
    2ad2:	9502      	str	r5, [sp, #8]
    2ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2ad6:	9301      	str	r3, [sp, #4]
    2ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ada:	9300      	str	r3, [sp, #0]
    2adc:	003b      	movs	r3, r7
    2ade:	0022      	movs	r2, r4
    2ae0:	9905      	ldr	r1, [sp, #20]
    2ae2:	9804      	ldr	r0, [sp, #16]
    2ae4:	4c09      	ldr	r4, [pc, #36]	; (2b0c <xTaskCreate+0x64>)
    2ae6:	47a0      	blx	r4
		prvAddNewTaskToReadyList(pxNewTCB);
    2ae8:	0028      	movs	r0, r5
    2aea:	4b09      	ldr	r3, [pc, #36]	; (2b10 <xTaskCreate+0x68>)
    2aec:	4798      	blx	r3
		xReturn = pdPASS;
    2aee:	2001      	movs	r0, #1
}
    2af0:	b007      	add	sp, #28
    2af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree(pxStack);
    2af4:	0030      	movs	r0, r6
    2af6:	4b07      	ldr	r3, [pc, #28]	; (2b14 <xTaskCreate+0x6c>)
    2af8:	4798      	blx	r3
    2afa:	e7e6      	b.n	2aca <xTaskCreate+0x22>
			pxNewTCB = NULL;
    2afc:	2500      	movs	r5, #0
    2afe:	e7e4      	b.n	2aca <xTaskCreate+0x22>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2b00:	2001      	movs	r0, #1
    2b02:	4240      	negs	r0, r0
	return xReturn;
    2b04:	e7f4      	b.n	2af0 <xTaskCreate+0x48>
    2b06:	46c0      	nop			; (mov r8, r8)
    2b08:	000020a5 	.word	0x000020a5
    2b0c:	0000287d 	.word	0x0000287d
    2b10:	00002999 	.word	0x00002999
    2b14:	0000210d 	.word	0x0000210d

00002b18 <vTaskStartScheduler>:
{
    2b18:	b510      	push	{r4, lr}
    2b1a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    2b1c:	4b11      	ldr	r3, [pc, #68]	; (2b64 <vTaskStartScheduler+0x4c>)
    2b1e:	335c      	adds	r3, #92	; 0x5c
    2b20:	9301      	str	r3, [sp, #4]
    2b22:	2300      	movs	r3, #0
    2b24:	9300      	str	r3, [sp, #0]
    2b26:	2240      	movs	r2, #64	; 0x40
    2b28:	490f      	ldr	r1, [pc, #60]	; (2b68 <vTaskStartScheduler+0x50>)
    2b2a:	4810      	ldr	r0, [pc, #64]	; (2b6c <vTaskStartScheduler+0x54>)
    2b2c:	4c10      	ldr	r4, [pc, #64]	; (2b70 <vTaskStartScheduler+0x58>)
    2b2e:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    2b30:	2801      	cmp	r0, #1
    2b32:	d005      	beq.n	2b40 <vTaskStartScheduler+0x28>
	if (xReturn == pdPASS) {
    2b34:	2801      	cmp	r0, #1
    2b36:	d006      	beq.n	2b46 <vTaskStartScheduler+0x2e>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    2b38:	1c43      	adds	r3, r0, #1
    2b3a:	d011      	beq.n	2b60 <vTaskStartScheduler+0x48>
}
    2b3c:	b002      	add	sp, #8
    2b3e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    2b40:	4b0c      	ldr	r3, [pc, #48]	; (2b74 <vTaskStartScheduler+0x5c>)
    2b42:	4798      	blx	r3
    2b44:	e7f6      	b.n	2b34 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    2b46:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    2b48:	2201      	movs	r2, #1
    2b4a:	4252      	negs	r2, r2
    2b4c:	4b0a      	ldr	r3, [pc, #40]	; (2b78 <vTaskStartScheduler+0x60>)
    2b4e:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning    = pdTRUE;
    2b50:	4b04      	ldr	r3, [pc, #16]	; (2b64 <vTaskStartScheduler+0x4c>)
    2b52:	3202      	adds	r2, #2
    2b54:	649a      	str	r2, [r3, #72]	; 0x48
		xTickCount           = (TickType_t)0U;
    2b56:	2200      	movs	r2, #0
    2b58:	655a      	str	r2, [r3, #84]	; 0x54
		if (xPortStartScheduler() != pdFALSE) {
    2b5a:	4b08      	ldr	r3, [pc, #32]	; (2b7c <vTaskStartScheduler+0x64>)
    2b5c:	4798      	blx	r3
    2b5e:	e7ed      	b.n	2b3c <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    2b60:	b672      	cpsid	i
    2b62:	e7fe      	b.n	2b62 <vTaskStartScheduler+0x4a>
    2b64:	2000282c 	.word	0x2000282c
    2b68:	00003720 	.word	0x00003720
    2b6c:	00002925 	.word	0x00002925
    2b70:	00002aa9 	.word	0x00002aa9
    2b74:	000030d9 	.word	0x000030d9
    2b78:	200027ac 	.word	0x200027ac
    2b7c:	00001f81 	.word	0x00001f81

00002b80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2b80:	4a02      	ldr	r2, [pc, #8]	; (2b8c <vTaskSuspendAll+0xc>)
    2b82:	6d93      	ldr	r3, [r2, #88]	; 0x58
    2b84:	3301      	adds	r3, #1
    2b86:	6593      	str	r3, [r2, #88]	; 0x58
}
    2b88:	4770      	bx	lr
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	2000282c 	.word	0x2000282c

00002b90 <xTaskGetTickCount>:
		xTicks = xTickCount;
    2b90:	4b01      	ldr	r3, [pc, #4]	; (2b98 <xTaskGetTickCount+0x8>)
    2b92:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
    2b94:	4770      	bx	lr
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	2000282c 	.word	0x2000282c

00002b9c <xTaskIncrementTick>:
{
    2b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2b9e:	4b3c      	ldr	r3, [pc, #240]	; (2c90 <xTaskIncrementTick+0xf4>)
    2ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d167      	bne.n	2c76 <xTaskIncrementTick+0xda>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    2ba6:	4b3a      	ldr	r3, [pc, #232]	; (2c90 <xTaskIncrementTick+0xf4>)
    2ba8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
    2baa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    2bac:	655d      	str	r5, [r3, #84]	; 0x54
		if (xConstTickCount
    2bae:	2d00      	cmp	r5, #0
    2bb0:	d111      	bne.n	2bd6 <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
    2bb2:	4b38      	ldr	r3, [pc, #224]	; (2c94 <xTaskIncrementTick+0xf8>)
    2bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d001      	beq.n	2bc0 <xTaskIncrementTick+0x24>
    2bbc:	b672      	cpsid	i
    2bbe:	e7fe      	b.n	2bbe <xTaskIncrementTick+0x22>
    2bc0:	4a34      	ldr	r2, [pc, #208]	; (2c94 <xTaskIncrementTick+0xf8>)
    2bc2:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2bc4:	4b32      	ldr	r3, [pc, #200]	; (2c90 <xTaskIncrementTick+0xf4>)
    2bc6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2bc8:	6290      	str	r0, [r2, #40]	; 0x28
    2bca:	63d9      	str	r1, [r3, #60]	; 0x3c
    2bcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2bce:	3201      	adds	r2, #1
    2bd0:	661a      	str	r2, [r3, #96]	; 0x60
    2bd2:	4b31      	ldr	r3, [pc, #196]	; (2c98 <xTaskIncrementTick+0xfc>)
    2bd4:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    2bd6:	4b2f      	ldr	r3, [pc, #188]	; (2c94 <xTaskIncrementTick+0xf8>)
    2bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bda:	429d      	cmp	r5, r3
    2bdc:	d23f      	bcs.n	2c5e <xTaskIncrementTick+0xc2>
	BaseType_t xSwitchRequired = pdFALSE;
    2bde:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    2be0:	4b2b      	ldr	r3, [pc, #172]	; (2c90 <xTaskIncrementTick+0xf4>)
    2be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2be6:	0093      	lsls	r3, r2, #2
    2be8:	189b      	adds	r3, r3, r2
    2bea:	009a      	lsls	r2, r3, #2
    2bec:	4b29      	ldr	r3, [pc, #164]	; (2c94 <xTaskIncrementTick+0xf8>)
    2bee:	189b      	adds	r3, r3, r2
    2bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2bf2:	2b01      	cmp	r3, #1
    2bf4:	d944      	bls.n	2c80 <xTaskIncrementTick+0xe4>
				xSwitchRequired = pdTRUE;
    2bf6:	2401      	movs	r4, #1
    2bf8:	e042      	b.n	2c80 <xTaskIncrementTick+0xe4>
							xSwitchRequired = pdTRUE;
    2bfa:	2401      	movs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2bfc:	4b25      	ldr	r3, [pc, #148]	; (2c94 <xTaskIncrementTick+0xf8>)
    2bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c00:	681b      	ldr	r3, [r3, #0]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d02d      	beq.n	2c62 <xTaskIncrementTick+0xc6>
    2c06:	2300      	movs	r3, #0
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d12c      	bne.n	2c66 <xTaskIncrementTick+0xca>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2c0c:	4b21      	ldr	r3, [pc, #132]	; (2c94 <xTaskIncrementTick+0xf8>)
    2c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c10:	68db      	ldr	r3, [r3, #12]
    2c12:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    2c14:	6873      	ldr	r3, [r6, #4]
					if (xConstTickCount < xItemValue) {
    2c16:	429d      	cmp	r5, r3
    2c18:	d32a      	bcc.n	2c70 <xTaskIncrementTick+0xd4>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2c1a:	1d37      	adds	r7, r6, #4
    2c1c:	0038      	movs	r0, r7
    2c1e:	4b1f      	ldr	r3, [pc, #124]	; (2c9c <xTaskIncrementTick+0x100>)
    2c20:	4798      	blx	r3
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    2c22:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2c24:	2b00      	cmp	r3, #0
    2c26:	d003      	beq.n	2c30 <xTaskIncrementTick+0x94>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    2c28:	0030      	movs	r0, r6
    2c2a:	3018      	adds	r0, #24
    2c2c:	4b1b      	ldr	r3, [pc, #108]	; (2c9c <xTaskIncrementTick+0x100>)
    2c2e:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    2c30:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2c32:	4b17      	ldr	r3, [pc, #92]	; (2c90 <xTaskIncrementTick+0xf4>)
    2c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2c36:	429a      	cmp	r2, r3
    2c38:	d901      	bls.n	2c3e <xTaskIncrementTick+0xa2>
    2c3a:	4b15      	ldr	r3, [pc, #84]	; (2c90 <xTaskIncrementTick+0xf4>)
    2c3c:	651a      	str	r2, [r3, #80]	; 0x50
    2c3e:	0093      	lsls	r3, r2, #2
    2c40:	189b      	adds	r3, r3, r2
    2c42:	009a      	lsls	r2, r3, #2
    2c44:	4813      	ldr	r0, [pc, #76]	; (2c94 <xTaskIncrementTick+0xf8>)
    2c46:	3030      	adds	r0, #48	; 0x30
    2c48:	1880      	adds	r0, r0, r2
    2c4a:	0039      	movs	r1, r7
    2c4c:	4b14      	ldr	r3, [pc, #80]	; (2ca0 <xTaskIncrementTick+0x104>)
    2c4e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2c50:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2c52:	4b0f      	ldr	r3, [pc, #60]	; (2c90 <xTaskIncrementTick+0xf4>)
    2c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c58:	429a      	cmp	r2, r3
    2c5a:	d2ce      	bcs.n	2bfa <xTaskIncrementTick+0x5e>
    2c5c:	e7ce      	b.n	2bfc <xTaskIncrementTick+0x60>
    2c5e:	2400      	movs	r4, #0
    2c60:	e7cc      	b.n	2bfc <xTaskIncrementTick+0x60>
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2c62:	3301      	adds	r3, #1
    2c64:	e7d0      	b.n	2c08 <xTaskIncrementTick+0x6c>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2c66:	2201      	movs	r2, #1
    2c68:	4252      	negs	r2, r2
    2c6a:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <xTaskIncrementTick+0xf8>)
    2c6c:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
    2c6e:	e7b7      	b.n	2be0 <xTaskIncrementTick+0x44>
						xNextTaskUnblockTime = xItemValue;
    2c70:	4a08      	ldr	r2, [pc, #32]	; (2c94 <xTaskIncrementTick+0xf8>)
    2c72:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
    2c74:	e7b4      	b.n	2be0 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
    2c76:	4a06      	ldr	r2, [pc, #24]	; (2c90 <xTaskIncrementTick+0xf4>)
    2c78:	6e53      	ldr	r3, [r2, #100]	; 0x64
    2c7a:	3301      	adds	r3, #1
    2c7c:	6653      	str	r3, [r2, #100]	; 0x64
	BaseType_t xSwitchRequired = pdFALSE;
    2c7e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    2c80:	4b03      	ldr	r3, [pc, #12]	; (2c90 <xTaskIncrementTick+0xf4>)
    2c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2c84:	2b00      	cmp	r3, #0
    2c86:	d000      	beq.n	2c8a <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
    2c88:	2401      	movs	r4, #1
}
    2c8a:	0020      	movs	r0, r4
    2c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	2000282c 	.word	0x2000282c
    2c94:	200027ac 	.word	0x200027ac
    2c98:	0000284d 	.word	0x0000284d
    2c9c:	00001eb1 	.word	0x00001eb1
    2ca0:	00001e69 	.word	0x00001e69

00002ca4 <xTaskResumeAll>:
{
    2ca4:	b570      	push	{r4, r5, r6, lr}
	configASSERT(uxSchedulerSuspended);
    2ca6:	4b32      	ldr	r3, [pc, #200]	; (2d70 <xTaskResumeAll+0xcc>)
    2ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2caa:	2b00      	cmp	r3, #0
    2cac:	d101      	bne.n	2cb2 <xTaskResumeAll+0xe>
    2cae:	b672      	cpsid	i
    2cb0:	e7fe      	b.n	2cb0 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    2cb2:	4b30      	ldr	r3, [pc, #192]	; (2d74 <xTaskResumeAll+0xd0>)
    2cb4:	4798      	blx	r3
		--uxSchedulerSuspended;
    2cb6:	4b2e      	ldr	r3, [pc, #184]	; (2d70 <xTaskResumeAll+0xcc>)
    2cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    2cba:	3a01      	subs	r2, #1
    2cbc:	659a      	str	r2, [r3, #88]	; 0x58
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d150      	bne.n	2d66 <xTaskResumeAll+0xc2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    2cc4:	4b2a      	ldr	r3, [pc, #168]	; (2d70 <xTaskResumeAll+0xcc>)
    2cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d104      	bne.n	2cd6 <xTaskResumeAll+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
    2ccc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    2cce:	4b2a      	ldr	r3, [pc, #168]	; (2d78 <xTaskResumeAll+0xd4>)
    2cd0:	4798      	blx	r3
}
    2cd2:	0020      	movs	r0, r4
    2cd4:	bd70      	pop	{r4, r5, r6, pc}
    2cd6:	2400      	movs	r4, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    2cd8:	4b28      	ldr	r3, [pc, #160]	; (2d7c <xTaskResumeAll+0xd8>)
    2cda:	695b      	ldr	r3, [r3, #20]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d023      	beq.n	2d28 <xTaskResumeAll+0x84>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    2ce0:	4b26      	ldr	r3, [pc, #152]	; (2d7c <xTaskResumeAll+0xd8>)
    2ce2:	6a1b      	ldr	r3, [r3, #32]
    2ce4:	68dc      	ldr	r4, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    2ce6:	0020      	movs	r0, r4
    2ce8:	3018      	adds	r0, #24
    2cea:	4e25      	ldr	r6, [pc, #148]	; (2d80 <xTaskResumeAll+0xdc>)
    2cec:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2cee:	1d25      	adds	r5, r4, #4
    2cf0:	0028      	movs	r0, r5
    2cf2:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    2cf4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2cf6:	4b1e      	ldr	r3, [pc, #120]	; (2d70 <xTaskResumeAll+0xcc>)
    2cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2cfa:	429a      	cmp	r2, r3
    2cfc:	d901      	bls.n	2d02 <xTaskResumeAll+0x5e>
    2cfe:	4b1c      	ldr	r3, [pc, #112]	; (2d70 <xTaskResumeAll+0xcc>)
    2d00:	651a      	str	r2, [r3, #80]	; 0x50
    2d02:	0093      	lsls	r3, r2, #2
    2d04:	189b      	adds	r3, r3, r2
    2d06:	009a      	lsls	r2, r3, #2
    2d08:	481c      	ldr	r0, [pc, #112]	; (2d7c <xTaskResumeAll+0xd8>)
    2d0a:	3030      	adds	r0, #48	; 0x30
    2d0c:	1880      	adds	r0, r0, r2
    2d0e:	0029      	movs	r1, r5
    2d10:	4b1c      	ldr	r3, [pc, #112]	; (2d84 <xTaskResumeAll+0xe0>)
    2d12:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2d14:	4b16      	ldr	r3, [pc, #88]	; (2d70 <xTaskResumeAll+0xcc>)
    2d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2d1c:	429a      	cmp	r2, r3
    2d1e:	d3db      	bcc.n	2cd8 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
    2d20:	2201      	movs	r2, #1
    2d22:	4b13      	ldr	r3, [pc, #76]	; (2d70 <xTaskResumeAll+0xcc>)
    2d24:	669a      	str	r2, [r3, #104]	; 0x68
    2d26:	e7d7      	b.n	2cd8 <xTaskResumeAll+0x34>
				if (pxTCB != NULL) {
    2d28:	2c00      	cmp	r4, #0
    2d2a:	d001      	beq.n	2d30 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
    2d2c:	4b16      	ldr	r3, [pc, #88]	; (2d88 <xTaskResumeAll+0xe4>)
    2d2e:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2d30:	4b0f      	ldr	r3, [pc, #60]	; (2d70 <xTaskResumeAll+0xcc>)
    2d32:	6e5c      	ldr	r4, [r3, #100]	; 0x64
					if (uxPendedCounts > (UBaseType_t)0U) {
    2d34:	2c00      	cmp	r4, #0
    2d36:	d10a      	bne.n	2d4e <xTaskResumeAll+0xaa>
				if (xYieldPending != pdFALSE) {
    2d38:	4b0d      	ldr	r3, [pc, #52]	; (2d70 <xTaskResumeAll+0xcc>)
    2d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d014      	beq.n	2d6a <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
    2d40:	4b12      	ldr	r3, [pc, #72]	; (2d8c <xTaskResumeAll+0xe8>)
    2d42:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    2d44:	2401      	movs	r4, #1
    2d46:	e7c2      	b.n	2cce <xTaskResumeAll+0x2a>
							--uxPendedCounts;
    2d48:	3c01      	subs	r4, #1
						} while (uxPendedCounts > (UBaseType_t)0U);
    2d4a:	2c00      	cmp	r4, #0
    2d4c:	d007      	beq.n	2d5e <xTaskResumeAll+0xba>
							if (xTaskIncrementTick() != pdFALSE) {
    2d4e:	4b10      	ldr	r3, [pc, #64]	; (2d90 <xTaskResumeAll+0xec>)
    2d50:	4798      	blx	r3
    2d52:	2800      	cmp	r0, #0
    2d54:	d0f8      	beq.n	2d48 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
    2d56:	2201      	movs	r2, #1
    2d58:	4b05      	ldr	r3, [pc, #20]	; (2d70 <xTaskResumeAll+0xcc>)
    2d5a:	669a      	str	r2, [r3, #104]	; 0x68
    2d5c:	e7f4      	b.n	2d48 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
    2d5e:	2200      	movs	r2, #0
    2d60:	4b03      	ldr	r3, [pc, #12]	; (2d70 <xTaskResumeAll+0xcc>)
    2d62:	665a      	str	r2, [r3, #100]	; 0x64
    2d64:	e7e8      	b.n	2d38 <xTaskResumeAll+0x94>
	BaseType_t xAlreadyYielded = pdFALSE;
    2d66:	2400      	movs	r4, #0
    2d68:	e7b1      	b.n	2cce <xTaskResumeAll+0x2a>
    2d6a:	2400      	movs	r4, #0
    2d6c:	e7af      	b.n	2cce <xTaskResumeAll+0x2a>
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	2000282c 	.word	0x2000282c
    2d74:	00001fe5 	.word	0x00001fe5
    2d78:	00001ffd 	.word	0x00001ffd
    2d7c:	200027ac 	.word	0x200027ac
    2d80:	00001eb1 	.word	0x00001eb1
    2d84:	00001e69 	.word	0x00001e69
    2d88:	0000284d 	.word	0x0000284d
    2d8c:	00001fcd 	.word	0x00001fcd
    2d90:	00002b9d 	.word	0x00002b9d

00002d94 <vTaskSwitchContext>:
{
    2d94:	b510      	push	{r4, lr}
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    2d96:	4b1d      	ldr	r3, [pc, #116]	; (2e0c <vTaskSwitchContext+0x78>)
    2d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d10f      	bne.n	2dbe <vTaskSwitchContext+0x2a>
		xYieldPending = pdFALSE;
    2d9e:	4b1b      	ldr	r3, [pc, #108]	; (2e0c <vTaskSwitchContext+0x78>)
    2da0:	2200      	movs	r2, #0
    2da2:	669a      	str	r2, [r3, #104]	; 0x68
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2da6:	009a      	lsls	r2, r3, #2
    2da8:	18d2      	adds	r2, r2, r3
    2daa:	0091      	lsls	r1, r2, #2
    2dac:	4a18      	ldr	r2, [pc, #96]	; (2e10 <vTaskSwitchContext+0x7c>)
    2dae:	1852      	adds	r2, r2, r1
    2db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
    2db2:	2a00      	cmp	r2, #0
    2db4:	d109      	bne.n	2dca <vTaskSwitchContext+0x36>
    2db6:	2b00      	cmp	r3, #0
    2db8:	d005      	beq.n	2dc6 <vTaskSwitchContext+0x32>
    2dba:	3b01      	subs	r3, #1
    2dbc:	e7f3      	b.n	2da6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
    2dbe:	2201      	movs	r2, #1
    2dc0:	4b12      	ldr	r3, [pc, #72]	; (2e0c <vTaskSwitchContext+0x78>)
    2dc2:	669a      	str	r2, [r3, #104]	; 0x68
}
    2dc4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2dc6:	b672      	cpsid	i
    2dc8:	e7fe      	b.n	2dc8 <vTaskSwitchContext+0x34>
    2dca:	4a11      	ldr	r2, [pc, #68]	; (2e10 <vTaskSwitchContext+0x7c>)
    2dcc:	0099      	lsls	r1, r3, #2
    2dce:	18cc      	adds	r4, r1, r3
    2dd0:	00a0      	lsls	r0, r4, #2
    2dd2:	1810      	adds	r0, r2, r0
    2dd4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    2dd6:	6864      	ldr	r4, [r4, #4]
    2dd8:	6344      	str	r4, [r0, #52]	; 0x34
    2dda:	3230      	adds	r2, #48	; 0x30
    2ddc:	18c9      	adds	r1, r1, r3
    2dde:	0088      	lsls	r0, r1, #2
    2de0:	3008      	adds	r0, #8
    2de2:	1812      	adds	r2, r2, r0
    2de4:	4294      	cmp	r4, r2
    2de6:	d00a      	beq.n	2dfe <vTaskSwitchContext+0x6a>
    2de8:	009a      	lsls	r2, r3, #2
    2dea:	18d2      	adds	r2, r2, r3
    2dec:	0091      	lsls	r1, r2, #2
    2dee:	4a08      	ldr	r2, [pc, #32]	; (2e10 <vTaskSwitchContext+0x7c>)
    2df0:	1852      	adds	r2, r2, r1
    2df2:	6b52      	ldr	r2, [r2, #52]	; 0x34
    2df4:	68d1      	ldr	r1, [r2, #12]
    2df6:	4a05      	ldr	r2, [pc, #20]	; (2e0c <vTaskSwitchContext+0x78>)
    2df8:	6451      	str	r1, [r2, #68]	; 0x44
    2dfa:	6513      	str	r3, [r2, #80]	; 0x50
}
    2dfc:	e7e2      	b.n	2dc4 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2dfe:	6860      	ldr	r0, [r4, #4]
    2e00:	0089      	lsls	r1, r1, #2
    2e02:	4a03      	ldr	r2, [pc, #12]	; (2e10 <vTaskSwitchContext+0x7c>)
    2e04:	1852      	adds	r2, r2, r1
    2e06:	6350      	str	r0, [r2, #52]	; 0x34
    2e08:	e7ee      	b.n	2de8 <vTaskSwitchContext+0x54>
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	2000282c 	.word	0x2000282c
    2e10:	200027ac 	.word	0x200027ac

00002e14 <vTaskPlaceOnEventList>:
{
    2e14:	b510      	push	{r4, lr}
    2e16:	000c      	movs	r4, r1
	configASSERT(pxEventList);
    2e18:	2800      	cmp	r0, #0
    2e1a:	d101      	bne.n	2e20 <vTaskPlaceOnEventList+0xc>
    2e1c:	b672      	cpsid	i
    2e1e:	e7fe      	b.n	2e1e <vTaskPlaceOnEventList+0xa>
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    2e20:	4b04      	ldr	r3, [pc, #16]	; (2e34 <vTaskPlaceOnEventList+0x20>)
    2e22:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2e24:	3118      	adds	r1, #24
    2e26:	4b04      	ldr	r3, [pc, #16]	; (2e38 <vTaskPlaceOnEventList+0x24>)
    2e28:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    2e2a:	2101      	movs	r1, #1
    2e2c:	0020      	movs	r0, r4
    2e2e:	4b03      	ldr	r3, [pc, #12]	; (2e3c <vTaskPlaceOnEventList+0x28>)
    2e30:	4798      	blx	r3
}
    2e32:	bd10      	pop	{r4, pc}
    2e34:	2000282c 	.word	0x2000282c
    2e38:	00001e81 	.word	0x00001e81
    2e3c:	00002a39 	.word	0x00002a39

00002e40 <vTaskPlaceOnEventListRestricted>:
{
    2e40:	b570      	push	{r4, r5, r6, lr}
    2e42:	000c      	movs	r4, r1
    2e44:	0015      	movs	r5, r2
	configASSERT(pxEventList);
    2e46:	2800      	cmp	r0, #0
    2e48:	d00d      	beq.n	2e66 <vTaskPlaceOnEventListRestricted+0x26>
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    2e4a:	4b08      	ldr	r3, [pc, #32]	; (2e6c <vTaskPlaceOnEventListRestricted+0x2c>)
    2e4c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2e4e:	3118      	adds	r1, #24
    2e50:	4b07      	ldr	r3, [pc, #28]	; (2e70 <vTaskPlaceOnEventListRestricted+0x30>)
    2e52:	4798      	blx	r3
	if (xWaitIndefinitely != pdFALSE) {
    2e54:	2d00      	cmp	r5, #0
    2e56:	d001      	beq.n	2e5c <vTaskPlaceOnEventListRestricted+0x1c>
		xTicksToWait = portMAX_DELAY;
    2e58:	2401      	movs	r4, #1
    2e5a:	4264      	negs	r4, r4
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    2e5c:	0029      	movs	r1, r5
    2e5e:	0020      	movs	r0, r4
    2e60:	4b04      	ldr	r3, [pc, #16]	; (2e74 <vTaskPlaceOnEventListRestricted+0x34>)
    2e62:	4798      	blx	r3
}
    2e64:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxEventList);
    2e66:	b672      	cpsid	i
    2e68:	e7fe      	b.n	2e68 <vTaskPlaceOnEventListRestricted+0x28>
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	2000282c 	.word	0x2000282c
    2e70:	00001e69 	.word	0x00001e69
    2e74:	00002a39 	.word	0x00002a39

00002e78 <xTaskRemoveFromEventList>:
{
    2e78:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    2e7a:	68c3      	ldr	r3, [r0, #12]
    2e7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    2e7e:	2c00      	cmp	r4, #0
    2e80:	d027      	beq.n	2ed2 <xTaskRemoveFromEventList+0x5a>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    2e82:	0025      	movs	r5, r4
    2e84:	3518      	adds	r5, #24
    2e86:	0028      	movs	r0, r5
    2e88:	4b17      	ldr	r3, [pc, #92]	; (2ee8 <xTaskRemoveFromEventList+0x70>)
    2e8a:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2e8c:	4b17      	ldr	r3, [pc, #92]	; (2eec <xTaskRemoveFromEventList+0x74>)
    2e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2e90:	2b00      	cmp	r3, #0
    2e92:	d120      	bne.n	2ed6 <xTaskRemoveFromEventList+0x5e>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    2e94:	1d25      	adds	r5, r4, #4
    2e96:	0028      	movs	r0, r5
    2e98:	4b13      	ldr	r3, [pc, #76]	; (2ee8 <xTaskRemoveFromEventList+0x70>)
    2e9a:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    2e9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2e9e:	4b13      	ldr	r3, [pc, #76]	; (2eec <xTaskRemoveFromEventList+0x74>)
    2ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2ea2:	429a      	cmp	r2, r3
    2ea4:	d901      	bls.n	2eaa <xTaskRemoveFromEventList+0x32>
    2ea6:	4b11      	ldr	r3, [pc, #68]	; (2eec <xTaskRemoveFromEventList+0x74>)
    2ea8:	651a      	str	r2, [r3, #80]	; 0x50
    2eaa:	0093      	lsls	r3, r2, #2
    2eac:	189b      	adds	r3, r3, r2
    2eae:	009a      	lsls	r2, r3, #2
    2eb0:	480f      	ldr	r0, [pc, #60]	; (2ef0 <xTaskRemoveFromEventList+0x78>)
    2eb2:	3030      	adds	r0, #48	; 0x30
    2eb4:	1880      	adds	r0, r0, r2
    2eb6:	0029      	movs	r1, r5
    2eb8:	4b0e      	ldr	r3, [pc, #56]	; (2ef4 <xTaskRemoveFromEventList+0x7c>)
    2eba:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    2ebc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2ebe:	4b0b      	ldr	r3, [pc, #44]	; (2eec <xTaskRemoveFromEventList+0x74>)
    2ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ec4:	429a      	cmp	r2, r3
    2ec6:	d90c      	bls.n	2ee2 <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
    2ec8:	2201      	movs	r2, #1
    2eca:	4b08      	ldr	r3, [pc, #32]	; (2eec <xTaskRemoveFromEventList+0x74>)
    2ecc:	669a      	str	r2, [r3, #104]	; 0x68
		xReturn = pdTRUE;
    2ece:	2001      	movs	r0, #1
}
    2ed0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxUnblockedTCB);
    2ed2:	b672      	cpsid	i
    2ed4:	e7fe      	b.n	2ed4 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    2ed6:	0029      	movs	r1, r5
    2ed8:	4805      	ldr	r0, [pc, #20]	; (2ef0 <xTaskRemoveFromEventList+0x78>)
    2eda:	3014      	adds	r0, #20
    2edc:	4b05      	ldr	r3, [pc, #20]	; (2ef4 <xTaskRemoveFromEventList+0x7c>)
    2ede:	4798      	blx	r3
    2ee0:	e7ec      	b.n	2ebc <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
    2ee2:	2000      	movs	r0, #0
	return xReturn;
    2ee4:	e7f4      	b.n	2ed0 <xTaskRemoveFromEventList+0x58>
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	00001eb1 	.word	0x00001eb1
    2eec:	2000282c 	.word	0x2000282c
    2ef0:	200027ac 	.word	0x200027ac
    2ef4:	00001e69 	.word	0x00001e69

00002ef8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    2ef8:	4b02      	ldr	r3, [pc, #8]	; (2f04 <vTaskInternalSetTimeOutState+0xc>)
    2efa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2efc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2f00:	6043      	str	r3, [r0, #4]
}
    2f02:	4770      	bx	lr
    2f04:	2000282c 	.word	0x2000282c

00002f08 <xTaskCheckForTimeOut>:
{
    2f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f0a:	0005      	movs	r5, r0
    2f0c:	000c      	movs	r4, r1
	configASSERT(pxTimeOut);
    2f0e:	2800      	cmp	r0, #0
    2f10:	d01a      	beq.n	2f48 <xTaskCheckForTimeOut+0x40>
	configASSERT(pxTicksToWait);
    2f12:	2900      	cmp	r1, #0
    2f14:	d01a      	beq.n	2f4c <xTaskCheckForTimeOut+0x44>
	taskENTER_CRITICAL();
    2f16:	4b14      	ldr	r3, [pc, #80]	; (2f68 <xTaskCheckForTimeOut+0x60>)
    2f18:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    2f1a:	4b14      	ldr	r3, [pc, #80]	; (2f6c <xTaskCheckForTimeOut+0x64>)
    2f1c:	6d58      	ldr	r0, [r3, #84]	; 0x54
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2f1e:	6869      	ldr	r1, [r5, #4]
    2f20:	1a42      	subs	r2, r0, r1
		    if (*pxTicksToWait == portMAX_DELAY) {
    2f22:	6823      	ldr	r3, [r4, #0]
    2f24:	1c5e      	adds	r6, r3, #1
    2f26:	d01a      	beq.n	2f5e <xTaskCheckForTimeOut+0x56>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    2f28:	4e10      	ldr	r6, [pc, #64]	; (2f6c <xTaskCheckForTimeOut+0x64>)
    2f2a:	6e36      	ldr	r6, [r6, #96]	; 0x60
    2f2c:	682f      	ldr	r7, [r5, #0]
    2f2e:	42b7      	cmp	r7, r6
    2f30:	d001      	beq.n	2f36 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    2f32:	4288      	cmp	r0, r1
    2f34:	d215      	bcs.n	2f62 <xTaskCheckForTimeOut+0x5a>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    2f36:	429a      	cmp	r2, r3
    2f38:	d30a      	bcc.n	2f50 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait = 0;
    2f3a:	2300      	movs	r3, #0
    2f3c:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    2f3e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    2f40:	4b0b      	ldr	r3, [pc, #44]	; (2f70 <xTaskCheckForTimeOut+0x68>)
    2f42:	4798      	blx	r3
}
    2f44:	0020      	movs	r0, r4
    2f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT(pxTimeOut);
    2f48:	b672      	cpsid	i
    2f4a:	e7fe      	b.n	2f4a <xTaskCheckForTimeOut+0x42>
	configASSERT(pxTicksToWait);
    2f4c:	b672      	cpsid	i
    2f4e:	e7fe      	b.n	2f4e <xTaskCheckForTimeOut+0x46>
			*pxTicksToWait -= xElapsedTime;
    2f50:	1a9b      	subs	r3, r3, r2
    2f52:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    2f54:	0028      	movs	r0, r5
    2f56:	4b07      	ldr	r3, [pc, #28]	; (2f74 <xTaskCheckForTimeOut+0x6c>)
    2f58:	4798      	blx	r3
			xReturn = pdFALSE;
    2f5a:	2400      	movs	r4, #0
    2f5c:	e7f0      	b.n	2f40 <xTaskCheckForTimeOut+0x38>
			xReturn = pdFALSE;
    2f5e:	2400      	movs	r4, #0
    2f60:	e7ee      	b.n	2f40 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
    2f62:	2401      	movs	r4, #1
    2f64:	e7ec      	b.n	2f40 <xTaskCheckForTimeOut+0x38>
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	00001fe5 	.word	0x00001fe5
    2f6c:	2000282c 	.word	0x2000282c
    2f70:	00001ffd 	.word	0x00001ffd
    2f74:	00002ef9 	.word	0x00002ef9

00002f78 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    2f78:	2201      	movs	r2, #1
    2f7a:	4b01      	ldr	r3, [pc, #4]	; (2f80 <vTaskMissedYield+0x8>)
    2f7c:	669a      	str	r2, [r3, #104]	; 0x68
}
    2f7e:	4770      	bx	lr
    2f80:	2000282c 	.word	0x2000282c

00002f84 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    2f84:	4b06      	ldr	r3, [pc, #24]	; (2fa0 <xTaskGetSchedulerState+0x1c>)
    2f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d005      	beq.n	2f98 <xTaskGetSchedulerState+0x14>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2f8c:	4b04      	ldr	r3, [pc, #16]	; (2fa0 <xTaskGetSchedulerState+0x1c>)
    2f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2f90:	2b00      	cmp	r3, #0
    2f92:	d103      	bne.n	2f9c <xTaskGetSchedulerState+0x18>
			xReturn = taskSCHEDULER_RUNNING;
    2f94:	2002      	movs	r0, #2
}
    2f96:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    2f98:	2001      	movs	r0, #1
    2f9a:	e7fc      	b.n	2f96 <xTaskGetSchedulerState+0x12>
			xReturn = taskSCHEDULER_SUSPENDED;
    2f9c:	2000      	movs	r0, #0
	return xReturn;
    2f9e:	e7fa      	b.n	2f96 <xTaskGetSchedulerState+0x12>
    2fa0:	2000282c 	.word	0x2000282c

00002fa4 <xTaskPriorityDisinherit>:
{
    2fa4:	b570      	push	{r4, r5, r6, lr}
    2fa6:	1e04      	subs	r4, r0, #0
	if (pxMutexHolder != NULL) {
    2fa8:	d02c      	beq.n	3004 <xTaskPriorityDisinherit+0x60>
		configASSERT(pxTCB == pxCurrentTCB);
    2faa:	4b19      	ldr	r3, [pc, #100]	; (3010 <xTaskPriorityDisinherit+0x6c>)
    2fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fae:	4298      	cmp	r0, r3
    2fb0:	d001      	beq.n	2fb6 <xTaskPriorityDisinherit+0x12>
    2fb2:	b672      	cpsid	i
    2fb4:	e7fe      	b.n	2fb4 <xTaskPriorityDisinherit+0x10>
		configASSERT(pxTCB->uxMutexesHeld);
    2fb6:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d101      	bne.n	2fc0 <xTaskPriorityDisinherit+0x1c>
    2fbc:	b672      	cpsid	i
    2fbe:	e7fe      	b.n	2fbe <xTaskPriorityDisinherit+0x1a>
		(pxTCB->uxMutexesHeld)--;
    2fc0:	3b01      	subs	r3, #1
    2fc2:	6483      	str	r3, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    2fc4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2fc6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    2fc8:	428a      	cmp	r2, r1
    2fca:	d01d      	beq.n	3008 <xTaskPriorityDisinherit+0x64>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d11d      	bne.n	300c <xTaskPriorityDisinherit+0x68>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    2fd0:	1d05      	adds	r5, r0, #4
    2fd2:	0028      	movs	r0, r5
    2fd4:	4b0f      	ldr	r3, [pc, #60]	; (3014 <xTaskPriorityDisinherit+0x70>)
    2fd6:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2fd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2fda:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    2fdc:	2205      	movs	r2, #5
    2fde:	1ad2      	subs	r2, r2, r3
    2fe0:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    2fe2:	4a0b      	ldr	r2, [pc, #44]	; (3010 <xTaskPriorityDisinherit+0x6c>)
    2fe4:	6d12      	ldr	r2, [r2, #80]	; 0x50
    2fe6:	4293      	cmp	r3, r2
    2fe8:	d901      	bls.n	2fee <xTaskPriorityDisinherit+0x4a>
    2fea:	4a09      	ldr	r2, [pc, #36]	; (3010 <xTaskPriorityDisinherit+0x6c>)
    2fec:	6513      	str	r3, [r2, #80]	; 0x50
    2fee:	009a      	lsls	r2, r3, #2
    2ff0:	18d3      	adds	r3, r2, r3
    2ff2:	009a      	lsls	r2, r3, #2
    2ff4:	4808      	ldr	r0, [pc, #32]	; (3018 <xTaskPriorityDisinherit+0x74>)
    2ff6:	3030      	adds	r0, #48	; 0x30
    2ff8:	1880      	adds	r0, r0, r2
    2ffa:	0029      	movs	r1, r5
    2ffc:	4b07      	ldr	r3, [pc, #28]	; (301c <xTaskPriorityDisinherit+0x78>)
    2ffe:	4798      	blx	r3
				xReturn = pdTRUE;
    3000:	2001      	movs	r0, #1
}
    3002:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t   xReturn = pdFALSE;
    3004:	2000      	movs	r0, #0
    3006:	e7fc      	b.n	3002 <xTaskPriorityDisinherit+0x5e>
    3008:	2000      	movs	r0, #0
    300a:	e7fa      	b.n	3002 <xTaskPriorityDisinherit+0x5e>
    300c:	2000      	movs	r0, #0
	return xReturn;
    300e:	e7f8      	b.n	3002 <xTaskPriorityDisinherit+0x5e>
    3010:	2000282c 	.word	0x2000282c
    3014:	00001eb1 	.word	0x00001eb1
    3018:	200027ac 	.word	0x200027ac
    301c:	00001e69 	.word	0x00001e69

00003020 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    3020:	4b06      	ldr	r3, [pc, #24]	; (303c <prvGetNextExpireTime+0x1c>)
    3022:	681a      	ldr	r2, [r3, #0]
    3024:	6813      	ldr	r3, [r2, #0]
    3026:	4259      	negs	r1, r3
    3028:	414b      	adcs	r3, r1
    302a:	6003      	str	r3, [r0, #0]
	if (*pxListWasEmpty == pdFALSE) {
    302c:	2b00      	cmp	r3, #0
    302e:	d102      	bne.n	3036 <prvGetNextExpireTime+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    3030:	68d3      	ldr	r3, [r2, #12]
    3032:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
	}

	return xNextExpireTime;
}
    3034:	4770      	bx	lr
		xNextExpireTime = (TickType_t)0U;
    3036:	2000      	movs	r0, #0
	return xNextExpireTime;
    3038:	e7fc      	b.n	3034 <prvGetNextExpireTime+0x14>
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	20002898 	.word	0x20002898

00003040 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    3040:	b510      	push	{r4, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    3042:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    3044:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    3046:	4291      	cmp	r1, r2
    3048:	d80c      	bhi.n	3064 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    304a:	1ad2      	subs	r2, r2, r3
    304c:	6983      	ldr	r3, [r0, #24]
    304e:	429a      	cmp	r2, r3
    3050:	d301      	bcc.n	3056 <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3052:	2001      	movs	r0, #1
    3054:	e010      	b.n	3078 <prvInsertTimerInActiveList+0x38>
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    3056:	1d01      	adds	r1, r0, #4
    3058:	4b09      	ldr	r3, [pc, #36]	; (3080 <prvInsertTimerInActiveList+0x40>)
    305a:	6858      	ldr	r0, [r3, #4]
    305c:	4b09      	ldr	r3, [pc, #36]	; (3084 <prvInsertTimerInActiveList+0x44>)
    305e:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    3060:	2000      	movs	r0, #0
    3062:	e009      	b.n	3078 <prvInsertTimerInActiveList+0x38>
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    3064:	429a      	cmp	r2, r3
    3066:	d201      	bcs.n	306c <prvInsertTimerInActiveList+0x2c>
    3068:	4299      	cmp	r1, r3
    306a:	d206      	bcs.n	307a <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    306c:	1d01      	adds	r1, r0, #4
    306e:	4b04      	ldr	r3, [pc, #16]	; (3080 <prvInsertTimerInActiveList+0x40>)
    3070:	6818      	ldr	r0, [r3, #0]
    3072:	4b04      	ldr	r3, [pc, #16]	; (3084 <prvInsertTimerInActiveList+0x44>)
    3074:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    3076:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
    3078:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
    307a:	2001      	movs	r0, #1
	return xProcessTimerNow;
    307c:	e7fc      	b.n	3078 <prvInsertTimerInActiveList+0x38>
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	20002898 	.word	0x20002898
    3084:	00001e81 	.word	0x00001e81

00003088 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    3088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    308a:	4b0e      	ldr	r3, [pc, #56]	; (30c4 <prvCheckForValidListAndQueue+0x3c>)
    308c:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    308e:	4b0e      	ldr	r3, [pc, #56]	; (30c8 <prvCheckForValidListAndQueue+0x40>)
    3090:	689b      	ldr	r3, [r3, #8]
    3092:	2b00      	cmp	r3, #0
    3094:	d002      	beq.n	309c <prvCheckForValidListAndQueue+0x14>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3096:	4b0d      	ldr	r3, [pc, #52]	; (30cc <prvCheckForValidListAndQueue+0x44>)
    3098:	4798      	blx	r3
}
    309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    309c:	4c0a      	ldr	r4, [pc, #40]	; (30c8 <prvCheckForValidListAndQueue+0x40>)
    309e:	0026      	movs	r6, r4
    30a0:	360c      	adds	r6, #12
    30a2:	0030      	movs	r0, r6
    30a4:	4f0a      	ldr	r7, [pc, #40]	; (30d0 <prvCheckForValidListAndQueue+0x48>)
    30a6:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    30a8:	0025      	movs	r5, r4
    30aa:	3520      	adds	r5, #32
    30ac:	0028      	movs	r0, r5
    30ae:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    30b0:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    30b2:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    30b4:	2200      	movs	r2, #0
    30b6:	210c      	movs	r1, #12
    30b8:	2002      	movs	r0, #2
    30ba:	4b06      	ldr	r3, [pc, #24]	; (30d4 <prvCheckForValidListAndQueue+0x4c>)
    30bc:	4798      	blx	r3
    30be:	60a0      	str	r0, [r4, #8]
    30c0:	e7e9      	b.n	3096 <prvCheckForValidListAndQueue+0xe>
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	00001fe5 	.word	0x00001fe5
    30c8:	20002898 	.word	0x20002898
    30cc:	00001ffd 	.word	0x00001ffd
    30d0:	00001e4d 	.word	0x00001e4d
    30d4:	000023cd 	.word	0x000023cd

000030d8 <xTimerCreateTimerTask>:
{
    30d8:	b510      	push	{r4, lr}
    30da:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    30dc:	4b0c      	ldr	r3, [pc, #48]	; (3110 <xTimerCreateTimerTask+0x38>)
    30de:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    30e0:	4b0c      	ldr	r3, [pc, #48]	; (3114 <xTimerCreateTimerTask+0x3c>)
    30e2:	689b      	ldr	r3, [r3, #8]
    30e4:	2b00      	cmp	r3, #0
    30e6:	d00e      	beq.n	3106 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(prvTimerTask,
    30e8:	4b0a      	ldr	r3, [pc, #40]	; (3114 <xTimerCreateTimerTask+0x3c>)
    30ea:	3334      	adds	r3, #52	; 0x34
    30ec:	9301      	str	r3, [sp, #4]
    30ee:	2302      	movs	r3, #2
    30f0:	9300      	str	r3, [sp, #0]
    30f2:	2300      	movs	r3, #0
    30f4:	2240      	movs	r2, #64	; 0x40
    30f6:	4908      	ldr	r1, [pc, #32]	; (3118 <xTimerCreateTimerTask+0x40>)
    30f8:	4808      	ldr	r0, [pc, #32]	; (311c <xTimerCreateTimerTask+0x44>)
    30fa:	4c09      	ldr	r4, [pc, #36]	; (3120 <xTimerCreateTimerTask+0x48>)
    30fc:	47a0      	blx	r4
	configASSERT(xReturn);
    30fe:	2800      	cmp	r0, #0
    3100:	d103      	bne.n	310a <xTimerCreateTimerTask+0x32>
    3102:	b672      	cpsid	i
    3104:	e7fe      	b.n	3104 <xTimerCreateTimerTask+0x2c>
	BaseType_t xReturn = pdFAIL;
    3106:	2000      	movs	r0, #0
    3108:	e7f9      	b.n	30fe <xTimerCreateTimerTask+0x26>
}
    310a:	b002      	add	sp, #8
    310c:	bd10      	pop	{r4, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	00003089 	.word	0x00003089
    3114:	20002898 	.word	0x20002898
    3118:	00003760 	.word	0x00003760
    311c:	000033dd 	.word	0x000033dd
    3120:	00002aa9 	.word	0x00002aa9

00003124 <xTimerGenericCommand>:
{
    3124:	b530      	push	{r4, r5, lr}
    3126:	b085      	sub	sp, #20
    3128:	0004      	movs	r4, r0
    312a:	001d      	movs	r5, r3
	configASSERT(xTimer);
    312c:	2800      	cmp	r0, #0
    312e:	d014      	beq.n	315a <xTimerGenericCommand+0x36>
	if (xTimerQueue != NULL) {
    3130:	4b13      	ldr	r3, [pc, #76]	; (3180 <xTimerGenericCommand+0x5c>)
    3132:	6898      	ldr	r0, [r3, #8]
    3134:	2800      	cmp	r0, #0
    3136:	d021      	beq.n	317c <xTimerGenericCommand+0x58>
		xMessage.xMessageID                       = xCommandID;
    3138:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    313a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    313c:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    313e:	2905      	cmp	r1, #5
    3140:	dc15      	bgt.n	316e <xTimerGenericCommand+0x4a>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    3142:	4b10      	ldr	r3, [pc, #64]	; (3184 <xTimerGenericCommand+0x60>)
    3144:	4798      	blx	r3
    3146:	2802      	cmp	r0, #2
    3148:	d009      	beq.n	315e <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    314a:	4b0d      	ldr	r3, [pc, #52]	; (3180 <xTimerGenericCommand+0x5c>)
    314c:	6898      	ldr	r0, [r3, #8]
    314e:	2300      	movs	r3, #0
    3150:	2200      	movs	r2, #0
    3152:	a901      	add	r1, sp, #4
    3154:	4c0c      	ldr	r4, [pc, #48]	; (3188 <xTimerGenericCommand+0x64>)
    3156:	47a0      	blx	r4
    3158:	e00e      	b.n	3178 <xTimerGenericCommand+0x54>
	configASSERT(xTimer);
    315a:	b672      	cpsid	i
    315c:	e7fe      	b.n	315c <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    315e:	4b08      	ldr	r3, [pc, #32]	; (3180 <xTimerGenericCommand+0x5c>)
    3160:	6898      	ldr	r0, [r3, #8]
    3162:	2300      	movs	r3, #0
    3164:	9a08      	ldr	r2, [sp, #32]
    3166:	a901      	add	r1, sp, #4
    3168:	4c07      	ldr	r4, [pc, #28]	; (3188 <xTimerGenericCommand+0x64>)
    316a:	47a0      	blx	r4
    316c:	e004      	b.n	3178 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    316e:	2300      	movs	r3, #0
    3170:	002a      	movs	r2, r5
    3172:	a901      	add	r1, sp, #4
    3174:	4c05      	ldr	r4, [pc, #20]	; (318c <xTimerGenericCommand+0x68>)
    3176:	47a0      	blx	r4
}
    3178:	b005      	add	sp, #20
    317a:	bd30      	pop	{r4, r5, pc}
	BaseType_t          xReturn = pdFAIL;
    317c:	2000      	movs	r0, #0
	return xReturn;
    317e:	e7fb      	b.n	3178 <xTimerGenericCommand+0x54>
    3180:	20002898 	.word	0x20002898
    3184:	00002f85 	.word	0x00002f85
    3188:	00002415 	.word	0x00002415
    318c:	000025a5 	.word	0x000025a5

00003190 <prvSwitchTimerLists>:
{
    3190:	b570      	push	{r4, r5, r6, lr}
    3192:	b082      	sub	sp, #8
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    3194:	4b17      	ldr	r3, [pc, #92]	; (31f4 <prvSwitchTimerLists+0x64>)
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	681a      	ldr	r2, [r3, #0]
    319a:	2a00      	cmp	r2, #0
    319c:	d023      	beq.n	31e6 <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    319e:	68db      	ldr	r3, [r3, #12]
    31a0:	681e      	ldr	r6, [r3, #0]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    31a2:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    31a4:	1d25      	adds	r5, r4, #4
    31a6:	0028      	movs	r0, r5
    31a8:	4b13      	ldr	r3, [pc, #76]	; (31f8 <prvSwitchTimerLists+0x68>)
    31aa:	4798      	blx	r3
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    31ac:	0020      	movs	r0, r4
    31ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31b0:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    31b2:	69e3      	ldr	r3, [r4, #28]
    31b4:	2b01      	cmp	r3, #1
    31b6:	d1ed      	bne.n	3194 <prvSwitchTimerLists+0x4>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    31b8:	69a3      	ldr	r3, [r4, #24]
    31ba:	18f3      	adds	r3, r6, r3
			if (xReloadTime > xNextExpireTime) {
    31bc:	429e      	cmp	r6, r3
    31be:	d207      	bcs.n	31d0 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    31c0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    31c2:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    31c4:	4b0b      	ldr	r3, [pc, #44]	; (31f4 <prvSwitchTimerLists+0x64>)
    31c6:	6818      	ldr	r0, [r3, #0]
    31c8:	0029      	movs	r1, r5
    31ca:	4b0c      	ldr	r3, [pc, #48]	; (31fc <prvSwitchTimerLists+0x6c>)
    31cc:	4798      	blx	r3
    31ce:	e7e1      	b.n	3194 <prvSwitchTimerLists+0x4>
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    31d0:	2300      	movs	r3, #0
    31d2:	9300      	str	r3, [sp, #0]
    31d4:	0032      	movs	r2, r6
    31d6:	2100      	movs	r1, #0
    31d8:	0020      	movs	r0, r4
    31da:	4c09      	ldr	r4, [pc, #36]	; (3200 <prvSwitchTimerLists+0x70>)
    31dc:	47a0      	blx	r4
				configASSERT(xResult);
    31de:	2800      	cmp	r0, #0
    31e0:	d1d8      	bne.n	3194 <prvSwitchTimerLists+0x4>
    31e2:	b672      	cpsid	i
    31e4:	e7fe      	b.n	31e4 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList  = pxOverflowTimerList;
    31e6:	4a03      	ldr	r2, [pc, #12]	; (31f4 <prvSwitchTimerLists+0x64>)
    31e8:	6851      	ldr	r1, [r2, #4]
    31ea:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    31ec:	6053      	str	r3, [r2, #4]
}
    31ee:	b002      	add	sp, #8
    31f0:	bd70      	pop	{r4, r5, r6, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	20002898 	.word	0x20002898
    31f8:	00001eb1 	.word	0x00001eb1
    31fc:	00001e81 	.word	0x00001e81
    3200:	00003125 	.word	0x00003125

00003204 <prvSampleTimeNow>:
{
    3204:	b570      	push	{r4, r5, r6, lr}
    3206:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
    3208:	4b08      	ldr	r3, [pc, #32]	; (322c <prvSampleTimeNow+0x28>)
    320a:	4798      	blx	r3
    320c:	0004      	movs	r4, r0
	if (xTimeNow < xLastTime) {
    320e:	4b08      	ldr	r3, [pc, #32]	; (3230 <prvSampleTimeNow+0x2c>)
    3210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3212:	4298      	cmp	r0, r3
    3214:	d305      	bcc.n	3222 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
    3216:	2300      	movs	r3, #0
    3218:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
    321a:	4b05      	ldr	r3, [pc, #20]	; (3230 <prvSampleTimeNow+0x2c>)
    321c:	639c      	str	r4, [r3, #56]	; 0x38
}
    321e:	0020      	movs	r0, r4
    3220:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
    3222:	4b04      	ldr	r3, [pc, #16]	; (3234 <prvSampleTimeNow+0x30>)
    3224:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    3226:	2301      	movs	r3, #1
    3228:	602b      	str	r3, [r5, #0]
    322a:	e7f6      	b.n	321a <prvSampleTimeNow+0x16>
    322c:	00002b91 	.word	0x00002b91
    3230:	20002898 	.word	0x20002898
    3234:	00003191 	.word	0x00003191

00003238 <prvProcessExpiredTimer>:
{
    3238:	b570      	push	{r4, r5, r6, lr}
    323a:	b082      	sub	sp, #8
    323c:	0005      	movs	r5, r0
    323e:	000e      	movs	r6, r1
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    3240:	4b11      	ldr	r3, [pc, #68]	; (3288 <prvProcessExpiredTimer+0x50>)
    3242:	681b      	ldr	r3, [r3, #0]
    3244:	68db      	ldr	r3, [r3, #12]
    3246:	68dc      	ldr	r4, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    3248:	1d20      	adds	r0, r4, #4
    324a:	4b10      	ldr	r3, [pc, #64]	; (328c <prvProcessExpiredTimer+0x54>)
    324c:	4798      	blx	r3
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    324e:	69e3      	ldr	r3, [r4, #28]
    3250:	2b01      	cmp	r3, #1
    3252:	d004      	beq.n	325e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    3254:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3256:	0020      	movs	r0, r4
    3258:	4798      	blx	r3
}
    325a:	b002      	add	sp, #8
    325c:	bd70      	pop	{r4, r5, r6, pc}
		if (prvInsertTimerInActiveList(
    325e:	69a3      	ldr	r3, [r4, #24]
    3260:	1959      	adds	r1, r3, r5
    3262:	002b      	movs	r3, r5
    3264:	0032      	movs	r2, r6
    3266:	0020      	movs	r0, r4
    3268:	4e09      	ldr	r6, [pc, #36]	; (3290 <prvProcessExpiredTimer+0x58>)
    326a:	47b0      	blx	r6
    326c:	2800      	cmp	r0, #0
    326e:	d0f1      	beq.n	3254 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    3270:	2300      	movs	r3, #0
    3272:	9300      	str	r3, [sp, #0]
    3274:	002a      	movs	r2, r5
    3276:	2100      	movs	r1, #0
    3278:	0020      	movs	r0, r4
    327a:	4d06      	ldr	r5, [pc, #24]	; (3294 <prvProcessExpiredTimer+0x5c>)
    327c:	47a8      	blx	r5
			configASSERT(xResult);
    327e:	2800      	cmp	r0, #0
    3280:	d1e8      	bne.n	3254 <prvProcessExpiredTimer+0x1c>
    3282:	b672      	cpsid	i
    3284:	e7fe      	b.n	3284 <prvProcessExpiredTimer+0x4c>
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	20002898 	.word	0x20002898
    328c:	00001eb1 	.word	0x00001eb1
    3290:	00003041 	.word	0x00003041
    3294:	00003125 	.word	0x00003125

00003298 <prvProcessTimerOrBlockTask>:
{
    3298:	b570      	push	{r4, r5, r6, lr}
    329a:	b082      	sub	sp, #8
    329c:	0005      	movs	r5, r0
    329e:	000c      	movs	r4, r1
	vTaskSuspendAll();
    32a0:	4b16      	ldr	r3, [pc, #88]	; (32fc <prvProcessTimerOrBlockTask+0x64>)
    32a2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    32a4:	a801      	add	r0, sp, #4
    32a6:	4b16      	ldr	r3, [pc, #88]	; (3300 <prvProcessTimerOrBlockTask+0x68>)
    32a8:	4798      	blx	r3
    32aa:	0006      	movs	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    32ac:	9b01      	ldr	r3, [sp, #4]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d121      	bne.n	32f6 <prvProcessTimerOrBlockTask+0x5e>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    32b2:	2c00      	cmp	r4, #0
    32b4:	d101      	bne.n	32ba <prvProcessTimerOrBlockTask+0x22>
    32b6:	42a8      	cmp	r0, r5
    32b8:	d213      	bcs.n	32e2 <prvProcessTimerOrBlockTask+0x4a>
				if (xListWasEmpty != pdFALSE) {
    32ba:	2c00      	cmp	r4, #0
    32bc:	d005      	beq.n	32ca <prvProcessTimerOrBlockTask+0x32>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    32be:	4b11      	ldr	r3, [pc, #68]	; (3304 <prvProcessTimerOrBlockTask+0x6c>)
    32c0:	685b      	ldr	r3, [r3, #4]
    32c2:	681c      	ldr	r4, [r3, #0]
    32c4:	4263      	negs	r3, r4
    32c6:	415c      	adcs	r4, r3
    32c8:	b2e4      	uxtb	r4, r4
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    32ca:	1ba9      	subs	r1, r5, r6
    32cc:	4b0d      	ldr	r3, [pc, #52]	; (3304 <prvProcessTimerOrBlockTask+0x6c>)
    32ce:	6898      	ldr	r0, [r3, #8]
    32d0:	0022      	movs	r2, r4
    32d2:	4b0d      	ldr	r3, [pc, #52]	; (3308 <prvProcessTimerOrBlockTask+0x70>)
    32d4:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    32d6:	4b0d      	ldr	r3, [pc, #52]	; (330c <prvProcessTimerOrBlockTask+0x74>)
    32d8:	4798      	blx	r3
    32da:	2800      	cmp	r0, #0
    32dc:	d008      	beq.n	32f0 <prvProcessTimerOrBlockTask+0x58>
}
    32de:	b002      	add	sp, #8
    32e0:	bd70      	pop	{r4, r5, r6, pc}
				(void)xTaskResumeAll();
    32e2:	4b0a      	ldr	r3, [pc, #40]	; (330c <prvProcessTimerOrBlockTask+0x74>)
    32e4:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    32e6:	0031      	movs	r1, r6
    32e8:	0028      	movs	r0, r5
    32ea:	4b09      	ldr	r3, [pc, #36]	; (3310 <prvProcessTimerOrBlockTask+0x78>)
    32ec:	4798      	blx	r3
    32ee:	e7f6      	b.n	32de <prvProcessTimerOrBlockTask+0x46>
					portYIELD_WITHIN_API();
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <prvProcessTimerOrBlockTask+0x7c>)
    32f2:	4798      	blx	r3
    32f4:	e7f3      	b.n	32de <prvProcessTimerOrBlockTask+0x46>
			(void)xTaskResumeAll();
    32f6:	4b05      	ldr	r3, [pc, #20]	; (330c <prvProcessTimerOrBlockTask+0x74>)
    32f8:	4798      	blx	r3
}
    32fa:	e7f0      	b.n	32de <prvProcessTimerOrBlockTask+0x46>
    32fc:	00002b81 	.word	0x00002b81
    3300:	00003205 	.word	0x00003205
    3304:	20002898 	.word	0x20002898
    3308:	000027ed 	.word	0x000027ed
    330c:	00002ca5 	.word	0x00002ca5
    3310:	00003239 	.word	0x00003239
    3314:	00001fcd 	.word	0x00001fcd

00003318 <prvProcessReceivedCommands>:
{
    3318:	b530      	push	{r4, r5, lr}
    331a:	b087      	sub	sp, #28
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    331c:	4b27      	ldr	r3, [pc, #156]	; (33bc <prvProcessReceivedCommands+0xa4>)
    331e:	6898      	ldr	r0, [r3, #8]
    3320:	2200      	movs	r2, #0
    3322:	a903      	add	r1, sp, #12
    3324:	4b26      	ldr	r3, [pc, #152]	; (33c0 <prvProcessReceivedCommands+0xa8>)
    3326:	4798      	blx	r3
    3328:	2800      	cmp	r0, #0
    332a:	d045      	beq.n	33b8 <prvProcessReceivedCommands+0xa0>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    332c:	9b03      	ldr	r3, [sp, #12]
    332e:	2b00      	cmp	r3, #0
    3330:	dbf4      	blt.n	331c <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3332:	9c05      	ldr	r4, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    3334:	6963      	ldr	r3, [r4, #20]
    3336:	2b00      	cmp	r3, #0
    3338:	d002      	beq.n	3340 <prvProcessReceivedCommands+0x28>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    333a:	1d20      	adds	r0, r4, #4
    333c:	4b21      	ldr	r3, [pc, #132]	; (33c4 <prvProcessReceivedCommands+0xac>)
    333e:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    3340:	a802      	add	r0, sp, #8
    3342:	4b21      	ldr	r3, [pc, #132]	; (33c8 <prvProcessReceivedCommands+0xb0>)
    3344:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    3346:	9b03      	ldr	r3, [sp, #12]
    3348:	2b09      	cmp	r3, #9
    334a:	d8e7      	bhi.n	331c <prvProcessReceivedCommands+0x4>
    334c:	009b      	lsls	r3, r3, #2
    334e:	4a1f      	ldr	r2, [pc, #124]	; (33cc <prvProcessReceivedCommands+0xb4>)
    3350:	58d3      	ldr	r3, [r2, r3]
    3352:	469f      	mov	pc, r3
				if (prvInsertTimerInActiveList(pxTimer,
    3354:	9b04      	ldr	r3, [sp, #16]
    3356:	69a2      	ldr	r2, [r4, #24]
    3358:	4694      	mov	ip, r2
    335a:	4463      	add	r3, ip
    335c:	0019      	movs	r1, r3
    335e:	9b04      	ldr	r3, [sp, #16]
    3360:	0002      	movs	r2, r0
    3362:	0020      	movs	r0, r4
    3364:	4d1a      	ldr	r5, [pc, #104]	; (33d0 <prvProcessReceivedCommands+0xb8>)
    3366:	47a8      	blx	r5
    3368:	2800      	cmp	r0, #0
    336a:	d0d7      	beq.n	331c <prvProcessReceivedCommands+0x4>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    336c:	0020      	movs	r0, r4
    336e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3370:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    3372:	69e3      	ldr	r3, [r4, #28]
    3374:	2b01      	cmp	r3, #1
    3376:	d1d1      	bne.n	331c <prvProcessReceivedCommands+0x4>
						xResult = xTimerGenericCommand(pxTimer,
    3378:	9b04      	ldr	r3, [sp, #16]
    337a:	69a1      	ldr	r1, [r4, #24]
    337c:	468c      	mov	ip, r1
    337e:	4463      	add	r3, ip
    3380:	001a      	movs	r2, r3
    3382:	2300      	movs	r3, #0
    3384:	9300      	str	r3, [sp, #0]
    3386:	2100      	movs	r1, #0
    3388:	0020      	movs	r0, r4
    338a:	4c12      	ldr	r4, [pc, #72]	; (33d4 <prvProcessReceivedCommands+0xbc>)
    338c:	47a0      	blx	r4
						configASSERT(xResult);
    338e:	2800      	cmp	r0, #0
    3390:	d1c4      	bne.n	331c <prvProcessReceivedCommands+0x4>
    3392:	b672      	cpsid	i
    3394:	e7fe      	b.n	3394 <prvProcessReceivedCommands+0x7c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3396:	9904      	ldr	r1, [sp, #16]
    3398:	61a1      	str	r1, [r4, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    339a:	2900      	cmp	r1, #0
    339c:	d006      	beq.n	33ac <prvProcessReceivedCommands+0x94>
				(void)prvInsertTimerInActiveList(
    339e:	1841      	adds	r1, r0, r1
    33a0:	0003      	movs	r3, r0
    33a2:	0002      	movs	r2, r0
    33a4:	0020      	movs	r0, r4
    33a6:	4c0a      	ldr	r4, [pc, #40]	; (33d0 <prvProcessReceivedCommands+0xb8>)
    33a8:	47a0      	blx	r4
				break;
    33aa:	e7b7      	b.n	331c <prvProcessReceivedCommands+0x4>
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    33ac:	b672      	cpsid	i
    33ae:	e7fe      	b.n	33ae <prvProcessReceivedCommands+0x96>
				vPortFree(pxTimer);
    33b0:	0020      	movs	r0, r4
    33b2:	4b09      	ldr	r3, [pc, #36]	; (33d8 <prvProcessReceivedCommands+0xc0>)
    33b4:	4798      	blx	r3
			break;
    33b6:	e7b1      	b.n	331c <prvProcessReceivedCommands+0x4>
}
    33b8:	b007      	add	sp, #28
    33ba:	bd30      	pop	{r4, r5, pc}
    33bc:	20002898 	.word	0x20002898
    33c0:	00002691 	.word	0x00002691
    33c4:	00001eb1 	.word	0x00001eb1
    33c8:	00003205 	.word	0x00003205
    33cc:	00003738 	.word	0x00003738
    33d0:	00003041 	.word	0x00003041
    33d4:	00003125 	.word	0x00003125
    33d8:	0000210d 	.word	0x0000210d

000033dc <prvTimerTask>:
{
    33dc:	b500      	push	{lr}
    33de:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    33e0:	a801      	add	r0, sp, #4
    33e2:	4b04      	ldr	r3, [pc, #16]	; (33f4 <prvTimerTask+0x18>)
    33e4:	4798      	blx	r3
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    33e6:	9901      	ldr	r1, [sp, #4]
    33e8:	4b03      	ldr	r3, [pc, #12]	; (33f8 <prvTimerTask+0x1c>)
    33ea:	4798      	blx	r3
		prvProcessReceivedCommands();
    33ec:	4b03      	ldr	r3, [pc, #12]	; (33fc <prvTimerTask+0x20>)
    33ee:	4798      	blx	r3
    33f0:	e7f6      	b.n	33e0 <prvTimerTask+0x4>
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	00003021 	.word	0x00003021
    33f8:	00003299 	.word	0x00003299
    33fc:	00003319 	.word	0x00003319

00003400 <__ffssi2>:
    3400:	b510      	push	{r4, lr}
    3402:	2300      	movs	r3, #0
    3404:	2800      	cmp	r0, #0
    3406:	d002      	beq.n	340e <__ffssi2+0xe>
    3408:	f000 f804 	bl	3414 <__ctzsi2>
    340c:	1c43      	adds	r3, r0, #1
    340e:	0018      	movs	r0, r3
    3410:	bd10      	pop	{r4, pc}
    3412:	46c0      	nop			; (mov r8, r8)

00003414 <__ctzsi2>:
    3414:	4241      	negs	r1, r0
    3416:	4008      	ands	r0, r1
    3418:	211c      	movs	r1, #28
    341a:	2301      	movs	r3, #1
    341c:	041b      	lsls	r3, r3, #16
    341e:	4298      	cmp	r0, r3
    3420:	d301      	bcc.n	3426 <__ctzsi2+0x12>
    3422:	0c00      	lsrs	r0, r0, #16
    3424:	3910      	subs	r1, #16
    3426:	0a1b      	lsrs	r3, r3, #8
    3428:	4298      	cmp	r0, r3
    342a:	d301      	bcc.n	3430 <__ctzsi2+0x1c>
    342c:	0a00      	lsrs	r0, r0, #8
    342e:	3908      	subs	r1, #8
    3430:	091b      	lsrs	r3, r3, #4
    3432:	4298      	cmp	r0, r3
    3434:	d301      	bcc.n	343a <__ctzsi2+0x26>
    3436:	0900      	lsrs	r0, r0, #4
    3438:	3904      	subs	r1, #4
    343a:	a202      	add	r2, pc, #8	; (adr r2, 3444 <__ctzsi2+0x30>)
    343c:	5c10      	ldrb	r0, [r2, r0]
    343e:	1a40      	subs	r0, r0, r1
    3440:	4770      	bx	lr
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	1d1d1c1b 	.word	0x1d1d1c1b
    3448:	1e1e1e1e 	.word	0x1e1e1e1e
    344c:	1f1f1f1f 	.word	0x1f1f1f1f
    3450:	1f1f1f1f 	.word	0x1f1f1f1f

00003454 <__libc_init_array>:
    3454:	b570      	push	{r4, r5, r6, lr}
    3456:	2600      	movs	r6, #0
    3458:	4d0c      	ldr	r5, [pc, #48]	; (348c <__libc_init_array+0x38>)
    345a:	4c0d      	ldr	r4, [pc, #52]	; (3490 <__libc_init_array+0x3c>)
    345c:	1b64      	subs	r4, r4, r5
    345e:	10a4      	asrs	r4, r4, #2
    3460:	42a6      	cmp	r6, r4
    3462:	d109      	bne.n	3478 <__libc_init_array+0x24>
    3464:	2600      	movs	r6, #0
    3466:	f000 f97f 	bl	3768 <_init>
    346a:	4d0a      	ldr	r5, [pc, #40]	; (3494 <__libc_init_array+0x40>)
    346c:	4c0a      	ldr	r4, [pc, #40]	; (3498 <__libc_init_array+0x44>)
    346e:	1b64      	subs	r4, r4, r5
    3470:	10a4      	asrs	r4, r4, #2
    3472:	42a6      	cmp	r6, r4
    3474:	d105      	bne.n	3482 <__libc_init_array+0x2e>
    3476:	bd70      	pop	{r4, r5, r6, pc}
    3478:	00b3      	lsls	r3, r6, #2
    347a:	58eb      	ldr	r3, [r5, r3]
    347c:	4798      	blx	r3
    347e:	3601      	adds	r6, #1
    3480:	e7ee      	b.n	3460 <__libc_init_array+0xc>
    3482:	00b3      	lsls	r3, r6, #2
    3484:	58eb      	ldr	r3, [r5, r3]
    3486:	4798      	blx	r3
    3488:	3601      	adds	r6, #1
    348a:	e7f2      	b.n	3472 <__libc_init_array+0x1e>
    348c:	00003774 	.word	0x00003774
    3490:	00003774 	.word	0x00003774
    3494:	00003774 	.word	0x00003774
    3498:	00003778 	.word	0x00003778

0000349c <memcpy>:
    349c:	2300      	movs	r3, #0
    349e:	b510      	push	{r4, lr}
    34a0:	429a      	cmp	r2, r3
    34a2:	d100      	bne.n	34a6 <memcpy+0xa>
    34a4:	bd10      	pop	{r4, pc}
    34a6:	5ccc      	ldrb	r4, [r1, r3]
    34a8:	54c4      	strb	r4, [r0, r3]
    34aa:	3301      	adds	r3, #1
    34ac:	e7f8      	b.n	34a0 <memcpy+0x4>

000034ae <memset>:
    34ae:	0003      	movs	r3, r0
    34b0:	1882      	adds	r2, r0, r2
    34b2:	4293      	cmp	r3, r2
    34b4:	d100      	bne.n	34b8 <memset+0xa>
    34b6:	4770      	bx	lr
    34b8:	7019      	strb	r1, [r3, #0]
    34ba:	3301      	adds	r3, #1
    34bc:	e7f9      	b.n	34b2 <memset+0x4>
    34be:	0000      	movs	r0, r0
    34c0:	682f2e2e 	.word	0x682f2e2e
    34c4:	732f6c61 	.word	0x732f6c61
    34c8:	682f6372 	.word	0x682f6372
    34cc:	615f6c61 	.word	0x615f6c61
    34d0:	79735f63 	.word	0x79735f63
    34d4:	632e636e 	.word	0x632e636e
    34d8:	00000000 	.word	0x00000000
    34dc:	682f2e2e 	.word	0x682f2e2e
    34e0:	732f6c61 	.word	0x732f6c61
    34e4:	682f6372 	.word	0x682f6372
    34e8:	615f6c61 	.word	0x615f6c61
    34ec:	735f6364 	.word	0x735f6364
    34f0:	2e636e79 	.word	0x2e636e79
    34f4:	00000063 	.word	0x00000063
    34f8:	682f2e2e 	.word	0x682f2e2e
    34fc:	732f6c61 	.word	0x732f6c61
    3500:	682f6372 	.word	0x682f6372
    3504:	645f6c61 	.word	0x645f6c61
    3508:	735f6361 	.word	0x735f6361
    350c:	2e636e79 	.word	0x2e636e79
    3510:	00000063 	.word	0x00000063
    3514:	682f2e2e 	.word	0x682f2e2e
    3518:	732f6c61 	.word	0x732f6c61
    351c:	682f6372 	.word	0x682f6372
    3520:	665f6c61 	.word	0x665f6c61
    3524:	6873616c 	.word	0x6873616c
    3528:	0000632e 	.word	0x0000632e
    352c:	682f2e2e 	.word	0x682f2e2e
    3530:	732f6c61 	.word	0x732f6c61
    3534:	682f6372 	.word	0x682f6372
    3538:	695f6c61 	.word	0x695f6c61
    353c:	00632e6f 	.word	0x00632e6f
    3540:	682f2e2e 	.word	0x682f2e2e
    3544:	732f6c61 	.word	0x732f6c61
    3548:	682f6372 	.word	0x682f6372
    354c:	705f6c61 	.word	0x705f6c61
    3550:	632e6d77 	.word	0x632e6d77
    3554:	00000000 	.word	0x00000000
    3558:	682f2e2e 	.word	0x682f2e2e
    355c:	732f6c61 	.word	0x732f6c61
    3560:	682f6372 	.word	0x682f6372
    3564:	735f6c61 	.word	0x735f6c61
    3568:	6d5f6970 	.word	0x6d5f6970
    356c:	6e79735f 	.word	0x6e79735f
    3570:	00632e63 	.word	0x00632e63
    3574:	682f2e2e 	.word	0x682f2e2e
    3578:	732f6c61 	.word	0x732f6c61
    357c:	682f6372 	.word	0x682f6372
    3580:	745f6c61 	.word	0x745f6c61
    3584:	72656d69 	.word	0x72656d69
    3588:	0000632e 	.word	0x0000632e
    358c:	682f2e2e 	.word	0x682f2e2e
    3590:	732f6c61 	.word	0x732f6c61
    3594:	682f6372 	.word	0x682f6372
    3598:	755f6c61 	.word	0x755f6c61
    359c:	74726173 	.word	0x74726173
    35a0:	7973615f 	.word	0x7973615f
    35a4:	632e636e 	.word	0x632e636e
    35a8:	00000000 	.word	0x00000000
    35ac:	682f2e2e 	.word	0x682f2e2e
    35b0:	752f6c61 	.word	0x752f6c61
    35b4:	736c6974 	.word	0x736c6974
    35b8:	6372732f 	.word	0x6372732f
    35bc:	6974752f 	.word	0x6974752f
    35c0:	6c5f736c 	.word	0x6c5f736c
    35c4:	2e747369 	.word	0x2e747369
    35c8:	00000063 	.word	0x00000063
    35cc:	682f2e2e 	.word	0x682f2e2e
    35d0:	752f6c61 	.word	0x752f6c61
    35d4:	736c6974 	.word	0x736c6974
    35d8:	6372732f 	.word	0x6372732f
    35dc:	6974752f 	.word	0x6974752f
    35e0:	725f736c 	.word	0x725f736c
    35e4:	62676e69 	.word	0x62676e69
    35e8:	65666675 	.word	0x65666675
    35ec:	00632e72 	.word	0x00632e72

000035f0 <_cfgs>:
    35f0:	42004400 00000016 00000600 00000600     .D.B............
    3600:	00000000 682f2e2e 612f6c70 70682f63     ....../hpl/ac/hp
    3610:	63615f6c 0000632e                       l_ac.c..

00003618 <_adcs>:
    3618:	00000200 00000000 00000000 00000000     ................
	...
    3634:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3644:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    3654:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00003664 <_map>:
    3664:	000000ff ffffffff 682f2e2e 652f6c70     ........../hpl/e
    3674:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    3684:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    3694:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....

000036a4 <_usarts>:
    36a4:	00000003 40310004 00030000 0000d8ad     ......1@........

000036b4 <_i2cms>:
	...

000036cc <_i2css>:
	...

000036dc <sercomspi_regs>:
    36dc:	0020000c 00020000 00000000 01000009     .. .............
    36ec:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    36fc:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    370c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    371c:	00766372 454c4449 00000000 09632509     rcv.IDLE.....%c.
    372c:	25097525 75250975 00000a0d 00003354     %u.%u.%u....T3..
    373c:	00003354 00003354 0000331c 00003396     T3..T3...3...3..
    374c:	000033b0 00003354 00003354 0000331c     .3..T3..T3...3..
    375c:	00003396 20726d54 00637653              .3..Tmr Svc.

00003768 <_init>:
    3768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    376a:	46c0      	nop			; (mov r8, r8)
    376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    376e:	bc08      	pop	{r3}
    3770:	469e      	mov	lr, r3
    3772:	4770      	bx	lr

00003774 <__init_array_start>:
    3774:	000000cd 	.word	0x000000cd

00003778 <_fini>:
    3778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    377e:	bc08      	pop	{r3}
    3780:	469e      	mov	lr, r3
    3782:	4770      	bx	lr

00003784 <__fini_array_start>:
    3784:	000000a5 	.word	0x000000a5
