
OP3SAT(1).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037c4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000002c  20000000  000037c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000028a0  2000002c  000037f0  0002002c  2**2
                  ALLOC
  3 .stack        00002004  200028cc  00006090  0002002c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
  6 .debug_info   00035378  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f57  00000000  00000000  00055425  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001845a  00000000  00000000  0005b37c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001780  00000000  00000000  000737d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000018e0  00000000  00000000  00074f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017a3b  00000000  00000000  00076836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b68f  00000000  00000000  0008e271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068c4d  00000000  00000000  000a9900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003c6c  00000000  00000000  00112550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 48 00 20 1d 01 00 00 19 01 00 00 19 01 00 00     .H. ............
	...
      2c:	9d 1f 00 00 00 00 00 00 00 00 00 00 51 20 00 00     ............Q ..
      3c:	95 20 00 00 19 01 00 00 19 01 00 00 19 01 00 00     . ..............
      4c:	19 01 00 00 f1 11 00 00 15 13 00 00 19 01 00 00     ................
      5c:	19 01 00 00 19 01 00 00 19 01 00 00 b9 15 00 00     ................
      6c:	19 01 00 00 19 01 00 00 11 1c 00 00 25 1c 00 00     ............%...
      7c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      8c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      9c:	19 01 00 00 19 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000002c 	.word	0x2000002c
      c4:	00000000 	.word	0x00000000
      c8:	000037c4 	.word	0x000037c4

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000030 	.word	0x20000030
      f8:	000037c4 	.word	0x000037c4
      fc:	000037c4 	.word	0x000037c4
     100:	00000000 	.word	0x00000000

00000104 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     104:	b510      	push	{r4, lr}
	system_init();
     106:	4b02      	ldr	r3, [pc, #8]	; (110 <atmel_start_init+0xc>)
     108:	4798      	blx	r3

	touch_init();
     10a:	4b02      	ldr	r3, [pc, #8]	; (114 <atmel_start_init+0x10>)
     10c:	4798      	blx	r3
}
     10e:	bd10      	pop	{r4, pc}
     110:	00000509 	.word	0x00000509
     114:	00001d99 	.word	0x00001d99

00000118 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     118:	e7fe      	b.n	118 <Dummy_Handler>
	...

0000011c <Reset_Handler>:
{
     11c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     11e:	4a12      	ldr	r2, [pc, #72]	; (168 <Reset_Handler+0x4c>)
     120:	4b12      	ldr	r3, [pc, #72]	; (16c <Reset_Handler+0x50>)
     122:	429a      	cmp	r2, r3
     124:	d009      	beq.n	13a <Reset_Handler+0x1e>
     126:	4b11      	ldr	r3, [pc, #68]	; (16c <Reset_Handler+0x50>)
     128:	4a0f      	ldr	r2, [pc, #60]	; (168 <Reset_Handler+0x4c>)
     12a:	e003      	b.n	134 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     12c:	6811      	ldr	r1, [r2, #0]
     12e:	6019      	str	r1, [r3, #0]
     130:	3304      	adds	r3, #4
     132:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     134:	490e      	ldr	r1, [pc, #56]	; (170 <Reset_Handler+0x54>)
     136:	428b      	cmp	r3, r1
     138:	d3f8      	bcc.n	12c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <Reset_Handler+0x58>)
     13c:	e002      	b.n	144 <Reset_Handler+0x28>
                *pDest++ = 0;
     13e:	2200      	movs	r2, #0
     140:	601a      	str	r2, [r3, #0]
     142:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4a0c      	ldr	r2, [pc, #48]	; (178 <Reset_Handler+0x5c>)
     146:	4293      	cmp	r3, r2
     148:	d3f9      	bcc.n	13e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14a:	4a0c      	ldr	r2, [pc, #48]	; (17c <Reset_Handler+0x60>)
     14c:	21ff      	movs	r1, #255	; 0xff
     14e:	4b0c      	ldr	r3, [pc, #48]	; (180 <Reset_Handler+0x64>)
     150:	438b      	bics	r3, r1
     152:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     154:	4a0b      	ldr	r2, [pc, #44]	; (184 <Reset_Handler+0x68>)
     156:	6851      	ldr	r1, [r2, #4]
     158:	2380      	movs	r3, #128	; 0x80
     15a:	430b      	orrs	r3, r1
     15c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <Reset_Handler+0x6c>)
     160:	4798      	blx	r3
        main();
     162:	4b0a      	ldr	r3, [pc, #40]	; (18c <Reset_Handler+0x70>)
     164:	4798      	blx	r3
     166:	e7fe      	b.n	166 <Reset_Handler+0x4a>
     168:	000037c4 	.word	0x000037c4
     16c:	20000000 	.word	0x20000000
     170:	2000002c 	.word	0x2000002c
     174:	2000002c 	.word	0x2000002c
     178:	200028cc 	.word	0x200028cc
     17c:	e000ed00 	.word	0xe000ed00
     180:	00000000 	.word	0x00000000
     184:	41004000 	.word	0x41004000
     188:	00003475 	.word	0x00003475
     18c:	00001cd5 	.word	0x00001cd5

00000190 <PTC_0_clock_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     190:	4a04      	ldr	r2, [pc, #16]	; (1a4 <PTC_0_clock_init+0x14>)
     192:	6a11      	ldr	r1, [r2, #32]
     194:	2380      	movs	r3, #128	; 0x80
     196:	031b      	lsls	r3, r3, #12
     198:	430b      	orrs	r3, r1
     19a:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <PTC_0_clock_init+0x18>)
     19e:	4b03      	ldr	r3, [pc, #12]	; (1ac <PTC_0_clock_init+0x1c>)
     1a0:	805a      	strh	r2, [r3, #2]
 */
static void PTC_0_clock_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, PTC);
	_gclk_enable_channel(PTC_GCLK_ID, CONF_GCLK_PTC_SRC);
}
     1a2:	4770      	bx	lr
     1a4:	40000400 	.word	0x40000400
     1a8:	0000401b 	.word	0x0000401b
     1ac:	40000c00 	.word	0x40000c00

000001b0 <TIMER_0_init>:
{
     1b0:	b510      	push	{r4, lr}
     1b2:	4a08      	ldr	r2, [pc, #32]	; (1d4 <TIMER_0_init+0x24>)
     1b4:	6a11      	ldr	r1, [r2, #32]
     1b6:	2380      	movs	r3, #128	; 0x80
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	430b      	orrs	r3, r1
     1bc:	6213      	str	r3, [r2, #32]
     1be:	4a06      	ldr	r2, [pc, #24]	; (1d8 <TIMER_0_init+0x28>)
     1c0:	4b06      	ldr	r3, [pc, #24]	; (1dc <TIMER_0_init+0x2c>)
     1c2:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC1, _tc_get_timer());
     1c4:	4b06      	ldr	r3, [pc, #24]	; (1e0 <TIMER_0_init+0x30>)
     1c6:	4798      	blx	r3
     1c8:	0002      	movs	r2, r0
     1ca:	4906      	ldr	r1, [pc, #24]	; (1e4 <TIMER_0_init+0x34>)
     1cc:	4806      	ldr	r0, [pc, #24]	; (1e8 <TIMER_0_init+0x38>)
     1ce:	4b07      	ldr	r3, [pc, #28]	; (1ec <TIMER_0_init+0x3c>)
     1d0:	4798      	blx	r3
}
     1d2:	bd10      	pop	{r4, pc}
     1d4:	40000400 	.word	0x40000400
     1d8:	00004013 	.word	0x00004013
     1dc:	40000c00 	.word	0x40000c00
     1e0:	00001c09 	.word	0x00001c09
     1e4:	42002400 	.word	0x42002400
     1e8:	200028ac 	.word	0x200028ac
     1ec:	000009f1 	.word	0x000009f1

000001f0 <ADC_0_CLOCK_init>:
     1f0:	4a04      	ldr	r2, [pc, #16]	; (204 <ADC_0_CLOCK_init+0x14>)
     1f2:	6a11      	ldr	r1, [r2, #32]
     1f4:	2380      	movs	r3, #128	; 0x80
     1f6:	025b      	lsls	r3, r3, #9
     1f8:	430b      	orrs	r3, r1
     1fa:	6213      	str	r3, [r2, #32]
     1fc:	4a02      	ldr	r2, [pc, #8]	; (208 <ADC_0_CLOCK_init+0x18>)
     1fe:	4b03      	ldr	r3, [pc, #12]	; (20c <ADC_0_CLOCK_init+0x1c>)
     200:	805a      	strh	r2, [r3, #2]
}
     202:	4770      	bx	lr
     204:	40000400 	.word	0x40000400
     208:	00004017 	.word	0x00004017
     20c:	40000c00 	.word	0x40000c00

00000210 <ADC_0_init>:
{
     210:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     212:	4b04      	ldr	r3, [pc, #16]	; (224 <ADC_0_init+0x14>)
     214:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     216:	2200      	movs	r2, #0
     218:	4903      	ldr	r1, [pc, #12]	; (228 <ADC_0_init+0x18>)
     21a:	4804      	ldr	r0, [pc, #16]	; (22c <ADC_0_init+0x1c>)
     21c:	4b04      	ldr	r3, [pc, #16]	; (230 <ADC_0_init+0x20>)
     21e:	4798      	blx	r3
}
     220:	bd10      	pop	{r4, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	000001f1 	.word	0x000001f1
     228:	42004000 	.word	0x42004000
     22c:	20002884 	.word	0x20002884
     230:	000005d1 	.word	0x000005d1

00000234 <EXTERNAL_IRQ_0_init>:
{
     234:	b510      	push	{r4, lr}
     236:	4a03      	ldr	r2, [pc, #12]	; (244 <EXTERNAL_IRQ_0_init+0x10>)
     238:	4b03      	ldr	r3, [pc, #12]	; (248 <EXTERNAL_IRQ_0_init+0x14>)
     23a:	805a      	strh	r2, [r3, #2]
	ext_irq_init();
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <EXTERNAL_IRQ_0_init+0x18>)
     23e:	4798      	blx	r3
}
     240:	bd10      	pop	{r4, pc}
     242:	46c0      	nop			; (mov r8, r8)
     244:	00004003 	.word	0x00004003
     248:	40000c00 	.word	0x40000c00
     24c:	000006ed 	.word	0x000006ed

00000250 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     250:	4a02      	ldr	r2, [pc, #8]	; (25c <FLASH_0_CLOCK_init+0xc>)
     252:	69d3      	ldr	r3, [r2, #28]
     254:	2104      	movs	r1, #4
     256:	430b      	orrs	r3, r1
     258:	61d3      	str	r3, [r2, #28]
}
     25a:	4770      	bx	lr
     25c:	40000400 	.word	0x40000400

00000260 <FLASH_0_init>:
{
     260:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     262:	4b03      	ldr	r3, [pc, #12]	; (270 <FLASH_0_init+0x10>)
     264:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     266:	4903      	ldr	r1, [pc, #12]	; (274 <FLASH_0_init+0x14>)
     268:	4803      	ldr	r0, [pc, #12]	; (278 <FLASH_0_init+0x18>)
     26a:	4b04      	ldr	r3, [pc, #16]	; (27c <FLASH_0_init+0x1c>)
     26c:	4798      	blx	r3
}
     26e:	bd10      	pop	{r4, pc}
     270:	00000251 	.word	0x00000251
     274:	41004000 	.word	0x41004000
     278:	20002864 	.word	0x20002864
     27c:	00000739 	.word	0x00000739

00000280 <SPI_0_PORT_init>:
{
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	46ce      	mov	lr, r9
     284:	4647      	mov	r7, r8
     286:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     288:	22c0      	movs	r2, #192	; 0xc0
     28a:	05d2      	lsls	r2, r2, #23
     28c:	2401      	movs	r4, #1
     28e:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     290:	6094      	str	r4, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     292:	4b25      	ldr	r3, [pc, #148]	; (328 <SPI_0_PORT_init+0xa8>)
     294:	4925      	ldr	r1, [pc, #148]	; (32c <SPI_0_PORT_init+0xac>)
     296:	6299      	str	r1, [r3, #40]	; 0x28
     298:	27c0      	movs	r7, #192	; 0xc0
     29a:	063f      	lsls	r7, r7, #24
     29c:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	2040      	movs	r0, #64	; 0x40
     2a0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a2:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a4:	2501      	movs	r5, #1
     2a6:	4329      	orrs	r1, r5
     2a8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2aa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2ac:	2630      	movs	r6, #48	; 0x30
     2ae:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2b0:	3831      	subs	r0, #49	; 0x31
     2b2:	4681      	mov	r9, r0
     2b4:	4381      	bics	r1, r0
     2b6:	4688      	mov	r8, r1
	tmp |= PORT_PMUX_PMUXE(data);
     2b8:	2103      	movs	r1, #3
     2ba:	468c      	mov	ip, r1
     2bc:	4661      	mov	r1, ip
     2be:	4640      	mov	r0, r8
     2c0:	4308      	orrs	r0, r1
     2c2:	b2c1      	uxtb	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2c4:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c6:	2102      	movs	r1, #2
     2c8:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2ca:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4918      	ldr	r1, [pc, #96]	; (330 <SPI_0_PORT_init+0xb0>)
     2ce:	6299      	str	r1, [r3, #40]	; 0x28
     2d0:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	2741      	movs	r7, #65	; 0x41
     2d4:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d6:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2d8:	4329      	orrs	r1, r5
     2da:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2de:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2e0:	3f32      	subs	r7, #50	; 0x32
     2e2:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     2e4:	2730      	movs	r7, #48	; 0x30
     2e6:	4339      	orrs	r1, r7
     2e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ea:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2ec:	2180      	movs	r1, #128	; 0x80
     2ee:	02c9      	lsls	r1, r1, #11
     2f0:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2f2:	4a10      	ldr	r2, [pc, #64]	; (334 <SPI_0_PORT_init+0xb4>)
     2f4:	629a      	str	r2, [r3, #40]	; 0x28
     2f6:	4a10      	ldr	r2, [pc, #64]	; (338 <SPI_0_PORT_init+0xb8>)
     2f8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2fa:	2152      	movs	r1, #82	; 0x52
     2fc:	5c5a      	ldrb	r2, [r3, r1]
     2fe:	3e2c      	subs	r6, #44	; 0x2c
     300:	43b2      	bics	r2, r6
     302:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     304:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     306:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     308:	432a      	orrs	r2, r5
     30a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     30e:	3919      	subs	r1, #25
     310:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     312:	4648      	mov	r0, r9
     314:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     316:	2002      	movs	r0, #2
     318:	4302      	orrs	r2, r0
     31a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31c:	545a      	strb	r2, [r3, r1]
}
     31e:	bc0c      	pop	{r2, r3}
     320:	4690      	mov	r8, r2
     322:	4699      	mov	r9, r3
     324:	bdf0      	pop	{r4, r5, r6, r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	41004400 	.word	0x41004400
     32c:	40000001 	.word	0x40000001
     330:	40000002 	.word	0x40000002
     334:	40020000 	.word	0x40020000
     338:	c0020004 	.word	0xc0020004

0000033c <SPI_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     33c:	4a04      	ldr	r2, [pc, #16]	; (350 <SPI_0_CLOCK_init+0x14>)
     33e:	6a13      	ldr	r3, [r2, #32]
     340:	2108      	movs	r1, #8
     342:	430b      	orrs	r3, r1
     344:	6213      	str	r3, [r2, #32]
     346:	4a03      	ldr	r2, [pc, #12]	; (354 <SPI_0_CLOCK_init+0x18>)
     348:	4b03      	ldr	r3, [pc, #12]	; (358 <SPI_0_CLOCK_init+0x1c>)
     34a:	805a      	strh	r2, [r3, #2]
}
     34c:	4770      	bx	lr
     34e:	46c0      	nop			; (mov r8, r8)
     350:	40000400 	.word	0x40000400
     354:	0000400e 	.word	0x0000400e
     358:	40000c00 	.word	0x40000c00

0000035c <SPI_0_init>:
{
     35c:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     35e:	4b04      	ldr	r3, [pc, #16]	; (370 <SPI_0_init+0x14>)
     360:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     362:	4904      	ldr	r1, [pc, #16]	; (374 <SPI_0_init+0x18>)
     364:	4804      	ldr	r0, [pc, #16]	; (378 <SPI_0_init+0x1c>)
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <SPI_0_init+0x20>)
     368:	4798      	blx	r3
	SPI_0_PORT_init();
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <SPI_0_init+0x24>)
     36c:	4798      	blx	r3
}
     36e:	bd10      	pop	{r4, pc}
     370:	0000033d 	.word	0x0000033d
     374:	42000c00 	.word	0x42000c00
     378:	20002894 	.word	0x20002894
     37c:	0000081d 	.word	0x0000081d
     380:	00000281 	.word	0x00000281

00000384 <SERIAL_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SERIAL_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2120      	movs	r1, #32
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SERIAL_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SERIAL_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004010 	.word	0x00004010
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SERIAL_PORT_init>:
{
     3a4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a6:	4b0f      	ldr	r3, [pc, #60]	; (3e4 <SERIAL_PORT_init+0x40>)
     3a8:	2258      	movs	r2, #88	; 0x58
     3aa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ac:	2501      	movs	r5, #1
     3ae:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b0:	2401      	movs	r4, #1
     3b2:	4321      	orrs	r1, r4
     3b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b8:	203c      	movs	r0, #60	; 0x3c
     3ba:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3bc:	3a49      	subs	r2, #73	; 0x49
     3be:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c0:	2202      	movs	r2, #2
     3c2:	4311      	orrs	r1, r2
     3c4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	2159      	movs	r1, #89	; 0x59
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	394a      	subs	r1, #74	; 0x4a
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	2120      	movs	r1, #32
     3dc:	430a      	orrs	r2, r1
     3de:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e0:	541a      	strb	r2, [r3, r0]
}
     3e2:	bd30      	pop	{r4, r5, pc}
     3e4:	41004400 	.word	0x41004400

000003e8 <SERIAL_init>:
{
     3e8:	b510      	push	{r4, lr}
     3ea:	b082      	sub	sp, #8
	SERIAL_CLOCK_init();
     3ec:	4b06      	ldr	r3, [pc, #24]	; (408 <SERIAL_init+0x20>)
     3ee:	4798      	blx	r3
	usart_async_init(&SERIAL, SERCOM3, SERIAL_buffer, SERIAL_BUFFER_SIZE, (void *)NULL);
     3f0:	2300      	movs	r3, #0
     3f2:	9300      	str	r3, [sp, #0]
     3f4:	3310      	adds	r3, #16
     3f6:	4a05      	ldr	r2, [pc, #20]	; (40c <SERIAL_init+0x24>)
     3f8:	4905      	ldr	r1, [pc, #20]	; (410 <SERIAL_init+0x28>)
     3fa:	4806      	ldr	r0, [pc, #24]	; (414 <SERIAL_init+0x2c>)
     3fc:	4c06      	ldr	r4, [pc, #24]	; (418 <SERIAL_init+0x30>)
     3fe:	47a0      	blx	r4
	SERIAL_PORT_init();
     400:	4b06      	ldr	r3, [pc, #24]	; (41c <SERIAL_init+0x34>)
     402:	4798      	blx	r3
}
     404:	b002      	add	sp, #8
     406:	bd10      	pop	{r4, pc}
     408:	00000385 	.word	0x00000385
     40c:	20000048 	.word	0x20000048
     410:	42001400 	.word	0x42001400
     414:	200027f8 	.word	0x200027f8
     418:	00000ba1 	.word	0x00000ba1
     41c:	000003a5 	.word	0x000003a5

00000420 <delay_driver_init>:
{
     420:	b510      	push	{r4, lr}
	delay_init(SysTick);
     422:	4802      	ldr	r0, [pc, #8]	; (42c <delay_driver_init+0xc>)
     424:	4b02      	ldr	r3, [pc, #8]	; (430 <delay_driver_init+0x10>)
     426:	4798      	blx	r3
}
     428:	bd10      	pop	{r4, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	e000e010 	.word	0xe000e010
     430:	00000675 	.word	0x00000675

00000434 <PWM_0_CLOCK_init>:
     434:	4a04      	ldr	r2, [pc, #16]	; (448 <PWM_0_CLOCK_init+0x14>)
     436:	6a11      	ldr	r1, [r2, #32]
     438:	2380      	movs	r3, #128	; 0x80
     43a:	005b      	lsls	r3, r3, #1
     43c:	430b      	orrs	r3, r1
     43e:	6213      	str	r3, [r2, #32]
     440:	4a02      	ldr	r2, [pc, #8]	; (44c <PWM_0_CLOCK_init+0x18>)
     442:	4b03      	ldr	r3, [pc, #12]	; (450 <PWM_0_CLOCK_init+0x1c>)
     444:	805a      	strh	r2, [r3, #2]
}
     446:	4770      	bx	lr
     448:	40000400 	.word	0x40000400
     44c:	00004013 	.word	0x00004013
     450:	40000c00 	.word	0x40000c00

00000454 <PWM_0_init>:
{
     454:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <PWM_0_init+0x18>)
     458:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     45a:	4b05      	ldr	r3, [pc, #20]	; (470 <PWM_0_init+0x1c>)
     45c:	4798      	blx	r3
     45e:	0002      	movs	r2, r0
     460:	4904      	ldr	r1, [pc, #16]	; (474 <PWM_0_init+0x20>)
     462:	4805      	ldr	r0, [pc, #20]	; (478 <PWM_0_init+0x24>)
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <PWM_0_init+0x28>)
     466:	4798      	blx	r3
}
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	00000435 	.word	0x00000435
     470:	00001c0d 	.word	0x00001c0d
     474:	42002000 	.word	0x42002000
     478:	20002848 	.word	0x20002848
     47c:	000007d5 	.word	0x000007d5

00000480 <AC_0_CLOCK_init>:
     480:	4a05      	ldr	r2, [pc, #20]	; (498 <AC_0_CLOCK_init+0x18>)
     482:	6a11      	ldr	r1, [r2, #32]
     484:	2380      	movs	r3, #128	; 0x80
     486:	029b      	lsls	r3, r3, #10
     488:	430b      	orrs	r3, r1
     48a:	6213      	str	r3, [r2, #32]
     48c:	4b03      	ldr	r3, [pc, #12]	; (49c <AC_0_CLOCK_init+0x1c>)
     48e:	4a04      	ldr	r2, [pc, #16]	; (4a0 <AC_0_CLOCK_init+0x20>)
     490:	805a      	strh	r2, [r3, #2]
     492:	4a04      	ldr	r2, [pc, #16]	; (4a4 <AC_0_CLOCK_init+0x24>)
     494:	805a      	strh	r2, [r3, #2]
}
     496:	4770      	bx	lr
     498:	40000400 	.word	0x40000400
     49c:	40000c00 	.word	0x40000c00
     4a0:	00004018 	.word	0x00004018
     4a4:	00004019 	.word	0x00004019

000004a8 <AC_0_init>:
{
     4a8:	b510      	push	{r4, lr}
	AC_0_CLOCK_init();
     4aa:	4b03      	ldr	r3, [pc, #12]	; (4b8 <AC_0_init+0x10>)
     4ac:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     4ae:	4903      	ldr	r1, [pc, #12]	; (4bc <AC_0_init+0x14>)
     4b0:	4803      	ldr	r0, [pc, #12]	; (4c0 <AC_0_init+0x18>)
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <AC_0_init+0x1c>)
     4b4:	4798      	blx	r3
}
     4b6:	bd10      	pop	{r4, pc}
     4b8:	00000481 	.word	0x00000481
     4bc:	42004400 	.word	0x42004400
     4c0:	20002880 	.word	0x20002880
     4c4:	00000599 	.word	0x00000599

000004c8 <DAC_0_CLOCK_init>:
     4c8:	4a04      	ldr	r2, [pc, #16]	; (4dc <DAC_0_CLOCK_init+0x14>)
     4ca:	6a11      	ldr	r1, [r2, #32]
     4cc:	2380      	movs	r3, #128	; 0x80
     4ce:	02db      	lsls	r3, r3, #11
     4d0:	430b      	orrs	r3, r1
     4d2:	6213      	str	r3, [r2, #32]
     4d4:	4a02      	ldr	r2, [pc, #8]	; (4e0 <DAC_0_CLOCK_init+0x18>)
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <DAC_0_CLOCK_init+0x1c>)
     4d8:	805a      	strh	r2, [r3, #2]
}
     4da:	4770      	bx	lr
     4dc:	40000400 	.word	0x40000400
     4e0:	0000401a 	.word	0x0000401a
     4e4:	40000c00 	.word	0x40000c00

000004e8 <DAC_0_init>:
{
     4e8:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     4ea:	4b03      	ldr	r3, [pc, #12]	; (4f8 <DAC_0_init+0x10>)
     4ec:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     4ee:	4903      	ldr	r1, [pc, #12]	; (4fc <DAC_0_init+0x14>)
     4f0:	4803      	ldr	r0, [pc, #12]	; (500 <DAC_0_init+0x18>)
     4f2:	4b04      	ldr	r3, [pc, #16]	; (504 <DAC_0_init+0x1c>)
     4f4:	4798      	blx	r3
}
     4f6:	bd10      	pop	{r4, pc}
     4f8:	000004c9 	.word	0x000004c9
     4fc:	42004800 	.word	0x42004800
     500:	20002888 	.word	0x20002888
     504:	00000625 	.word	0x00000625

00000508 <system_init>:

void system_init(void)
{
     508:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     50a:	4b15      	ldr	r3, [pc, #84]	; (560 <system_init+0x58>)
     50c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50e:	22c0      	movs	r2, #192	; 0xc0
     510:	05d2      	lsls	r2, r2, #23
     512:	2180      	movs	r1, #128	; 0x80
     514:	01c9      	lsls	r1, r1, #7
     516:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     518:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51a:	4b12      	ldr	r3, [pc, #72]	; (564 <system_init+0x5c>)
     51c:	4812      	ldr	r0, [pc, #72]	; (568 <system_init+0x60>)
     51e:	6298      	str	r0, [r3, #40]	; 0x28
     520:	20c0      	movs	r0, #192	; 0xc0
     522:	0600      	lsls	r0, r0, #24
     524:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     526:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     528:	214e      	movs	r1, #78	; 0x4e
     52a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     52c:	2001      	movs	r0, #1
     52e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     530:	545a      	strb	r2, [r3, r1]
	// <true"> High
	0);
	
	gpio_set_pin_function(BLINK, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     532:	4b0e      	ldr	r3, [pc, #56]	; (56c <system_init+0x64>)
     534:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     536:	4b0e      	ldr	r3, [pc, #56]	; (570 <system_init+0x68>)
     538:	4798      	blx	r3

	FLASH_0_init();
     53a:	4b0e      	ldr	r3, [pc, #56]	; (574 <system_init+0x6c>)
     53c:	4798      	blx	r3

	SPI_0_init();
     53e:	4b0e      	ldr	r3, [pc, #56]	; (578 <system_init+0x70>)
     540:	4798      	blx	r3
	SERIAL_init();
     542:	4b0e      	ldr	r3, [pc, #56]	; (57c <system_init+0x74>)
     544:	4798      	blx	r3

	delay_driver_init();
     546:	4b0e      	ldr	r3, [pc, #56]	; (580 <system_init+0x78>)
     548:	4798      	blx	r3

	PWM_0_init();
     54a:	4b0e      	ldr	r3, [pc, #56]	; (584 <system_init+0x7c>)
     54c:	4798      	blx	r3

	TIMER_0_init();
     54e:	4b0e      	ldr	r3, [pc, #56]	; (588 <system_init+0x80>)
     550:	4798      	blx	r3
	AC_0_init();
     552:	4b0e      	ldr	r3, [pc, #56]	; (58c <system_init+0x84>)
     554:	4798      	blx	r3

	DAC_0_init();
     556:	4b0e      	ldr	r3, [pc, #56]	; (590 <system_init+0x88>)
     558:	4798      	blx	r3

	PTC_0_clock_init();
     55a:	4b0e      	ldr	r3, [pc, #56]	; (594 <system_init+0x8c>)
     55c:	4798      	blx	r3
}
     55e:	bd10      	pop	{r4, pc}
     560:	000010c1 	.word	0x000010c1
     564:	41004400 	.word	0x41004400
     568:	40004000 	.word	0x40004000
     56c:	00000211 	.word	0x00000211
     570:	00000235 	.word	0x00000235
     574:	00000261 	.word	0x00000261
     578:	0000035d 	.word	0x0000035d
     57c:	000003e9 	.word	0x000003e9
     580:	00000421 	.word	0x00000421
     584:	00000455 	.word	0x00000455
     588:	000001b1 	.word	0x000001b1
     58c:	000004a9 	.word	0x000004a9
     590:	000004e9 	.word	0x000004e9
     594:	00000191 	.word	0x00000191

00000598 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	0004      	movs	r4, r0
     59c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     59e:	2800      	cmp	r0, #0
     5a0:	d00d      	beq.n	5be <ac_sync_init+0x26>
     5a2:	2900      	cmp	r1, #0
     5a4:	d009      	beq.n	5ba <ac_sync_init+0x22>
     5a6:	2001      	movs	r0, #1
     5a8:	2231      	movs	r2, #49	; 0x31
     5aa:	4906      	ldr	r1, [pc, #24]	; (5c4 <ac_sync_init+0x2c>)
     5ac:	4b06      	ldr	r3, [pc, #24]	; (5c8 <ac_sync_init+0x30>)
     5ae:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
     5b0:	0029      	movs	r1, r5
     5b2:	0020      	movs	r0, r4
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <ac_sync_init+0x34>)
     5b6:	4798      	blx	r3
}
     5b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5ba:	2000      	movs	r0, #0
     5bc:	e7f4      	b.n	5a8 <ac_sync_init+0x10>
     5be:	2000      	movs	r0, #0
     5c0:	e7f2      	b.n	5a8 <ac_sync_init+0x10>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	000034e0 	.word	0x000034e0
     5c8:	00000ce1 	.word	0x00000ce1
     5cc:	00000f05 	.word	0x00000f05

000005d0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5d6:	2800      	cmp	r0, #0
     5d8:	d00d      	beq.n	5f6 <adc_sync_init+0x26>
     5da:	2900      	cmp	r1, #0
     5dc:	d009      	beq.n	5f2 <adc_sync_init+0x22>
     5de:	2001      	movs	r0, #1
     5e0:	2239      	movs	r2, #57	; 0x39
     5e2:	4906      	ldr	r1, [pc, #24]	; (5fc <adc_sync_init+0x2c>)
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <adc_sync_init+0x30>)
     5e6:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     5e8:	0029      	movs	r1, r5
     5ea:	0020      	movs	r0, r4
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <adc_sync_init+0x34>)
     5ee:	4798      	blx	r3
}
     5f0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5f2:	2000      	movs	r0, #0
     5f4:	e7f4      	b.n	5e0 <adc_sync_init+0x10>
     5f6:	2000      	movs	r0, #0
     5f8:	e7f2      	b.n	5e0 <adc_sync_init+0x10>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	000034fc 	.word	0x000034fc
     600:	00000ce1 	.word	0x00000ce1
     604:	0000107d 	.word	0x0000107d

00000608 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     608:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     60c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     60e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     610:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     614:	4770      	bx	lr

00000616 <atomic_leave_critical>:
     616:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     61a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     61c:	f383 8810 	msr	PRIMASK, r3
}
     620:	4770      	bx	lr
	...

00000624 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0004      	movs	r4, r0
     628:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     62a:	2800      	cmp	r0, #0
     62c:	d010      	beq.n	650 <dac_sync_init+0x2c>
     62e:	2900      	cmp	r1, #0
     630:	d00c      	beq.n	64c <dac_sync_init+0x28>
     632:	2001      	movs	r0, #1
     634:	2232      	movs	r2, #50	; 0x32
     636:	490c      	ldr	r1, [pc, #48]	; (668 <dac_sync_init+0x44>)
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <dac_sync_init+0x48>)
     63a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     63c:	0029      	movs	r1, r5
     63e:	0020      	movs	r0, r4
     640:	4b0b      	ldr	r3, [pc, #44]	; (670 <dac_sync_init+0x4c>)
     642:	4798      	blx	r3
	if (rc) {
     644:	2800      	cmp	r0, #0
     646:	d10e      	bne.n	666 <dac_sync_init+0x42>
     648:	2300      	movs	r3, #0
     64a:	e00a      	b.n	662 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     64c:	2000      	movs	r0, #0
     64e:	e7f1      	b.n	634 <dac_sync_init+0x10>
     650:	2000      	movs	r0, #0
     652:	e7ef      	b.n	634 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     654:	00da      	lsls	r2, r3, #3
     656:	18a2      	adds	r2, r4, r2
     658:	2100      	movs	r1, #0
     65a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     65c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     65e:	3301      	adds	r3, #1
     660:	b2db      	uxtb	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	d0f6      	beq.n	654 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     666:	bd70      	pop	{r4, r5, r6, pc}
     668:	00003518 	.word	0x00003518
     66c:	00000ce1 	.word	0x00000ce1
     670:	00001135 	.word	0x00001135

00000674 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     674:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     676:	4b02      	ldr	r3, [pc, #8]	; (680 <delay_init+0xc>)
     678:	6018      	str	r0, [r3, #0]
     67a:	4b02      	ldr	r3, [pc, #8]	; (684 <delay_init+0x10>)
     67c:	4798      	blx	r3
}
     67e:	bd10      	pop	{r4, pc}
     680:	20000058 	.word	0x20000058
     684:	000018e1 	.word	0x000018e1

00000688 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     688:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <delay_ms+0x14>)
     68c:	681c      	ldr	r4, [r3, #0]
     68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <delay_ms+0x18>)
     690:	4798      	blx	r3
     692:	0001      	movs	r1, r0
     694:	0020      	movs	r0, r4
     696:	4b03      	ldr	r3, [pc, #12]	; (6a4 <delay_ms+0x1c>)
     698:	4798      	blx	r3
}
     69a:	bd10      	pop	{r4, pc}
     69c:	20000058 	.word	0x20000058
     6a0:	000010b5 	.word	0x000010b5
     6a4:	000018ed 	.word	0x000018ed

000006a8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     6a8:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     6aa:	2501      	movs	r5, #1
     6ac:	2400      	movs	r4, #0

	while (upper >= lower) {
     6ae:	e007      	b.n	6c0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     6b0:	4a0d      	ldr	r2, [pc, #52]	; (6e8 <process_ext_irq+0x40>)
     6b2:	58b3      	ldr	r3, [r6, r2]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d000      	beq.n	6ba <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     6b8:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     6ba:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     6bc:	3a01      	subs	r2, #1
     6be:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     6c0:	42ac      	cmp	r4, r5
     6c2:	d8fa      	bhi.n	6ba <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     6c4:	192b      	adds	r3, r5, r4
     6c6:	105b      	asrs	r3, r3, #1
     6c8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     6ca:	2a00      	cmp	r2, #0
     6cc:	d1f5      	bne.n	6ba <process_ext_irq+0x12>
     6ce:	21ff      	movs	r1, #255	; 0xff
     6d0:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     6d2:	00de      	lsls	r6, r3, #3
     6d4:	4904      	ldr	r1, [pc, #16]	; (6e8 <process_ext_irq+0x40>)
     6d6:	1989      	adds	r1, r1, r6
     6d8:	6849      	ldr	r1, [r1, #4]
     6da:	4281      	cmp	r1, r0
     6dc:	d0e8      	beq.n	6b0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     6de:	d2ed      	bcs.n	6bc <process_ext_irq+0x14>
			lower = middle + 1;
     6e0:	3201      	adds	r2, #1
     6e2:	b2d4      	uxtb	r4, r2
     6e4:	e7ec      	b.n	6c0 <process_ext_irq+0x18>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	2000005c 	.word	0x2000005c

000006ec <ext_irq_init>:
{
     6ec:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     6ee:	2300      	movs	r3, #0
     6f0:	2b00      	cmp	r3, #0
     6f2:	d003      	beq.n	6fc <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     6f4:	4807      	ldr	r0, [pc, #28]	; (714 <ext_irq_init+0x28>)
     6f6:	4b08      	ldr	r3, [pc, #32]	; (718 <ext_irq_init+0x2c>)
     6f8:	4798      	blx	r3
}
     6fa:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     6fc:	4a07      	ldr	r2, [pc, #28]	; (71c <ext_irq_init+0x30>)
     6fe:	00d9      	lsls	r1, r3, #3
     700:	1850      	adds	r0, r2, r1
     702:	2401      	movs	r4, #1
     704:	4264      	negs	r4, r4
     706:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     708:	2000      	movs	r0, #0
     70a:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     70c:	3301      	adds	r3, #1
     70e:	b29b      	uxth	r3, r3
     710:	e7ee      	b.n	6f0 <ext_irq_init+0x4>
     712:	46c0      	nop			; (mov r8, r8)
     714:	000006a9 	.word	0x000006a9
     718:	00001161 	.word	0x00001161
     71c:	2000005c 	.word	0x2000005c

00000720 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     720:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     722:	6943      	ldr	r3, [r0, #20]
     724:	2b00      	cmp	r3, #0
     726:	d000      	beq.n	72a <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     728:	4798      	blx	r3
	}
}
     72a:	bd10      	pop	{r4, pc}

0000072c <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     72c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     72e:	6983      	ldr	r3, [r0, #24]
     730:	2b00      	cmp	r3, #0
     732:	d000      	beq.n	736 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     734:	4798      	blx	r3
	}
}
     736:	bd10      	pop	{r4, pc}

00000738 <flash_init>:
{
     738:	b570      	push	{r4, r5, r6, lr}
     73a:	0004      	movs	r4, r0
     73c:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     73e:	2800      	cmp	r0, #0
     740:	d013      	beq.n	76a <flash_init+0x32>
     742:	2900      	cmp	r1, #0
     744:	d00f      	beq.n	766 <flash_init+0x2e>
     746:	2001      	movs	r0, #1
     748:	2238      	movs	r2, #56	; 0x38
     74a:	4909      	ldr	r1, [pc, #36]	; (770 <flash_init+0x38>)
     74c:	4b09      	ldr	r3, [pc, #36]	; (774 <flash_init+0x3c>)
     74e:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     750:	0029      	movs	r1, r5
     752:	0020      	movs	r0, r4
     754:	4b08      	ldr	r3, [pc, #32]	; (778 <flash_init+0x40>)
     756:	4798      	blx	r3
	if (rc) {
     758:	2800      	cmp	r0, #0
     75a:	d103      	bne.n	764 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     75c:	4b07      	ldr	r3, [pc, #28]	; (77c <flash_init+0x44>)
     75e:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <flash_init+0x48>)
     762:	6063      	str	r3, [r4, #4]
}
     764:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     766:	2000      	movs	r0, #0
     768:	e7ee      	b.n	748 <flash_init+0x10>
     76a:	2000      	movs	r0, #0
     76c:	e7ec      	b.n	748 <flash_init+0x10>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00003534 	.word	0x00003534
     774:	00000ce1 	.word	0x00000ce1
     778:	000012b5 	.word	0x000012b5
     77c:	00000721 	.word	0x00000721
     780:	0000072d 	.word	0x0000072d

00000784 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     784:	b570      	push	{r4, r5, r6, lr}
     786:	0004      	movs	r4, r0
     788:	000d      	movs	r5, r1
     78a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     78c:	2800      	cmp	r0, #0
     78e:	d00e      	beq.n	7ae <io_read+0x2a>
     790:	2900      	cmp	r1, #0
     792:	d00a      	beq.n	7aa <io_read+0x26>
     794:	2001      	movs	r0, #1
     796:	223d      	movs	r2, #61	; 0x3d
     798:	4906      	ldr	r1, [pc, #24]	; (7b4 <io_read+0x30>)
     79a:	4b07      	ldr	r3, [pc, #28]	; (7b8 <io_read+0x34>)
     79c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     79e:	6863      	ldr	r3, [r4, #4]
     7a0:	0032      	movs	r2, r6
     7a2:	0029      	movs	r1, r5
     7a4:	0020      	movs	r0, r4
     7a6:	4798      	blx	r3
}
     7a8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     7aa:	2000      	movs	r0, #0
     7ac:	e7f3      	b.n	796 <io_read+0x12>
     7ae:	2000      	movs	r0, #0
     7b0:	e7f1      	b.n	796 <io_read+0x12>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	0000354c 	.word	0x0000354c
     7b8:	00000ce1 	.word	0x00000ce1

000007bc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     7bc:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     7be:	6943      	ldr	r3, [r0, #20]
     7c0:	2b00      	cmp	r3, #0
     7c2:	d000      	beq.n	7c6 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     7c4:	4798      	blx	r3
	}
}
     7c6:	bd10      	pop	{r4, pc}

000007c8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     7c8:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     7ca:	6983      	ldr	r3, [r0, #24]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d000      	beq.n	7d2 <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     7d0:	4798      	blx	r3
	}
}
     7d2:	bd10      	pop	{r4, pc}

000007d4 <pwm_init>:
{
     7d4:	b570      	push	{r4, r5, r6, lr}
     7d6:	0004      	movs	r4, r0
     7d8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     7da:	2800      	cmp	r0, #0
     7dc:	d012      	beq.n	804 <pwm_init+0x30>
     7de:	2900      	cmp	r1, #0
     7e0:	d00e      	beq.n	800 <pwm_init+0x2c>
     7e2:	2001      	movs	r0, #1
     7e4:	2233      	movs	r2, #51	; 0x33
     7e6:	4908      	ldr	r1, [pc, #32]	; (808 <pwm_init+0x34>)
     7e8:	4b08      	ldr	r3, [pc, #32]	; (80c <pwm_init+0x38>)
     7ea:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     7ec:	0029      	movs	r1, r5
     7ee:	0020      	movs	r0, r4
     7f0:	4b07      	ldr	r3, [pc, #28]	; (810 <pwm_init+0x3c>)
     7f2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     7f4:	4b07      	ldr	r3, [pc, #28]	; (814 <pwm_init+0x40>)
     7f6:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     7f8:	4b07      	ldr	r3, [pc, #28]	; (818 <pwm_init+0x44>)
     7fa:	6063      	str	r3, [r4, #4]
}
     7fc:	2000      	movs	r0, #0
     7fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     800:	2000      	movs	r0, #0
     802:	e7ef      	b.n	7e4 <pwm_init+0x10>
     804:	2000      	movs	r0, #0
     806:	e7ed      	b.n	7e4 <pwm_init+0x10>
     808:	00003560 	.word	0x00003560
     80c:	00000ce1 	.word	0x00000ce1
     810:	00001b15 	.word	0x00001b15
     814:	000007bd 	.word	0x000007bd
     818:	000007c9 	.word	0x000007c9

0000081c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     81c:	b570      	push	{r4, r5, r6, lr}
     81e:	0004      	movs	r4, r0
     820:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     822:	2800      	cmp	r0, #0
     824:	d017      	beq.n	856 <spi_m_sync_init+0x3a>
     826:	2900      	cmp	r1, #0
     828:	d013      	beq.n	852 <spi_m_sync_init+0x36>
     82a:	2001      	movs	r0, #1
     82c:	2240      	movs	r2, #64	; 0x40
     82e:	490b      	ldr	r1, [pc, #44]	; (85c <spi_m_sync_init+0x40>)
     830:	4b0b      	ldr	r3, [pc, #44]	; (860 <spi_m_sync_init+0x44>)
     832:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     834:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     836:	1d20      	adds	r0, r4, #4
     838:	0029      	movs	r1, r5
     83a:	4b0a      	ldr	r3, [pc, #40]	; (864 <spi_m_sync_init+0x48>)
     83c:	4798      	blx	r3

	if (rc < 0) {
     83e:	2800      	cmp	r0, #0
     840:	db06      	blt.n	850 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     842:	4b09      	ldr	r3, [pc, #36]	; (868 <spi_m_sync_init+0x4c>)
     844:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     846:	4b09      	ldr	r3, [pc, #36]	; (86c <spi_m_sync_init+0x50>)
     848:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     84a:	4b09      	ldr	r3, [pc, #36]	; (870 <spi_m_sync_init+0x54>)
     84c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     84e:	2000      	movs	r0, #0
}
     850:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     852:	2000      	movs	r0, #0
     854:	e7ea      	b.n	82c <spi_m_sync_init+0x10>
     856:	2000      	movs	r0, #0
     858:	e7e8      	b.n	82c <spi_m_sync_init+0x10>
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	00003578 	.word	0x00003578
     860:	00000ce1 	.word	0x00000ce1
     864:	000015cd 	.word	0x000015cd
     868:	ffff8000 	.word	0xffff8000
     86c:	000008f9 	.word	0x000008f9
     870:	000008bd 	.word	0x000008bd

00000874 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     874:	b530      	push	{r4, r5, lr}
     876:	b087      	sub	sp, #28
     878:	0004      	movs	r4, r0
     87a:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     87c:	2800      	cmp	r0, #0
     87e:	d015      	beq.n	8ac <spi_m_sync_transfer+0x38>
     880:	2900      	cmp	r1, #0
     882:	d011      	beq.n	8a8 <spi_m_sync_transfer+0x34>
     884:	2001      	movs	r0, #1
     886:	22b3      	movs	r2, #179	; 0xb3
     888:	4909      	ldr	r1, [pc, #36]	; (8b0 <spi_m_sync_transfer+0x3c>)
     88a:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <spi_m_sync_transfer+0x40>)
     88c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     88e:	682b      	ldr	r3, [r5, #0]
     890:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     892:	686b      	ldr	r3, [r5, #4]
     894:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     896:	68ab      	ldr	r3, [r5, #8]
     898:	9301      	str	r3, [sp, #4]
     89a:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     89c:	1d20      	adds	r0, r4, #4
     89e:	a903      	add	r1, sp, #12
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <spi_m_sync_transfer+0x44>)
     8a2:	4798      	blx	r3
}
     8a4:	b007      	add	sp, #28
     8a6:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     8a8:	2000      	movs	r0, #0
     8aa:	e7ec      	b.n	886 <spi_m_sync_transfer+0x12>
     8ac:	2000      	movs	r0, #0
     8ae:	e7ea      	b.n	886 <spi_m_sync_transfer+0x12>
     8b0:	00003578 	.word	0x00003578
     8b4:	00000ce1 	.word	0x00000ce1
     8b8:	00001789 	.word	0x00001789

000008bc <_spi_m_sync_io_write>:
{
     8bc:	b570      	push	{r4, r5, r6, lr}
     8be:	b084      	sub	sp, #16
     8c0:	0004      	movs	r4, r0
     8c2:	000e      	movs	r6, r1
     8c4:	0015      	movs	r5, r2
	ASSERT(io);
     8c6:	1e43      	subs	r3, r0, #1
     8c8:	4198      	sbcs	r0, r3
     8ca:	b2c0      	uxtb	r0, r0
     8cc:	22a3      	movs	r2, #163	; 0xa3
     8ce:	4907      	ldr	r1, [pc, #28]	; (8ec <_spi_m_sync_io_write+0x30>)
     8d0:	4b07      	ldr	r3, [pc, #28]	; (8f0 <_spi_m_sync_io_write+0x34>)
     8d2:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     8d4:	0020      	movs	r0, r4
     8d6:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     8d8:	2300      	movs	r3, #0
     8da:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     8dc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     8de:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     8e0:	a901      	add	r1, sp, #4
     8e2:	4b04      	ldr	r3, [pc, #16]	; (8f4 <_spi_m_sync_io_write+0x38>)
     8e4:	4798      	blx	r3
}
     8e6:	b004      	add	sp, #16
     8e8:	bd70      	pop	{r4, r5, r6, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	00003578 	.word	0x00003578
     8f0:	00000ce1 	.word	0x00000ce1
     8f4:	00000875 	.word	0x00000875

000008f8 <_spi_m_sync_io_read>:
{
     8f8:	b570      	push	{r4, r5, r6, lr}
     8fa:	b084      	sub	sp, #16
     8fc:	0004      	movs	r4, r0
     8fe:	000e      	movs	r6, r1
     900:	0015      	movs	r5, r2
	ASSERT(io);
     902:	1e43      	subs	r3, r0, #1
     904:	4198      	sbcs	r0, r3
     906:	b2c0      	uxtb	r0, r0
     908:	2287      	movs	r2, #135	; 0x87
     90a:	4907      	ldr	r1, [pc, #28]	; (928 <_spi_m_sync_io_read+0x30>)
     90c:	4b07      	ldr	r3, [pc, #28]	; (92c <_spi_m_sync_io_read+0x34>)
     90e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     910:	0020      	movs	r0, r4
     912:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     914:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     916:	2300      	movs	r3, #0
     918:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     91a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     91c:	a901      	add	r1, sp, #4
     91e:	4b04      	ldr	r3, [pc, #16]	; (930 <_spi_m_sync_io_read+0x38>)
     920:	4798      	blx	r3
}
     922:	b004      	add	sp, #16
     924:	bd70      	pop	{r4, r5, r6, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	00003578 	.word	0x00003578
     92c:	00000ce1 	.word	0x00000ce1
     930:	00000875 	.word	0x00000875

00000934 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     936:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     938:	2e00      	cmp	r6, #0
     93a:	d002      	beq.n	942 <timer_add_timer_task+0xe>
     93c:	0033      	movs	r3, r6
     93e:	2500      	movs	r5, #0
     940:	e00c      	b.n	95c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     942:	4b10      	ldr	r3, [pc, #64]	; (984 <timer_add_timer_task+0x50>)
     944:	4798      	blx	r3
		return;
     946:	e018      	b.n	97a <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     948:	689f      	ldr	r7, [r3, #8]
     94a:	46bc      	mov	ip, r7
     94c:	4464      	add	r4, ip
     94e:	1aa4      	subs	r4, r4, r2
     950:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     952:	688f      	ldr	r7, [r1, #8]
     954:	42bc      	cmp	r4, r7
     956:	d20b      	bcs.n	970 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     958:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     95a:	681b      	ldr	r3, [r3, #0]
     95c:	2b00      	cmp	r3, #0
     95e:	d007      	beq.n	970 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     960:	685c      	ldr	r4, [r3, #4]
     962:	4294      	cmp	r4, r2
     964:	d8f0      	bhi.n	948 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     966:	1aa4      	subs	r4, r4, r2
     968:	689f      	ldr	r7, [r3, #8]
     96a:	46bc      	mov	ip, r7
     96c:	4464      	add	r4, ip
     96e:	e7f0      	b.n	952 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     970:	42b3      	cmp	r3, r6
     972:	d003      	beq.n	97c <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     974:	0028      	movs	r0, r5
     976:	4b04      	ldr	r3, [pc, #16]	; (988 <timer_add_timer_task+0x54>)
     978:	4798      	blx	r3
	}
}
     97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     97c:	4b01      	ldr	r3, [pc, #4]	; (984 <timer_add_timer_task+0x50>)
     97e:	4798      	blx	r3
     980:	e7fb      	b.n	97a <timer_add_timer_task+0x46>
     982:	46c0      	nop			; (mov r8, r8)
     984:	00000d01 	.word	0x00000d01
     988:	00000d2d 	.word	0x00000d2d

0000098c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     98e:	0005      	movs	r5, r0
     990:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     992:	6903      	ldr	r3, [r0, #16]
     994:	1c5e      	adds	r6, r3, #1
     996:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     998:	7e03      	ldrb	r3, [r0, #24]
     99a:	07db      	lsls	r3, r3, #31
     99c:	d402      	bmi.n	9a4 <timer_process_counted+0x18>
     99e:	7e03      	ldrb	r3, [r0, #24]
     9a0:	079b      	lsls	r3, r3, #30
     9a2:	d50a      	bpl.n	9ba <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     9a4:	7e2b      	ldrb	r3, [r5, #24]
     9a6:	2202      	movs	r2, #2
     9a8:	4313      	orrs	r3, r2
     9aa:	b2db      	uxtb	r3, r3
     9ac:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9b0:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     9b2:	68e3      	ldr	r3, [r4, #12]
     9b4:	0020      	movs	r0, r4
     9b6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     9b8:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     9ba:	2c00      	cmp	r4, #0
     9bc:	d0f7      	beq.n	9ae <timer_process_counted+0x22>
     9be:	6863      	ldr	r3, [r4, #4]
     9c0:	1af3      	subs	r3, r6, r3
     9c2:	68a2      	ldr	r2, [r4, #8]
     9c4:	4293      	cmp	r3, r2
     9c6:	d3f2      	bcc.n	9ae <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     9c8:	002f      	movs	r7, r5
     9ca:	3714      	adds	r7, #20
     9cc:	0038      	movs	r0, r7
     9ce:	4b06      	ldr	r3, [pc, #24]	; (9e8 <timer_process_counted+0x5c>)
     9d0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     9d2:	7c23      	ldrb	r3, [r4, #16]
     9d4:	2b01      	cmp	r3, #1
     9d6:	d1eb      	bne.n	9b0 <timer_process_counted+0x24>
			tmp->time_label = time;
     9d8:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9da:	0032      	movs	r2, r6
     9dc:	0021      	movs	r1, r4
     9de:	0038      	movs	r0, r7
     9e0:	4b02      	ldr	r3, [pc, #8]	; (9ec <timer_process_counted+0x60>)
     9e2:	4798      	blx	r3
     9e4:	e7e4      	b.n	9b0 <timer_process_counted+0x24>
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	00000d35 	.word	0x00000d35
     9ec:	00000935 	.word	0x00000935

000009f0 <timer_init>:
{
     9f0:	b570      	push	{r4, r5, r6, lr}
     9f2:	0004      	movs	r4, r0
     9f4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     9f6:	2800      	cmp	r0, #0
     9f8:	d012      	beq.n	a20 <timer_init+0x30>
     9fa:	2900      	cmp	r1, #0
     9fc:	d00e      	beq.n	a1c <timer_init+0x2c>
     9fe:	2001      	movs	r0, #1
     a00:	223b      	movs	r2, #59	; 0x3b
     a02:	4908      	ldr	r1, [pc, #32]	; (a24 <timer_init+0x34>)
     a04:	4b08      	ldr	r3, [pc, #32]	; (a28 <timer_init+0x38>)
     a06:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     a08:	0029      	movs	r1, r5
     a0a:	0020      	movs	r0, r4
     a0c:	4b07      	ldr	r3, [pc, #28]	; (a2c <timer_init+0x3c>)
     a0e:	4798      	blx	r3
	descr->time                           = 0;
     a10:	2300      	movs	r3, #0
     a12:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <timer_init+0x40>)
     a16:	6023      	str	r3, [r4, #0]
}
     a18:	2000      	movs	r0, #0
     a1a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     a1c:	2000      	movs	r0, #0
     a1e:	e7ef      	b.n	a00 <timer_init+0x10>
     a20:	2000      	movs	r0, #0
     a22:	e7ed      	b.n	a00 <timer_init+0x10>
     a24:	00003594 	.word	0x00003594
     a28:	00000ce1 	.word	0x00000ce1
     a2c:	000019f1 	.word	0x000019f1
     a30:	0000098d 	.word	0x0000098d

00000a34 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     a34:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a36:	3808      	subs	r0, #8

	descr->stat = 0;
     a38:	2300      	movs	r3, #0
     a3a:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
     a3e:	2b00      	cmp	r3, #0
     a40:	d000      	beq.n	a44 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     a42:	4798      	blx	r3
	}
}
     a44:	bd10      	pop	{r4, pc}

00000a46 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     a46:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a48:	3808      	subs	r0, #8

	descr->stat = 0;
     a4a:	2300      	movs	r3, #0
     a4c:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     a4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     a50:	2b00      	cmp	r3, #0
     a52:	d000      	beq.n	a56 <usart_error+0x10>
		descr->usart_cb.error(descr);
     a54:	4798      	blx	r3
	}
}
     a56:	bd10      	pop	{r4, pc}

00000a58 <usart_fill_rx_buffer>:
{
     a58:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a5a:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     a5c:	302c      	adds	r0, #44	; 0x2c
     a5e:	4b04      	ldr	r3, [pc, #16]	; (a70 <usart_fill_rx_buffer+0x18>)
     a60:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     a62:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a64:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     a66:	2b00      	cmp	r3, #0
     a68:	d001      	beq.n	a6e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     a6a:	0020      	movs	r0, r4
     a6c:	4798      	blx	r3
}
     a6e:	bd10      	pop	{r4, pc}
     a70:	00000de1 	.word	0x00000de1

00000a74 <usart_async_write>:
{
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	0004      	movs	r4, r0
     a78:	000e      	movs	r6, r1
     a7a:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     a7c:	2800      	cmp	r0, #0
     a7e:	d01d      	beq.n	abc <usart_async_write+0x48>
     a80:	2900      	cmp	r1, #0
     a82:	d01d      	beq.n	ac0 <usart_async_write+0x4c>
     a84:	2a00      	cmp	r2, #0
     a86:	d11d      	bne.n	ac4 <usart_async_write+0x50>
     a88:	2000      	movs	r0, #0
     a8a:	223c      	movs	r2, #60	; 0x3c
     a8c:	32ff      	adds	r2, #255	; 0xff
     a8e:	4910      	ldr	r1, [pc, #64]	; (ad0 <usart_async_write+0x5c>)
     a90:	4b10      	ldr	r3, [pc, #64]	; (ad4 <usart_async_write+0x60>)
     a92:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     a94:	2344      	movs	r3, #68	; 0x44
     a96:	5ae2      	ldrh	r2, [r4, r3]
     a98:	3308      	adds	r3, #8
     a9a:	5ae3      	ldrh	r3, [r4, r3]
     a9c:	429a      	cmp	r2, r3
     a9e:	d113      	bne.n	ac8 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     aa0:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     aa2:	234c      	movs	r3, #76	; 0x4c
     aa4:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     aa6:	2200      	movs	r2, #0
     aa8:	3b08      	subs	r3, #8
     aaa:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     aac:	3b43      	subs	r3, #67	; 0x43
     aae:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     ab0:	0020      	movs	r0, r4
     ab2:	3008      	adds	r0, #8
     ab4:	4b08      	ldr	r3, [pc, #32]	; (ad8 <usart_async_write+0x64>)
     ab6:	4798      	blx	r3
	return (int32_t)length;
     ab8:	0028      	movs	r0, r5
}
     aba:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     abc:	2000      	movs	r0, #0
     abe:	e7e4      	b.n	a8a <usart_async_write+0x16>
     ac0:	2000      	movs	r0, #0
     ac2:	e7e2      	b.n	a8a <usart_async_write+0x16>
     ac4:	2001      	movs	r0, #1
     ac6:	e7e0      	b.n	a8a <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     ac8:	201c      	movs	r0, #28
     aca:	4240      	negs	r0, r0
     acc:	e7f5      	b.n	aba <usart_async_write+0x46>
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	000035ac 	.word	0x000035ac
     ad4:	00000ce1 	.word	0x00000ce1
     ad8:	00001547 	.word	0x00001547

00000adc <usart_process_byte_sent>:
{
     adc:	b570      	push	{r4, r5, r6, lr}
     ade:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     ae0:	0002      	movs	r2, r0
     ae2:	3a08      	subs	r2, #8
     ae4:	2344      	movs	r3, #68	; 0x44
     ae6:	5ad3      	ldrh	r3, [r2, r3]
     ae8:	214c      	movs	r1, #76	; 0x4c
     aea:	5a52      	ldrh	r2, [r2, r1]
     aec:	4293      	cmp	r3, r2
     aee:	d00d      	beq.n	b0c <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     af0:	0002      	movs	r2, r0
     af2:	6c01      	ldr	r1, [r0, #64]	; 0x40
     af4:	3a08      	subs	r2, #8
     af6:	1c5d      	adds	r5, r3, #1
     af8:	2044      	movs	r0, #68	; 0x44
     afa:	5215      	strh	r5, [r2, r0]
     afc:	5cc9      	ldrb	r1, [r1, r3]
     afe:	0020      	movs	r0, r4
     b00:	4b04      	ldr	r3, [pc, #16]	; (b14 <usart_process_byte_sent+0x38>)
     b02:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     b04:	0020      	movs	r0, r4
     b06:	4b04      	ldr	r3, [pc, #16]	; (b18 <usart_process_byte_sent+0x3c>)
     b08:	4798      	blx	r3
}
     b0a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     b0c:	4b03      	ldr	r3, [pc, #12]	; (b1c <usart_process_byte_sent+0x40>)
     b0e:	4798      	blx	r3
}
     b10:	e7fb      	b.n	b0a <usart_process_byte_sent+0x2e>
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	0000153f 	.word	0x0000153f
     b18:	00001547 	.word	0x00001547
     b1c:	0000154f 	.word	0x0000154f

00000b20 <usart_async_read>:
{
     b20:	b5f0      	push	{r4, r5, r6, r7, lr}
     b22:	b085      	sub	sp, #20
     b24:	0004      	movs	r4, r0
     b26:	000d      	movs	r5, r1
     b28:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     b2a:	2800      	cmp	r0, #0
     b2c:	d017      	beq.n	b5e <usart_async_read+0x3e>
     b2e:	2900      	cmp	r1, #0
     b30:	d017      	beq.n	b62 <usart_async_read+0x42>
     b32:	2a00      	cmp	r2, #0
     b34:	d117      	bne.n	b66 <usart_async_read+0x46>
     b36:	2000      	movs	r0, #0
     b38:	22ac      	movs	r2, #172	; 0xac
     b3a:	0052      	lsls	r2, r2, #1
     b3c:	4912      	ldr	r1, [pc, #72]	; (b88 <usart_async_read+0x68>)
     b3e:	4b13      	ldr	r3, [pc, #76]	; (b8c <usart_async_read+0x6c>)
     b40:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b42:	a803      	add	r0, sp, #12
     b44:	4b12      	ldr	r3, [pc, #72]	; (b90 <usart_async_read+0x70>)
     b46:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b48:	3434      	adds	r4, #52	; 0x34
     b4a:	0020      	movs	r0, r4
     b4c:	9401      	str	r4, [sp, #4]
     b4e:	4b11      	ldr	r3, [pc, #68]	; (b94 <usart_async_read+0x74>)
     b50:	4798      	blx	r3
     b52:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     b54:	a803      	add	r0, sp, #12
     b56:	4b10      	ldr	r3, [pc, #64]	; (b98 <usart_async_read+0x78>)
     b58:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b5a:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     b5c:	e00b      	b.n	b76 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     b5e:	2000      	movs	r0, #0
     b60:	e7ea      	b.n	b38 <usart_async_read+0x18>
     b62:	2000      	movs	r0, #0
     b64:	e7e8      	b.n	b38 <usart_async_read+0x18>
     b66:	2001      	movs	r0, #1
     b68:	e7e6      	b.n	b38 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     b6a:	3401      	adds	r4, #1
     b6c:	b2a4      	uxth	r4, r4
     b6e:	1869      	adds	r1, r5, r1
     b70:	9801      	ldr	r0, [sp, #4]
     b72:	4b0a      	ldr	r3, [pc, #40]	; (b9c <usart_async_read+0x7c>)
     b74:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b76:	0021      	movs	r1, r4
     b78:	42a7      	cmp	r7, r4
     b7a:	d901      	bls.n	b80 <usart_async_read+0x60>
     b7c:	42b4      	cmp	r4, r6
     b7e:	d3f4      	bcc.n	b6a <usart_async_read+0x4a>
}
     b80:	0020      	movs	r0, r4
     b82:	b005      	add	sp, #20
     b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	000035ac 	.word	0x000035ac
     b8c:	00000ce1 	.word	0x00000ce1
     b90:	00000609 	.word	0x00000609
     b94:	00000e21 	.word	0x00000e21
     b98:	00000617 	.word	0x00000617
     b9c:	00000d95 	.word	0x00000d95

00000ba0 <usart_async_init>:
{
     ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ba2:	0004      	movs	r4, r0
     ba4:	000d      	movs	r5, r1
     ba6:	0016      	movs	r6, r2
     ba8:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     baa:	2800      	cmp	r0, #0
     bac:	d026      	beq.n	bfc <usart_async_init+0x5c>
     bae:	2900      	cmp	r1, #0
     bb0:	d026      	beq.n	c00 <usart_async_init+0x60>
     bb2:	2a00      	cmp	r2, #0
     bb4:	d026      	beq.n	c04 <usart_async_init+0x64>
     bb6:	2b00      	cmp	r3, #0
     bb8:	d126      	bne.n	c08 <usart_async_init+0x68>
     bba:	2000      	movs	r0, #0
     bbc:	223a      	movs	r2, #58	; 0x3a
     bbe:	4915      	ldr	r1, [pc, #84]	; (c14 <usart_async_init+0x74>)
     bc0:	4b15      	ldr	r3, [pc, #84]	; (c18 <usart_async_init+0x78>)
     bc2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     bc4:	0020      	movs	r0, r4
     bc6:	3034      	adds	r0, #52	; 0x34
     bc8:	003a      	movs	r2, r7
     bca:	0031      	movs	r1, r6
     bcc:	4b13      	ldr	r3, [pc, #76]	; (c1c <usart_async_init+0x7c>)
     bce:	4798      	blx	r3
     bd0:	2800      	cmp	r0, #0
     bd2:	d11b      	bne.n	c0c <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     bd4:	0020      	movs	r0, r4
     bd6:	3008      	adds	r0, #8
     bd8:	0029      	movs	r1, r5
     bda:	4b11      	ldr	r3, [pc, #68]	; (c20 <usart_async_init+0x80>)
     bdc:	4798      	blx	r3
	if (init_status) {
     bde:	2800      	cmp	r0, #0
     be0:	d10b      	bne.n	bfa <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     be2:	4b10      	ldr	r3, [pc, #64]	; (c24 <usart_async_init+0x84>)
     be4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     be6:	4b10      	ldr	r3, [pc, #64]	; (c28 <usart_async_init+0x88>)
     be8:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     bea:	4b10      	ldr	r3, [pc, #64]	; (c2c <usart_async_init+0x8c>)
     bec:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     bee:	4b10      	ldr	r3, [pc, #64]	; (c30 <usart_async_init+0x90>)
     bf0:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     bf2:	4b10      	ldr	r3, [pc, #64]	; (c34 <usart_async_init+0x94>)
     bf4:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     bf6:	4b10      	ldr	r3, [pc, #64]	; (c38 <usart_async_init+0x98>)
     bf8:	6163      	str	r3, [r4, #20]
}
     bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     bfc:	2000      	movs	r0, #0
     bfe:	e7dd      	b.n	bbc <usart_async_init+0x1c>
     c00:	2000      	movs	r0, #0
     c02:	e7db      	b.n	bbc <usart_async_init+0x1c>
     c04:	2000      	movs	r0, #0
     c06:	e7d9      	b.n	bbc <usart_async_init+0x1c>
     c08:	2001      	movs	r0, #1
     c0a:	e7d7      	b.n	bbc <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     c0c:	200d      	movs	r0, #13
     c0e:	4240      	negs	r0, r0
     c10:	e7f3      	b.n	bfa <usart_async_init+0x5a>
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	000035ac 	.word	0x000035ac
     c18:	00000ce1 	.word	0x00000ce1
     c1c:	00000d49 	.word	0x00000d49
     c20:	000014a1 	.word	0x000014a1
     c24:	00000b21 	.word	0x00000b21
     c28:	00000a75 	.word	0x00000a75
     c2c:	00000add 	.word	0x00000add
     c30:	00000a59 	.word	0x00000a59
     c34:	00000a35 	.word	0x00000a35
     c38:	00000a47 	.word	0x00000a47

00000c3c <usart_async_enable>:
{
     c3c:	b510      	push	{r4, lr}
     c3e:	0004      	movs	r4, r0
	ASSERT(descr);
     c40:	1e43      	subs	r3, r0, #1
     c42:	4198      	sbcs	r0, r3
     c44:	b2c0      	uxtb	r0, r0
     c46:	2261      	movs	r2, #97	; 0x61
     c48:	4904      	ldr	r1, [pc, #16]	; (c5c <usart_async_enable+0x20>)
     c4a:	4b05      	ldr	r3, [pc, #20]	; (c60 <usart_async_enable+0x24>)
     c4c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     c4e:	0020      	movs	r0, r4
     c50:	3008      	adds	r0, #8
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <usart_async_enable+0x28>)
     c54:	4798      	blx	r3
}
     c56:	2000      	movs	r0, #0
     c58:	bd10      	pop	{r4, pc}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	000035ac 	.word	0x000035ac
     c60:	00000ce1 	.word	0x00000ce1
     c64:	0000152d 	.word	0x0000152d

00000c68 <usart_async_register_callback>:
{
     c68:	b570      	push	{r4, r5, r6, lr}
     c6a:	0005      	movs	r5, r0
     c6c:	000e      	movs	r6, r1
     c6e:	0014      	movs	r4, r2
	ASSERT(descr);
     c70:	1e43      	subs	r3, r0, #1
     c72:	4198      	sbcs	r0, r3
     c74:	b2c0      	uxtb	r0, r0
     c76:	2283      	movs	r2, #131	; 0x83
     c78:	4916      	ldr	r1, [pc, #88]	; (cd4 <usart_async_register_callback+0x6c>)
     c7a:	4b17      	ldr	r3, [pc, #92]	; (cd8 <usart_async_register_callback+0x70>)
     c7c:	4798      	blx	r3
	switch (type) {
     c7e:	2e01      	cmp	r6, #1
     c80:	d011      	beq.n	ca6 <usart_async_register_callback+0x3e>
     c82:	2e00      	cmp	r6, #0
     c84:	d004      	beq.n	c90 <usart_async_register_callback+0x28>
     c86:	2e02      	cmp	r6, #2
     c88:	d018      	beq.n	cbc <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     c8a:	200d      	movs	r0, #13
     c8c:	4240      	negs	r0, r0
     c8e:	e009      	b.n	ca4 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     c90:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     c92:	1e62      	subs	r2, r4, #1
     c94:	4194      	sbcs	r4, r2
     c96:	b2e2      	uxtb	r2, r4
     c98:	0028      	movs	r0, r5
     c9a:	3008      	adds	r0, #8
     c9c:	2101      	movs	r1, #1
     c9e:	4b0f      	ldr	r3, [pc, #60]	; (cdc <usart_async_register_callback+0x74>)
     ca0:	4798      	blx	r3
	return ERR_NONE;
     ca2:	2000      	movs	r0, #0
}
     ca4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     ca6:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     ca8:	1e62      	subs	r2, r4, #1
     caa:	4194      	sbcs	r4, r2
     cac:	b2e2      	uxtb	r2, r4
     cae:	0028      	movs	r0, r5
     cb0:	3008      	adds	r0, #8
     cb2:	2102      	movs	r1, #2
     cb4:	4b09      	ldr	r3, [pc, #36]	; (cdc <usart_async_register_callback+0x74>)
     cb6:	4798      	blx	r3
	return ERR_NONE;
     cb8:	2000      	movs	r0, #0
		break;
     cba:	e7f3      	b.n	ca4 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     cbc:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     cbe:	1e62      	subs	r2, r4, #1
     cc0:	4194      	sbcs	r4, r2
     cc2:	b2e2      	uxtb	r2, r4
     cc4:	0028      	movs	r0, r5
     cc6:	3008      	adds	r0, #8
     cc8:	2103      	movs	r1, #3
     cca:	4b04      	ldr	r3, [pc, #16]	; (cdc <usart_async_register_callback+0x74>)
     ccc:	4798      	blx	r3
	return ERR_NONE;
     cce:	2000      	movs	r0, #0
		break;
     cd0:	e7e8      	b.n	ca4 <usart_async_register_callback+0x3c>
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	000035ac 	.word	0x000035ac
     cd8:	00000ce1 	.word	0x00000ce1
     cdc:	00001559 	.word	0x00001559

00000ce0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ce0:	2800      	cmp	r0, #0
     ce2:	d100      	bne.n	ce6 <assert+0x6>
		__asm("BKPT #0");
     ce4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     ce6:	4770      	bx	lr

00000ce8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ce8:	6803      	ldr	r3, [r0, #0]
     cea:	2b00      	cmp	r3, #0
     cec:	d003      	beq.n	cf6 <is_list_element+0xe>
		if (it == element) {
     cee:	428b      	cmp	r3, r1
     cf0:	d003      	beq.n	cfa <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	e7f9      	b.n	cea <is_list_element+0x2>
			return true;
		}
	}

	return false;
     cf6:	2000      	movs	r0, #0
}
     cf8:	4770      	bx	lr
			return true;
     cfa:	2001      	movs	r0, #1
     cfc:	e7fc      	b.n	cf8 <is_list_element+0x10>
	...

00000d00 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     d00:	b570      	push	{r4, r5, r6, lr}
     d02:	0004      	movs	r4, r0
     d04:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     d06:	4b06      	ldr	r3, [pc, #24]	; (d20 <list_insert_as_head+0x20>)
     d08:	4798      	blx	r3
     d0a:	2301      	movs	r3, #1
     d0c:	4058      	eors	r0, r3
     d0e:	b2c0      	uxtb	r0, r0
     d10:	2239      	movs	r2, #57	; 0x39
     d12:	4904      	ldr	r1, [pc, #16]	; (d24 <list_insert_as_head+0x24>)
     d14:	4b04      	ldr	r3, [pc, #16]	; (d28 <list_insert_as_head+0x28>)
     d16:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     d18:	6823      	ldr	r3, [r4, #0]
     d1a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     d1c:	6025      	str	r5, [r4, #0]
}
     d1e:	bd70      	pop	{r4, r5, r6, pc}
     d20:	00000ce9 	.word	0x00000ce9
     d24:	000035cc 	.word	0x000035cc
     d28:	00000ce1 	.word	0x00000ce1

00000d2c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     d2c:	6803      	ldr	r3, [r0, #0]
     d2e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     d30:	6001      	str	r1, [r0, #0]
}
     d32:	4770      	bx	lr

00000d34 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     d34:	6803      	ldr	r3, [r0, #0]
     d36:	2b00      	cmp	r3, #0
     d38:	d003      	beq.n	d42 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     d3a:	681a      	ldr	r2, [r3, #0]
     d3c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     d3e:	0018      	movs	r0, r3
	}

	return NULL;
}
     d40:	4770      	bx	lr
	return NULL;
     d42:	2000      	movs	r0, #0
     d44:	e7fc      	b.n	d40 <list_remove_head+0xc>
	...

00000d48 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     d48:	b570      	push	{r4, r5, r6, lr}
     d4a:	0004      	movs	r4, r0
     d4c:	000e      	movs	r6, r1
     d4e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     d50:	2800      	cmp	r0, #0
     d52:	d012      	beq.n	d7a <ringbuffer_init+0x32>
     d54:	2900      	cmp	r1, #0
     d56:	d012      	beq.n	d7e <ringbuffer_init+0x36>
     d58:	2a00      	cmp	r2, #0
     d5a:	d112      	bne.n	d82 <ringbuffer_init+0x3a>
     d5c:	2000      	movs	r0, #0
     d5e:	2228      	movs	r2, #40	; 0x28
     d60:	490a      	ldr	r1, [pc, #40]	; (d8c <ringbuffer_init+0x44>)
     d62:	4b0b      	ldr	r3, [pc, #44]	; (d90 <ringbuffer_init+0x48>)
     d64:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     d66:	1e6b      	subs	r3, r5, #1
     d68:	422b      	tst	r3, r5
     d6a:	d10c      	bne.n	d86 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     d6c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     d6e:	2300      	movs	r3, #0
     d70:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     d72:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     d74:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     d76:	2000      	movs	r0, #0
}
     d78:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     d7a:	2000      	movs	r0, #0
     d7c:	e7ef      	b.n	d5e <ringbuffer_init+0x16>
     d7e:	2000      	movs	r0, #0
     d80:	e7ed      	b.n	d5e <ringbuffer_init+0x16>
     d82:	2001      	movs	r0, #1
     d84:	e7eb      	b.n	d5e <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     d86:	200d      	movs	r0, #13
     d88:	4240      	negs	r0, r0
     d8a:	e7f5      	b.n	d78 <ringbuffer_init+0x30>
     d8c:	000035ec 	.word	0x000035ec
     d90:	00000ce1 	.word	0x00000ce1

00000d94 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     d94:	b570      	push	{r4, r5, r6, lr}
     d96:	0004      	movs	r4, r0
     d98:	000d      	movs	r5, r1
	ASSERT(rb && data);
     d9a:	2800      	cmp	r0, #0
     d9c:	d016      	beq.n	dcc <ringbuffer_get+0x38>
     d9e:	2900      	cmp	r1, #0
     da0:	d012      	beq.n	dc8 <ringbuffer_get+0x34>
     da2:	2001      	movs	r0, #1
     da4:	2240      	movs	r2, #64	; 0x40
     da6:	490c      	ldr	r1, [pc, #48]	; (dd8 <ringbuffer_get+0x44>)
     da8:	4b0c      	ldr	r3, [pc, #48]	; (ddc <ringbuffer_get+0x48>)
     daa:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     dac:	68a3      	ldr	r3, [r4, #8]
     dae:	68e2      	ldr	r2, [r4, #12]
     db0:	429a      	cmp	r2, r3
     db2:	d00d      	beq.n	dd0 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     db4:	6862      	ldr	r2, [r4, #4]
     db6:	4013      	ands	r3, r2
     db8:	6822      	ldr	r2, [r4, #0]
     dba:	5cd3      	ldrb	r3, [r2, r3]
     dbc:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     dbe:	68a3      	ldr	r3, [r4, #8]
     dc0:	3301      	adds	r3, #1
     dc2:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     dc4:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     dc6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     dc8:	2000      	movs	r0, #0
     dca:	e7eb      	b.n	da4 <ringbuffer_get+0x10>
     dcc:	2000      	movs	r0, #0
     dce:	e7e9      	b.n	da4 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     dd0:	200a      	movs	r0, #10
     dd2:	4240      	negs	r0, r0
     dd4:	e7f7      	b.n	dc6 <ringbuffer_get+0x32>
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	000035ec 	.word	0x000035ec
     ddc:	00000ce1 	.word	0x00000ce1

00000de0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     de0:	b570      	push	{r4, r5, r6, lr}
     de2:	0004      	movs	r4, r0
     de4:	000d      	movs	r5, r1
	ASSERT(rb);
     de6:	1e43      	subs	r3, r0, #1
     de8:	4198      	sbcs	r0, r3
     dea:	b2c0      	uxtb	r0, r0
     dec:	2251      	movs	r2, #81	; 0x51
     dee:	490a      	ldr	r1, [pc, #40]	; (e18 <ringbuffer_put+0x38>)
     df0:	4b0a      	ldr	r3, [pc, #40]	; (e1c <ringbuffer_put+0x3c>)
     df2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     df4:	6863      	ldr	r3, [r4, #4]
     df6:	68e2      	ldr	r2, [r4, #12]
     df8:	4013      	ands	r3, r2
     dfa:	6822      	ldr	r2, [r4, #0]
     dfc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     dfe:	68e3      	ldr	r3, [r4, #12]
     e00:	68a2      	ldr	r2, [r4, #8]
     e02:	1a9a      	subs	r2, r3, r2
     e04:	6861      	ldr	r1, [r4, #4]
     e06:	428a      	cmp	r2, r1
     e08:	d901      	bls.n	e0e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     e0a:	1a59      	subs	r1, r3, r1
     e0c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     e0e:	3301      	adds	r3, #1
     e10:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     e12:	2000      	movs	r0, #0
     e14:	bd70      	pop	{r4, r5, r6, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	000035ec 	.word	0x000035ec
     e1c:	00000ce1 	.word	0x00000ce1

00000e20 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     e20:	b510      	push	{r4, lr}
     e22:	0004      	movs	r4, r0
	ASSERT(rb);
     e24:	1e43      	subs	r3, r0, #1
     e26:	4198      	sbcs	r0, r3
     e28:	b2c0      	uxtb	r0, r0
     e2a:	2267      	movs	r2, #103	; 0x67
     e2c:	4903      	ldr	r1, [pc, #12]	; (e3c <ringbuffer_num+0x1c>)
     e2e:	4b04      	ldr	r3, [pc, #16]	; (e40 <ringbuffer_num+0x20>)
     e30:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     e32:	68e0      	ldr	r0, [r4, #12]
     e34:	68a3      	ldr	r3, [r4, #8]
     e36:	1ac0      	subs	r0, r0, r3
}
     e38:	bd10      	pop	{r4, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	000035ec 	.word	0x000035ec
     e40:	00000ce1 	.word	0x00000ce1

00000e44 <_get_ac_cfg>:
		hri_ac_write_CTRLB_reg(hw, AC_CTRLB_START1);
	}
}

static const struct _ac_cfg *_get_ac_cfg(void *hw)
{
     e44:	b510      	push	{r4, lr}
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
     e46:	2300      	movs	r3, #0
     e48:	2b00      	cmp	r3, #0
     e4a:	d001      	beq.n	e50 <_get_ac_cfg+0xc>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
     e4c:	2000      	movs	r0, #0
}
     e4e:	bd10      	pop	{r4, pc}
		if (_cfgs[i].hw == hw) {
     e50:	009a      	lsls	r2, r3, #2
     e52:	18d2      	adds	r2, r2, r3
     e54:	0091      	lsls	r1, r2, #2
     e56:	4a05      	ldr	r2, [pc, #20]	; (e6c <_get_ac_cfg+0x28>)
     e58:	588a      	ldr	r2, [r1, r2]
     e5a:	4282      	cmp	r2, r0
     e5c:	d002      	beq.n	e64 <_get_ac_cfg+0x20>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
     e5e:	3301      	adds	r3, #1
     e60:	b2db      	uxtb	r3, r3
     e62:	e7f1      	b.n	e48 <_get_ac_cfg+0x4>
			return &(_cfgs[i]);
     e64:	4801      	ldr	r0, [pc, #4]	; (e6c <_get_ac_cfg+0x28>)
     e66:	1840      	adds	r0, r0, r1
     e68:	e7f1      	b.n	e4e <_get_ac_cfg+0xa>
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	00003610 	.word	0x00003610

00000e70 <_ac_init>:
{
     e70:	b510      	push	{r4, lr}
     e72:	0004      	movs	r4, r0
	ASSERT(hw);
     e74:	1e43      	subs	r3, r0, #1
     e76:	4198      	sbcs	r0, r3
     e78:	b2c0      	uxtb	r0, r0
     e7a:	22fa      	movs	r2, #250	; 0xfa
     e7c:	491e      	ldr	r1, [pc, #120]	; (ef8 <_ac_init+0x88>)
     e7e:	4b1f      	ldr	r3, [pc, #124]	; (efc <_ac_init+0x8c>)
     e80:	4798      	blx	r3
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
     e82:	0020      	movs	r0, r4
     e84:	4b1e      	ldr	r3, [pc, #120]	; (f00 <_ac_init+0x90>)
     e86:	4798      	blx	r3
	if (cfg == NULL) {
     e88:	2800      	cmp	r0, #0
     e8a:	d031      	beq.n	ef0 <_ac_init+0x80>
typedef uint8_t  hri_ac_statusc_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     e8c:	7a63      	ldrb	r3, [r4, #9]
     e8e:	09db      	lsrs	r3, r3, #7
     e90:	d1fc      	bne.n	e8c <_ac_init+0x1c>
     e92:	7a63      	ldrb	r3, [r4, #9]
     e94:	09db      	lsrs	r3, r3, #7
     e96:	d1fc      	bne.n	e92 <_ac_init+0x22>

static inline hri_ac_ctrla_reg_t hri_ac_get_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw);
	tmp = ((Ac *)hw)->CTRLA.reg;
     e98:	7823      	ldrb	r3, [r4, #0]
	if (hri_ac_get_CTRLA_reg(hw, AC_CTRLA_ENABLE)) {
     e9a:	079b      	lsls	r3, r3, #30
     e9c:	d507      	bpl.n	eae <_ac_init+0x3e>
}

static inline void hri_ac_write_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->CTRLA.reg = data;
     e9e:	2300      	movs	r3, #0
     ea0:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     ea2:	7a63      	ldrb	r3, [r4, #9]
     ea4:	09db      	lsrs	r3, r3, #7
     ea6:	d1fc      	bne.n	ea2 <_ac_init+0x32>
     ea8:	7a63      	ldrb	r3, [r4, #9]
     eaa:	09db      	lsrs	r3, r3, #7
     eac:	d1fc      	bne.n	ea8 <_ac_init+0x38>
	((Ac *)hw)->CTRLA.reg = data;
     eae:	2301      	movs	r3, #1
     eb0:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     eb2:	7a63      	ldrb	r3, [r4, #9]
     eb4:	09db      	lsrs	r3, r3, #7
     eb6:	d1fc      	bne.n	eb2 <_ac_init+0x42>
     eb8:	7a63      	ldrb	r3, [r4, #9]
     eba:	09db      	lsrs	r3, r3, #7
     ebc:	d1fc      	bne.n	eb8 <_ac_init+0x48>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
     ebe:	6883      	ldr	r3, [r0, #8]
     ec0:	6123      	str	r3, [r4, #16]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     ec2:	7a63      	ldrb	r3, [r4, #9]
     ec4:	09db      	lsrs	r3, r3, #7
     ec6:	d1fc      	bne.n	ec2 <_ac_init+0x52>
	((Ac *)hw)->COMPCTRL[index].reg = data;
     ec8:	68c3      	ldr	r3, [r0, #12]
     eca:	6163      	str	r3, [r4, #20]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     ecc:	7a63      	ldrb	r3, [r4, #9]
     ece:	09db      	lsrs	r3, r3, #7
     ed0:	d1fc      	bne.n	ecc <_ac_init+0x5c>
	hri_ac_write_SCALER_reg(hw, 0, cfg->comp_scaler0);
     ed2:	7c02      	ldrb	r2, [r0, #16]
}

static inline void hri_ac_write_SCALER_reg(const void *const hw, uint8_t index, hri_ac_scaler_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->SCALER[index].reg = data;
     ed4:	3320      	adds	r3, #32
     ed6:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_SCALER_reg(hw, 1, cfg->comp_scaler1);
     ed8:	7c42      	ldrb	r2, [r0, #17]
     eda:	3301      	adds	r3, #1
     edc:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_EVCTRL_reg(hw, cfg->ev_ctrl);
     ede:	88c3      	ldrh	r3, [r0, #6]
	((Ac *)hw)->EVCTRL.reg = data;
     ee0:	8063      	strh	r3, [r4, #2]
	hri_ac_write_CTRLA_reg(hw, cfg->ctrla);
     ee2:	7943      	ldrb	r3, [r0, #5]
	((Ac *)hw)->CTRLA.reg = data;
     ee4:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     ee6:	7a63      	ldrb	r3, [r4, #9]
     ee8:	09db      	lsrs	r3, r3, #7
     eea:	d1fc      	bne.n	ee6 <_ac_init+0x76>
	return ERR_NONE;
     eec:	2000      	movs	r0, #0
}
     eee:	bd10      	pop	{r4, pc}
		return ERR_NOT_FOUND;
     ef0:	200a      	movs	r0, #10
     ef2:	4240      	negs	r0, r0
     ef4:	e7fb      	b.n	eee <_ac_init+0x7e>
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00003624 	.word	0x00003624
     efc:	00000ce1 	.word	0x00000ce1
     f00:	00000e45 	.word	0x00000e45

00000f04 <_ac_sync_init>:
{
     f04:	b570      	push	{r4, r5, r6, lr}
     f06:	0005      	movs	r5, r0
     f08:	000c      	movs	r4, r1
	ASSERT(device);
     f0a:	1e43      	subs	r3, r0, #1
     f0c:	4198      	sbcs	r0, r3
     f0e:	b2c0      	uxtb	r0, r0
     f10:	2262      	movs	r2, #98	; 0x62
     f12:	4904      	ldr	r1, [pc, #16]	; (f24 <_ac_sync_init+0x20>)
     f14:	4b04      	ldr	r3, [pc, #16]	; (f28 <_ac_sync_init+0x24>)
     f16:	4798      	blx	r3
	device->hw = hw;
     f18:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
     f1a:	0020      	movs	r0, r4
     f1c:	4b03      	ldr	r3, [pc, #12]	; (f2c <_ac_sync_init+0x28>)
     f1e:	4798      	blx	r3
}
     f20:	bd70      	pop	{r4, r5, r6, pc}
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	00003624 	.word	0x00003624
     f28:	00000ce1 	.word	0x00000ce1
     f2c:	00000e71 	.word	0x00000e71

00000f30 <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
     f30:	2000      	movs	r0, #0
     f32:	4770      	bx	lr

00000f34 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     f34:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     f36:	4b0b      	ldr	r3, [pc, #44]	; (f64 <_adc_get_regs+0x30>)
     f38:	4798      	blx	r3
     f3a:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     f3c:	2000      	movs	r0, #0
     f3e:	2800      	cmp	r0, #0
     f40:	d006      	beq.n	f50 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     f42:	227f      	movs	r2, #127	; 0x7f
     f44:	4908      	ldr	r1, [pc, #32]	; (f68 <_adc_get_regs+0x34>)
     f46:	2000      	movs	r0, #0
     f48:	4b08      	ldr	r3, [pc, #32]	; (f6c <_adc_get_regs+0x38>)
     f4a:	4798      	blx	r3
	return 0;
     f4c:	2000      	movs	r0, #0
}
     f4e:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     f50:	00c3      	lsls	r3, r0, #3
     f52:	1a1b      	subs	r3, r3, r0
     f54:	0099      	lsls	r1, r3, #2
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <_adc_get_regs+0x3c>)
     f58:	5ccb      	ldrb	r3, [r1, r3]
     f5a:	429a      	cmp	r2, r3
     f5c:	d0f7      	beq.n	f4e <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     f5e:	3001      	adds	r0, #1
     f60:	b2c0      	uxtb	r0, r0
     f62:	e7ec      	b.n	f3e <_adc_get_regs+0xa>
     f64:	00000f31 	.word	0x00000f31
     f68:	00003654 	.word	0x00003654
     f6c:	00000ce1 	.word	0x00000ce1
     f70:	00003638 	.word	0x00003638

00000f74 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     f74:	b570      	push	{r4, r5, r6, lr}
     f76:	0004      	movs	r4, r0
     f78:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     f7a:	4b3a      	ldr	r3, [pc, #232]	; (1064 <_adc_init+0xf0>)
     f7c:	18c0      	adds	r0, r0, r3
     f7e:	4243      	negs	r3, r0
     f80:	4158      	adcs	r0, r3
     f82:	b2c0      	uxtb	r0, r0
     f84:	2294      	movs	r2, #148	; 0x94
     f86:	4938      	ldr	r1, [pc, #224]	; (1068 <_adc_init+0xf4>)
     f88:	4b38      	ldr	r3, [pc, #224]	; (106c <_adc_init+0xf8>)
     f8a:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     f8c:	4b38      	ldr	r3, [pc, #224]	; (1070 <_adc_init+0xfc>)
     f8e:	681a      	ldr	r2, [r3, #0]
     f90:	08d2      	lsrs	r2, r2, #3
     f92:	0212      	lsls	r2, r2, #8
     f94:	23e0      	movs	r3, #224	; 0xe0
     f96:	00db      	lsls	r3, r3, #3
     f98:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     f9a:	4936      	ldr	r1, [pc, #216]	; (1074 <_adc_init+0x100>)
     f9c:	680b      	ldr	r3, [r1, #0]
     f9e:	6849      	ldr	r1, [r1, #4]
     fa0:	0149      	lsls	r1, r1, #5
     fa2:	0edb      	lsrs	r3, r3, #27
     fa4:	430b      	orrs	r3, r1
     fa6:	21ff      	movs	r1, #255	; 0xff
     fa8:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     faa:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     fac:	7e63      	ldrb	r3, [r4, #25]
     fae:	09db      	lsrs	r3, r3, #7
     fb0:	d1fc      	bne.n	fac <_adc_init+0x38>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     fb2:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     fb4:	079b      	lsls	r3, r3, #30
     fb6:	d504      	bpl.n	fc2 <_adc_init+0x4e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     fb8:	2300      	movs	r3, #0
     fba:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     fbc:	7e63      	ldrb	r3, [r4, #25]
     fbe:	09db      	lsrs	r3, r3, #7
     fc0:	d1fc      	bne.n	fbc <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg = data;
     fc2:	2301      	movs	r3, #1
     fc4:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     fc6:	7e63      	ldrb	r3, [r4, #25]
     fc8:	09db      	lsrs	r3, r3, #7
     fca:	d1fc      	bne.n	fc6 <_adc_init+0x52>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     fcc:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     fce:	00ea      	lsls	r2, r5, #3
     fd0:	1b52      	subs	r2, r2, r5
     fd2:	0091      	lsls	r1, r2, #2
     fd4:	4b28      	ldr	r3, [pc, #160]	; (1078 <_adc_init+0x104>)
     fd6:	185b      	adds	r3, r3, r1
     fd8:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     fda:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     fdc:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     fde:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     fe0:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     fe2:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     fe4:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     fe6:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     fe8:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     fea:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     fec:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     fee:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     ff0:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     ff2:	222a      	movs	r2, #42	; 0x2a
     ff4:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     ff6:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     ff8:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     ffa:	7e63      	ldrb	r3, [r4, #25]
     ffc:	09db      	lsrs	r3, r3, #7
     ffe:	d1fc      	bne.n	ffa <_adc_init+0x86>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1000:	00eb      	lsls	r3, r5, #3
    1002:	1b5b      	subs	r3, r3, r5
    1004:	009a      	lsls	r2, r3, #2
    1006:	4b1c      	ldr	r3, [pc, #112]	; (1078 <_adc_init+0x104>)
    1008:	189b      	adds	r3, r3, r2
    100a:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
    100c:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    100e:	7e63      	ldrb	r3, [r4, #25]
    1010:	09db      	lsrs	r3, r3, #7
    1012:	d1fc      	bne.n	100e <_adc_init+0x9a>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    1014:	00eb      	lsls	r3, r5, #3
    1016:	1b5b      	subs	r3, r3, r5
    1018:	009a      	lsls	r2, r3, #2
    101a:	4b17      	ldr	r3, [pc, #92]	; (1078 <_adc_init+0x104>)
    101c:	189b      	adds	r3, r3, r2
    101e:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
    1020:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1022:	7e63      	ldrb	r3, [r4, #25]
    1024:	09db      	lsrs	r3, r3, #7
    1026:	d1fc      	bne.n	1022 <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1028:	00eb      	lsls	r3, r5, #3
    102a:	1b5b      	subs	r3, r3, r5
    102c:	009a      	lsls	r2, r3, #2
    102e:	4b12      	ldr	r3, [pc, #72]	; (1078 <_adc_init+0x104>)
    1030:	189b      	adds	r3, r3, r2
    1032:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
    1034:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1036:	7e63      	ldrb	r3, [r4, #25]
    1038:	09db      	lsrs	r3, r3, #7
    103a:	d1fc      	bne.n	1036 <_adc_init+0xc2>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    103c:	00eb      	lsls	r3, r5, #3
    103e:	1b5b      	subs	r3, r3, r5
    1040:	009a      	lsls	r2, r3, #2
    1042:	4b0d      	ldr	r3, [pc, #52]	; (1078 <_adc_init+0x104>)
    1044:	189b      	adds	r3, r3, r2
    1046:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
    1048:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    104a:	7e63      	ldrb	r3, [r4, #25]
    104c:	09db      	lsrs	r3, r3, #7
    104e:	d1fc      	bne.n	104a <_adc_init+0xd6>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1050:	00eb      	lsls	r3, r5, #3
    1052:	1b5d      	subs	r5, r3, r5
    1054:	00aa      	lsls	r2, r5, #2
    1056:	4b08      	ldr	r3, [pc, #32]	; (1078 <_adc_init+0x104>)
    1058:	189b      	adds	r3, r3, r2
    105a:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
    105c:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
    105e:	2000      	movs	r0, #0
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	bdffc000 	.word	0xbdffc000
    1068:	00003654 	.word	0x00003654
    106c:	00000ce1 	.word	0x00000ce1
    1070:	00806024 	.word	0x00806024
    1074:	00806020 	.word	0x00806020
    1078:	00003638 	.word	0x00003638

0000107c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    107c:	b570      	push	{r4, r5, r6, lr}
    107e:	0005      	movs	r5, r0
    1080:	000c      	movs	r4, r1
	ASSERT(device);
    1082:	1e43      	subs	r3, r0, #1
    1084:	4198      	sbcs	r0, r3
    1086:	b2c0      	uxtb	r0, r0
    1088:	22c5      	movs	r2, #197	; 0xc5
    108a:	4906      	ldr	r1, [pc, #24]	; (10a4 <_adc_sync_init+0x28>)
    108c:	4b06      	ldr	r3, [pc, #24]	; (10a8 <_adc_sync_init+0x2c>)
    108e:	4798      	blx	r3

	device->hw = hw;
    1090:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1092:	0020      	movs	r0, r4
    1094:	4b05      	ldr	r3, [pc, #20]	; (10ac <_adc_sync_init+0x30>)
    1096:	4798      	blx	r3
    1098:	0001      	movs	r1, r0
    109a:	0020      	movs	r0, r4
    109c:	4b04      	ldr	r3, [pc, #16]	; (10b0 <_adc_sync_init+0x34>)
    109e:	4798      	blx	r3
}
    10a0:	bd70      	pop	{r4, r5, r6, pc}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	00003654 	.word	0x00003654
    10a8:	00000ce1 	.word	0x00000ce1
    10ac:	00000f35 	.word	0x00000f35
    10b0:	00000f75 	.word	0x00000f75

000010b4 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    10b4:	2364      	movs	r3, #100	; 0x64
    10b6:	4358      	muls	r0, r3
    10b8:	0083      	lsls	r3, r0, #2
    10ba:	181b      	adds	r3, r3, r0
    10bc:	0058      	lsls	r0, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    10be:	4770      	bx	lr

000010c0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    10c0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    10c2:	4b06      	ldr	r3, [pc, #24]	; (10dc <_init_chip+0x1c>)
    10c4:	685a      	ldr	r2, [r3, #4]
    10c6:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    10c8:	4b05      	ldr	r3, [pc, #20]	; (10e0 <_init_chip+0x20>)
    10ca:	4798      	blx	r3
	_sysctrl_init_sources();
    10cc:	4b05      	ldr	r3, [pc, #20]	; (10e4 <_init_chip+0x24>)
    10ce:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    10d0:	4b05      	ldr	r3, [pc, #20]	; (10e8 <_init_chip+0x28>)
    10d2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    10d4:	20ff      	movs	r0, #255	; 0xff
    10d6:	4b05      	ldr	r3, [pc, #20]	; (10ec <_init_chip+0x2c>)
    10d8:	4798      	blx	r3
}
    10da:	bd10      	pop	{r4, pc}
    10dc:	41004000 	.word	0x41004000
    10e0:	00001345 	.word	0x00001345
    10e4:	00001871 	.word	0x00001871
    10e8:	000018bd 	.word	0x000018bd
    10ec:	00001295 	.word	0x00001295

000010f0 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    10f0:	79c3      	ldrb	r3, [r0, #7]
    10f2:	09db      	lsrs	r3, r3, #7
    10f4:	d1fc      	bne.n	10f0 <_dac_init>
    10f6:	79c3      	ldrb	r3, [r0, #7]
    10f8:	09db      	lsrs	r3, r3, #7
    10fa:	d1fc      	bne.n	10f6 <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    10fc:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    10fe:	079b      	lsls	r3, r3, #30
    1100:	d507      	bpl.n	1112 <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    1102:	2300      	movs	r3, #0
    1104:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1106:	79c3      	ldrb	r3, [r0, #7]
    1108:	09db      	lsrs	r3, r3, #7
    110a:	d1fc      	bne.n	1106 <_dac_init+0x16>
    110c:	79c3      	ldrb	r3, [r0, #7]
    110e:	09db      	lsrs	r3, r3, #7
    1110:	d1fc      	bne.n	110c <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    1112:	2301      	movs	r3, #1
    1114:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1116:	79c3      	ldrb	r3, [r0, #7]
    1118:	09db      	lsrs	r3, r3, #7
    111a:	d1fc      	bne.n	1116 <_dac_init+0x26>
    111c:	79c3      	ldrb	r3, [r0, #7]
    111e:	09db      	lsrs	r3, r3, #7
    1120:	d1fc      	bne.n	111c <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1122:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    1124:	2201      	movs	r2, #1
    1126:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1128:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    112a:	79c3      	ldrb	r3, [r0, #7]
    112c:	09db      	lsrs	r3, r3, #7
    112e:	d1fc      	bne.n	112a <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    1130:	2000      	movs	r0, #0
    1132:	4770      	bx	lr

00001134 <_dac_sync_init>:
{
    1134:	b570      	push	{r4, r5, r6, lr}
    1136:	0005      	movs	r5, r0
    1138:	000c      	movs	r4, r1
	ASSERT(device);
    113a:	1e43      	subs	r3, r0, #1
    113c:	4198      	sbcs	r0, r3
    113e:	b2c0      	uxtb	r0, r0
    1140:	2249      	movs	r2, #73	; 0x49
    1142:	4904      	ldr	r1, [pc, #16]	; (1154 <_dac_sync_init+0x20>)
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <_dac_sync_init+0x24>)
    1146:	4798      	blx	r3
	device->hw = hw;
    1148:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    114a:	0020      	movs	r0, r4
    114c:	4b03      	ldr	r3, [pc, #12]	; (115c <_dac_sync_init+0x28>)
    114e:	4798      	blx	r3
}
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	0000366c 	.word	0x0000366c
    1158:	00000ce1 	.word	0x00000ce1
    115c:	000010f1 	.word	0x000010f1

00001160 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1160:	4b20      	ldr	r3, [pc, #128]	; (11e4 <_ext_irq_init+0x84>)
    1162:	785b      	ldrb	r3, [r3, #1]
    1164:	09db      	lsrs	r3, r3, #7
    1166:	d1fb      	bne.n	1160 <_ext_irq_init>
    1168:	4b1e      	ldr	r3, [pc, #120]	; (11e4 <_ext_irq_init+0x84>)
    116a:	785b      	ldrb	r3, [r3, #1]
    116c:	09db      	lsrs	r3, r3, #7
    116e:	d1fb      	bne.n	1168 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1170:	4b1c      	ldr	r3, [pc, #112]	; (11e4 <_ext_irq_init+0x84>)
    1172:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1174:	079b      	lsls	r3, r3, #30
    1176:	d50a      	bpl.n	118e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1178:	2200      	movs	r2, #0
    117a:	4b1a      	ldr	r3, [pc, #104]	; (11e4 <_ext_irq_init+0x84>)
    117c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    117e:	4b19      	ldr	r3, [pc, #100]	; (11e4 <_ext_irq_init+0x84>)
    1180:	785b      	ldrb	r3, [r3, #1]
    1182:	09db      	lsrs	r3, r3, #7
    1184:	d1fb      	bne.n	117e <_ext_irq_init+0x1e>
    1186:	4b17      	ldr	r3, [pc, #92]	; (11e4 <_ext_irq_init+0x84>)
    1188:	785b      	ldrb	r3, [r3, #1]
    118a:	09db      	lsrs	r3, r3, #7
    118c:	d1fb      	bne.n	1186 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    118e:	2201      	movs	r2, #1
    1190:	4b14      	ldr	r3, [pc, #80]	; (11e4 <_ext_irq_init+0x84>)
    1192:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1194:	4b13      	ldr	r3, [pc, #76]	; (11e4 <_ext_irq_init+0x84>)
    1196:	785b      	ldrb	r3, [r3, #1]
    1198:	09db      	lsrs	r3, r3, #7
    119a:	d1fb      	bne.n	1194 <_ext_irq_init+0x34>
    119c:	4b11      	ldr	r3, [pc, #68]	; (11e4 <_ext_irq_init+0x84>)
    119e:	785b      	ldrb	r3, [r3, #1]
    11a0:	09db      	lsrs	r3, r3, #7
    11a2:	d1fb      	bne.n	119c <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    11a4:	4b0f      	ldr	r3, [pc, #60]	; (11e4 <_ext_irq_init+0x84>)
    11a6:	2200      	movs	r2, #0
    11a8:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    11aa:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    11ac:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    11ae:	619a      	str	r2, [r3, #24]
    11b0:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    11b2:	781a      	ldrb	r2, [r3, #0]
    11b4:	2102      	movs	r1, #2
    11b6:	430a      	orrs	r2, r1
    11b8:	b2d2      	uxtb	r2, r2
    11ba:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11bc:	4b09      	ldr	r3, [pc, #36]	; (11e4 <_ext_irq_init+0x84>)
    11be:	785b      	ldrb	r3, [r3, #1]
    11c0:	09db      	lsrs	r3, r3, #7
    11c2:	d1fb      	bne.n	11bc <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11c4:	4b08      	ldr	r3, [pc, #32]	; (11e8 <_ext_irq_init+0x88>)
    11c6:	2210      	movs	r2, #16
    11c8:	2180      	movs	r1, #128	; 0x80
    11ca:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    11cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11d0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11d4:	3101      	adds	r1, #1
    11d6:	31ff      	adds	r1, #255	; 0xff
    11d8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11da:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    11dc:	4b03      	ldr	r3, [pc, #12]	; (11ec <_ext_irq_init+0x8c>)
    11de:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    11e0:	2000      	movs	r0, #0
    11e2:	4770      	bx	lr
    11e4:	40001800 	.word	0x40001800
    11e8:	e000e100 	.word	0xe000e100
    11ec:	20000064 	.word	0x20000064

000011f0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    11f0:	b530      	push	{r4, r5, lr}
    11f2:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    11f4:	4b21      	ldr	r3, [pc, #132]	; (127c <EIC_Handler+0x8c>)
    11f6:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    11f8:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    11fa:	400a      	ands	r2, r1
    11fc:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    11fe:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1200:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1202:	4b1f      	ldr	r3, [pc, #124]	; (1280 <EIC_Handler+0x90>)
    1204:	6818      	ldr	r0, [r3, #0]
    1206:	1e43      	subs	r3, r0, #1
    1208:	4198      	sbcs	r0, r3
    120a:	b2c0      	uxtb	r0, r0
    120c:	22d2      	movs	r2, #210	; 0xd2
    120e:	491d      	ldr	r1, [pc, #116]	; (1284 <EIC_Handler+0x94>)
    1210:	4b1d      	ldr	r3, [pc, #116]	; (1288 <EIC_Handler+0x98>)
    1212:	4798      	blx	r3

	while (flags) {
    1214:	e027      	b.n	1266 <EIC_Handler+0x76>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    1216:	3901      	subs	r1, #1
    1218:	b2cd      	uxtb	r5, r1
			while (upper >= lower) {
    121a:	42ac      	cmp	r4, r5
    121c:	d80d      	bhi.n	123a <EIC_Handler+0x4a>
				middle = (upper + lower) >> 1;
    121e:	192a      	adds	r2, r5, r4
    1220:	1052      	asrs	r2, r2, #1
    1222:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    1224:	23ff      	movs	r3, #255	; 0xff
    1226:	4013      	ands	r3, r2
    1228:	00db      	lsls	r3, r3, #3
    122a:	4a18      	ldr	r2, [pc, #96]	; (128c <EIC_Handler+0x9c>)
    122c:	5c9b      	ldrb	r3, [r3, r2]
    122e:	4283      	cmp	r3, r0
    1230:	d003      	beq.n	123a <EIC_Handler+0x4a>
				if (_map[middle].extint < pos) {
    1232:	daf0      	bge.n	1216 <EIC_Handler+0x26>
					lower = middle + 1;
    1234:	3101      	adds	r1, #1
    1236:	b2cc      	uxtb	r4, r1
    1238:	e7ef      	b.n	121a <EIC_Handler+0x2a>
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}
			flags &= ~(1ul << pos);
    123a:	2201      	movs	r2, #1
    123c:	4082      	lsls	r2, r0
    123e:	9b01      	ldr	r3, [sp, #4]
    1240:	4393      	bics	r3, r2
    1242:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1244:	9801      	ldr	r0, [sp, #4]
    1246:	4b12      	ldr	r3, [pc, #72]	; (1290 <EIC_Handler+0xa0>)
    1248:	4798      	blx	r3
    124a:	3801      	subs	r0, #1
    124c:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    124e:	1c43      	adds	r3, r0, #1
    1250:	d002      	beq.n	1258 <EIC_Handler+0x68>
    1252:	2500      	movs	r5, #0
    1254:	2400      	movs	r4, #0
    1256:	e7e0      	b.n	121a <EIC_Handler+0x2a>
	return ((Eic *)hw)->INTFLAG.reg;
    1258:	4b08      	ldr	r3, [pc, #32]	; (127c <EIC_Handler+0x8c>)
    125a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    125c:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    125e:	400a      	ands	r2, r1
    1260:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1262:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1264:	611a      	str	r2, [r3, #16]
	while (flags) {
    1266:	9b01      	ldr	r3, [sp, #4]
    1268:	2b00      	cmp	r3, #0
    126a:	d005      	beq.n	1278 <EIC_Handler+0x88>
		pos = ffs(flags) - 1;
    126c:	9801      	ldr	r0, [sp, #4]
    126e:	4b08      	ldr	r3, [pc, #32]	; (1290 <EIC_Handler+0xa0>)
    1270:	4798      	blx	r3
    1272:	3801      	subs	r0, #1
    1274:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    1276:	e7ea      	b.n	124e <EIC_Handler+0x5e>
	}
}
    1278:	b003      	add	sp, #12
    127a:	bd30      	pop	{r4, r5, pc}
    127c:	40001800 	.word	0x40001800
    1280:	20000064 	.word	0x20000064
    1284:	0000368c 	.word	0x0000368c
    1288:	00000ce1 	.word	0x00000ce1
    128c:	00003684 	.word	0x00003684
    1290:	00003421 	.word	0x00003421

00001294 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1294:	07c3      	lsls	r3, r0, #31
    1296:	d50a      	bpl.n	12ae <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1298:	4b05      	ldr	r3, [pc, #20]	; (12b0 <_gclk_init_generators_by_fref+0x1c>)
    129a:	2280      	movs	r2, #128	; 0x80
    129c:	0052      	lsls	r2, r2, #1
    129e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    12a0:	2283      	movs	r2, #131	; 0x83
    12a2:	0252      	lsls	r2, r2, #9
    12a4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    12a6:	4b02      	ldr	r3, [pc, #8]	; (12b0 <_gclk_init_generators_by_fref+0x1c>)
    12a8:	785b      	ldrb	r3, [r3, #1]
    12aa:	09db      	lsrs	r3, r3, #7
    12ac:	d1fb      	bne.n	12a6 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    12ae:	4770      	bx	lr
    12b0:	40000c00 	.word	0x40000c00

000012b4 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
    12b4:	b570      	push	{r4, r5, r6, lr}
    12b6:	0005      	movs	r5, r0
    12b8:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    12ba:	2800      	cmp	r0, #0
    12bc:	d01c      	beq.n	12f8 <_flash_init+0x44>
    12be:	4b10      	ldr	r3, [pc, #64]	; (1300 <_flash_init+0x4c>)
    12c0:	4299      	cmp	r1, r3
    12c2:	d01b      	beq.n	12fc <_flash_init+0x48>
    12c4:	2000      	movs	r0, #0
    12c6:	2246      	movs	r2, #70	; 0x46
    12c8:	490e      	ldr	r1, [pc, #56]	; (1304 <_flash_init+0x50>)
    12ca:	4b0f      	ldr	r3, [pc, #60]	; (1308 <_flash_init+0x54>)
    12cc:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
    12ce:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    12d0:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    12d2:	239e      	movs	r3, #158	; 0x9e
    12d4:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    12d6:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
    12d8:	4b0c      	ldr	r3, [pc, #48]	; (130c <_flash_init+0x58>)
    12da:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12dc:	4b0c      	ldr	r3, [pc, #48]	; (1310 <_flash_init+0x5c>)
    12de:	2220      	movs	r2, #32
    12e0:	2180      	movs	r1, #128	; 0x80
    12e2:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    12e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12e8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ec:	3101      	adds	r1, #1
    12ee:	31ff      	adds	r1, #255	; 0xff
    12f0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12f2:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
    12f4:	2000      	movs	r0, #0
    12f6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    12f8:	2000      	movs	r0, #0
    12fa:	e7e4      	b.n	12c6 <_flash_init+0x12>
    12fc:	2001      	movs	r0, #1
    12fe:	e7e2      	b.n	12c6 <_flash_init+0x12>
    1300:	41004000 	.word	0x41004000
    1304:	000036a4 	.word	0x000036a4
    1308:	00000ce1 	.word	0x00000ce1
    130c:	20000068 	.word	0x20000068
    1310:	e000e100 	.word	0xe000e100

00001314 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    1314:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    1316:	4b0a      	ldr	r3, [pc, #40]	; (1340 <NVMCTRL_Handler+0x2c>)
    1318:	6818      	ldr	r0, [r3, #0]
    131a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    131c:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    131e:	07d2      	lsls	r2, r2, #31
    1320:	d504      	bpl.n	132c <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    1322:	6803      	ldr	r3, [r0, #0]
    1324:	2b00      	cmp	r3, #0
    1326:	d000      	beq.n	132a <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1328:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    132a:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    132c:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    132e:	0792      	lsls	r2, r2, #30
    1330:	d5fb      	bpl.n	132a <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    1332:	2202      	movs	r2, #2
    1334:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    1336:	6843      	ldr	r3, [r0, #4]
    1338:	2b00      	cmp	r3, #0
    133a:	d0f6      	beq.n	132a <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    133c:	4798      	blx	r3
}
    133e:	e7f4      	b.n	132a <NVMCTRL_Handler+0x16>
    1340:	20000068 	.word	0x20000068

00001344 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1344:	4b06      	ldr	r3, [pc, #24]	; (1360 <_pm_init+0x1c>)
    1346:	7a1a      	ldrb	r2, [r3, #8]
    1348:	b2d2      	uxtb	r2, r2
    134a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    134c:	7a5a      	ldrb	r2, [r3, #9]
    134e:	b2d2      	uxtb	r2, r2
    1350:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1352:	7a9a      	ldrb	r2, [r3, #10]
    1354:	b2d2      	uxtb	r2, r2
    1356:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1358:	7ada      	ldrb	r2, [r3, #11]
    135a:	b2d2      	uxtb	r2, r2
    135c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    135e:	4770      	bx	lr
    1360:	40000400 	.word	0x40000400

00001364 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1364:	4b02      	ldr	r3, [pc, #8]	; (1370 <_sercom_get_hardware_index+0xc>)
    1366:	469c      	mov	ip, r3
    1368:	4460      	add	r0, ip
    136a:	0a80      	lsrs	r0, r0, #10
    136c:	b2c0      	uxtb	r0, r0
}
    136e:	4770      	bx	lr
    1370:	bdfff800 	.word	0xbdfff800

00001374 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1374:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1376:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1378:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    137a:	07d2      	lsls	r2, r2, #31
    137c:	d502      	bpl.n	1384 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    137e:	7b5a      	ldrb	r2, [r3, #13]
    1380:	07d2      	lsls	r2, r2, #31
    1382:	d40e      	bmi.n	13a2 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1384:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1386:	0792      	lsls	r2, r2, #30
    1388:	d502      	bpl.n	1390 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    138a:	7b5a      	ldrb	r2, [r3, #13]
    138c:	0792      	lsls	r2, r2, #30
    138e:	d40d      	bmi.n	13ac <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1390:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1392:	0752      	lsls	r2, r2, #29
    1394:	d504      	bpl.n	13a0 <_sercom_usart_interrupt_handler+0x2c>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1396:	8a1a      	ldrh	r2, [r3, #16]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1398:	0752      	lsls	r2, r2, #29
    139a:	d00c      	beq.n	13b6 <_sercom_usart_interrupt_handler+0x42>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    139c:	4a08      	ldr	r2, [pc, #32]	; (13c0 <_sercom_usart_interrupt_handler+0x4c>)
    139e:	821a      	strh	r2, [r3, #16]
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
	}
}
    13a0:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    13a2:	2201      	movs	r2, #1
    13a4:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
    13a6:	6803      	ldr	r3, [r0, #0]
    13a8:	4798      	blx	r3
    13aa:	e7f9      	b.n	13a0 <_sercom_usart_interrupt_handler+0x2c>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    13ac:	2202      	movs	r2, #2
    13ae:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
    13b0:	6883      	ldr	r3, [r0, #8]
    13b2:	4798      	blx	r3
    13b4:	e7f4      	b.n	13a0 <_sercom_usart_interrupt_handler+0x2c>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    13b6:	6842      	ldr	r2, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    13b8:	8b19      	ldrh	r1, [r3, #24]
    13ba:	b2c9      	uxtb	r1, r1
    13bc:	4790      	blx	r2
    13be:	e7ef      	b.n	13a0 <_sercom_usart_interrupt_handler+0x2c>
    13c0:	ffff8007 	.word	0xffff8007

000013c4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    13c4:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    13c6:	4b02      	ldr	r3, [pc, #8]	; (13d0 <_sercom_get_irq_num+0xc>)
    13c8:	4798      	blx	r3
    13ca:	3007      	adds	r0, #7
    13cc:	b2c0      	uxtb	r0, r0
}
    13ce:	bd10      	pop	{r4, pc}
    13d0:	00001365 	.word	0x00001365

000013d4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    13d4:	4b03      	ldr	r3, [pc, #12]	; (13e4 <_sercom_init_irq_param+0x10>)
    13d6:	4298      	cmp	r0, r3
    13d8:	d000      	beq.n	13dc <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    13da:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    13dc:	4b02      	ldr	r3, [pc, #8]	; (13e8 <_sercom_init_irq_param+0x14>)
    13de:	6019      	str	r1, [r3, #0]
}
    13e0:	e7fb      	b.n	13da <_sercom_init_irq_param+0x6>
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	42001400 	.word	0x42001400
    13e8:	2000006c 	.word	0x2000006c

000013ec <_get_sercom_index>:
{
    13ec:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    13ee:	4b0a      	ldr	r3, [pc, #40]	; (1418 <_get_sercom_index+0x2c>)
    13f0:	4798      	blx	r3
    13f2:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    13f4:	2000      	movs	r0, #0
    13f6:	2800      	cmp	r0, #0
    13f8:	d006      	beq.n	1408 <_get_sercom_index+0x1c>
	ASSERT(false);
    13fa:	4a08      	ldr	r2, [pc, #32]	; (141c <_get_sercom_index+0x30>)
    13fc:	4908      	ldr	r1, [pc, #32]	; (1420 <_get_sercom_index+0x34>)
    13fe:	2000      	movs	r0, #0
    1400:	4b08      	ldr	r3, [pc, #32]	; (1424 <_get_sercom_index+0x38>)
    1402:	4798      	blx	r3
	return 0;
    1404:	2000      	movs	r0, #0
}
    1406:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1408:	0102      	lsls	r2, r0, #4
    140a:	4907      	ldr	r1, [pc, #28]	; (1428 <_get_sercom_index+0x3c>)
    140c:	5c52      	ldrb	r2, [r2, r1]
    140e:	4293      	cmp	r3, r2
    1410:	d0f9      	beq.n	1406 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1412:	3001      	adds	r0, #1
    1414:	b2c0      	uxtb	r0, r0
    1416:	e7ee      	b.n	13f6 <_get_sercom_index+0xa>
    1418:	00001365 	.word	0x00001365
    141c:	0000024e 	.word	0x0000024e
    1420:	0000370c 	.word	0x0000370c
    1424:	00000ce1 	.word	0x00000ce1
    1428:	000036c4 	.word	0x000036c4

0000142c <_usart_init>:
{
    142c:	b510      	push	{r4, lr}
    142e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1430:	4b19      	ldr	r3, [pc, #100]	; (1498 <_usart_init+0x6c>)
    1432:	4798      	blx	r3
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1434:	8a23      	ldrh	r3, [r4, #16]
    1436:	0bdb      	lsrs	r3, r3, #15
    1438:	d1fc      	bne.n	1434 <_usart_init+0x8>
    143a:	8a23      	ldrh	r3, [r4, #16]
    143c:	0bdb      	lsrs	r3, r3, #15
    143e:	d1fc      	bne.n	143a <_usart_init+0xe>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1440:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1442:	079b      	lsls	r3, r3, #30
    1444:	d507      	bpl.n	1456 <_usart_init+0x2a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1446:	2300      	movs	r3, #0
    1448:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    144a:	8a23      	ldrh	r3, [r4, #16]
    144c:	0bdb      	lsrs	r3, r3, #15
    144e:	d1fc      	bne.n	144a <_usart_init+0x1e>
    1450:	8a23      	ldrh	r3, [r4, #16]
    1452:	0bdb      	lsrs	r3, r3, #15
    1454:	d1fc      	bne.n	1450 <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1456:	2301      	movs	r3, #1
    1458:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    145a:	8a23      	ldrh	r3, [r4, #16]
    145c:	0bdb      	lsrs	r3, r3, #15
    145e:	d1fc      	bne.n	145a <_usart_init+0x2e>
    1460:	8a23      	ldrh	r3, [r4, #16]
    1462:	0bdb      	lsrs	r3, r3, #15
    1464:	d1fc      	bne.n	1460 <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1466:	0102      	lsls	r2, r0, #4
    1468:	4b0c      	ldr	r3, [pc, #48]	; (149c <_usart_init+0x70>)
    146a:	189b      	adds	r3, r3, r2
    146c:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    146e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1470:	8a23      	ldrh	r3, [r4, #16]
    1472:	0bdb      	lsrs	r3, r3, #15
    1474:	d1fc      	bne.n	1470 <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1476:	0102      	lsls	r2, r0, #4
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <_usart_init+0x70>)
    147a:	189b      	adds	r3, r3, r2
    147c:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    147e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1480:	8a23      	ldrh	r3, [r4, #16]
    1482:	0bdb      	lsrs	r3, r3, #15
    1484:	d1fc      	bne.n	1480 <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1486:	0100      	lsls	r0, r0, #4
    1488:	4b04      	ldr	r3, [pc, #16]	; (149c <_usart_init+0x70>)
    148a:	1818      	adds	r0, r3, r0
    148c:	8983      	ldrh	r3, [r0, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    148e:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1490:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1492:	7223      	strb	r3, [r4, #8]
}
    1494:	2000      	movs	r0, #0
    1496:	bd10      	pop	{r4, pc}
    1498:	000013ed 	.word	0x000013ed
    149c:	000036c4 	.word	0x000036c4

000014a0 <_usart_async_init>:
{
    14a0:	b570      	push	{r4, r5, r6, lr}
    14a2:	0006      	movs	r6, r0
    14a4:	000c      	movs	r4, r1
	ASSERT(device);
    14a6:	1e43      	subs	r3, r0, #1
    14a8:	4198      	sbcs	r0, r3
    14aa:	b2c0      	uxtb	r0, r0
    14ac:	22b1      	movs	r2, #177	; 0xb1
    14ae:	4919      	ldr	r1, [pc, #100]	; (1514 <_usart_async_init+0x74>)
    14b0:	4b19      	ldr	r3, [pc, #100]	; (1518 <_usart_async_init+0x78>)
    14b2:	4798      	blx	r3
	init_status = _usart_init(hw);
    14b4:	0020      	movs	r0, r4
    14b6:	4b19      	ldr	r3, [pc, #100]	; (151c <_usart_async_init+0x7c>)
    14b8:	4798      	blx	r3
    14ba:	1e05      	subs	r5, r0, #0
	if (init_status) {
    14bc:	d001      	beq.n	14c2 <_usart_async_init+0x22>
}
    14be:	0028      	movs	r0, r5
    14c0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    14c2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    14c4:	0031      	movs	r1, r6
    14c6:	0020      	movs	r0, r4
    14c8:	4b15      	ldr	r3, [pc, #84]	; (1520 <_usart_async_init+0x80>)
    14ca:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    14cc:	0020      	movs	r0, r4
    14ce:	4b15      	ldr	r3, [pc, #84]	; (1524 <_usart_async_init+0x84>)
    14d0:	4798      	blx	r3
    14d2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    14d4:	2b00      	cmp	r3, #0
    14d6:	db0a      	blt.n	14ee <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14d8:	211f      	movs	r1, #31
    14da:	4001      	ands	r1, r0
    14dc:	2201      	movs	r2, #1
    14de:	408a      	lsls	r2, r1
    14e0:	2180      	movs	r1, #128	; 0x80
    14e2:	4c11      	ldr	r4, [pc, #68]	; (1528 <_usart_async_init+0x88>)
    14e4:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    14e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14ea:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    14ee:	2b00      	cmp	r3, #0
    14f0:	db07      	blt.n	1502 <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14f2:	211f      	movs	r1, #31
    14f4:	4001      	ands	r1, r0
    14f6:	2201      	movs	r2, #1
    14f8:	408a      	lsls	r2, r1
    14fa:	21c0      	movs	r1, #192	; 0xc0
    14fc:	0049      	lsls	r1, r1, #1
    14fe:	4c0a      	ldr	r4, [pc, #40]	; (1528 <_usart_async_init+0x88>)
    1500:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1502:	2b00      	cmp	r3, #0
    1504:	dbdb      	blt.n	14be <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1506:	231f      	movs	r3, #31
    1508:	4018      	ands	r0, r3
    150a:	3b1e      	subs	r3, #30
    150c:	4083      	lsls	r3, r0
    150e:	4a06      	ldr	r2, [pc, #24]	; (1528 <_usart_async_init+0x88>)
    1510:	6013      	str	r3, [r2, #0]
    1512:	e7d4      	b.n	14be <_usart_async_init+0x1e>
    1514:	0000370c 	.word	0x0000370c
    1518:	00000ce1 	.word	0x00000ce1
    151c:	0000142d 	.word	0x0000142d
    1520:	000013d5 	.word	0x000013d5
    1524:	000013c5 	.word	0x000013c5
    1528:	e000e100 	.word	0xe000e100

0000152c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    152c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    152e:	6813      	ldr	r3, [r2, #0]
    1530:	2102      	movs	r1, #2
    1532:	430b      	orrs	r3, r1
    1534:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1536:	8a13      	ldrh	r3, [r2, #16]
    1538:	0bdb      	lsrs	r3, r3, #15
    153a:	d1fc      	bne.n	1536 <_usart_async_enable+0xa>
}
    153c:	4770      	bx	lr

0000153e <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    153e:	6983      	ldr	r3, [r0, #24]
    1540:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1542:	8319      	strh	r1, [r3, #24]
}
    1544:	4770      	bx	lr

00001546 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1546:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1548:	2201      	movs	r2, #1
    154a:	735a      	strb	r2, [r3, #13]
}
    154c:	4770      	bx	lr

0000154e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    154e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1550:	2202      	movs	r2, #2
    1552:	735a      	strb	r2, [r3, #13]
}
    1554:	4770      	bx	lr
	...

00001558 <_usart_async_set_irq_state>:
{
    1558:	b570      	push	{r4, r5, r6, lr}
    155a:	0004      	movs	r4, r0
    155c:	000d      	movs	r5, r1
    155e:	0016      	movs	r6, r2
	ASSERT(device);
    1560:	1e43      	subs	r3, r0, #1
    1562:	4198      	sbcs	r0, r3
    1564:	b2c0      	uxtb	r0, r0
    1566:	2284      	movs	r2, #132	; 0x84
    1568:	0092      	lsls	r2, r2, #2
    156a:	4911      	ldr	r1, [pc, #68]	; (15b0 <_usart_async_set_irq_state+0x58>)
    156c:	4b11      	ldr	r3, [pc, #68]	; (15b4 <_usart_async_set_irq_state+0x5c>)
    156e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1570:	2d00      	cmp	r5, #0
    1572:	d009      	beq.n	1588 <_usart_async_set_irq_state+0x30>
    1574:	2d02      	cmp	r5, #2
    1576:	d007      	beq.n	1588 <_usart_async_set_irq_state+0x30>
	} else if (USART_ASYNC_RX_DONE == type) {
    1578:	2d01      	cmp	r5, #1
    157a:	d10f      	bne.n	159c <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    157c:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    157e:	2e00      	cmp	r6, #0
    1580:	d013      	beq.n	15aa <_usart_async_set_irq_state+0x52>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1582:	2204      	movs	r2, #4
    1584:	735a      	strb	r2, [r3, #13]
}
    1586:	e009      	b.n	159c <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1588:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    158a:	2e00      	cmp	r6, #0
    158c:	d107      	bne.n	159e <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    158e:	2201      	movs	r2, #1
    1590:	731a      	strb	r2, [r3, #12]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1592:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1594:	2e00      	cmp	r6, #0
    1596:	d105      	bne.n	15a4 <_usart_async_set_irq_state+0x4c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1598:	2202      	movs	r2, #2
    159a:	731a      	strb	r2, [r3, #12]
}
    159c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    159e:	2201      	movs	r2, #1
    15a0:	735a      	strb	r2, [r3, #13]
    15a2:	e7f6      	b.n	1592 <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    15a4:	2202      	movs	r2, #2
    15a6:	735a      	strb	r2, [r3, #13]
    15a8:	e7f8      	b.n	159c <_usart_async_set_irq_state+0x44>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    15aa:	2204      	movs	r2, #4
    15ac:	731a      	strb	r2, [r3, #12]
    15ae:	e7f5      	b.n	159c <_usart_async_set_irq_state+0x44>
    15b0:	0000370c 	.word	0x0000370c
    15b4:	00000ce1 	.word	0x00000ce1

000015b8 <SERCOM3_Handler>:
{
    15b8:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    15ba:	4b02      	ldr	r3, [pc, #8]	; (15c4 <SERCOM3_Handler+0xc>)
    15bc:	6818      	ldr	r0, [r3, #0]
    15be:	4b02      	ldr	r3, [pc, #8]	; (15c8 <SERCOM3_Handler+0x10>)
    15c0:	4798      	blx	r3
}
    15c2:	bd10      	pop	{r4, pc}
    15c4:	2000006c 	.word	0x2000006c
    15c8:	00001375 	.word	0x00001375

000015cc <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	0006      	movs	r6, r0
    15d0:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    15d2:	0008      	movs	r0, r1
    15d4:	4b62      	ldr	r3, [pc, #392]	; (1760 <_spi_m_sync_init+0x194>)
    15d6:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    15d8:	2300      	movs	r3, #0
    15da:	2b00      	cmp	r3, #0
    15dc:	d100      	bne.n	15e0 <_spi_m_sync_init+0x14>
    15de:	e06c      	b.n	16ba <_spi_m_sync_init+0xee>
	return NULL;
    15e0:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    15e2:	2e00      	cmp	r6, #0
    15e4:	d100      	bne.n	15e8 <_spi_m_sync_init+0x1c>
    15e6:	e074      	b.n	16d2 <_spi_m_sync_init+0x106>
    15e8:	2c00      	cmp	r4, #0
    15ea:	d100      	bne.n	15ee <_spi_m_sync_init+0x22>
    15ec:	e06f      	b.n	16ce <_spi_m_sync_init+0x102>
    15ee:	2001      	movs	r0, #1
    15f0:	4a5c      	ldr	r2, [pc, #368]	; (1764 <_spi_m_sync_init+0x198>)
    15f2:	495d      	ldr	r1, [pc, #372]	; (1768 <_spi_m_sync_init+0x19c>)
    15f4:	4b5d      	ldr	r3, [pc, #372]	; (176c <_spi_m_sync_init+0x1a0>)
    15f6:	4798      	blx	r3

	if (regs == NULL) {
    15f8:	2d00      	cmp	r5, #0
    15fa:	d100      	bne.n	15fe <_spi_m_sync_init+0x32>
    15fc:	e0ac      	b.n	1758 <_spi_m_sync_init+0x18c>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    15fe:	8a23      	ldrh	r3, [r4, #16]
    1600:	0bdb      	lsrs	r3, r3, #15
    1602:	d1fc      	bne.n	15fe <_spi_m_sync_init+0x32>
    1604:	8a23      	ldrh	r3, [r4, #16]
    1606:	0bdb      	lsrs	r3, r3, #15
    1608:	d1fc      	bne.n	1604 <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    160a:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    160c:	079b      	lsls	r3, r3, #30
    160e:	d507      	bpl.n	1620 <_spi_m_sync_init+0x54>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1610:	2300      	movs	r3, #0
    1612:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1614:	8a23      	ldrh	r3, [r4, #16]
    1616:	0bdb      	lsrs	r3, r3, #15
    1618:	d1fc      	bne.n	1614 <_spi_m_sync_init+0x48>
    161a:	8a23      	ldrh	r3, [r4, #16]
    161c:	0bdb      	lsrs	r3, r3, #15
    161e:	d1fc      	bne.n	161a <_spi_m_sync_init+0x4e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1620:	2301      	movs	r3, #1
    1622:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1624:	8a23      	ldrh	r3, [r4, #16]
    1626:	0bdb      	lsrs	r3, r3, #15
    1628:	d1fc      	bne.n	1624 <_spi_m_sync_init+0x58>
    162a:	8a23      	ldrh	r3, [r4, #16]
    162c:	0bdb      	lsrs	r3, r3, #15
    162e:	d1fc      	bne.n	162a <_spi_m_sync_init+0x5e>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    1630:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1632:	782b      	ldrb	r3, [r5, #0]
    1634:	786a      	ldrb	r2, [r5, #1]
    1636:	0212      	lsls	r2, r2, #8
    1638:	431a      	orrs	r2, r3
    163a:	78ab      	ldrb	r3, [r5, #2]
    163c:	041b      	lsls	r3, r3, #16
    163e:	431a      	orrs	r2, r3
    1640:	78eb      	ldrb	r3, [r5, #3]
    1642:	061b      	lsls	r3, r3, #24
    1644:	4313      	orrs	r3, r2
    1646:	221c      	movs	r2, #28
    1648:	4013      	ands	r3, r2
    164a:	2b08      	cmp	r3, #8
    164c:	d043      	beq.n	16d6 <_spi_m_sync_init+0x10a>
	ASSERT(hw && regs);
    164e:	2c00      	cmp	r4, #0
    1650:	d100      	bne.n	1654 <_spi_m_sync_init+0x88>
    1652:	e07d      	b.n	1750 <_spi_m_sync_init+0x184>
    1654:	2d00      	cmp	r5, #0
    1656:	d100      	bne.n	165a <_spi_m_sync_init+0x8e>
    1658:	e078      	b.n	174c <_spi_m_sync_init+0x180>
    165a:	2001      	movs	r0, #1
    165c:	4a44      	ldr	r2, [pc, #272]	; (1770 <_spi_m_sync_init+0x1a4>)
    165e:	4942      	ldr	r1, [pc, #264]	; (1768 <_spi_m_sync_init+0x19c>)
    1660:	4b42      	ldr	r3, [pc, #264]	; (176c <_spi_m_sync_init+0x1a0>)
    1662:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1664:	782b      	ldrb	r3, [r5, #0]
    1666:	786a      	ldrb	r2, [r5, #1]
    1668:	0212      	lsls	r2, r2, #8
    166a:	431a      	orrs	r2, r3
    166c:	78ab      	ldrb	r3, [r5, #2]
    166e:	041b      	lsls	r3, r3, #16
    1670:	431a      	orrs	r2, r3
    1672:	78eb      	ldrb	r3, [r5, #3]
    1674:	061b      	lsls	r3, r3, #24
    1676:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1678:	4a3e      	ldr	r2, [pc, #248]	; (1774 <_spi_m_sync_init+0x1a8>)
    167a:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    167c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    167e:	8a23      	ldrh	r3, [r4, #16]
    1680:	0bdb      	lsrs	r3, r3, #15
    1682:	d1fc      	bne.n	167e <_spi_m_sync_init+0xb2>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    1684:	792b      	ldrb	r3, [r5, #4]
    1686:	796a      	ldrb	r2, [r5, #5]
    1688:	0212      	lsls	r2, r2, #8
    168a:	431a      	orrs	r2, r3
    168c:	79ab      	ldrb	r3, [r5, #6]
    168e:	041b      	lsls	r3, r3, #16
    1690:	431a      	orrs	r2, r3
    1692:	79eb      	ldrb	r3, [r5, #7]
    1694:	061b      	lsls	r3, r3, #24
    1696:	4313      	orrs	r3, r2
    1698:	4a37      	ldr	r2, [pc, #220]	; (1778 <_spi_m_sync_init+0x1ac>)
    169a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    169c:	2280      	movs	r2, #128	; 0x80
    169e:	0292      	lsls	r2, r2, #10
    16a0:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    16a2:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    16a4:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    16a6:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    16a8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    16aa:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    16ac:	792b      	ldrb	r3, [r5, #4]
    16ae:	075b      	lsls	r3, r3, #29
    16b0:	d150      	bne.n	1754 <_spi_m_sync_init+0x188>
    16b2:	2301      	movs	r3, #1
    16b4:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    16b6:	2000      	movs	r0, #0
}
    16b8:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    16ba:	2801      	cmp	r0, #1
    16bc:	d002      	beq.n	16c4 <_spi_m_sync_init+0xf8>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    16be:	3301      	adds	r3, #1
    16c0:	b2db      	uxtb	r3, r3
    16c2:	e78a      	b.n	15da <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    16c4:	011d      	lsls	r5, r3, #4
    16c6:	4b2d      	ldr	r3, [pc, #180]	; (177c <_spi_m_sync_init+0x1b0>)
    16c8:	3338      	adds	r3, #56	; 0x38
    16ca:	195d      	adds	r5, r3, r5
    16cc:	e789      	b.n	15e2 <_spi_m_sync_init+0x16>
	ASSERT(dev && hw);
    16ce:	2000      	movs	r0, #0
    16d0:	e78e      	b.n	15f0 <_spi_m_sync_init+0x24>
    16d2:	2000      	movs	r0, #0
    16d4:	e78c      	b.n	15f0 <_spi_m_sync_init+0x24>
	ASSERT(hw && regs);
    16d6:	2c00      	cmp	r4, #0
    16d8:	d036      	beq.n	1748 <_spi_m_sync_init+0x17c>
    16da:	2d00      	cmp	r5, #0
    16dc:	d032      	beq.n	1744 <_spi_m_sync_init+0x178>
    16de:	2001      	movs	r0, #1
    16e0:	4a27      	ldr	r2, [pc, #156]	; (1780 <_spi_m_sync_init+0x1b4>)
    16e2:	4921      	ldr	r1, [pc, #132]	; (1768 <_spi_m_sync_init+0x19c>)
    16e4:	4b21      	ldr	r3, [pc, #132]	; (176c <_spi_m_sync_init+0x1a0>)
    16e6:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    16e8:	782b      	ldrb	r3, [r5, #0]
    16ea:	786a      	ldrb	r2, [r5, #1]
    16ec:	0212      	lsls	r2, r2, #8
    16ee:	431a      	orrs	r2, r3
    16f0:	78ab      	ldrb	r3, [r5, #2]
    16f2:	041b      	lsls	r3, r3, #16
    16f4:	431a      	orrs	r2, r3
    16f6:	78eb      	ldrb	r3, [r5, #3]
    16f8:	061b      	lsls	r3, r3, #24
    16fa:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    16fc:	4a1d      	ldr	r2, [pc, #116]	; (1774 <_spi_m_sync_init+0x1a8>)
    16fe:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1700:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1702:	8a23      	ldrh	r3, [r4, #16]
    1704:	0bdb      	lsrs	r3, r3, #15
    1706:	d1fc      	bne.n	1702 <_spi_m_sync_init+0x136>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    1708:	792b      	ldrb	r3, [r5, #4]
    170a:	796a      	ldrb	r2, [r5, #5]
    170c:	0212      	lsls	r2, r2, #8
    170e:	431a      	orrs	r2, r3
    1710:	79ab      	ldrb	r3, [r5, #6]
    1712:	041b      	lsls	r3, r3, #16
    1714:	431a      	orrs	r2, r3
    1716:	79eb      	ldrb	r3, [r5, #7]
    1718:	061b      	lsls	r3, r3, #24
    171a:	4313      	orrs	r3, r2
    171c:	4a19      	ldr	r2, [pc, #100]	; (1784 <_spi_m_sync_init+0x1b8>)
    171e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1720:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1722:	7a2b      	ldrb	r3, [r5, #8]
    1724:	7a6a      	ldrb	r2, [r5, #9]
    1726:	0212      	lsls	r2, r2, #8
    1728:	431a      	orrs	r2, r3
    172a:	7aab      	ldrb	r3, [r5, #10]
    172c:	041b      	lsls	r3, r3, #16
    172e:	431a      	orrs	r2, r3
    1730:	7aeb      	ldrb	r3, [r5, #11]
    1732:	061b      	lsls	r3, r3, #24
    1734:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1736:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1738:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    173a:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    173c:	8a23      	ldrh	r3, [r4, #16]
    173e:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    1740:	d1fc      	bne.n	173c <_spi_m_sync_init+0x170>
    1742:	e7b3      	b.n	16ac <_spi_m_sync_init+0xe0>
	ASSERT(hw && regs);
    1744:	2000      	movs	r0, #0
    1746:	e7cb      	b.n	16e0 <_spi_m_sync_init+0x114>
    1748:	2000      	movs	r0, #0
    174a:	e7c9      	b.n	16e0 <_spi_m_sync_init+0x114>
	ASSERT(hw && regs);
    174c:	2000      	movs	r0, #0
    174e:	e785      	b.n	165c <_spi_m_sync_init+0x90>
    1750:	2000      	movs	r0, #0
    1752:	e783      	b.n	165c <_spi_m_sync_init+0x90>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1754:	2302      	movs	r3, #2
    1756:	e7ad      	b.n	16b4 <_spi_m_sync_init+0xe8>
		return ERR_INVALID_ARG;
    1758:	200d      	movs	r0, #13
    175a:	4240      	negs	r0, r0
    175c:	e7ac      	b.n	16b8 <_spi_m_sync_init+0xec>
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00001365 	.word	0x00001365
    1764:	000008cb 	.word	0x000008cb
    1768:	0000370c 	.word	0x0000370c
    176c:	00000ce1 	.word	0x00000ce1
    1770:	0000089a 	.word	0x0000089a
    1774:	fffffefc 	.word	0xfffffefc
    1778:	fffd3fbf 	.word	0xfffd3fbf
    177c:	000036c4 	.word	0x000036c4
    1780:	000008ab 	.word	0x000008ab
    1784:	00020040 	.word	0x00020040

00001788 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1788:	b570      	push	{r4, r5, r6, lr}
    178a:	b088      	sub	sp, #32
    178c:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    178e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1790:	680b      	ldr	r3, [r1, #0]
    1792:	9303      	str	r3, [sp, #12]
    1794:	684b      	ldr	r3, [r1, #4]
    1796:	9304      	str	r3, [sp, #16]
    1798:	2300      	movs	r3, #0
    179a:	9305      	str	r3, [sp, #20]
    179c:	9306      	str	r3, [sp, #24]
    179e:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    17a0:	2800      	cmp	r0, #0
    17a2:	d014      	beq.n	17ce <_spi_m_sync_trans+0x46>
    17a4:	2c00      	cmp	r4, #0
    17a6:	d010      	beq.n	17ca <_spi_m_sync_trans+0x42>
    17a8:	2001      	movs	r0, #1
    17aa:	4a2d      	ldr	r2, [pc, #180]	; (1860 <_spi_m_sync_trans+0xd8>)
    17ac:	492d      	ldr	r1, [pc, #180]	; (1864 <_spi_m_sync_trans+0xdc>)
    17ae:	4b2e      	ldr	r3, [pc, #184]	; (1868 <_spi_m_sync_trans+0xe0>)
    17b0:	4798      	blx	r3
    17b2:	8a23      	ldrh	r3, [r4, #16]
    17b4:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    17b6:	d14f      	bne.n	1858 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    17b8:	8a23      	ldrh	r3, [r4, #16]
    17ba:	0bdb      	lsrs	r3, r3, #15
    17bc:	d1fc      	bne.n	17b8 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17be:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    17c0:	079b      	lsls	r3, r3, #30
    17c2:	d418      	bmi.n	17f6 <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    17c4:	2014      	movs	r0, #20
    17c6:	4240      	negs	r0, r0
    17c8:	e044      	b.n	1854 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    17ca:	2000      	movs	r0, #0
    17cc:	e7ed      	b.n	17aa <_spi_m_sync_trans+0x22>
    17ce:	2000      	movs	r0, #0
    17d0:	e7eb      	b.n	17aa <_spi_m_sync_trans+0x22>
		return false;
    17d2:	2200      	movs	r2, #0
    17d4:	e026      	b.n	1824 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    17d6:	7858      	ldrb	r0, [r3, #1]
    17d8:	0200      	lsls	r0, r0, #8
    17da:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    17dc:	3302      	adds	r3, #2
    17de:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    17e0:	3201      	adds	r2, #1
    17e2:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    17e4:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    17e6:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    17e8:	9805      	ldr	r0, [sp, #20]
    17ea:	68ab      	ldr	r3, [r5, #8]
    17ec:	4298      	cmp	r0, r3
    17ee:	d302      	bcc.n	17f6 <_spi_m_sync_trans+0x6e>
    17f0:	9a06      	ldr	r2, [sp, #24]
    17f2:	4293      	cmp	r3, r2
    17f4:	d929      	bls.n	184a <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    17f6:	7ba3      	ldrb	r3, [r4, #14]
    17f8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    17fa:	075a      	lsls	r2, r3, #29
    17fc:	d5e9      	bpl.n	17d2 <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    17fe:	8b22      	ldrh	r2, [r4, #24]
    1800:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    1802:	9904      	ldr	r1, [sp, #16]
    1804:	2900      	cmp	r1, #0
    1806:	d008      	beq.n	181a <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    1808:	1c48      	adds	r0, r1, #1
    180a:	9004      	str	r0, [sp, #16]
    180c:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    180e:	2e01      	cmp	r6, #1
    1810:	d903      	bls.n	181a <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1812:	1c88      	adds	r0, r1, #2
    1814:	9004      	str	r0, [sp, #16]
    1816:	0a12      	lsrs	r2, r2, #8
    1818:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    181a:	9a06      	ldr	r2, [sp, #24]
    181c:	9201      	str	r2, [sp, #4]
    181e:	3201      	adds	r2, #1
    1820:	9206      	str	r2, [sp, #24]
	return true;
    1822:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    1824:	2a00      	cmp	r2, #0
    1826:	d1df      	bne.n	17e8 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1828:	9906      	ldr	r1, [sp, #24]
    182a:	9a05      	ldr	r2, [sp, #20]
    182c:	4291      	cmp	r1, r2
    182e:	d3db      	bcc.n	17e8 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1830:	07db      	lsls	r3, r3, #31
    1832:	d5d9      	bpl.n	17e8 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    1834:	9b03      	ldr	r3, [sp, #12]
    1836:	2b00      	cmp	r3, #0
    1838:	d005      	beq.n	1846 <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    183a:	1c59      	adds	r1, r3, #1
    183c:	9103      	str	r1, [sp, #12]
    183e:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    1840:	2e01      	cmp	r6, #1
    1842:	d8c8      	bhi.n	17d6 <_spi_m_sync_trans+0x4e>
    1844:	e7cc      	b.n	17e0 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    1846:	4909      	ldr	r1, [pc, #36]	; (186c <_spi_m_sync_trans+0xe4>)
    1848:	e7ca      	b.n	17e0 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    184a:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    184c:	079b      	lsls	r3, r3, #30
    184e:	d0fc      	beq.n	184a <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1850:	2303      	movs	r3, #3
    1852:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1854:	b008      	add	sp, #32
    1856:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    1858:	2004      	movs	r0, #4
    185a:	4240      	negs	r0, r0
    185c:	e7fa      	b.n	1854 <_spi_m_sync_trans+0xcc>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	00000a29 	.word	0x00000a29
    1864:	0000370c 	.word	0x0000370c
    1868:	00000ce1 	.word	0x00000ce1
    186c:	000001ff 	.word	0x000001ff

00001870 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1870:	4b0f      	ldr	r3, [pc, #60]	; (18b0 <_sysctrl_init_sources+0x40>)
    1872:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1874:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1876:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1878:	0f92      	lsrs	r2, r2, #30
    187a:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    187c:	0409      	lsls	r1, r1, #16
    187e:	480d      	ldr	r0, [pc, #52]	; (18b4 <_sysctrl_init_sources+0x44>)
    1880:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1882:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1884:	490c      	ldr	r1, [pc, #48]	; (18b8 <_sysctrl_init_sources+0x48>)
    1886:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1888:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    188a:	699a      	ldr	r2, [r3, #24]
    188c:	2102      	movs	r1, #2
    188e:	430a      	orrs	r2, r1
    1890:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1892:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1894:	311d      	adds	r1, #29
    1896:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1898:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <_sysctrl_init_sources+0x40>)
    189c:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    189e:	071b      	lsls	r3, r3, #28
    18a0:	d5fb      	bpl.n	189a <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    18a2:	4a03      	ldr	r2, [pc, #12]	; (18b0 <_sysctrl_init_sources+0x40>)
    18a4:	6a13      	ldr	r3, [r2, #32]
    18a6:	2180      	movs	r1, #128	; 0x80
    18a8:	430b      	orrs	r3, r1
    18aa:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    18ac:	4770      	bx	lr
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	40000800 	.word	0x40000800
    18b4:	0fff0000 	.word	0x0fff0000
    18b8:	00000302 	.word	0x00000302

000018bc <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    18bc:	4a02      	ldr	r2, [pc, #8]	; (18c8 <_sysctrl_init_referenced_generators+0xc>)
    18be:	6993      	ldr	r3, [r2, #24]
    18c0:	2102      	movs	r1, #2
    18c2:	438b      	bics	r3, r1
    18c4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    18c6:	4770      	bx	lr
    18c8:	40000800 	.word	0x40000800

000018cc <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    18cc:	4b02      	ldr	r3, [pc, #8]	; (18d8 <_system_time_init+0xc>)
    18ce:	4a03      	ldr	r2, [pc, #12]	; (18dc <_system_time_init+0x10>)
    18d0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    18d2:	2205      	movs	r2, #5
    18d4:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    18d6:	4770      	bx	lr
    18d8:	e000e010 	.word	0xe000e010
    18dc:	00ffffff 	.word	0x00ffffff

000018e0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    18e0:	b510      	push	{r4, lr}
	_system_time_init(hw);
    18e2:	4b01      	ldr	r3, [pc, #4]	; (18e8 <_delay_init+0x8>)
    18e4:	4798      	blx	r3
}
    18e6:	bd10      	pop	{r4, pc}
    18e8:	000018cd 	.word	0x000018cd

000018ec <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    18ec:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    18ee:	e00b      	b.n	1908 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    18f0:	4b0b      	ldr	r3, [pc, #44]	; (1920 <_delay_cycles+0x34>)
    18f2:	480c      	ldr	r0, [pc, #48]	; (1924 <_delay_cycles+0x38>)
    18f4:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    18f6:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    18f8:	4b09      	ldr	r3, [pc, #36]	; (1920 <_delay_cycles+0x34>)
    18fa:	681b      	ldr	r3, [r3, #0]
    18fc:	03db      	lsls	r3, r3, #15
    18fe:	d5fb      	bpl.n	18f8 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    1900:	4b09      	ldr	r3, [pc, #36]	; (1928 <_delay_cycles+0x3c>)
    1902:	469c      	mov	ip, r3
    1904:	4461      	add	r1, ip
	while (n--) {
    1906:	0010      	movs	r0, r2
    1908:	1e42      	subs	r2, r0, #1
    190a:	b2d2      	uxtb	r2, r2
    190c:	2800      	cmp	r0, #0
    190e:	d1ef      	bne.n	18f0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1910:	4b03      	ldr	r3, [pc, #12]	; (1920 <_delay_cycles+0x34>)
    1912:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1914:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1916:	4b02      	ldr	r3, [pc, #8]	; (1920 <_delay_cycles+0x34>)
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	03db      	lsls	r3, r3, #15
    191c:	d5fb      	bpl.n	1916 <_delay_cycles+0x2a>
		;
}
    191e:	4770      	bx	lr
    1920:	e000e010 	.word	0xe000e010
    1924:	00ffffff 	.word	0x00ffffff
    1928:	ff000001 	.word	0xff000001

0000192c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    192c:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    192e:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1930:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1932:	07d2      	lsls	r2, r2, #31
    1934:	d400      	bmi.n	1938 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    1936:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1938:	2201      	movs	r2, #1
    193a:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    193c:	6803      	ldr	r3, [r0, #0]
    193e:	4798      	blx	r3
}
    1940:	e7f9      	b.n	1936 <tc_interrupt_handler+0xa>

00001942 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1942:	b570      	push	{r4, r5, r6, lr}
    1944:	0005      	movs	r5, r0
	void *const hw = device->hw;
    1946:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1948:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    194a:	07db      	lsls	r3, r3, #31
    194c:	d505      	bpl.n	195a <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    194e:	2301      	movs	r3, #1
    1950:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1952:	6803      	ldr	r3, [r0, #0]
    1954:	2b00      	cmp	r3, #0
    1956:	d000      	beq.n	195a <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1958:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    195a:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    195c:	079b      	lsls	r3, r3, #30
    195e:	d506      	bpl.n	196e <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1960:	2302      	movs	r3, #2
    1962:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1964:	686b      	ldr	r3, [r5, #4]
    1966:	2b00      	cmp	r3, #0
    1968:	d001      	beq.n	196e <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    196a:	0028      	movs	r0, r5
    196c:	4798      	blx	r3
		}
	}
}
    196e:	bd70      	pop	{r4, r5, r6, pc}

00001970 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1970:	4b02      	ldr	r3, [pc, #8]	; (197c <tc_get_hardware_index+0xc>)
    1972:	469c      	mov	ip, r3
    1974:	4460      	add	r0, ip
    1976:	0a80      	lsrs	r0, r0, #10
    1978:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    197a:	4770      	bx	lr
    197c:	bdffe000 	.word	0xbdffe000

00001980 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    1980:	4b06      	ldr	r3, [pc, #24]	; (199c <_tc_init_irq_param+0x1c>)
    1982:	4298      	cmp	r0, r3
    1984:	d003      	beq.n	198e <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    1986:	4b06      	ldr	r3, [pc, #24]	; (19a0 <_tc_init_irq_param+0x20>)
    1988:	4298      	cmp	r0, r3
    198a:	d003      	beq.n	1994 <_tc_init_irq_param+0x14>
		_tc1_dev = (struct _timer_device *)dev;
	}
}
    198c:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <_tc_init_irq_param+0x24>)
    1990:	6019      	str	r1, [r3, #0]
    1992:	e7f8      	b.n	1986 <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    1994:	4b03      	ldr	r3, [pc, #12]	; (19a4 <_tc_init_irq_param+0x24>)
    1996:	6059      	str	r1, [r3, #4]
}
    1998:	e7f8      	b.n	198c <_tc_init_irq_param+0xc>
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	42002000 	.word	0x42002000
    19a0:	42002400 	.word	0x42002400
    19a4:	20000070 	.word	0x20000070

000019a8 <get_tc_index>:
{
    19a8:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    19aa:	4b0d      	ldr	r3, [pc, #52]	; (19e0 <get_tc_index+0x38>)
    19ac:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    19ae:	2300      	movs	r3, #0
    19b0:	2b01      	cmp	r3, #1
    19b2:	d80b      	bhi.n	19cc <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    19b4:	009a      	lsls	r2, r3, #2
    19b6:	18d2      	adds	r2, r2, r3
    19b8:	0091      	lsls	r1, r2, #2
    19ba:	4a0a      	ldr	r2, [pc, #40]	; (19e4 <get_tc_index+0x3c>)
    19bc:	5c8a      	ldrb	r2, [r1, r2]
    19be:	4290      	cmp	r0, r2
    19c0:	d002      	beq.n	19c8 <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    19c2:	3301      	adds	r3, #1
    19c4:	b2db      	uxtb	r3, r3
    19c6:	e7f3      	b.n	19b0 <get_tc_index+0x8>
			return i;
    19c8:	b258      	sxtb	r0, r3
    19ca:	e007      	b.n	19dc <get_tc_index+0x34>
	ASSERT(false);
    19cc:	22f8      	movs	r2, #248	; 0xf8
    19ce:	32ff      	adds	r2, #255	; 0xff
    19d0:	4905      	ldr	r1, [pc, #20]	; (19e8 <get_tc_index+0x40>)
    19d2:	2000      	movs	r0, #0
    19d4:	4b05      	ldr	r3, [pc, #20]	; (19ec <get_tc_index+0x44>)
    19d6:	4798      	blx	r3
	return -1;
    19d8:	2001      	movs	r0, #1
    19da:	4240      	negs	r0, r0
}
    19dc:	bd10      	pop	{r4, pc}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	00001971 	.word	0x00001971
    19e4:	20000000 	.word	0x20000000
    19e8:	00003728 	.word	0x00003728
    19ec:	00000ce1 	.word	0x00000ce1

000019f0 <_timer_init>:
{
    19f0:	b570      	push	{r4, r5, r6, lr}
    19f2:	0006      	movs	r6, r0
    19f4:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    19f6:	0008      	movs	r0, r1
    19f8:	4b3f      	ldr	r3, [pc, #252]	; (1af8 <_timer_init+0x108>)
    19fa:	4798      	blx	r3
    19fc:	0005      	movs	r5, r0
	device->hw = hw;
    19fe:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1a00:	229f      	movs	r2, #159	; 0x9f
    1a02:	493e      	ldr	r1, [pc, #248]	; (1afc <_timer_init+0x10c>)
    1a04:	2001      	movs	r0, #1
    1a06:	4b3e      	ldr	r3, [pc, #248]	; (1b00 <_timer_init+0x110>)
    1a08:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a0a:	7be3      	ldrb	r3, [r4, #15]
    1a0c:	09db      	lsrs	r3, r3, #7
    1a0e:	d1fc      	bne.n	1a0a <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a10:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1a12:	079b      	lsls	r3, r3, #30
    1a14:	d504      	bpl.n	1a20 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a16:	2300      	movs	r3, #0
    1a18:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a1a:	7be3      	ldrb	r3, [r4, #15]
    1a1c:	09db      	lsrs	r3, r3, #7
    1a1e:	d1fc      	bne.n	1a1a <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a20:	2301      	movs	r3, #1
    1a22:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a24:	7be3      	ldrb	r3, [r4, #15]
    1a26:	09db      	lsrs	r3, r3, #7
    1a28:	d1fc      	bne.n	1a24 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1a2a:	00aa      	lsls	r2, r5, #2
    1a2c:	1952      	adds	r2, r2, r5
    1a2e:	0091      	lsls	r1, r2, #2
    1a30:	4b34      	ldr	r3, [pc, #208]	; (1b04 <_timer_init+0x114>)
    1a32:	185b      	adds	r3, r3, r1
    1a34:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a36:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1a38:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1a3a:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1a3c:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1a3e:	8163      	strh	r3, [r4, #10]
    1a40:	230c      	movs	r3, #12
    1a42:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1a44:	2b08      	cmp	r3, #8
    1a46:	d039      	beq.n	1abc <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d143      	bne.n	1ad4 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1a4c:	4a2d      	ldr	r2, [pc, #180]	; (1b04 <_timer_init+0x114>)
    1a4e:	00ab      	lsls	r3, r5, #2
    1a50:	1958      	adds	r0, r3, r5
    1a52:	0081      	lsls	r1, r0, #2
    1a54:	0008      	movs	r0, r1
    1a56:	1851      	adds	r1, r2, r1
    1a58:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a5a:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1a5c:	1812      	adds	r2, r2, r0
    1a5e:	8a13      	ldrh	r3, [r2, #16]
    1a60:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1a62:	2301      	movs	r3, #1
    1a64:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    1a66:	0031      	movs	r1, r6
    1a68:	0020      	movs	r0, r4
    1a6a:	4b27      	ldr	r3, [pc, #156]	; (1b08 <_timer_init+0x118>)
    1a6c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1a6e:	0020      	movs	r0, r4
    1a70:	4b26      	ldr	r3, [pc, #152]	; (1b0c <_timer_init+0x11c>)
    1a72:	4798      	blx	r3
    1a74:	300d      	adds	r0, #13
    1a76:	b2c0      	uxtb	r0, r0
    1a78:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	db0a      	blt.n	1a94 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a7e:	211f      	movs	r1, #31
    1a80:	4001      	ands	r1, r0
    1a82:	2201      	movs	r2, #1
    1a84:	408a      	lsls	r2, r1
    1a86:	2180      	movs	r1, #128	; 0x80
    1a88:	4c21      	ldr	r4, [pc, #132]	; (1b10 <_timer_init+0x120>)
    1a8a:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1a8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a90:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1a94:	2b00      	cmp	r3, #0
    1a96:	db07      	blt.n	1aa8 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a98:	211f      	movs	r1, #31
    1a9a:	4001      	ands	r1, r0
    1a9c:	2201      	movs	r2, #1
    1a9e:	408a      	lsls	r2, r1
    1aa0:	21c0      	movs	r1, #192	; 0xc0
    1aa2:	0049      	lsls	r1, r1, #1
    1aa4:	4c1a      	ldr	r4, [pc, #104]	; (1b10 <_timer_init+0x120>)
    1aa6:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	db05      	blt.n	1ab8 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aac:	231f      	movs	r3, #31
    1aae:	4018      	ands	r0, r3
    1ab0:	3b1e      	subs	r3, #30
    1ab2:	4083      	lsls	r3, r0
    1ab4:	4a16      	ldr	r2, [pc, #88]	; (1b10 <_timer_init+0x120>)
    1ab6:	6013      	str	r3, [r2, #0]
}
    1ab8:	2000      	movs	r0, #0
    1aba:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1abc:	4a11      	ldr	r2, [pc, #68]	; (1b04 <_timer_init+0x114>)
    1abe:	00ab      	lsls	r3, r5, #2
    1ac0:	1958      	adds	r0, r3, r5
    1ac2:	0081      	lsls	r1, r0, #2
    1ac4:	0008      	movs	r0, r1
    1ac6:	1851      	adds	r1, r2, r1
    1ac8:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1aca:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1acc:	1812      	adds	r2, r2, r0
    1ace:	6913      	ldr	r3, [r2, #16]
    1ad0:	61e3      	str	r3, [r4, #28]
    1ad2:	e7c6      	b.n	1a62 <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1ad4:	2b04      	cmp	r3, #4
    1ad6:	d1c4      	bne.n	1a62 <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1ad8:	490a      	ldr	r1, [pc, #40]	; (1b04 <_timer_init+0x114>)
    1ada:	00ab      	lsls	r3, r5, #2
    1adc:	1958      	adds	r0, r3, r5
    1ade:	0082      	lsls	r2, r0, #2
    1ae0:	188a      	adds	r2, r1, r2
    1ae2:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1ae4:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    1ae6:	7c12      	ldrb	r2, [r2, #16]
    1ae8:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1aea:	195d      	adds	r5, r3, r5
    1aec:	00ab      	lsls	r3, r5, #2
    1aee:	18c9      	adds	r1, r1, r3
    1af0:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1af2:	7523      	strb	r3, [r4, #20]
    1af4:	e7b5      	b.n	1a62 <_timer_init+0x72>
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	000019a9 	.word	0x000019a9
    1afc:	00003728 	.word	0x00003728
    1b00:	00000ce1 	.word	0x00000ce1
    1b04:	20000000 	.word	0x20000000
    1b08:	00001981 	.word	0x00001981
    1b0c:	00001971 	.word	0x00001971
    1b10:	e000e100 	.word	0xe000e100

00001b14 <_pwm_init>:
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	0005      	movs	r5, r0
    1b18:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1b1a:	0008      	movs	r0, r1
    1b1c:	4b35      	ldr	r3, [pc, #212]	; (1bf4 <_pwm_init+0xe0>)
    1b1e:	4798      	blx	r3
	device->hw = hw;
    1b20:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b22:	7be3      	ldrb	r3, [r4, #15]
    1b24:	09db      	lsrs	r3, r3, #7
    1b26:	d1fc      	bne.n	1b22 <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b28:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1b2a:	079b      	lsls	r3, r3, #30
    1b2c:	d504      	bpl.n	1b38 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b2e:	2300      	movs	r3, #0
    1b30:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b32:	7be3      	ldrb	r3, [r4, #15]
    1b34:	09db      	lsrs	r3, r3, #7
    1b36:	d1fc      	bne.n	1b32 <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b38:	2301      	movs	r3, #1
    1b3a:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b3c:	7be3      	ldrb	r3, [r4, #15]
    1b3e:	09db      	lsrs	r3, r3, #7
    1b40:	d1fc      	bne.n	1b3c <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1b42:	0082      	lsls	r2, r0, #2
    1b44:	1812      	adds	r2, r2, r0
    1b46:	0091      	lsls	r1, r2, #2
    1b48:	4b2b      	ldr	r3, [pc, #172]	; (1bf8 <_pwm_init+0xe4>)
    1b4a:	185b      	adds	r3, r3, r1
    1b4c:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b4e:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1b50:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1b52:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1b54:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1b56:	8163      	strh	r3, [r4, #10]
    1b58:	230c      	movs	r3, #12
    1b5a:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1b5c:	2b08      	cmp	r3, #8
    1b5e:	d037      	beq.n	1bd0 <_pwm_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1b60:	2b00      	cmp	r3, #0
    1b62:	d141      	bne.n	1be8 <_pwm_init+0xd4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1b64:	4a24      	ldr	r2, [pc, #144]	; (1bf8 <_pwm_init+0xe4>)
    1b66:	0083      	lsls	r3, r0, #2
    1b68:	181e      	adds	r6, r3, r0
    1b6a:	00b1      	lsls	r1, r6, #2
    1b6c:	000e      	movs	r6, r1
    1b6e:	1851      	adds	r1, r2, r1
    1b70:	8989      	ldrh	r1, [r1, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1b72:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1b74:	1992      	adds	r2, r2, r6
    1b76:	8a13      	ldrh	r3, [r2, #16]
    1b78:	8363      	strh	r3, [r4, #26]
	_tc_init_irq_param(hw, (void *)device);
    1b7a:	0029      	movs	r1, r5
    1b7c:	0020      	movs	r0, r4
    1b7e:	4b1f      	ldr	r3, [pc, #124]	; (1bfc <_pwm_init+0xe8>)
    1b80:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1b82:	0020      	movs	r0, r4
    1b84:	4b1e      	ldr	r3, [pc, #120]	; (1c00 <_pwm_init+0xec>)
    1b86:	4798      	blx	r3
    1b88:	300d      	adds	r0, #13
    1b8a:	b2c0      	uxtb	r0, r0
    1b8c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1b8e:	2b00      	cmp	r3, #0
    1b90:	db0a      	blt.n	1ba8 <_pwm_init+0x94>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b92:	211f      	movs	r1, #31
    1b94:	4001      	ands	r1, r0
    1b96:	2201      	movs	r2, #1
    1b98:	408a      	lsls	r2, r1
    1b9a:	2180      	movs	r1, #128	; 0x80
    1b9c:	4c19      	ldr	r4, [pc, #100]	; (1c04 <_pwm_init+0xf0>)
    1b9e:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1ba0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ba4:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1ba8:	2b00      	cmp	r3, #0
    1baa:	db07      	blt.n	1bbc <_pwm_init+0xa8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bac:	211f      	movs	r1, #31
    1bae:	4001      	ands	r1, r0
    1bb0:	2201      	movs	r2, #1
    1bb2:	408a      	lsls	r2, r1
    1bb4:	21c0      	movs	r1, #192	; 0xc0
    1bb6:	0049      	lsls	r1, r1, #1
    1bb8:	4c12      	ldr	r4, [pc, #72]	; (1c04 <_pwm_init+0xf0>)
    1bba:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	db16      	blt.n	1bee <_pwm_init+0xda>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bc0:	231f      	movs	r3, #31
    1bc2:	4018      	ands	r0, r3
    1bc4:	3b1e      	subs	r3, #30
    1bc6:	4083      	lsls	r3, r0
    1bc8:	4a0e      	ldr	r2, [pc, #56]	; (1c04 <_pwm_init+0xf0>)
    1bca:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    1bcc:	2000      	movs	r0, #0
}
    1bce:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1bd0:	4a09      	ldr	r2, [pc, #36]	; (1bf8 <_pwm_init+0xe4>)
    1bd2:	0083      	lsls	r3, r0, #2
    1bd4:	181e      	adds	r6, r3, r0
    1bd6:	00b1      	lsls	r1, r6, #2
    1bd8:	000e      	movs	r6, r1
    1bda:	1851      	adds	r1, r2, r1
    1bdc:	68c9      	ldr	r1, [r1, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1bde:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1be0:	1992      	adds	r2, r2, r6
    1be2:	6913      	ldr	r3, [r2, #16]
    1be4:	61e3      	str	r3, [r4, #28]
    1be6:	e7c8      	b.n	1b7a <_pwm_init+0x66>
		return ERR_INVALID_DATA;
    1be8:	2001      	movs	r0, #1
    1bea:	4240      	negs	r0, r0
    1bec:	e7ef      	b.n	1bce <_pwm_init+0xba>
	return ERR_NONE;
    1bee:	2000      	movs	r0, #0
    1bf0:	e7ed      	b.n	1bce <_pwm_init+0xba>
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	000019a9 	.word	0x000019a9
    1bf8:	20000000 	.word	0x20000000
    1bfc:	00001981 	.word	0x00001981
    1c00:	00001971 	.word	0x00001971
    1c04:	e000e100 	.word	0xe000e100

00001c08 <_tc_get_timer>:
}
    1c08:	2000      	movs	r0, #0
    1c0a:	4770      	bx	lr

00001c0c <_tc_get_pwm>:
}
    1c0c:	2000      	movs	r0, #0
    1c0e:	4770      	bx	lr

00001c10 <TC0_Handler>:
{
    1c10:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    1c12:	4b02      	ldr	r3, [pc, #8]	; (1c1c <TC0_Handler+0xc>)
    1c14:	6818      	ldr	r0, [r3, #0]
    1c16:	4b02      	ldr	r3, [pc, #8]	; (1c20 <TC0_Handler+0x10>)
    1c18:	4798      	blx	r3
}
    1c1a:	bd10      	pop	{r4, pc}
    1c1c:	20000070 	.word	0x20000070
    1c20:	00001943 	.word	0x00001943

00001c24 <TC1_Handler>:
{
    1c24:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc1_dev);
    1c26:	4b02      	ldr	r3, [pc, #8]	; (1c30 <TC1_Handler+0xc>)
    1c28:	6858      	ldr	r0, [r3, #4]
    1c2a:	4b02      	ldr	r3, [pc, #8]	; (1c34 <TC1_Handler+0x10>)
    1c2c:	4798      	blx	r3
}
    1c2e:	bd10      	pop	{r4, pc}
    1c30:	20000070 	.word	0x20000070
    1c34:	0000192d 	.word	0x0000192d

00001c38 <sender1>:
		//receive_callback();
	}
}

void sender1(void *pvParameters)
{
    1c38:	b530      	push	{r4, r5, lr}
    1c3a:	b083      	sub	sp, #12
    1c3c:	0005      	movs	r5, r0
	int flag = 1;
    1c3e:	2301      	movs	r3, #1
    1c40:	9301      	str	r3, [sp, #4]
	QueueHandle_t output = (QueueHandle_t)pvParameters;
	
	for (;;)
	{
		xQueueSend(output, &flag, portMAX_DELAY);
    1c42:	2300      	movs	r3, #0
    1c44:	2201      	movs	r2, #1
    1c46:	4252      	negs	r2, r2
    1c48:	a901      	add	r1, sp, #4
    1c4a:	0028      	movs	r0, r5
    1c4c:	4c01      	ldr	r4, [pc, #4]	; (1c54 <sender1+0x1c>)
    1c4e:	47a0      	blx	r4
    1c50:	e7f7      	b.n	1c42 <sender1+0xa>
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	00002435 	.word	0x00002435

00001c58 <sender2>:
	}
}

void sender2(void *pvParameters)
{
    1c58:	b530      	push	{r4, r5, lr}
    1c5a:	b083      	sub	sp, #12
    1c5c:	0005      	movs	r5, r0
	int flag = 2;
    1c5e:	2302      	movs	r3, #2
    1c60:	9301      	str	r3, [sp, #4]
	QueueHandle_t output = (QueueHandle_t)pvParameters;
	
	for (;;)
	{
		xQueueSend(output, &flag, portMAX_DELAY);
    1c62:	2300      	movs	r3, #0
    1c64:	2201      	movs	r2, #1
    1c66:	4252      	negs	r2, r2
    1c68:	a901      	add	r1, sp, #4
    1c6a:	0028      	movs	r0, r5
    1c6c:	4c01      	ldr	r4, [pc, #4]	; (1c74 <sender2+0x1c>)
    1c6e:	47a0      	blx	r4
    1c70:	e7f7      	b.n	1c62 <sender2+0xa>
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	00002435 	.word	0x00002435

00001c78 <receiver>:
	}
}

void receiver(void *pvParameters)
{
    1c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7a:	b085      	sub	sp, #20
    1c7c:	9001      	str	r0, [sp, #4]
    1c7e:	e00d      	b.n	1c9c <receiver+0x24>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1c80:	25c0      	movs	r5, #192	; 0xc0
    1c82:	05ed      	lsls	r5, r5, #23
    1c84:	2680      	movs	r6, #128	; 0x80
    1c86:	01f6      	lsls	r6, r6, #7
    1c88:	61ee      	str	r6, [r5, #28]
			delay_ms(750);
			gpio_toggle_pin_level(BLINK);
			delay_ms(750);
		} else {
			gpio_toggle_pin_level(BLINK);
			delay_ms(250);
    1c8a:	20fa      	movs	r0, #250	; 0xfa
    1c8c:	4c0e      	ldr	r4, [pc, #56]	; (1cc8 <receiver+0x50>)
    1c8e:	47a0      	blx	r4
    1c90:	61ee      	str	r6, [r5, #28]
			gpio_toggle_pin_level(BLINK);
			delay_ms(250);
    1c92:	20fa      	movs	r0, #250	; 0xfa
    1c94:	47a0      	blx	r4
    1c96:	61ee      	str	r6, [r5, #28]
			gpio_toggle_pin_level(BLINK);
			delay_ms(750);
    1c98:	480c      	ldr	r0, [pc, #48]	; (1ccc <receiver+0x54>)
    1c9a:	47a0      	blx	r4
		xQueueReceive(input, &n, portMAX_DELAY);
    1c9c:	2201      	movs	r2, #1
    1c9e:	4252      	negs	r2, r2
    1ca0:	a903      	add	r1, sp, #12
    1ca2:	9801      	ldr	r0, [sp, #4]
    1ca4:	4b0a      	ldr	r3, [pc, #40]	; (1cd0 <receiver+0x58>)
    1ca6:	4798      	blx	r3
		if (n % 2) {
    1ca8:	9b03      	ldr	r3, [sp, #12]
    1caa:	07db      	lsls	r3, r3, #31
    1cac:	d5e8      	bpl.n	1c80 <receiver+0x8>
    1cae:	26c0      	movs	r6, #192	; 0xc0
    1cb0:	05f6      	lsls	r6, r6, #23
    1cb2:	2780      	movs	r7, #128	; 0x80
    1cb4:	01ff      	lsls	r7, r7, #7
    1cb6:	61f7      	str	r7, [r6, #28]
			delay_ms(750);
    1cb8:	4d04      	ldr	r5, [pc, #16]	; (1ccc <receiver+0x54>)
    1cba:	0028      	movs	r0, r5
    1cbc:	4c02      	ldr	r4, [pc, #8]	; (1cc8 <receiver+0x50>)
    1cbe:	47a0      	blx	r4
    1cc0:	61f7      	str	r7, [r6, #28]
			delay_ms(750);
    1cc2:	0028      	movs	r0, r5
    1cc4:	47a0      	blx	r4
    1cc6:	e7e9      	b.n	1c9c <receiver+0x24>
    1cc8:	00000689 	.word	0x00000689
    1ccc:	000002ee 	.word	0x000002ee
    1cd0:	000026b1 	.word	0x000026b1

00001cd4 <main>:
{
    1cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd6:	46ce      	mov	lr, r9
    1cd8:	b500      	push	{lr}
    1cda:	b082      	sub	sp, #8
	atmel_start_init();
    1cdc:	4b20      	ldr	r3, [pc, #128]	; (1d60 <main+0x8c>)
    1cde:	4798      	blx	r3
	async_setup();
    1ce0:	4b20      	ldr	r3, [pc, #128]	; (1d64 <main+0x90>)
    1ce2:	4798      	blx	r3
    q1 = xQueueCreate((UBaseType_t) 2, (UBaseType_t) sizeof(uint32_t));
    1ce4:	2200      	movs	r2, #0
    1ce6:	2104      	movs	r1, #4
    1ce8:	2002      	movs	r0, #2
    1cea:	4b1f      	ldr	r3, [pc, #124]	; (1d68 <main+0x94>)
    1cec:	4798      	blx	r3
    1cee:	0003      	movs	r3, r0
    1cf0:	4c1e      	ldr	r4, [pc, #120]	; (1d6c <main+0x98>)
    1cf2:	6020      	str	r0, [r4, #0]
	rc = xTaskCreate(sender1, "snd1", configMINIMAL_STACK_SIZE, (void *) q1, 1, NULL);
    1cf4:	2700      	movs	r7, #0
    1cf6:	9701      	str	r7, [sp, #4]
    1cf8:	2201      	movs	r2, #1
    1cfa:	4691      	mov	r9, r2
    1cfc:	9200      	str	r2, [sp, #0]
    1cfe:	323f      	adds	r2, #63	; 0x3f
    1d00:	491b      	ldr	r1, [pc, #108]	; (1d70 <main+0x9c>)
    1d02:	481c      	ldr	r0, [pc, #112]	; (1d74 <main+0xa0>)
    1d04:	4e1c      	ldr	r6, [pc, #112]	; (1d78 <main+0xa4>)
    1d06:	47b0      	blx	r6
	ASSERT(rc != pdFALSE);
    1d08:	1e43      	subs	r3, r0, #1
    1d0a:	4198      	sbcs	r0, r3
    1d0c:	b2c0      	uxtb	r0, r0
    1d0e:	2218      	movs	r2, #24
    1d10:	491a      	ldr	r1, [pc, #104]	; (1d7c <main+0xa8>)
    1d12:	4d1b      	ldr	r5, [pc, #108]	; (1d80 <main+0xac>)
    1d14:	47a8      	blx	r5
	rc = xTaskCreate(sender2, "snd2", configMINIMAL_STACK_SIZE, (void *) q1, 1, NULL);
    1d16:	6823      	ldr	r3, [r4, #0]
    1d18:	9701      	str	r7, [sp, #4]
    1d1a:	464a      	mov	r2, r9
    1d1c:	9200      	str	r2, [sp, #0]
    1d1e:	323f      	adds	r2, #63	; 0x3f
    1d20:	4918      	ldr	r1, [pc, #96]	; (1d84 <main+0xb0>)
    1d22:	4819      	ldr	r0, [pc, #100]	; (1d88 <main+0xb4>)
    1d24:	47b0      	blx	r6
	ASSERT(rc != pdFALSE);
    1d26:	1e43      	subs	r3, r0, #1
    1d28:	4198      	sbcs	r0, r3
    1d2a:	b2c0      	uxtb	r0, r0
    1d2c:	221a      	movs	r2, #26
    1d2e:	4913      	ldr	r1, [pc, #76]	; (1d7c <main+0xa8>)
    1d30:	47a8      	blx	r5
	rc = xTaskCreate(receiver, "rcv", configMINIMAL_STACK_SIZE, (void *) q1, 2, NULL);
    1d32:	6823      	ldr	r3, [r4, #0]
    1d34:	9701      	str	r7, [sp, #4]
    1d36:	2202      	movs	r2, #2
    1d38:	9200      	str	r2, [sp, #0]
    1d3a:	323e      	adds	r2, #62	; 0x3e
    1d3c:	4913      	ldr	r1, [pc, #76]	; (1d8c <main+0xb8>)
    1d3e:	4814      	ldr	r0, [pc, #80]	; (1d90 <main+0xbc>)
    1d40:	47b0      	blx	r6
	ASSERT(rc != pdFALSE);
    1d42:	1e43      	subs	r3, r0, #1
    1d44:	4198      	sbcs	r0, r3
    1d46:	b2c0      	uxtb	r0, r0
    1d48:	221c      	movs	r2, #28
    1d4a:	490c      	ldr	r1, [pc, #48]	; (1d7c <main+0xa8>)
    1d4c:	47a8      	blx	r5
	vTaskStartScheduler(); 
    1d4e:	4b11      	ldr	r3, [pc, #68]	; (1d94 <main+0xc0>)
    1d50:	4798      	blx	r3
    1d52:	2280      	movs	r2, #128	; 0x80
    1d54:	01d2      	lsls	r2, r2, #7
    1d56:	23c0      	movs	r3, #192	; 0xc0
    1d58:	05db      	lsls	r3, r3, #23
    1d5a:	61da      	str	r2, [r3, #28]
    1d5c:	e7f9      	b.n	1d52 <main+0x7e>
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	00000105 	.word	0x00000105
    1d64:	00001e35 	.word	0x00001e35
    1d68:	000023ed 	.word	0x000023ed
    1d6c:	200028c8 	.word	0x200028c8
    1d70:	0000373c 	.word	0x0000373c
    1d74:	00001c39 	.word	0x00001c39
    1d78:	00002ac9 	.word	0x00002ac9
    1d7c:	00003744 	.word	0x00003744
    1d80:	00000ce1 	.word	0x00000ce1
    1d84:	00003750 	.word	0x00003750
    1d88:	00001c59 	.word	0x00001c59
    1d8c:	00003758 	.word	0x00003758
    1d90:	00001c79 	.word	0x00001c79
    1d94:	00002b39 	.word	0x00002b39

00001d98 <touch_init>:
#include <atmel_start.h>

#include "touch.h"
void touch_init(void)
{
}
    1d98:	4770      	bx	lr

00001d9a <serial_tx_cb>:
static uint8_t example_SERIAL[17] = "Command Processed";

static void serial_tx_cb(const struct usart_async_descriptor *const io_descr)
{
	
}
    1d9a:	4770      	bx	lr

00001d9c <serial_rx_cb>:
{
    1d9c:	b510      	push	{r4, lr}
    1d9e:	b082      	sub	sp, #8
	count = io_read(&SERIAL.io, &ch, 1);
    1da0:	2201      	movs	r2, #1
    1da2:	466b      	mov	r3, sp
    1da4:	1dd9      	adds	r1, r3, #7
    1da6:	481f      	ldr	r0, [pc, #124]	; (1e24 <serial_rx_cb+0x88>)
    1da8:	4b1f      	ldr	r3, [pc, #124]	; (1e28 <serial_rx_cb+0x8c>)
    1daa:	4798      	blx	r3
    1dac:	b2c1      	uxtb	r1, r0
	if (serial_receiving == 0)
    1dae:	4b1f      	ldr	r3, [pc, #124]	; (1e2c <serial_rx_cb+0x90>)
    1db0:	781b      	ldrb	r3, [r3, #0]
    1db2:	2b00      	cmp	r3, #0
    1db4:	d112      	bne.n	1ddc <serial_rx_cb+0x40>
		if(ch != '\r' && ch != '\n')
    1db6:	466b      	mov	r3, sp
    1db8:	79da      	ldrb	r2, [r3, #7]
    1dba:	2a0d      	cmp	r2, #13
    1dbc:	d024      	beq.n	1e08 <serial_rx_cb+0x6c>
    1dbe:	2a0a      	cmp	r2, #10
    1dc0:	d022      	beq.n	1e08 <serial_rx_cb+0x6c>
			serial_receiving = 1;
    1dc2:	4b1a      	ldr	r3, [pc, #104]	; (1e2c <serial_rx_cb+0x90>)
    1dc4:	2001      	movs	r0, #1
    1dc6:	7018      	strb	r0, [r3, #0]
			byteCount = 0;
    1dc8:	2000      	movs	r0, #0
    1dca:	7058      	strb	r0, [r3, #1]
			rx_buffer[byteCount] = ch;
    1dcc:	7858      	ldrb	r0, [r3, #1]
    1dce:	1818      	adds	r0, r3, r0
    1dd0:	7102      	strb	r2, [r0, #4]
			byteCount += count;
    1dd2:	7858      	ldrb	r0, [r3, #1]
    1dd4:	1840      	adds	r0, r0, r1
    1dd6:	b2c0      	uxtb	r0, r0
    1dd8:	7058      	strb	r0, [r3, #1]
    1dda:	e015      	b.n	1e08 <serial_rx_cb+0x6c>
		rx_buffer[byteCount] = ch;
    1ddc:	4b13      	ldr	r3, [pc, #76]	; (1e2c <serial_rx_cb+0x90>)
    1dde:	785a      	ldrb	r2, [r3, #1]
    1de0:	4668      	mov	r0, sp
    1de2:	79c4      	ldrb	r4, [r0, #7]
    1de4:	189a      	adds	r2, r3, r2
    1de6:	7114      	strb	r4, [r2, #4]
		byteCount += count;
    1de8:	7858      	ldrb	r0, [r3, #1]
    1dea:	1840      	adds	r0, r0, r1
    1dec:	b2c0      	uxtb	r0, r0
    1dee:	7058      	strb	r0, [r3, #1]
		if (ch == '\r' || ch == '\n')
    1df0:	2c0d      	cmp	r4, #13
    1df2:	d00b      	beq.n	1e0c <serial_rx_cb+0x70>
    1df4:	2c0a      	cmp	r4, #10
    1df6:	d009      	beq.n	1e0c <serial_rx_cb+0x70>
		if (byteCount >= SERIAL_BUFFER_SIZE)
    1df8:	4b0c      	ldr	r3, [pc, #48]	; (1e2c <serial_rx_cb+0x90>)
    1dfa:	785b      	ldrb	r3, [r3, #1]
    1dfc:	b2db      	uxtb	r3, r3
    1dfe:	2bc7      	cmp	r3, #199	; 0xc7
    1e00:	d902      	bls.n	1e08 <serial_rx_cb+0x6c>
			byteCount = 0;
    1e02:	2200      	movs	r2, #0
    1e04:	4b09      	ldr	r3, [pc, #36]	; (1e2c <serial_rx_cb+0x90>)
    1e06:	705a      	strb	r2, [r3, #1]
}
    1e08:	b002      	add	sp, #8
    1e0a:	bd10      	pop	{r4, pc}
			serial_complete =1;
    1e0c:	4a08      	ldr	r2, [pc, #32]	; (1e30 <serial_rx_cb+0x94>)
    1e0e:	2101      	movs	r1, #1
    1e10:	234c      	movs	r3, #76	; 0x4c
    1e12:	54d1      	strb	r1, [r2, r3]
			totalBytes = byteCount - 2;
    1e14:	4b05      	ldr	r3, [pc, #20]	; (1e2c <serial_rx_cb+0x90>)
    1e16:	785b      	ldrb	r3, [r3, #1]
    1e18:	3b02      	subs	r3, #2
    1e1a:	b2db      	uxtb	r3, r3
    1e1c:	314c      	adds	r1, #76	; 0x4c
    1e1e:	5453      	strb	r3, [r2, r1]
    1e20:	e7ea      	b.n	1df8 <serial_rx_cb+0x5c>
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	200027f8 	.word	0x200027f8
    1e28:	00000785 	.word	0x00000785
    1e2c:	20000078 	.word	0x20000078
    1e30:	200000f8 	.word	0x200000f8

00001e34 <async_setup>:
			//xTaskCreate(process_command_task,(signed char*) "process_command_task",1024,NULL,1,NULL);
		}
	}
}
void async_setup(void)
{
    1e34:	b570      	push	{r4, r5, r6, lr}
	usart_async_register_callback(&SERIAL, USART_ASYNC_TXC_CB, serial_tx_cb);
    1e36:	4c07      	ldr	r4, [pc, #28]	; (1e54 <async_setup+0x20>)
    1e38:	4a07      	ldr	r2, [pc, #28]	; (1e58 <async_setup+0x24>)
    1e3a:	2101      	movs	r1, #1
    1e3c:	0020      	movs	r0, r4
    1e3e:	4d07      	ldr	r5, [pc, #28]	; (1e5c <async_setup+0x28>)
    1e40:	47a8      	blx	r5
	usart_async_register_callback(&SERIAL, USART_ASYNC_RXC_CB, serial_rx_cb);
    1e42:	4a07      	ldr	r2, [pc, #28]	; (1e60 <async_setup+0x2c>)
    1e44:	2100      	movs	r1, #0
    1e46:	0020      	movs	r0, r4
    1e48:	47a8      	blx	r5
	usart_async_enable(&SERIAL);
    1e4a:	0020      	movs	r0, r4
    1e4c:	4b05      	ldr	r3, [pc, #20]	; (1e64 <async_setup+0x30>)
    1e4e:	4798      	blx	r3
    1e50:	bd70      	pop	{r4, r5, r6, pc}
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	200027f8 	.word	0x200027f8
    1e58:	00001d9b 	.word	0x00001d9b
    1e5c:	00000c69 	.word	0x00000c69
    1e60:	00001d9d 	.word	0x00001d9d
    1e64:	00000c3d 	.word	0x00000c3d

00001e68 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    1e68:	0003      	movs	r3, r0
    1e6a:	3308      	adds	r3, #8
    1e6c:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e6e:	2201      	movs	r2, #1
    1e70:	4252      	negs	r2, r2
    1e72:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    1e74:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    1e76:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    1e78:	2300      	movs	r3, #0
    1e7a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
	listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
    1e7c:	4770      	bx	lr

00001e7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1e7e:	2300      	movs	r3, #0
    1e80:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
    1e82:	4770      	bx	lr

00001e84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    1e84:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    1e86:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1e88:	689a      	ldr	r2, [r3, #8]
    1e8a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1e8c:	689a      	ldr	r2, [r3, #8]
    1e8e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    1e90:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    1e92:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1e94:	6803      	ldr	r3, [r0, #0]
    1e96:	3301      	adds	r3, #1
    1e98:	6003      	str	r3, [r0, #0]
}
    1e9a:	4770      	bx	lr

00001e9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    1e9c:	b530      	push	{r4, r5, lr}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1e9e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    1ea0:	1c63      	adds	r3, r4, #1
    1ea2:	d002      	beq.n	1eaa <vListInsert+0xe>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1ea4:	0002      	movs	r2, r0
    1ea6:	3208      	adds	r2, #8
    1ea8:	e002      	b.n	1eb0 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
    1eaa:	6902      	ldr	r2, [r0, #16]
    1eac:	e004      	b.n	1eb8 <vListInsert+0x1c>
		     pxIterator
		     = pxIterator
    1eae:	001a      	movs	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1eb0:	6853      	ldr	r3, [r2, #4]
    1eb2:	681d      	ldr	r5, [r3, #0]
    1eb4:	42ac      	cmp	r4, r5
    1eb6:	d2fa      	bcs.n	1eae <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    1eb8:	6853      	ldr	r3, [r2, #4]
    1eba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1ebc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    1ebe:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    1ec0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    1ec2:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1ec4:	6803      	ldr	r3, [r0, #0]
    1ec6:	3301      	adds	r3, #1
    1ec8:	6003      	str	r3, [r0, #0]
}
    1eca:	bd30      	pop	{r4, r5, pc}

00001ecc <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    1ecc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1ece:	6842      	ldr	r2, [r0, #4]
    1ed0:	6881      	ldr	r1, [r0, #8]
    1ed2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1ed4:	6882      	ldr	r2, [r0, #8]
    1ed6:	6841      	ldr	r1, [r0, #4]
    1ed8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    1eda:	685a      	ldr	r2, [r3, #4]
    1edc:	4290      	cmp	r0, r2
    1ede:	d006      	beq.n	1eee <uxListRemove+0x22>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ee0:	2200      	movs	r2, #0
    1ee2:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    1ee4:	681a      	ldr	r2, [r3, #0]
    1ee6:	3a01      	subs	r2, #1
    1ee8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1eea:	6818      	ldr	r0, [r3, #0]
}
    1eec:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1eee:	6882      	ldr	r2, [r0, #8]
    1ef0:	605a      	str	r2, [r3, #4]
    1ef2:	e7f5      	b.n	1ee0 <uxListRemove+0x14>

00001ef4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    1ef4:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0UL;
    1ef6:	2300      	movs	r3, #0
    1ef8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    1efa:	4b06      	ldr	r3, [pc, #24]	; (1f14 <prvTaskExitError+0x20>)
    1efc:	681b      	ldr	r3, [r3, #0]
    1efe:	3301      	adds	r3, #1
    1f00:	d001      	beq.n	1f06 <prvTaskExitError+0x12>
    1f02:	b672      	cpsid	i
    1f04:	e7fe      	b.n	1f04 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    1f06:	b672      	cpsid	i
	while (ulDummy == 0) {
    1f08:	9b01      	ldr	r3, [sp, #4]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d0fc      	beq.n	1f08 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1f0e:	b002      	add	sp, #8
    1f10:	4770      	bx	lr
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	20000028 	.word	0x20000028
	...

00001f20 <vPortStartFirstTask>:
void vPortStartFirstTask(void)
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1f20:	4a0b      	ldr	r2, [pc, #44]	; (1f50 <pxCurrentTCBConst2>)
    1f22:	6813      	ldr	r3, [r2, #0]
    1f24:	6818      	ldr	r0, [r3, #0]
    1f26:	3020      	adds	r0, #32
    1f28:	f380 8809 	msr	PSP, r0
    1f2c:	2002      	movs	r0, #2
    1f2e:	f380 8814 	msr	CONTROL, r0
    1f32:	f3bf 8f6f 	isb	sy
    1f36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1f38:	46ae      	mov	lr, r5
    1f3a:	bc08      	pop	{r3}
    1f3c:	bc04      	pop	{r2}
    1f3e:	b662      	cpsie	i
    1f40:	4718      	bx	r3
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	46c0      	nop			; (mov r8, r8)
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	46c0      	nop			; (mov r8, r8)
    1f4e:	46c0      	nop			; (mov r8, r8)

00001f50 <pxCurrentTCBConst2>:
    1f50:	20002794 	.word	0x20002794

00001f54 <prvSetupTimerInterrupt>:
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL)          = 0UL;
    1f54:	4b05      	ldr	r3, [pc, #20]	; (1f6c <prvSetupTimerInterrupt+0x18>)
    1f56:	2200      	movs	r2, #0
    1f58:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1f5a:	4905      	ldr	r1, [pc, #20]	; (1f70 <prvSetupTimerInterrupt+0x1c>)
    1f5c:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = (configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    1f5e:	4905      	ldr	r1, [pc, #20]	; (1f74 <prvSetupTimerInterrupt+0x20>)
    1f60:	4a05      	ldr	r2, [pc, #20]	; (1f78 <prvSetupTimerInterrupt+0x24>)
    1f62:	6011      	str	r1, [r2, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1f64:	2207      	movs	r2, #7
    1f66:	601a      	str	r2, [r3, #0]
}
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	e000e010 	.word	0xe000e010
    1f70:	e000e018 	.word	0xe000e018
    1f74:	000003e7 	.word	0x000003e7
    1f78:	e000e014 	.word	0xe000e014

00001f7c <pxPortInitialiseStack>:
{
    1f7c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    1f7e:	1f03      	subs	r3, r0, #4
    1f80:	2480      	movs	r4, #128	; 0x80
    1f82:	0464      	lsls	r4, r4, #17
    1f84:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = (StackType_t)pxCode; /* PC */
    1f86:	3b04      	subs	r3, #4
    1f88:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    1f8a:	3b04      	subs	r3, #4
    1f8c:	4902      	ldr	r1, [pc, #8]	; (1f98 <pxPortInitialiseStack+0x1c>)
    1f8e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = (StackType_t)pvParameters;            /* R0 */
    1f90:	3b14      	subs	r3, #20
    1f92:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;                                    /* R11..R4. */
    1f94:	3840      	subs	r0, #64	; 0x40
}
    1f96:	bd10      	pop	{r4, pc}
    1f98:	00001ef5 	.word	0x00001ef5

00001f9c <SVCall_Handler>:
}
    1f9c:	4770      	bx	lr
	...

00001fa0 <xPortStartScheduler>:
{
    1fa0:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <xPortStartScheduler+0x34>)
    1fa4:	6819      	ldr	r1, [r3, #0]
    1fa6:	22ff      	movs	r2, #255	; 0xff
    1fa8:	0412      	lsls	r2, r2, #16
    1faa:	430a      	orrs	r2, r1
    1fac:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1fae:	6819      	ldr	r1, [r3, #0]
    1fb0:	22ff      	movs	r2, #255	; 0xff
    1fb2:	0612      	lsls	r2, r2, #24
    1fb4:	430a      	orrs	r2, r1
    1fb6:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
    1fb8:	4b07      	ldr	r3, [pc, #28]	; (1fd8 <xPortStartScheduler+0x38>)
    1fba:	4798      	blx	r3
	uxCriticalNesting = 0;
    1fbc:	2200      	movs	r2, #0
    1fbe:	4b07      	ldr	r3, [pc, #28]	; (1fdc <xPortStartScheduler+0x3c>)
    1fc0:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
    1fc2:	4b07      	ldr	r3, [pc, #28]	; (1fe0 <xPortStartScheduler+0x40>)
    1fc4:	4798      	blx	r3
	vTaskSwitchContext();
    1fc6:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <xPortStartScheduler+0x44>)
    1fc8:	4798      	blx	r3
	prvTaskExitError();
    1fca:	4b07      	ldr	r3, [pc, #28]	; (1fe8 <xPortStartScheduler+0x48>)
    1fcc:	4798      	blx	r3
}
    1fce:	2000      	movs	r0, #0
    1fd0:	bd10      	pop	{r4, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	e000ed20 	.word	0xe000ed20
    1fd8:	00001f55 	.word	0x00001f55
    1fdc:	20000028 	.word	0x20000028
    1fe0:	00001f21 	.word	0x00001f21
    1fe4:	00002db5 	.word	0x00002db5
    1fe8:	00001ef5 	.word	0x00001ef5

00001fec <vPortYield>:
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1fec:	2280      	movs	r2, #128	; 0x80
    1fee:	0552      	lsls	r2, r2, #21
    1ff0:	4b03      	ldr	r3, [pc, #12]	; (2000 <STACK_SIZE>)
    1ff2:	601a      	str	r2, [r3, #0]
	__asm volatile("dsb" ::: "memory");
    1ff4:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    1ff8:	f3bf 8f6f 	isb	sy
}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	e000ed04 	.word	0xe000ed04

00002004 <vPortEnterCritical>:
	portDISABLE_INTERRUPTS();
    2004:	b672      	cpsid	i
	uxCriticalNesting++;
    2006:	4a04      	ldr	r2, [pc, #16]	; (2018 <vPortEnterCritical+0x14>)
    2008:	6813      	ldr	r3, [r2, #0]
    200a:	3301      	adds	r3, #1
    200c:	6013      	str	r3, [r2, #0]
	__asm volatile("dsb" ::: "memory");
    200e:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    2012:	f3bf 8f6f 	isb	sy
}
    2016:	4770      	bx	lr
    2018:	20000028 	.word	0x20000028

0000201c <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    201c:	4b06      	ldr	r3, [pc, #24]	; (2038 <vPortExitCritical+0x1c>)
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	2b00      	cmp	r3, #0
    2022:	d101      	bne.n	2028 <vPortExitCritical+0xc>
    2024:	b672      	cpsid	i
    2026:	e7fe      	b.n	2026 <vPortExitCritical+0xa>
	uxCriticalNesting--;
    2028:	3b01      	subs	r3, #1
    202a:	4a03      	ldr	r2, [pc, #12]	; (2038 <vPortExitCritical+0x1c>)
    202c:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    202e:	2b00      	cmp	r3, #0
    2030:	d100      	bne.n	2034 <vPortExitCritical+0x18>
		portENABLE_INTERRUPTS();
    2032:	b662      	cpsie	i
}
    2034:	4770      	bx	lr
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	20000028 	.word	0x20000028

0000203c <ulSetInterruptMaskFromISR>:
	__asm volatile(" mrs r0, PRIMASK	\n"
    203c:	f3ef 8010 	mrs	r0, PRIMASK
    2040:	b672      	cpsid	i
    2042:	4770      	bx	lr

00002044 <vClearInterruptMaskFromISR>:
	__asm volatile(" msr PRIMASK, r0	\n"
    2044:	f380 8810 	msr	PRIMASK, r0
    2048:	4770      	bx	lr
    204a:	0000      	movs	r0, r0
    204c:	0000      	movs	r0, r0
	...

00002050 <PendSV_Handler>:
	__asm volatile(
    2050:	f3ef 8009 	mrs	r0, PSP
    2054:	4b0e      	ldr	r3, [pc, #56]	; (2090 <pxCurrentTCBConst>)
    2056:	681a      	ldr	r2, [r3, #0]
    2058:	3820      	subs	r0, #32
    205a:	6010      	str	r0, [r2, #0]
    205c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    205e:	4644      	mov	r4, r8
    2060:	464d      	mov	r5, r9
    2062:	4656      	mov	r6, sl
    2064:	465f      	mov	r7, fp
    2066:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2068:	b508      	push	{r3, lr}
    206a:	b672      	cpsid	i
    206c:	f000 fea2 	bl	2db4 <vTaskSwitchContext>
    2070:	b662      	cpsie	i
    2072:	bc0c      	pop	{r2, r3}
    2074:	6811      	ldr	r1, [r2, #0]
    2076:	6808      	ldr	r0, [r1, #0]
    2078:	3010      	adds	r0, #16
    207a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    207c:	46a0      	mov	r8, r4
    207e:	46a9      	mov	r9, r5
    2080:	46b2      	mov	sl, r6
    2082:	46bb      	mov	fp, r7
    2084:	f380 8809 	msr	PSP, r0
    2088:	3820      	subs	r0, #32
    208a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    208c:	4718      	bx	r3
    208e:	46c0      	nop			; (mov r8, r8)

00002090 <pxCurrentTCBConst>:
    2090:	20002794 	.word	0x20002794

00002094 <SysTick_Handler>:
{
    2094:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2096:	4b07      	ldr	r3, [pc, #28]	; (20b4 <SysTick_Handler+0x20>)
    2098:	4798      	blx	r3
    209a:	0004      	movs	r4, r0
		if (xTaskIncrementTick() != pdFALSE) {
    209c:	4b06      	ldr	r3, [pc, #24]	; (20b8 <SysTick_Handler+0x24>)
    209e:	4798      	blx	r3
    20a0:	2800      	cmp	r0, #0
    20a2:	d003      	beq.n	20ac <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    20a4:	2280      	movs	r2, #128	; 0x80
    20a6:	0552      	lsls	r2, r2, #21
    20a8:	4b04      	ldr	r3, [pc, #16]	; (20bc <SysTick_Handler+0x28>)
    20aa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulPreviousMask);
    20ac:	0020      	movs	r0, r4
    20ae:	4b04      	ldr	r3, [pc, #16]	; (20c0 <SysTick_Handler+0x2c>)
    20b0:	4798      	blx	r3
}
    20b2:	bd10      	pop	{r4, pc}
    20b4:	0000203d 	.word	0x0000203d
    20b8:	00002bbd 	.word	0x00002bbd
    20bc:	e000ed04 	.word	0xe000ed04
    20c0:	00002045 	.word	0x00002045

000020c4 <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    20c4:	b570      	push	{r4, r5, r6, lr}
    20c6:	0004      	movs	r4, r0
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    20c8:	0743      	lsls	r3, r0, #29
    20ca:	d002      	beq.n	20d2 <pvPortMalloc+0xe>
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    20cc:	2307      	movs	r3, #7
    20ce:	439c      	bics	r4, r3
    20d0:	3408      	adds	r4, #8
		}
	}
#endif

	vTaskSuspendAll();
    20d2:	4b11      	ldr	r3, [pc, #68]	; (2118 <pvPortMalloc+0x54>)
    20d4:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    20d6:	4b11      	ldr	r3, [pc, #68]	; (211c <pvPortMalloc+0x58>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	2b00      	cmp	r3, #0
    20dc:	d010      	beq.n	2100 <pvPortMalloc+0x3c>
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    20de:	4b10      	ldr	r3, [pc, #64]	; (2120 <pvPortMalloc+0x5c>)
    20e0:	685b      	ldr	r3, [r3, #4]
    20e2:	18e4      	adds	r4, r4, r3
    20e4:	4a0f      	ldr	r2, [pc, #60]	; (2124 <pvPortMalloc+0x60>)
    20e6:	4294      	cmp	r4, r2
    20e8:	d811      	bhi.n	210e <pvPortMalloc+0x4a>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    20ea:	42a3      	cmp	r3, r4
    20ec:	d211      	bcs.n	2112 <pvPortMalloc+0x4e>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    20ee:	4a0b      	ldr	r2, [pc, #44]	; (211c <pvPortMalloc+0x58>)
    20f0:	6815      	ldr	r5, [r2, #0]
    20f2:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    20f4:	4b0a      	ldr	r3, [pc, #40]	; (2120 <pvPortMalloc+0x5c>)
    20f6:	605c      	str	r4, [r3, #4]
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    20f8:	4b0b      	ldr	r3, [pc, #44]	; (2128 <pvPortMalloc+0x64>)
    20fa:	4798      	blx	r3
		}
	}
#endif

	return pvReturn;
}
    20fc:	0028      	movs	r0, r5
    20fe:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    2100:	4a06      	ldr	r2, [pc, #24]	; (211c <pvPortMalloc+0x58>)
    2102:	0013      	movs	r3, r2
    2104:	330c      	adds	r3, #12
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    2106:	2107      	movs	r1, #7
    2108:	438b      	bics	r3, r1
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    210a:	6013      	str	r3, [r2, #0]
    210c:	e7e7      	b.n	20de <pvPortMalloc+0x1a>
	void *          pvReturn       = NULL;
    210e:	2500      	movs	r5, #0
    2110:	e7f2      	b.n	20f8 <pvPortMalloc+0x34>
    2112:	2500      	movs	r5, #0
    2114:	e7f0      	b.n	20f8 <pvPortMalloc+0x34>
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	00002ba1 	.word	0x00002ba1
    211c:	20000148 	.word	0x20000148
    2120:	200026c8 	.word	0x200026c8
    2124:	00002577 	.word	0x00002577
    2128:	00002cc5 	.word	0x00002cc5

0000212c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    212c:	2800      	cmp	r0, #0
    212e:	d001      	beq.n	2134 <vPortFree+0x8>
    2130:	b672      	cpsid	i
    2132:	e7fe      	b.n	2132 <vPortFree+0x6>
}
    2134:	4770      	bx	lr
	...

00002138 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    2138:	b510      	push	{r4, lr}
    213a:	0004      	movs	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    213c:	4b06      	ldr	r3, [pc, #24]	; (2158 <prvIsQueueFull+0x20>)
    213e:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    2140:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2142:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2144:	429a      	cmp	r2, r3
    2146:	d004      	beq.n	2152 <prvIsQueueFull+0x1a>
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
    2148:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
    214a:	4b04      	ldr	r3, [pc, #16]	; (215c <prvIsQueueFull+0x24>)
    214c:	4798      	blx	r3

	return xReturn;
}
    214e:	0020      	movs	r0, r4
    2150:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    2152:	2401      	movs	r4, #1
    2154:	e7f9      	b.n	214a <prvIsQueueFull+0x12>
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	00002005 	.word	0x00002005
    215c:	0000201d 	.word	0x0000201d

00002160 <prvIsQueueEmpty>:
{
    2160:	b510      	push	{r4, lr}
    2162:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
    2164:	4b05      	ldr	r3, [pc, #20]	; (217c <prvIsQueueEmpty+0x1c>)
    2166:	4798      	blx	r3
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    2168:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    216a:	2b00      	cmp	r3, #0
    216c:	d004      	beq.n	2178 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
    216e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    2170:	4b03      	ldr	r3, [pc, #12]	; (2180 <prvIsQueueEmpty+0x20>)
    2172:	4798      	blx	r3
}
    2174:	0020      	movs	r0, r4
    2176:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    2178:	2401      	movs	r4, #1
    217a:	e7f9      	b.n	2170 <prvIsQueueEmpty+0x10>
    217c:	00002005 	.word	0x00002005
    2180:	0000201d 	.word	0x0000201d

00002184 <prvCopyDataToQueue>:
{
    2184:	b570      	push	{r4, r5, r6, lr}
    2186:	0004      	movs	r4, r0
    2188:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    218a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    218c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    218e:	2a00      	cmp	r2, #0
    2190:	d10a      	bne.n	21a8 <prvCopyDataToQueue+0x24>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    2192:	6803      	ldr	r3, [r0, #0]
    2194:	2b00      	cmp	r3, #0
    2196:	d12e      	bne.n	21f6 <prvCopyDataToQueue+0x72>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    2198:	6840      	ldr	r0, [r0, #4]
    219a:	4b1b      	ldr	r3, [pc, #108]	; (2208 <prvCopyDataToQueue+0x84>)
    219c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    219e:	2300      	movs	r3, #0
    21a0:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    21a2:	3501      	adds	r5, #1
    21a4:	63a5      	str	r5, [r4, #56]	; 0x38
}
    21a6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    21a8:	2e00      	cmp	r6, #0
    21aa:	d10e      	bne.n	21ca <prvCopyDataToQueue+0x46>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    21ac:	6880      	ldr	r0, [r0, #8]
    21ae:	4b17      	ldr	r3, [pc, #92]	; (220c <prvCopyDataToQueue+0x88>)
    21b0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    21b2:	68a3      	ldr	r3, [r4, #8]
    21b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    21b6:	4694      	mov	ip, r2
    21b8:	4463      	add	r3, ip
    21ba:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    21bc:	6862      	ldr	r2, [r4, #4]
    21be:	4293      	cmp	r3, r2
    21c0:	d31b      	bcc.n	21fa <prvCopyDataToQueue+0x76>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    21c2:	6823      	ldr	r3, [r4, #0]
    21c4:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    21c6:	2000      	movs	r0, #0
    21c8:	e7eb      	b.n	21a2 <prvCopyDataToQueue+0x1e>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    21ca:	68c0      	ldr	r0, [r0, #12]
    21cc:	4b0f      	ldr	r3, [pc, #60]	; (220c <prvCopyDataToQueue+0x88>)
    21ce:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    21d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    21d2:	425b      	negs	r3, r3
    21d4:	68e2      	ldr	r2, [r4, #12]
    21d6:	18d2      	adds	r2, r2, r3
    21d8:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    21da:	6821      	ldr	r1, [r4, #0]
    21dc:	428a      	cmp	r2, r1
    21de:	d203      	bcs.n	21e8 <prvCopyDataToQueue+0x64>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    21e0:	6862      	ldr	r2, [r4, #4]
    21e2:	4694      	mov	ip, r2
    21e4:	4463      	add	r3, ip
    21e6:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    21e8:	2e02      	cmp	r6, #2
    21ea:	d108      	bne.n	21fe <prvCopyDataToQueue+0x7a>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    21ec:	2d00      	cmp	r5, #0
    21ee:	d008      	beq.n	2202 <prvCopyDataToQueue+0x7e>
				--uxMessagesWaiting;
    21f0:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    21f2:	2000      	movs	r0, #0
    21f4:	e7d5      	b.n	21a2 <prvCopyDataToQueue+0x1e>
    21f6:	2000      	movs	r0, #0
    21f8:	e7d3      	b.n	21a2 <prvCopyDataToQueue+0x1e>
    21fa:	2000      	movs	r0, #0
    21fc:	e7d1      	b.n	21a2 <prvCopyDataToQueue+0x1e>
    21fe:	2000      	movs	r0, #0
    2200:	e7cf      	b.n	21a2 <prvCopyDataToQueue+0x1e>
    2202:	2000      	movs	r0, #0
    2204:	e7cd      	b.n	21a2 <prvCopyDataToQueue+0x1e>
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	00002fc5 	.word	0x00002fc5
    220c:	000034bd 	.word	0x000034bd

00002210 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    2210:	b570      	push	{r4, r5, r6, lr}
    2212:	b082      	sub	sp, #8
    2214:	9001      	str	r0, [sp, #4]
    2216:	000a      	movs	r2, r1
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    2218:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    221a:	2c00      	cmp	r4, #0
    221c:	d005      	beq.n	222a <prvNotifyQueueSetContainer+0x1a>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    221e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2220:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2222:	4299      	cmp	r1, r3
    2224:	d303      	bcc.n	222e <prvNotifyQueueSetContainer+0x1e>
    2226:	b672      	cpsid	i
    2228:	e7fe      	b.n	2228 <prvNotifyQueueSetContainer+0x18>
	configASSERT(pxQueueSetContainer);
    222a:	b672      	cpsid	i
    222c:	e7fe      	b.n	222c <prvNotifyQueueSetContainer+0x1c>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    222e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2230:	428b      	cmp	r3, r1
    2232:	d803      	bhi.n	223c <prvNotifyQueueSetContainer+0x2c>
	BaseType_t xReturn             = pdFALSE;
    2234:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    2236:	0030      	movs	r0, r6
    2238:	b002      	add	sp, #8
    223a:	bd70      	pop	{r4, r5, r6, pc}
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    223c:	2345      	movs	r3, #69	; 0x45
    223e:	5ce5      	ldrb	r5, [r4, r3]
    2240:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    2242:	a901      	add	r1, sp, #4
    2244:	0020      	movs	r0, r4
    2246:	4b0a      	ldr	r3, [pc, #40]	; (2270 <prvNotifyQueueSetContainer+0x60>)
    2248:	4798      	blx	r3
    224a:	0006      	movs	r6, r0
		if (cTxLock == queueUNLOCKED) {
    224c:	1c6b      	adds	r3, r5, #1
    224e:	d10a      	bne.n	2266 <prvNotifyQueueSetContainer+0x56>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    2250:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2252:	2b00      	cmp	r3, #0
    2254:	d0ef      	beq.n	2236 <prvNotifyQueueSetContainer+0x26>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    2256:	0020      	movs	r0, r4
    2258:	3024      	adds	r0, #36	; 0x24
    225a:	4b06      	ldr	r3, [pc, #24]	; (2274 <prvNotifyQueueSetContainer+0x64>)
    225c:	4798      	blx	r3
    225e:	2800      	cmp	r0, #0
    2260:	d0e9      	beq.n	2236 <prvNotifyQueueSetContainer+0x26>
					xReturn = pdTRUE;
    2262:	2601      	movs	r6, #1
	return xReturn;
    2264:	e7e7      	b.n	2236 <prvNotifyQueueSetContainer+0x26>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    2266:	3501      	adds	r5, #1
    2268:	b26d      	sxtb	r5, r5
    226a:	2345      	movs	r3, #69	; 0x45
    226c:	54e5      	strb	r5, [r4, r3]
    226e:	e7e2      	b.n	2236 <prvNotifyQueueSetContainer+0x26>
    2270:	00002185 	.word	0x00002185
    2274:	00002e99 	.word	0x00002e99

00002278 <prvCopyDataFromQueue>:
{
    2278:	b510      	push	{r4, lr}
    227a:	000c      	movs	r4, r1
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    227c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    227e:	2a00      	cmp	r2, #0
    2280:	d00b      	beq.n	229a <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2282:	68c3      	ldr	r3, [r0, #12]
    2284:	189b      	adds	r3, r3, r2
    2286:	60c3      	str	r3, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    2288:	6841      	ldr	r1, [r0, #4]
    228a:	428b      	cmp	r3, r1
    228c:	d301      	bcc.n	2292 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    228e:	6803      	ldr	r3, [r0, #0]
    2290:	60c3      	str	r3, [r0, #12]
		             (void *)pxQueue->u.pcReadFrom,
    2292:	68c1      	ldr	r1, [r0, #12]
		(void)memcpy((void *)pvBuffer,
    2294:	0020      	movs	r0, r4
    2296:	4b01      	ldr	r3, [pc, #4]	; (229c <prvCopyDataFromQueue+0x24>)
    2298:	4798      	blx	r3
}
    229a:	bd10      	pop	{r4, pc}
    229c:	000034bd 	.word	0x000034bd

000022a0 <prvUnlockQueue>:
{
    22a0:	b570      	push	{r4, r5, r6, lr}
    22a2:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
    22a4:	4b21      	ldr	r3, [pc, #132]	; (232c <prvUnlockQueue+0x8c>)
    22a6:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    22a8:	2345      	movs	r3, #69	; 0x45
    22aa:	5cec      	ldrb	r4, [r5, r3]
    22ac:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    22ae:	e00a      	b.n	22c6 <prvUnlockQueue+0x26>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    22b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22b2:	2b00      	cmp	r3, #0
    22b4:	d018      	beq.n	22e8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    22b6:	0028      	movs	r0, r5
    22b8:	3024      	adds	r0, #36	; 0x24
    22ba:	4b1d      	ldr	r3, [pc, #116]	; (2330 <prvUnlockQueue+0x90>)
    22bc:	4798      	blx	r3
    22be:	2800      	cmp	r0, #0
    22c0:	d10f      	bne.n	22e2 <prvUnlockQueue+0x42>
			--cTxLock;
    22c2:	3c01      	subs	r4, #1
    22c4:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    22c6:	2c00      	cmp	r4, #0
    22c8:	dd0e      	ble.n	22e8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    22ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
    22cc:	2b00      	cmp	r3, #0
    22ce:	d0ef      	beq.n	22b0 <prvUnlockQueue+0x10>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    22d0:	2100      	movs	r1, #0
    22d2:	0028      	movs	r0, r5
    22d4:	4b17      	ldr	r3, [pc, #92]	; (2334 <prvUnlockQueue+0x94>)
    22d6:	4798      	blx	r3
    22d8:	2800      	cmp	r0, #0
    22da:	d0f2      	beq.n	22c2 <prvUnlockQueue+0x22>
						vTaskMissedYield();
    22dc:	4b16      	ldr	r3, [pc, #88]	; (2338 <prvUnlockQueue+0x98>)
    22de:	4798      	blx	r3
    22e0:	e7ef      	b.n	22c2 <prvUnlockQueue+0x22>
							vTaskMissedYield();
    22e2:	4b15      	ldr	r3, [pc, #84]	; (2338 <prvUnlockQueue+0x98>)
    22e4:	4798      	blx	r3
    22e6:	e7ec      	b.n	22c2 <prvUnlockQueue+0x22>
		pxQueue->cTxLock = queueUNLOCKED;
    22e8:	22ff      	movs	r2, #255	; 0xff
    22ea:	2345      	movs	r3, #69	; 0x45
    22ec:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
    22ee:	4b13      	ldr	r3, [pc, #76]	; (233c <prvUnlockQueue+0x9c>)
    22f0:	4798      	blx	r3
	taskENTER_CRITICAL();
    22f2:	4b0e      	ldr	r3, [pc, #56]	; (232c <prvUnlockQueue+0x8c>)
    22f4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    22f6:	2344      	movs	r3, #68	; 0x44
    22f8:	5cec      	ldrb	r4, [r5, r3]
    22fa:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    22fc:	e001      	b.n	2302 <prvUnlockQueue+0x62>
				--cRxLock;
    22fe:	3c01      	subs	r4, #1
    2300:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    2302:	2c00      	cmp	r4, #0
    2304:	dd0b      	ble.n	231e <prvUnlockQueue+0x7e>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2306:	692b      	ldr	r3, [r5, #16]
    2308:	2b00      	cmp	r3, #0
    230a:	d008      	beq.n	231e <prvUnlockQueue+0x7e>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    230c:	0028      	movs	r0, r5
    230e:	3010      	adds	r0, #16
    2310:	4b07      	ldr	r3, [pc, #28]	; (2330 <prvUnlockQueue+0x90>)
    2312:	4798      	blx	r3
    2314:	2800      	cmp	r0, #0
    2316:	d0f2      	beq.n	22fe <prvUnlockQueue+0x5e>
					vTaskMissedYield();
    2318:	4b07      	ldr	r3, [pc, #28]	; (2338 <prvUnlockQueue+0x98>)
    231a:	4798      	blx	r3
    231c:	e7ef      	b.n	22fe <prvUnlockQueue+0x5e>
		pxQueue->cRxLock = queueUNLOCKED;
    231e:	22ff      	movs	r2, #255	; 0xff
    2320:	2344      	movs	r3, #68	; 0x44
    2322:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
    2324:	4b05      	ldr	r3, [pc, #20]	; (233c <prvUnlockQueue+0x9c>)
    2326:	4798      	blx	r3
}
    2328:	bd70      	pop	{r4, r5, r6, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	00002005 	.word	0x00002005
    2330:	00002e99 	.word	0x00002e99
    2334:	00002211 	.word	0x00002211
    2338:	00002f99 	.word	0x00002f99
    233c:	0000201d 	.word	0x0000201d

00002340 <xQueueGenericReset>:
{
    2340:	b570      	push	{r4, r5, r6, lr}
    2342:	0004      	movs	r4, r0
    2344:	000d      	movs	r5, r1
	configASSERT(pxQueue);
    2346:	2800      	cmp	r0, #0
    2348:	d023      	beq.n	2392 <xQueueGenericReset+0x52>
	taskENTER_CRITICAL();
    234a:	4b18      	ldr	r3, [pc, #96]	; (23ac <xQueueGenericReset+0x6c>)
    234c:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    234e:	6822      	ldr	r2, [r4, #0]
    2350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2352:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2354:	0001      	movs	r1, r0
    2356:	4359      	muls	r1, r3
    2358:	1851      	adds	r1, r2, r1
    235a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    235c:	2100      	movs	r1, #0
    235e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    2360:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    2362:	3b01      	subs	r3, #1
    2364:	4343      	muls	r3, r0
    2366:	18d3      	adds	r3, r2, r3
    2368:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    236a:	23ff      	movs	r3, #255	; 0xff
    236c:	2244      	movs	r2, #68	; 0x44
    236e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock           = queueUNLOCKED;
    2370:	3201      	adds	r2, #1
    2372:	54a3      	strb	r3, [r4, r2]
		if (xNewQueue == pdFALSE) {
    2374:	2d00      	cmp	r5, #0
    2376:	d111      	bne.n	239c <xQueueGenericReset+0x5c>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2378:	6923      	ldr	r3, [r4, #16]
    237a:	2b00      	cmp	r3, #0
    237c:	d005      	beq.n	238a <xQueueGenericReset+0x4a>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    237e:	0020      	movs	r0, r4
    2380:	3010      	adds	r0, #16
    2382:	4b0b      	ldr	r3, [pc, #44]	; (23b0 <xQueueGenericReset+0x70>)
    2384:	4798      	blx	r3
    2386:	2800      	cmp	r0, #0
    2388:	d105      	bne.n	2396 <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
    238a:	4b0a      	ldr	r3, [pc, #40]	; (23b4 <xQueueGenericReset+0x74>)
    238c:	4798      	blx	r3
}
    238e:	2001      	movs	r0, #1
    2390:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxQueue);
    2392:	b672      	cpsid	i
    2394:	e7fe      	b.n	2394 <xQueueGenericReset+0x54>
					queueYIELD_IF_USING_PREEMPTION();
    2396:	4b08      	ldr	r3, [pc, #32]	; (23b8 <xQueueGenericReset+0x78>)
    2398:	4798      	blx	r3
    239a:	e7f6      	b.n	238a <xQueueGenericReset+0x4a>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    239c:	0020      	movs	r0, r4
    239e:	3010      	adds	r0, #16
    23a0:	4d06      	ldr	r5, [pc, #24]	; (23bc <xQueueGenericReset+0x7c>)
    23a2:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    23a4:	0020      	movs	r0, r4
    23a6:	3024      	adds	r0, #36	; 0x24
    23a8:	47a8      	blx	r5
    23aa:	e7ee      	b.n	238a <xQueueGenericReset+0x4a>
    23ac:	00002005 	.word	0x00002005
    23b0:	00002e99 	.word	0x00002e99
    23b4:	0000201d 	.word	0x0000201d
    23b8:	00001fed 	.word	0x00001fed
    23bc:	00001e69 	.word	0x00001e69

000023c0 <prvInitialiseNewQueue>:
{
    23c0:	b570      	push	{r4, r5, r6, lr}
    23c2:	001d      	movs	r5, r3
    23c4:	9c04      	ldr	r4, [sp, #16]
	if (uxItemSize == (UBaseType_t)0) {
    23c6:	2900      	cmp	r1, #0
    23c8:	d00b      	beq.n	23e2 <prvInitialiseNewQueue+0x22>
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    23ca:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    23cc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    23ce:	6421      	str	r1, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    23d0:	2101      	movs	r1, #1
    23d2:	0020      	movs	r0, r4
    23d4:	4b04      	ldr	r3, [pc, #16]	; (23e8 <prvInitialiseNewQueue+0x28>)
    23d6:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    23d8:	2350      	movs	r3, #80	; 0x50
    23da:	54e5      	strb	r5, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    23dc:	2300      	movs	r3, #0
    23de:	64a3      	str	r3, [r4, #72]	; 0x48
}
    23e0:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    23e2:	6024      	str	r4, [r4, #0]
    23e4:	e7f2      	b.n	23cc <prvInitialiseNewQueue+0xc>
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	00002341 	.word	0x00002341

000023ec <xQueueGenericCreate>:
{
    23ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ee:	b083      	sub	sp, #12
    23f0:	0006      	movs	r6, r0
    23f2:	000f      	movs	r7, r1
    23f4:	0015      	movs	r5, r2
	configASSERT(uxQueueLength > (UBaseType_t)0);
    23f6:	2800      	cmp	r0, #0
    23f8:	d101      	bne.n	23fe <xQueueGenericCreate+0x12>
    23fa:	b672      	cpsid	i
    23fc:	e7fe      	b.n	23fc <xQueueGenericCreate+0x10>
	if (uxItemSize == (UBaseType_t)0) {
    23fe:	2900      	cmp	r1, #0
    2400:	d002      	beq.n	2408 <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = (size_t)(
    2402:	0008      	movs	r0, r1
    2404:	4370      	muls	r0, r6
    2406:	e000      	b.n	240a <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = (size_t)0;
    2408:	2000      	movs	r0, #0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    240a:	3054      	adds	r0, #84	; 0x54
    240c:	4b07      	ldr	r3, [pc, #28]	; (242c <xQueueGenericCreate+0x40>)
    240e:	4798      	blx	r3
    2410:	1e04      	subs	r4, r0, #0
	if (pxNewQueue != NULL) {
    2412:	d007      	beq.n	2424 <xQueueGenericCreate+0x38>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    2414:	0002      	movs	r2, r0
    2416:	3254      	adds	r2, #84	; 0x54
		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
    2418:	9000      	str	r0, [sp, #0]
    241a:	002b      	movs	r3, r5
    241c:	0039      	movs	r1, r7
    241e:	0030      	movs	r0, r6
    2420:	4d03      	ldr	r5, [pc, #12]	; (2430 <xQueueGenericCreate+0x44>)
    2422:	47a8      	blx	r5
}
    2424:	0020      	movs	r0, r4
    2426:	b003      	add	sp, #12
    2428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	000020c5 	.word	0x000020c5
    2430:	000023c1 	.word	0x000023c1

00002434 <xQueueGenericSend>:
{
    2434:	b5f0      	push	{r4, r5, r6, r7, lr}
    2436:	b085      	sub	sp, #20
    2438:	0004      	movs	r4, r0
    243a:	000f      	movs	r7, r1
    243c:	9201      	str	r2, [sp, #4]
    243e:	001e      	movs	r6, r3
	configASSERT(pxQueue);
    2440:	2800      	cmp	r0, #0
    2442:	d006      	beq.n	2452 <xQueueGenericSend+0x1e>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2444:	2900      	cmp	r1, #0
    2446:	d006      	beq.n	2456 <xQueueGenericSend+0x22>
    2448:	2501      	movs	r5, #1
    244a:	2d00      	cmp	r5, #0
    244c:	d10a      	bne.n	2464 <xQueueGenericSend+0x30>
    244e:	b672      	cpsid	i
    2450:	e7fe      	b.n	2450 <xQueueGenericSend+0x1c>
	configASSERT(pxQueue);
    2452:	b672      	cpsid	i
    2454:	e7fe      	b.n	2454 <xQueueGenericSend+0x20>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2456:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2458:	2b00      	cmp	r3, #0
    245a:	d101      	bne.n	2460 <xQueueGenericSend+0x2c>
    245c:	2501      	movs	r5, #1
    245e:	e7f4      	b.n	244a <xQueueGenericSend+0x16>
    2460:	2500      	movs	r5, #0
    2462:	e7f2      	b.n	244a <xQueueGenericSend+0x16>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    2464:	2e02      	cmp	r6, #2
    2466:	d003      	beq.n	2470 <xQueueGenericSend+0x3c>
    2468:	2d00      	cmp	r5, #0
    246a:	d106      	bne.n	247a <xQueueGenericSend+0x46>
    246c:	b672      	cpsid	i
    246e:	e7fe      	b.n	246e <xQueueGenericSend+0x3a>
    2470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2472:	2b01      	cmp	r3, #1
    2474:	d0f8      	beq.n	2468 <xQueueGenericSend+0x34>
    2476:	2500      	movs	r5, #0
    2478:	e7f6      	b.n	2468 <xQueueGenericSend+0x34>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    247a:	4b44      	ldr	r3, [pc, #272]	; (258c <xQueueGenericSend+0x158>)
    247c:	4798      	blx	r3
    247e:	2800      	cmp	r0, #0
    2480:	d103      	bne.n	248a <xQueueGenericSend+0x56>
    2482:	9b01      	ldr	r3, [sp, #4]
    2484:	2b00      	cmp	r3, #0
    2486:	d000      	beq.n	248a <xQueueGenericSend+0x56>
    2488:	2500      	movs	r5, #0
    248a:	2d00      	cmp	r5, #0
    248c:	d101      	bne.n	2492 <xQueueGenericSend+0x5e>
    248e:	b672      	cpsid	i
    2490:	e7fe      	b.n	2490 <xQueueGenericSend+0x5c>
    2492:	2500      	movs	r5, #0
    2494:	e042      	b.n	251c <xQueueGenericSend+0xe8>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    2496:	0032      	movs	r2, r6
    2498:	0039      	movs	r1, r7
    249a:	0020      	movs	r0, r4
    249c:	4b3c      	ldr	r3, [pc, #240]	; (2590 <xQueueGenericSend+0x15c>)
    249e:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    24a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    24a2:	2b00      	cmp	r3, #0
    24a4:	d00c      	beq.n	24c0 <xQueueGenericSend+0x8c>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    24a6:	0031      	movs	r1, r6
    24a8:	0020      	movs	r0, r4
    24aa:	4b3a      	ldr	r3, [pc, #232]	; (2594 <xQueueGenericSend+0x160>)
    24ac:	4798      	blx	r3
    24ae:	2800      	cmp	r0, #0
    24b0:	d001      	beq.n	24b6 <xQueueGenericSend+0x82>
							queueYIELD_IF_USING_PREEMPTION();
    24b2:	4b39      	ldr	r3, [pc, #228]	; (2598 <xQueueGenericSend+0x164>)
    24b4:	4798      	blx	r3
				taskEXIT_CRITICAL();
    24b6:	4b39      	ldr	r3, [pc, #228]	; (259c <xQueueGenericSend+0x168>)
    24b8:	4798      	blx	r3
				return pdPASS;
    24ba:	2001      	movs	r0, #1
}
    24bc:	b005      	add	sp, #20
    24be:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    24c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24c2:	2b00      	cmp	r3, #0
    24c4:	d008      	beq.n	24d8 <xQueueGenericSend+0xa4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    24c6:	0020      	movs	r0, r4
    24c8:	3024      	adds	r0, #36	; 0x24
    24ca:	4b35      	ldr	r3, [pc, #212]	; (25a0 <xQueueGenericSend+0x16c>)
    24cc:	4798      	blx	r3
    24ce:	2800      	cmp	r0, #0
    24d0:	d0f1      	beq.n	24b6 <xQueueGenericSend+0x82>
								queueYIELD_IF_USING_PREEMPTION();
    24d2:	4b31      	ldr	r3, [pc, #196]	; (2598 <xQueueGenericSend+0x164>)
    24d4:	4798      	blx	r3
    24d6:	e7ee      	b.n	24b6 <xQueueGenericSend+0x82>
						} else if (xYieldRequired != pdFALSE) {
    24d8:	2800      	cmp	r0, #0
    24da:	d0ec      	beq.n	24b6 <xQueueGenericSend+0x82>
							queueYIELD_IF_USING_PREEMPTION();
    24dc:	4b2e      	ldr	r3, [pc, #184]	; (2598 <xQueueGenericSend+0x164>)
    24de:	4798      	blx	r3
    24e0:	e7e9      	b.n	24b6 <xQueueGenericSend+0x82>
					taskEXIT_CRITICAL();
    24e2:	4b2e      	ldr	r3, [pc, #184]	; (259c <xQueueGenericSend+0x168>)
    24e4:	4798      	blx	r3
					return errQUEUE_FULL;
    24e6:	2000      	movs	r0, #0
    24e8:	e7e8      	b.n	24bc <xQueueGenericSend+0x88>
		prvLockQueue(pxQueue);
    24ea:	4b2c      	ldr	r3, [pc, #176]	; (259c <xQueueGenericSend+0x168>)
    24ec:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    24ee:	a901      	add	r1, sp, #4
    24f0:	a802      	add	r0, sp, #8
    24f2:	4b2c      	ldr	r3, [pc, #176]	; (25a4 <xQueueGenericSend+0x170>)
    24f4:	4798      	blx	r3
    24f6:	2800      	cmp	r0, #0
    24f8:	d141      	bne.n	257e <xQueueGenericSend+0x14a>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    24fa:	0020      	movs	r0, r4
    24fc:	4b2a      	ldr	r3, [pc, #168]	; (25a8 <xQueueGenericSend+0x174>)
    24fe:	4798      	blx	r3
    2500:	2800      	cmp	r0, #0
    2502:	d036      	beq.n	2572 <xQueueGenericSend+0x13e>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    2504:	0020      	movs	r0, r4
    2506:	3010      	adds	r0, #16
    2508:	9901      	ldr	r1, [sp, #4]
    250a:	4b28      	ldr	r3, [pc, #160]	; (25ac <xQueueGenericSend+0x178>)
    250c:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    250e:	0020      	movs	r0, r4
    2510:	4b27      	ldr	r3, [pc, #156]	; (25b0 <xQueueGenericSend+0x17c>)
    2512:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    2514:	4b27      	ldr	r3, [pc, #156]	; (25b4 <xQueueGenericSend+0x180>)
    2516:	4798      	blx	r3
    2518:	2800      	cmp	r0, #0
    251a:	d027      	beq.n	256c <xQueueGenericSend+0x138>
		taskENTER_CRITICAL();
    251c:	4b26      	ldr	r3, [pc, #152]	; (25b8 <xQueueGenericSend+0x184>)
    251e:	4798      	blx	r3
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    2520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2522:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2524:	4293      	cmp	r3, r2
    2526:	d3b6      	bcc.n	2496 <xQueueGenericSend+0x62>
    2528:	2e02      	cmp	r6, #2
    252a:	d0b4      	beq.n	2496 <xQueueGenericSend+0x62>
				if (xTicksToWait == (TickType_t)0) {
    252c:	9b01      	ldr	r3, [sp, #4]
    252e:	2b00      	cmp	r3, #0
    2530:	d0d7      	beq.n	24e2 <xQueueGenericSend+0xae>
				} else if (xEntryTimeSet == pdFALSE) {
    2532:	2d00      	cmp	r5, #0
    2534:	d103      	bne.n	253e <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    2536:	a802      	add	r0, sp, #8
    2538:	4b20      	ldr	r3, [pc, #128]	; (25bc <xQueueGenericSend+0x188>)
    253a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    253c:	3501      	adds	r5, #1
		taskEXIT_CRITICAL();
    253e:	4b17      	ldr	r3, [pc, #92]	; (259c <xQueueGenericSend+0x168>)
    2540:	4798      	blx	r3
		vTaskSuspendAll();
    2542:	4b1f      	ldr	r3, [pc, #124]	; (25c0 <xQueueGenericSend+0x18c>)
    2544:	4798      	blx	r3
		prvLockQueue(pxQueue);
    2546:	4b1c      	ldr	r3, [pc, #112]	; (25b8 <xQueueGenericSend+0x184>)
    2548:	4798      	blx	r3
    254a:	2344      	movs	r3, #68	; 0x44
    254c:	5ce3      	ldrb	r3, [r4, r3]
    254e:	b25b      	sxtb	r3, r3
    2550:	3301      	adds	r3, #1
    2552:	d102      	bne.n	255a <xQueueGenericSend+0x126>
    2554:	2200      	movs	r2, #0
    2556:	2344      	movs	r3, #68	; 0x44
    2558:	54e2      	strb	r2, [r4, r3]
    255a:	2345      	movs	r3, #69	; 0x45
    255c:	5ce3      	ldrb	r3, [r4, r3]
    255e:	b25b      	sxtb	r3, r3
    2560:	3301      	adds	r3, #1
    2562:	d1c2      	bne.n	24ea <xQueueGenericSend+0xb6>
    2564:	2200      	movs	r2, #0
    2566:	2345      	movs	r3, #69	; 0x45
    2568:	54e2      	strb	r2, [r4, r3]
    256a:	e7be      	b.n	24ea <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
    256c:	4b0a      	ldr	r3, [pc, #40]	; (2598 <xQueueGenericSend+0x164>)
    256e:	4798      	blx	r3
    2570:	e7d4      	b.n	251c <xQueueGenericSend+0xe8>
				prvUnlockQueue(pxQueue);
    2572:	0020      	movs	r0, r4
    2574:	4b0e      	ldr	r3, [pc, #56]	; (25b0 <xQueueGenericSend+0x17c>)
    2576:	4798      	blx	r3
				(void)xTaskResumeAll();
    2578:	4b0e      	ldr	r3, [pc, #56]	; (25b4 <xQueueGenericSend+0x180>)
    257a:	4798      	blx	r3
    257c:	e7ce      	b.n	251c <xQueueGenericSend+0xe8>
			prvUnlockQueue(pxQueue);
    257e:	0020      	movs	r0, r4
    2580:	4b0b      	ldr	r3, [pc, #44]	; (25b0 <xQueueGenericSend+0x17c>)
    2582:	4798      	blx	r3
			(void)xTaskResumeAll();
    2584:	4b0b      	ldr	r3, [pc, #44]	; (25b4 <xQueueGenericSend+0x180>)
    2586:	4798      	blx	r3
			return errQUEUE_FULL;
    2588:	2000      	movs	r0, #0
    258a:	e797      	b.n	24bc <xQueueGenericSend+0x88>
    258c:	00002fa5 	.word	0x00002fa5
    2590:	00002185 	.word	0x00002185
    2594:	00002211 	.word	0x00002211
    2598:	00001fed 	.word	0x00001fed
    259c:	0000201d 	.word	0x0000201d
    25a0:	00002e99 	.word	0x00002e99
    25a4:	00002f29 	.word	0x00002f29
    25a8:	00002139 	.word	0x00002139
    25ac:	00002e35 	.word	0x00002e35
    25b0:	000022a1 	.word	0x000022a1
    25b4:	00002cc5 	.word	0x00002cc5
    25b8:	00002005 	.word	0x00002005
    25bc:	00002f19 	.word	0x00002f19
    25c0:	00002ba1 	.word	0x00002ba1

000025c4 <xQueueGenericSendFromISR>:
{
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c6:	b083      	sub	sp, #12
    25c8:	0004      	movs	r4, r0
    25ca:	9100      	str	r1, [sp, #0]
    25cc:	0017      	movs	r7, r2
    25ce:	001d      	movs	r5, r3
	configASSERT(pxQueue);
    25d0:	2800      	cmp	r0, #0
    25d2:	d007      	beq.n	25e4 <xQueueGenericSendFromISR+0x20>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    25d4:	9b00      	ldr	r3, [sp, #0]
    25d6:	2b00      	cmp	r3, #0
    25d8:	d006      	beq.n	25e8 <xQueueGenericSendFromISR+0x24>
    25da:	2301      	movs	r3, #1
    25dc:	2b00      	cmp	r3, #0
    25de:	d10a      	bne.n	25f6 <xQueueGenericSendFromISR+0x32>
    25e0:	b672      	cpsid	i
    25e2:	e7fe      	b.n	25e2 <xQueueGenericSendFromISR+0x1e>
	configASSERT(pxQueue);
    25e4:	b672      	cpsid	i
    25e6:	e7fe      	b.n	25e6 <xQueueGenericSendFromISR+0x22>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    25e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    25ea:	2b00      	cmp	r3, #0
    25ec:	d101      	bne.n	25f2 <xQueueGenericSendFromISR+0x2e>
    25ee:	3301      	adds	r3, #1
    25f0:	e7f4      	b.n	25dc <xQueueGenericSendFromISR+0x18>
    25f2:	2300      	movs	r3, #0
    25f4:	e7f2      	b.n	25dc <xQueueGenericSendFromISR+0x18>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    25f6:	2d02      	cmp	r5, #2
    25f8:	d003      	beq.n	2602 <xQueueGenericSendFromISR+0x3e>
    25fa:	2b00      	cmp	r3, #0
    25fc:	d106      	bne.n	260c <xQueueGenericSendFromISR+0x48>
    25fe:	b672      	cpsid	i
    2600:	e7fe      	b.n	2600 <xQueueGenericSendFromISR+0x3c>
    2602:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2604:	2a01      	cmp	r2, #1
    2606:	d0f8      	beq.n	25fa <xQueueGenericSendFromISR+0x36>
    2608:	2300      	movs	r3, #0
    260a:	e7f6      	b.n	25fa <xQueueGenericSendFromISR+0x36>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    260c:	4b23      	ldr	r3, [pc, #140]	; (269c <xQueueGenericSendFromISR+0xd8>)
    260e:	4798      	blx	r3
    2610:	9001      	str	r0, [sp, #4]
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    2612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2614:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2616:	4293      	cmp	r3, r2
    2618:	d301      	bcc.n	261e <xQueueGenericSendFromISR+0x5a>
    261a:	2d02      	cmp	r5, #2
    261c:	d132      	bne.n	2684 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
    261e:	2345      	movs	r3, #69	; 0x45
    2620:	5ce6      	ldrb	r6, [r4, r3]
    2622:	b276      	sxtb	r6, r6
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    2624:	002a      	movs	r2, r5
    2626:	9900      	ldr	r1, [sp, #0]
    2628:	0020      	movs	r0, r4
    262a:	4b1d      	ldr	r3, [pc, #116]	; (26a0 <xQueueGenericSendFromISR+0xdc>)
    262c:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    262e:	1c73      	adds	r3, r6, #1
    2630:	d122      	bne.n	2678 <xQueueGenericSendFromISR+0xb4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    2632:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2634:	2b00      	cmp	r3, #0
    2636:	d010      	beq.n	265a <xQueueGenericSendFromISR+0x96>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    2638:	0029      	movs	r1, r5
    263a:	0020      	movs	r0, r4
    263c:	4b19      	ldr	r3, [pc, #100]	; (26a4 <xQueueGenericSendFromISR+0xe0>)
    263e:	4798      	blx	r3
    2640:	2800      	cmp	r0, #0
    2642:	d021      	beq.n	2688 <xQueueGenericSendFromISR+0xc4>
							if (pxHigherPriorityTaskWoken != NULL) {
    2644:	2f00      	cmp	r7, #0
    2646:	d021      	beq.n	268c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    2648:	2301      	movs	r3, #1
    264a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
    264c:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    264e:	9801      	ldr	r0, [sp, #4]
    2650:	4b15      	ldr	r3, [pc, #84]	; (26a8 <xQueueGenericSendFromISR+0xe4>)
    2652:	4798      	blx	r3
}
    2654:	0020      	movs	r0, r4
    2656:	b003      	add	sp, #12
    2658:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    265a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    265c:	2b00      	cmp	r3, #0
    265e:	d017      	beq.n	2690 <xQueueGenericSendFromISR+0xcc>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2660:	0020      	movs	r0, r4
    2662:	3024      	adds	r0, #36	; 0x24
    2664:	4b11      	ldr	r3, [pc, #68]	; (26ac <xQueueGenericSendFromISR+0xe8>)
    2666:	4798      	blx	r3
    2668:	2800      	cmp	r0, #0
    266a:	d013      	beq.n	2694 <xQueueGenericSendFromISR+0xd0>
								if (pxHigherPriorityTaskWoken != NULL) {
    266c:	2f00      	cmp	r7, #0
    266e:	d013      	beq.n	2698 <xQueueGenericSendFromISR+0xd4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    2670:	2301      	movs	r3, #1
    2672:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
    2674:	2401      	movs	r4, #1
    2676:	e7ea      	b.n	264e <xQueueGenericSendFromISR+0x8a>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    2678:	1c73      	adds	r3, r6, #1
    267a:	b25b      	sxtb	r3, r3
    267c:	2245      	movs	r2, #69	; 0x45
    267e:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    2680:	2401      	movs	r4, #1
    2682:	e7e4      	b.n	264e <xQueueGenericSendFromISR+0x8a>
			xReturn = errQUEUE_FULL;
    2684:	2400      	movs	r4, #0
    2686:	e7e2      	b.n	264e <xQueueGenericSendFromISR+0x8a>
			xReturn = pdPASS;
    2688:	2401      	movs	r4, #1
    268a:	e7e0      	b.n	264e <xQueueGenericSendFromISR+0x8a>
    268c:	2401      	movs	r4, #1
    268e:	e7de      	b.n	264e <xQueueGenericSendFromISR+0x8a>
    2690:	2401      	movs	r4, #1
    2692:	e7dc      	b.n	264e <xQueueGenericSendFromISR+0x8a>
    2694:	2401      	movs	r4, #1
    2696:	e7da      	b.n	264e <xQueueGenericSendFromISR+0x8a>
    2698:	2401      	movs	r4, #1
    269a:	e7d8      	b.n	264e <xQueueGenericSendFromISR+0x8a>
    269c:	0000203d 	.word	0x0000203d
    26a0:	00002185 	.word	0x00002185
    26a4:	00002211 	.word	0x00002211
    26a8:	00002045 	.word	0x00002045
    26ac:	00002e99 	.word	0x00002e99

000026b0 <xQueueReceive>:
{
    26b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26b2:	b085      	sub	sp, #20
    26b4:	0004      	movs	r4, r0
    26b6:	000e      	movs	r6, r1
    26b8:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    26ba:	2800      	cmp	r0, #0
    26bc:	d006      	beq.n	26cc <xQueueReceive+0x1c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    26be:	2900      	cmp	r1, #0
    26c0:	d006      	beq.n	26d0 <xQueueReceive+0x20>
    26c2:	2501      	movs	r5, #1
    26c4:	2d00      	cmp	r5, #0
    26c6:	d10a      	bne.n	26de <xQueueReceive+0x2e>
    26c8:	b672      	cpsid	i
    26ca:	e7fe      	b.n	26ca <xQueueReceive+0x1a>
	configASSERT((pxQueue));
    26cc:	b672      	cpsid	i
    26ce:	e7fe      	b.n	26ce <xQueueReceive+0x1e>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    26d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    26d2:	2b00      	cmp	r3, #0
    26d4:	d101      	bne.n	26da <xQueueReceive+0x2a>
    26d6:	2501      	movs	r5, #1
    26d8:	e7f4      	b.n	26c4 <xQueueReceive+0x14>
    26da:	2500      	movs	r5, #0
    26dc:	e7f2      	b.n	26c4 <xQueueReceive+0x14>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    26de:	4b3e      	ldr	r3, [pc, #248]	; (27d8 <xQueueReceive+0x128>)
    26e0:	4798      	blx	r3
    26e2:	2800      	cmp	r0, #0
    26e4:	d103      	bne.n	26ee <xQueueReceive+0x3e>
    26e6:	9b01      	ldr	r3, [sp, #4]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d000      	beq.n	26ee <xQueueReceive+0x3e>
    26ec:	2500      	movs	r5, #0
    26ee:	2d00      	cmp	r5, #0
    26f0:	d101      	bne.n	26f6 <xQueueReceive+0x46>
    26f2:	b672      	cpsid	i
    26f4:	e7fe      	b.n	26f4 <xQueueReceive+0x44>
    26f6:	2700      	movs	r7, #0
    26f8:	e02b      	b.n	2752 <xQueueReceive+0xa2>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    26fa:	0031      	movs	r1, r6
    26fc:	0020      	movs	r0, r4
    26fe:	4b37      	ldr	r3, [pc, #220]	; (27dc <xQueueReceive+0x12c>)
    2700:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    2702:	3d01      	subs	r5, #1
    2704:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2706:	6923      	ldr	r3, [r4, #16]
    2708:	2b00      	cmp	r3, #0
    270a:	d007      	beq.n	271c <xQueueReceive+0x6c>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    270c:	0020      	movs	r0, r4
    270e:	3010      	adds	r0, #16
    2710:	4b33      	ldr	r3, [pc, #204]	; (27e0 <xQueueReceive+0x130>)
    2712:	4798      	blx	r3
    2714:	2800      	cmp	r0, #0
    2716:	d001      	beq.n	271c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
    2718:	4b32      	ldr	r3, [pc, #200]	; (27e4 <xQueueReceive+0x134>)
    271a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    271c:	4b32      	ldr	r3, [pc, #200]	; (27e8 <xQueueReceive+0x138>)
    271e:	4798      	blx	r3
				return pdPASS;
    2720:	2001      	movs	r0, #1
}
    2722:	b005      	add	sp, #20
    2724:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    2726:	4b30      	ldr	r3, [pc, #192]	; (27e8 <xQueueReceive+0x138>)
    2728:	4798      	blx	r3
					return errQUEUE_EMPTY;
    272a:	2000      	movs	r0, #0
    272c:	e7f9      	b.n	2722 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState(&xTimeOut);
    272e:	a802      	add	r0, sp, #8
    2730:	4b2e      	ldr	r3, [pc, #184]	; (27ec <xQueueReceive+0x13c>)
    2732:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2734:	3701      	adds	r7, #1
    2736:	e016      	b.n	2766 <xQueueReceive+0xb6>
		prvLockQueue(pxQueue);
    2738:	2200      	movs	r2, #0
    273a:	2344      	movs	r3, #68	; 0x44
    273c:	54e2      	strb	r2, [r4, r3]
    273e:	e01d      	b.n	277c <xQueueReceive+0xcc>
    2740:	2200      	movs	r2, #0
    2742:	2345      	movs	r3, #69	; 0x45
    2744:	54e2      	strb	r2, [r4, r3]
    2746:	e01e      	b.n	2786 <xQueueReceive+0xd6>
				prvUnlockQueue(pxQueue);
    2748:	0020      	movs	r0, r4
    274a:	4b29      	ldr	r3, [pc, #164]	; (27f0 <xQueueReceive+0x140>)
    274c:	4798      	blx	r3
				(void)xTaskResumeAll();
    274e:	4b29      	ldr	r3, [pc, #164]	; (27f4 <xQueueReceive+0x144>)
    2750:	4798      	blx	r3
		taskENTER_CRITICAL();
    2752:	4b29      	ldr	r3, [pc, #164]	; (27f8 <xQueueReceive+0x148>)
    2754:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2756:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    2758:	2d00      	cmp	r5, #0
    275a:	d1ce      	bne.n	26fa <xQueueReceive+0x4a>
				if (xTicksToWait == (TickType_t)0) {
    275c:	9b01      	ldr	r3, [sp, #4]
    275e:	2b00      	cmp	r3, #0
    2760:	d0e1      	beq.n	2726 <xQueueReceive+0x76>
				} else if (xEntryTimeSet == pdFALSE) {
    2762:	2f00      	cmp	r7, #0
    2764:	d0e3      	beq.n	272e <xQueueReceive+0x7e>
		taskEXIT_CRITICAL();
    2766:	4b20      	ldr	r3, [pc, #128]	; (27e8 <xQueueReceive+0x138>)
    2768:	4798      	blx	r3
		vTaskSuspendAll();
    276a:	4b24      	ldr	r3, [pc, #144]	; (27fc <xQueueReceive+0x14c>)
    276c:	4798      	blx	r3
		prvLockQueue(pxQueue);
    276e:	4b22      	ldr	r3, [pc, #136]	; (27f8 <xQueueReceive+0x148>)
    2770:	4798      	blx	r3
    2772:	2344      	movs	r3, #68	; 0x44
    2774:	5ce3      	ldrb	r3, [r4, r3]
    2776:	b25b      	sxtb	r3, r3
    2778:	3301      	adds	r3, #1
    277a:	d0dd      	beq.n	2738 <xQueueReceive+0x88>
    277c:	2345      	movs	r3, #69	; 0x45
    277e:	5ce3      	ldrb	r3, [r4, r3]
    2780:	b25b      	sxtb	r3, r3
    2782:	3301      	adds	r3, #1
    2784:	d0dc      	beq.n	2740 <xQueueReceive+0x90>
    2786:	4b18      	ldr	r3, [pc, #96]	; (27e8 <xQueueReceive+0x138>)
    2788:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    278a:	a901      	add	r1, sp, #4
    278c:	a802      	add	r0, sp, #8
    278e:	4b1c      	ldr	r3, [pc, #112]	; (2800 <xQueueReceive+0x150>)
    2790:	4798      	blx	r3
    2792:	2800      	cmp	r0, #0
    2794:	d113      	bne.n	27be <xQueueReceive+0x10e>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    2796:	0020      	movs	r0, r4
    2798:	4b1a      	ldr	r3, [pc, #104]	; (2804 <xQueueReceive+0x154>)
    279a:	4798      	blx	r3
    279c:	2800      	cmp	r0, #0
    279e:	d0d3      	beq.n	2748 <xQueueReceive+0x98>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    27a0:	0020      	movs	r0, r4
    27a2:	3024      	adds	r0, #36	; 0x24
    27a4:	9901      	ldr	r1, [sp, #4]
    27a6:	4b18      	ldr	r3, [pc, #96]	; (2808 <xQueueReceive+0x158>)
    27a8:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    27aa:	0020      	movs	r0, r4
    27ac:	4b10      	ldr	r3, [pc, #64]	; (27f0 <xQueueReceive+0x140>)
    27ae:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    27b0:	4b10      	ldr	r3, [pc, #64]	; (27f4 <xQueueReceive+0x144>)
    27b2:	4798      	blx	r3
    27b4:	2800      	cmp	r0, #0
    27b6:	d1cc      	bne.n	2752 <xQueueReceive+0xa2>
					portYIELD_WITHIN_API();
    27b8:	4b0a      	ldr	r3, [pc, #40]	; (27e4 <xQueueReceive+0x134>)
    27ba:	4798      	blx	r3
    27bc:	e7c9      	b.n	2752 <xQueueReceive+0xa2>
			prvUnlockQueue(pxQueue);
    27be:	0020      	movs	r0, r4
    27c0:	4b0b      	ldr	r3, [pc, #44]	; (27f0 <xQueueReceive+0x140>)
    27c2:	4798      	blx	r3
			(void)xTaskResumeAll();
    27c4:	4b0b      	ldr	r3, [pc, #44]	; (27f4 <xQueueReceive+0x144>)
    27c6:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    27c8:	0020      	movs	r0, r4
    27ca:	4b0e      	ldr	r3, [pc, #56]	; (2804 <xQueueReceive+0x154>)
    27cc:	4798      	blx	r3
    27ce:	2800      	cmp	r0, #0
    27d0:	d0bf      	beq.n	2752 <xQueueReceive+0xa2>
				return errQUEUE_EMPTY;
    27d2:	2000      	movs	r0, #0
    27d4:	e7a5      	b.n	2722 <xQueueReceive+0x72>
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	00002fa5 	.word	0x00002fa5
    27dc:	00002279 	.word	0x00002279
    27e0:	00002e99 	.word	0x00002e99
    27e4:	00001fed 	.word	0x00001fed
    27e8:	0000201d 	.word	0x0000201d
    27ec:	00002f19 	.word	0x00002f19
    27f0:	000022a1 	.word	0x000022a1
    27f4:	00002cc5 	.word	0x00002cc5
    27f8:	00002005 	.word	0x00002005
    27fc:	00002ba1 	.word	0x00002ba1
    2800:	00002f29 	.word	0x00002f29
    2804:	00002161 	.word	0x00002161
    2808:	00002e35 	.word	0x00002e35

0000280c <vQueueWaitForMessageRestricted>:
{
    280c:	b570      	push	{r4, r5, r6, lr}
    280e:	0004      	movs	r4, r0
    2810:	000d      	movs	r5, r1
    2812:	0016      	movs	r6, r2
	prvLockQueue(pxQueue);
    2814:	4b11      	ldr	r3, [pc, #68]	; (285c <vQueueWaitForMessageRestricted+0x50>)
    2816:	4798      	blx	r3
    2818:	2344      	movs	r3, #68	; 0x44
    281a:	5ce3      	ldrb	r3, [r4, r3]
    281c:	b25b      	sxtb	r3, r3
    281e:	3301      	adds	r3, #1
    2820:	d00d      	beq.n	283e <vQueueWaitForMessageRestricted+0x32>
    2822:	2345      	movs	r3, #69	; 0x45
    2824:	5ce3      	ldrb	r3, [r4, r3]
    2826:	b25b      	sxtb	r3, r3
    2828:	3301      	adds	r3, #1
    282a:	d00c      	beq.n	2846 <vQueueWaitForMessageRestricted+0x3a>
    282c:	4b0c      	ldr	r3, [pc, #48]	; (2860 <vQueueWaitForMessageRestricted+0x54>)
    282e:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    2830:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2832:	2b00      	cmp	r3, #0
    2834:	d00b      	beq.n	284e <vQueueWaitForMessageRestricted+0x42>
	prvUnlockQueue(pxQueue);
    2836:	0020      	movs	r0, r4
    2838:	4b0a      	ldr	r3, [pc, #40]	; (2864 <vQueueWaitForMessageRestricted+0x58>)
    283a:	4798      	blx	r3
}
    283c:	bd70      	pop	{r4, r5, r6, pc}
	prvLockQueue(pxQueue);
    283e:	2200      	movs	r2, #0
    2840:	2344      	movs	r3, #68	; 0x44
    2842:	54e2      	strb	r2, [r4, r3]
    2844:	e7ed      	b.n	2822 <vQueueWaitForMessageRestricted+0x16>
    2846:	2200      	movs	r2, #0
    2848:	2345      	movs	r3, #69	; 0x45
    284a:	54e2      	strb	r2, [r4, r3]
    284c:	e7ee      	b.n	282c <vQueueWaitForMessageRestricted+0x20>
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    284e:	0020      	movs	r0, r4
    2850:	3024      	adds	r0, #36	; 0x24
    2852:	0032      	movs	r2, r6
    2854:	0029      	movs	r1, r5
    2856:	4b04      	ldr	r3, [pc, #16]	; (2868 <vQueueWaitForMessageRestricted+0x5c>)
    2858:	4798      	blx	r3
    285a:	e7ec      	b.n	2836 <vQueueWaitForMessageRestricted+0x2a>
    285c:	00002005 	.word	0x00002005
    2860:	0000201d 	.word	0x0000201d
    2864:	000022a1 	.word	0x000022a1
    2868:	00002e61 	.word	0x00002e61

0000286c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    286c:	4b0a      	ldr	r3, [pc, #40]	; (2898 <prvResetNextTaskUnblockTime+0x2c>)
    286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	2b00      	cmp	r3, #0
    2874:	d109      	bne.n	288a <prvResetNextTaskUnblockTime+0x1e>
    2876:	3301      	adds	r3, #1
    2878:	2b00      	cmp	r3, #0
    287a:	d108      	bne.n	288e <prvResetNextTaskUnblockTime+0x22>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    287c:	4b06      	ldr	r3, [pc, #24]	; (2898 <prvResetNextTaskUnblockTime+0x2c>)
    287e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2880:	68d2      	ldr	r2, [r2, #12]
    2882:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    2884:	6852      	ldr	r2, [r2, #4]
    2886:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
    2888:	4770      	bx	lr
	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    288a:	2300      	movs	r3, #0
    288c:	e7f4      	b.n	2878 <prvResetNextTaskUnblockTime+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
    288e:	2201      	movs	r2, #1
    2890:	4252      	negs	r2, r2
    2892:	4b01      	ldr	r3, [pc, #4]	; (2898 <prvResetNextTaskUnblockTime+0x2c>)
    2894:	62da      	str	r2, [r3, #44]	; 0x2c
    2896:	e7f7      	b.n	2888 <prvResetNextTaskUnblockTime+0x1c>
    2898:	200026d0 	.word	0x200026d0

0000289c <prvInitialiseNewTask>:
{
    289c:	b5f0      	push	{r4, r5, r6, r7, lr}
    289e:	46c6      	mov	lr, r8
    28a0:	b500      	push	{lr}
    28a2:	b082      	sub	sp, #8
    28a4:	9000      	str	r0, [sp, #0]
    28a6:	000f      	movs	r7, r1
    28a8:	0015      	movs	r5, r2
    28aa:	9301      	str	r3, [sp, #4]
    28ac:	9c08      	ldr	r4, [sp, #32]
    28ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    28b0:	0092      	lsls	r2, r2, #2
    28b2:	21a5      	movs	r1, #165	; 0xa5
    28b4:	6b30      	ldr	r0, [r6, #48]	; 0x30
    28b6:	4b1f      	ldr	r3, [pc, #124]	; (2934 <prvInitialiseNewTask+0x98>)
    28b8:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    28ba:	4b1f      	ldr	r3, [pc, #124]	; (2938 <prvInitialiseNewTask+0x9c>)
    28bc:	18eb      	adds	r3, r5, r3
    28be:	009b      	lsls	r3, r3, #2
    28c0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    28c2:	4694      	mov	ip, r2
    28c4:	4463      	add	r3, ip
		                      & (~(
    28c6:	2207      	movs	r2, #7
    28c8:	4393      	bics	r3, r2
    28ca:	4698      	mov	r8, r3
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    28cc:	2300      	movs	r3, #0
    28ce:	2b07      	cmp	r3, #7
    28d0:	d809      	bhi.n	28e6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pcTaskName[x] = pcName[x];
    28d2:	18f9      	adds	r1, r7, r3
    28d4:	7808      	ldrb	r0, [r1, #0]
    28d6:	18f2      	adds	r2, r6, r3
    28d8:	3234      	adds	r2, #52	; 0x34
    28da:	7010      	strb	r0, [r2, #0]
		if (pcName[x] == 0x00) {
    28dc:	780a      	ldrb	r2, [r1, #0]
    28de:	2a00      	cmp	r2, #0
    28e0:	d001      	beq.n	28e6 <prvInitialiseNewTask+0x4a>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    28e2:	3301      	adds	r3, #1
    28e4:	e7f3      	b.n	28ce <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    28e6:	2200      	movs	r2, #0
    28e8:	233b      	movs	r3, #59	; 0x3b
    28ea:	54f2      	strb	r2, [r6, r3]
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    28ec:	2c04      	cmp	r4, #4
    28ee:	d900      	bls.n	28f2 <prvInitialiseNewTask+0x56>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    28f0:	2404      	movs	r4, #4
	pxNewTCB->uxPriority = uxPriority;
    28f2:	62f4      	str	r4, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    28f4:	6474      	str	r4, [r6, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    28f6:	2500      	movs	r5, #0
    28f8:	64b5      	str	r5, [r6, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    28fa:	1d30      	adds	r0, r6, #4
    28fc:	4f0f      	ldr	r7, [pc, #60]	; (293c <prvInitialiseNewTask+0xa0>)
    28fe:	47b8      	blx	r7
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    2900:	0030      	movs	r0, r6
    2902:	3018      	adds	r0, #24
    2904:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    2906:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE(
    2908:	2305      	movs	r3, #5
    290a:	1b1c      	subs	r4, r3, r4
    290c:	61b4      	str	r4, [r6, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    290e:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    2910:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    2912:	334b      	adds	r3, #75	; 0x4b
    2914:	54f5      	strb	r5, [r6, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    2916:	9a01      	ldr	r2, [sp, #4]
    2918:	9900      	ldr	r1, [sp, #0]
    291a:	4640      	mov	r0, r8
    291c:	4b08      	ldr	r3, [pc, #32]	; (2940 <prvInitialiseNewTask+0xa4>)
    291e:	4798      	blx	r3
    2920:	6030      	str	r0, [r6, #0]
	if ((void *)pxCreatedTask != NULL) {
    2922:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2924:	2b00      	cmp	r3, #0
    2926:	d000      	beq.n	292a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    2928:	601e      	str	r6, [r3, #0]
}
    292a:	b002      	add	sp, #8
    292c:	bc04      	pop	{r2}
    292e:	4690      	mov	r8, r2
    2930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	000034cf 	.word	0x000034cf
    2938:	3fffffff 	.word	0x3fffffff
    293c:	00001e7f 	.word	0x00001e7f
    2940:	00001f7d 	.word	0x00001f7d

00002944 <prvIdleTask>:
{
    2944:	b510      	push	{r4, lr}
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    2946:	4b03      	ldr	r3, [pc, #12]	; (2954 <prvIdleTask+0x10>)
    2948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    294a:	2b01      	cmp	r3, #1
    294c:	d9fb      	bls.n	2946 <prvIdleTask+0x2>
				taskYIELD();
    294e:	4b02      	ldr	r3, [pc, #8]	; (2958 <prvIdleTask+0x14>)
    2950:	4798      	blx	r3
    2952:	e7f8      	b.n	2946 <prvIdleTask+0x2>
    2954:	200026d0 	.word	0x200026d0
    2958:	00001fed 	.word	0x00001fed

0000295c <prvInitialiseTaskLists>:
{
    295c:	b5f0      	push	{r4, r5, r6, r7, lr}
    295e:	46c6      	mov	lr, r8
    2960:	b500      	push	{lr}
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    2962:	2400      	movs	r4, #0
    2964:	e008      	b.n	2978 <prvInitialiseTaskLists+0x1c>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    2966:	00a3      	lsls	r3, r4, #2
    2968:	191b      	adds	r3, r3, r4
    296a:	009a      	lsls	r2, r3, #2
    296c:	480f      	ldr	r0, [pc, #60]	; (29ac <prvInitialiseTaskLists+0x50>)
    296e:	3030      	adds	r0, #48	; 0x30
    2970:	1880      	adds	r0, r0, r2
    2972:	4b0f      	ldr	r3, [pc, #60]	; (29b0 <prvInitialiseTaskLists+0x54>)
    2974:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    2976:	3401      	adds	r4, #1
    2978:	2c04      	cmp	r4, #4
    297a:	d9f4      	bls.n	2966 <prvInitialiseTaskLists+0xa>
	vListInitialise(&xDelayedTaskList1);
    297c:	4d0d      	ldr	r5, [pc, #52]	; (29b4 <prvInitialiseTaskLists+0x58>)
    297e:	2314      	movs	r3, #20
    2980:	4698      	mov	r8, r3
    2982:	44a8      	add	r8, r5
    2984:	4640      	mov	r0, r8
    2986:	4c0a      	ldr	r4, [pc, #40]	; (29b0 <prvInitialiseTaskLists+0x54>)
    2988:	47a0      	blx	r4
	vListInitialise(&xDelayedTaskList2);
    298a:	002f      	movs	r7, r5
    298c:	3728      	adds	r7, #40	; 0x28
    298e:	0038      	movs	r0, r7
    2990:	47a0      	blx	r4
	vListInitialise(&xPendingReadyList);
    2992:	4e06      	ldr	r6, [pc, #24]	; (29ac <prvInitialiseTaskLists+0x50>)
    2994:	0030      	movs	r0, r6
    2996:	3014      	adds	r0, #20
    2998:	47a0      	blx	r4
		vListInitialise(&xSuspendedTaskList);
    299a:	0030      	movs	r0, r6
    299c:	47a0      	blx	r4
	pxDelayedTaskList         = &xDelayedTaskList1;
    299e:	4643      	mov	r3, r8
    29a0:	62b3      	str	r3, [r6, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    29a2:	63ef      	str	r7, [r5, #60]	; 0x3c
}
    29a4:	bc04      	pop	{r2}
    29a6:	4690      	mov	r8, r2
    29a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	200026d0 	.word	0x200026d0
    29b0:	00001e69 	.word	0x00001e69
    29b4:	20002750 	.word	0x20002750

000029b8 <prvAddNewTaskToReadyList>:
{
    29b8:	b510      	push	{r4, lr}
    29ba:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
    29bc:	4b1f      	ldr	r3, [pc, #124]	; (2a3c <prvAddNewTaskToReadyList+0x84>)
    29be:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    29c0:	4b1f      	ldr	r3, [pc, #124]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    29c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    29c4:	3201      	adds	r2, #1
    29c6:	641a      	str	r2, [r3, #64]	; 0x40
		if (pxCurrentTCB == NULL) {
    29c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    29ca:	2b00      	cmp	r3, #0
    29cc:	d02b      	beq.n	2a26 <prvAddNewTaskToReadyList+0x6e>
			if (xSchedulerRunning == pdFALSE) {
    29ce:	4b1c      	ldr	r3, [pc, #112]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    29d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    29d2:	2b00      	cmp	r3, #0
    29d4:	d107      	bne.n	29e6 <prvAddNewTaskToReadyList+0x2e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    29d6:	4b1a      	ldr	r3, [pc, #104]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    29d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    29da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    29dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    29de:	4293      	cmp	r3, r2
    29e0:	d801      	bhi.n	29e6 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
    29e2:	4b17      	ldr	r3, [pc, #92]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    29e4:	645c      	str	r4, [r3, #68]	; 0x44
		uxTaskNumber++;
    29e6:	4916      	ldr	r1, [pc, #88]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    29e8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    29ea:	3301      	adds	r3, #1
    29ec:	64cb      	str	r3, [r1, #76]	; 0x4c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    29ee:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    29f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    29f2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    29f4:	429a      	cmp	r2, r3
    29f6:	d900      	bls.n	29fa <prvAddNewTaskToReadyList+0x42>
    29f8:	650a      	str	r2, [r1, #80]	; 0x50
    29fa:	1d21      	adds	r1, r4, #4
    29fc:	0093      	lsls	r3, r2, #2
    29fe:	189b      	adds	r3, r3, r2
    2a00:	009a      	lsls	r2, r3, #2
    2a02:	4810      	ldr	r0, [pc, #64]	; (2a44 <prvAddNewTaskToReadyList+0x8c>)
    2a04:	3030      	adds	r0, #48	; 0x30
    2a06:	1880      	adds	r0, r0, r2
    2a08:	4b0f      	ldr	r3, [pc, #60]	; (2a48 <prvAddNewTaskToReadyList+0x90>)
    2a0a:	4798      	blx	r3
	taskEXIT_CRITICAL();
    2a0c:	4b0f      	ldr	r3, [pc, #60]	; (2a4c <prvAddNewTaskToReadyList+0x94>)
    2a0e:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    2a10:	4b0b      	ldr	r3, [pc, #44]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    2a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2a14:	2b00      	cmp	r3, #0
    2a16:	d005      	beq.n	2a24 <prvAddNewTaskToReadyList+0x6c>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    2a18:	4b09      	ldr	r3, [pc, #36]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    2a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2a20:	429a      	cmp	r2, r3
    2a22:	d308      	bcc.n	2a36 <prvAddNewTaskToReadyList+0x7e>
}
    2a24:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
    2a26:	4b06      	ldr	r3, [pc, #24]	; (2a40 <prvAddNewTaskToReadyList+0x88>)
    2a28:	645c      	str	r4, [r3, #68]	; 0x44
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    2a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a2c:	2b01      	cmp	r3, #1
    2a2e:	d1da      	bne.n	29e6 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
    2a30:	4b07      	ldr	r3, [pc, #28]	; (2a50 <prvAddNewTaskToReadyList+0x98>)
    2a32:	4798      	blx	r3
    2a34:	e7d7      	b.n	29e6 <prvAddNewTaskToReadyList+0x2e>
			taskYIELD_IF_USING_PREEMPTION();
    2a36:	4b07      	ldr	r3, [pc, #28]	; (2a54 <prvAddNewTaskToReadyList+0x9c>)
    2a38:	4798      	blx	r3
}
    2a3a:	e7f3      	b.n	2a24 <prvAddNewTaskToReadyList+0x6c>
    2a3c:	00002005 	.word	0x00002005
    2a40:	20002750 	.word	0x20002750
    2a44:	200026d0 	.word	0x200026d0
    2a48:	00001e85 	.word	0x00001e85
    2a4c:	0000201d 	.word	0x0000201d
    2a50:	0000295d 	.word	0x0000295d
    2a54:	00001fed 	.word	0x00001fed

00002a58 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    2a58:	b570      	push	{r4, r5, r6, lr}
    2a5a:	0004      	movs	r4, r0
    2a5c:	000d      	movs	r5, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    2a5e:	4b15      	ldr	r3, [pc, #84]	; (2ab4 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a60:	6d5e      	ldr	r6, [r3, #84]	; 0x54
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    2a62:	6c58      	ldr	r0, [r3, #68]	; 0x44
    2a64:	3004      	adds	r0, #4
    2a66:	4b14      	ldr	r3, [pc, #80]	; (2ab8 <prvAddCurrentTaskToDelayedList+0x60>)
    2a68:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2a6a:	1c63      	adds	r3, r4, #1
    2a6c:	d012      	beq.n	2a94 <prvAddCurrentTaskToDelayedList+0x3c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2a6e:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    2a70:	4b10      	ldr	r3, [pc, #64]	; (2ab4 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2a74:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    2a76:	42a6      	cmp	r6, r4
    2a78:	d815      	bhi.n	2aa6 <prvAddCurrentTaskToDelayedList+0x4e>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2a7a:	4d10      	ldr	r5, [pc, #64]	; (2abc <prvAddCurrentTaskToDelayedList+0x64>)
    2a7c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2a7e:	4b0d      	ldr	r3, [pc, #52]	; (2ab4 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a80:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2a82:	3104      	adds	r1, #4
    2a84:	4b0e      	ldr	r3, [pc, #56]	; (2ac0 <prvAddCurrentTaskToDelayedList+0x68>)
    2a86:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    2a88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2a8a:	429c      	cmp	r4, r3
    2a8c:	d211      	bcs.n	2ab2 <prvAddCurrentTaskToDelayedList+0x5a>
					xNextTaskUnblockTime = xTimeToWake;
    2a8e:	4b0b      	ldr	r3, [pc, #44]	; (2abc <prvAddCurrentTaskToDelayedList+0x64>)
    2a90:	62dc      	str	r4, [r3, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		(void)xCanBlockIndefinitely;
	}
#endif /* INCLUDE_vTaskSuspend */
}
    2a92:	e00e      	b.n	2ab2 <prvAddCurrentTaskToDelayedList+0x5a>
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2a94:	2d00      	cmp	r5, #0
    2a96:	d0ea      	beq.n	2a6e <prvAddCurrentTaskToDelayedList+0x16>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    2a98:	4b06      	ldr	r3, [pc, #24]	; (2ab4 <prvAddCurrentTaskToDelayedList+0x5c>)
    2a9a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2a9c:	3104      	adds	r1, #4
    2a9e:	4807      	ldr	r0, [pc, #28]	; (2abc <prvAddCurrentTaskToDelayedList+0x64>)
    2aa0:	4b08      	ldr	r3, [pc, #32]	; (2ac4 <prvAddCurrentTaskToDelayedList+0x6c>)
    2aa2:	4798      	blx	r3
    2aa4:	e005      	b.n	2ab2 <prvAddCurrentTaskToDelayedList+0x5a>
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2aa6:	4b03      	ldr	r3, [pc, #12]	; (2ab4 <prvAddCurrentTaskToDelayedList+0x5c>)
    2aa8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2aaa:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2aac:	3104      	adds	r1, #4
    2aae:	4b04      	ldr	r3, [pc, #16]	; (2ac0 <prvAddCurrentTaskToDelayedList+0x68>)
    2ab0:	4798      	blx	r3
}
    2ab2:	bd70      	pop	{r4, r5, r6, pc}
    2ab4:	20002750 	.word	0x20002750
    2ab8:	00001ecd 	.word	0x00001ecd
    2abc:	200026d0 	.word	0x200026d0
    2ac0:	00001e9d 	.word	0x00001e9d
    2ac4:	00001e85 	.word	0x00001e85

00002ac8 <xTaskCreate>:
{
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aca:	b087      	sub	sp, #28
    2acc:	9004      	str	r0, [sp, #16]
    2ace:	9105      	str	r1, [sp, #20]
    2ad0:	0014      	movs	r4, r2
    2ad2:	001f      	movs	r7, r3
		pxStack = (StackType_t *)pvPortMalloc(
    2ad4:	0090      	lsls	r0, r2, #2
    2ad6:	4b14      	ldr	r3, [pc, #80]	; (2b28 <xTaskCreate+0x60>)
    2ad8:	4798      	blx	r3
    2ada:	1e06      	subs	r6, r0, #0
		if (pxStack != NULL) {
    2adc:	d01e      	beq.n	2b1c <xTaskCreate+0x54>
			pxNewTCB = (TCB_t *)pvPortMalloc(
    2ade:	2054      	movs	r0, #84	; 0x54
    2ae0:	4b11      	ldr	r3, [pc, #68]	; (2b28 <xTaskCreate+0x60>)
    2ae2:	4798      	blx	r3
    2ae4:	1e05      	subs	r5, r0, #0
			if (pxNewTCB != NULL) {
    2ae6:	d015      	beq.n	2b14 <xTaskCreate+0x4c>
				pxNewTCB->pxStack = pxStack;
    2ae8:	6306      	str	r6, [r0, #48]	; 0x30
	if (pxNewTCB != NULL) {
    2aea:	2d00      	cmp	r5, #0
    2aec:	d018      	beq.n	2b20 <xTaskCreate+0x58>
		prvInitialiseNewTask(
    2aee:	2300      	movs	r3, #0
    2af0:	9303      	str	r3, [sp, #12]
    2af2:	9502      	str	r5, [sp, #8]
    2af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2af6:	9301      	str	r3, [sp, #4]
    2af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2afa:	9300      	str	r3, [sp, #0]
    2afc:	003b      	movs	r3, r7
    2afe:	0022      	movs	r2, r4
    2b00:	9905      	ldr	r1, [sp, #20]
    2b02:	9804      	ldr	r0, [sp, #16]
    2b04:	4c09      	ldr	r4, [pc, #36]	; (2b2c <xTaskCreate+0x64>)
    2b06:	47a0      	blx	r4
		prvAddNewTaskToReadyList(pxNewTCB);
    2b08:	0028      	movs	r0, r5
    2b0a:	4b09      	ldr	r3, [pc, #36]	; (2b30 <xTaskCreate+0x68>)
    2b0c:	4798      	blx	r3
		xReturn = pdPASS;
    2b0e:	2001      	movs	r0, #1
}
    2b10:	b007      	add	sp, #28
    2b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree(pxStack);
    2b14:	0030      	movs	r0, r6
    2b16:	4b07      	ldr	r3, [pc, #28]	; (2b34 <xTaskCreate+0x6c>)
    2b18:	4798      	blx	r3
    2b1a:	e7e6      	b.n	2aea <xTaskCreate+0x22>
			pxNewTCB = NULL;
    2b1c:	2500      	movs	r5, #0
    2b1e:	e7e4      	b.n	2aea <xTaskCreate+0x22>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2b20:	2001      	movs	r0, #1
    2b22:	4240      	negs	r0, r0
	return xReturn;
    2b24:	e7f4      	b.n	2b10 <xTaskCreate+0x48>
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	000020c5 	.word	0x000020c5
    2b2c:	0000289d 	.word	0x0000289d
    2b30:	000029b9 	.word	0x000029b9
    2b34:	0000212d 	.word	0x0000212d

00002b38 <vTaskStartScheduler>:
{
    2b38:	b510      	push	{r4, lr}
    2b3a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    2b3c:	4b11      	ldr	r3, [pc, #68]	; (2b84 <vTaskStartScheduler+0x4c>)
    2b3e:	335c      	adds	r3, #92	; 0x5c
    2b40:	9301      	str	r3, [sp, #4]
    2b42:	2300      	movs	r3, #0
    2b44:	9300      	str	r3, [sp, #0]
    2b46:	2240      	movs	r2, #64	; 0x40
    2b48:	490f      	ldr	r1, [pc, #60]	; (2b88 <vTaskStartScheduler+0x50>)
    2b4a:	4810      	ldr	r0, [pc, #64]	; (2b8c <vTaskStartScheduler+0x54>)
    2b4c:	4c10      	ldr	r4, [pc, #64]	; (2b90 <vTaskStartScheduler+0x58>)
    2b4e:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    2b50:	2801      	cmp	r0, #1
    2b52:	d005      	beq.n	2b60 <vTaskStartScheduler+0x28>
	if (xReturn == pdPASS) {
    2b54:	2801      	cmp	r0, #1
    2b56:	d006      	beq.n	2b66 <vTaskStartScheduler+0x2e>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    2b58:	1c43      	adds	r3, r0, #1
    2b5a:	d011      	beq.n	2b80 <vTaskStartScheduler+0x48>
}
    2b5c:	b002      	add	sp, #8
    2b5e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    2b60:	4b0c      	ldr	r3, [pc, #48]	; (2b94 <vTaskStartScheduler+0x5c>)
    2b62:	4798      	blx	r3
    2b64:	e7f6      	b.n	2b54 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    2b66:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    2b68:	2201      	movs	r2, #1
    2b6a:	4252      	negs	r2, r2
    2b6c:	4b0a      	ldr	r3, [pc, #40]	; (2b98 <vTaskStartScheduler+0x60>)
    2b6e:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning    = pdTRUE;
    2b70:	4b04      	ldr	r3, [pc, #16]	; (2b84 <vTaskStartScheduler+0x4c>)
    2b72:	3202      	adds	r2, #2
    2b74:	649a      	str	r2, [r3, #72]	; 0x48
		xTickCount           = (TickType_t)0U;
    2b76:	2200      	movs	r2, #0
    2b78:	655a      	str	r2, [r3, #84]	; 0x54
		if (xPortStartScheduler() != pdFALSE) {
    2b7a:	4b08      	ldr	r3, [pc, #32]	; (2b9c <vTaskStartScheduler+0x64>)
    2b7c:	4798      	blx	r3
    2b7e:	e7ed      	b.n	2b5c <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    2b80:	b672      	cpsid	i
    2b82:	e7fe      	b.n	2b82 <vTaskStartScheduler+0x4a>
    2b84:	20002750 	.word	0x20002750
    2b88:	0000375c 	.word	0x0000375c
    2b8c:	00002945 	.word	0x00002945
    2b90:	00002ac9 	.word	0x00002ac9
    2b94:	000030f9 	.word	0x000030f9
    2b98:	200026d0 	.word	0x200026d0
    2b9c:	00001fa1 	.word	0x00001fa1

00002ba0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2ba0:	4a02      	ldr	r2, [pc, #8]	; (2bac <vTaskSuspendAll+0xc>)
    2ba2:	6d93      	ldr	r3, [r2, #88]	; 0x58
    2ba4:	3301      	adds	r3, #1
    2ba6:	6593      	str	r3, [r2, #88]	; 0x58
}
    2ba8:	4770      	bx	lr
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	20002750 	.word	0x20002750

00002bb0 <xTaskGetTickCount>:
		xTicks = xTickCount;
    2bb0:	4b01      	ldr	r3, [pc, #4]	; (2bb8 <xTaskGetTickCount+0x8>)
    2bb2:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
    2bb4:	4770      	bx	lr
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	20002750 	.word	0x20002750

00002bbc <xTaskIncrementTick>:
{
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2bbe:	4b3c      	ldr	r3, [pc, #240]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d167      	bne.n	2c96 <xTaskIncrementTick+0xda>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    2bc6:	4b3a      	ldr	r3, [pc, #232]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2bc8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
    2bca:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    2bcc:	655d      	str	r5, [r3, #84]	; 0x54
		if (xConstTickCount
    2bce:	2d00      	cmp	r5, #0
    2bd0:	d111      	bne.n	2bf6 <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
    2bd2:	4b38      	ldr	r3, [pc, #224]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bd6:	681b      	ldr	r3, [r3, #0]
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d001      	beq.n	2be0 <xTaskIncrementTick+0x24>
    2bdc:	b672      	cpsid	i
    2bde:	e7fe      	b.n	2bde <xTaskIncrementTick+0x22>
    2be0:	4a34      	ldr	r2, [pc, #208]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2be2:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2be4:	4b32      	ldr	r3, [pc, #200]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2be6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2be8:	6290      	str	r0, [r2, #40]	; 0x28
    2bea:	63d9      	str	r1, [r3, #60]	; 0x3c
    2bec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2bee:	3201      	adds	r2, #1
    2bf0:	661a      	str	r2, [r3, #96]	; 0x60
    2bf2:	4b31      	ldr	r3, [pc, #196]	; (2cb8 <xTaskIncrementTick+0xfc>)
    2bf4:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    2bf6:	4b2f      	ldr	r3, [pc, #188]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bfa:	429d      	cmp	r5, r3
    2bfc:	d23f      	bcs.n	2c7e <xTaskIncrementTick+0xc2>
	BaseType_t xSwitchRequired = pdFALSE;
    2bfe:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    2c00:	4b2b      	ldr	r3, [pc, #172]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c06:	0093      	lsls	r3, r2, #2
    2c08:	189b      	adds	r3, r3, r2
    2c0a:	009a      	lsls	r2, r3, #2
    2c0c:	4b29      	ldr	r3, [pc, #164]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2c0e:	189b      	adds	r3, r3, r2
    2c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c12:	2b01      	cmp	r3, #1
    2c14:	d944      	bls.n	2ca0 <xTaskIncrementTick+0xe4>
				xSwitchRequired = pdTRUE;
    2c16:	2401      	movs	r4, #1
    2c18:	e042      	b.n	2ca0 <xTaskIncrementTick+0xe4>
							xSwitchRequired = pdTRUE;
    2c1a:	2401      	movs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2c1c:	4b25      	ldr	r3, [pc, #148]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d02d      	beq.n	2c82 <xTaskIncrementTick+0xc6>
    2c26:	2300      	movs	r3, #0
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d12c      	bne.n	2c86 <xTaskIncrementTick+0xca>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2c2c:	4b21      	ldr	r3, [pc, #132]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c30:	68db      	ldr	r3, [r3, #12]
    2c32:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    2c34:	6873      	ldr	r3, [r6, #4]
					if (xConstTickCount < xItemValue) {
    2c36:	429d      	cmp	r5, r3
    2c38:	d32a      	bcc.n	2c90 <xTaskIncrementTick+0xd4>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2c3a:	1d37      	adds	r7, r6, #4
    2c3c:	0038      	movs	r0, r7
    2c3e:	4b1f      	ldr	r3, [pc, #124]	; (2cbc <xTaskIncrementTick+0x100>)
    2c40:	4798      	blx	r3
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    2c42:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2c44:	2b00      	cmp	r3, #0
    2c46:	d003      	beq.n	2c50 <xTaskIncrementTick+0x94>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    2c48:	0030      	movs	r0, r6
    2c4a:	3018      	adds	r0, #24
    2c4c:	4b1b      	ldr	r3, [pc, #108]	; (2cbc <xTaskIncrementTick+0x100>)
    2c4e:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    2c50:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2c52:	4b17      	ldr	r3, [pc, #92]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2c56:	429a      	cmp	r2, r3
    2c58:	d901      	bls.n	2c5e <xTaskIncrementTick+0xa2>
    2c5a:	4b15      	ldr	r3, [pc, #84]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2c5c:	651a      	str	r2, [r3, #80]	; 0x50
    2c5e:	0093      	lsls	r3, r2, #2
    2c60:	189b      	adds	r3, r3, r2
    2c62:	009a      	lsls	r2, r3, #2
    2c64:	4813      	ldr	r0, [pc, #76]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2c66:	3030      	adds	r0, #48	; 0x30
    2c68:	1880      	adds	r0, r0, r2
    2c6a:	0039      	movs	r1, r7
    2c6c:	4b14      	ldr	r3, [pc, #80]	; (2cc0 <xTaskIncrementTick+0x104>)
    2c6e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2c70:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2c72:	4b0f      	ldr	r3, [pc, #60]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c78:	429a      	cmp	r2, r3
    2c7a:	d2ce      	bcs.n	2c1a <xTaskIncrementTick+0x5e>
    2c7c:	e7ce      	b.n	2c1c <xTaskIncrementTick+0x60>
    2c7e:	2400      	movs	r4, #0
    2c80:	e7cc      	b.n	2c1c <xTaskIncrementTick+0x60>
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2c82:	3301      	adds	r3, #1
    2c84:	e7d0      	b.n	2c28 <xTaskIncrementTick+0x6c>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2c86:	2201      	movs	r2, #1
    2c88:	4252      	negs	r2, r2
    2c8a:	4b0a      	ldr	r3, [pc, #40]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2c8c:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
    2c8e:	e7b7      	b.n	2c00 <xTaskIncrementTick+0x44>
						xNextTaskUnblockTime = xItemValue;
    2c90:	4a08      	ldr	r2, [pc, #32]	; (2cb4 <xTaskIncrementTick+0xf8>)
    2c92:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
    2c94:	e7b4      	b.n	2c00 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
    2c96:	4a06      	ldr	r2, [pc, #24]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2c98:	6e53      	ldr	r3, [r2, #100]	; 0x64
    2c9a:	3301      	adds	r3, #1
    2c9c:	6653      	str	r3, [r2, #100]	; 0x64
	BaseType_t xSwitchRequired = pdFALSE;
    2c9e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    2ca0:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <xTaskIncrementTick+0xf4>)
    2ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d000      	beq.n	2caa <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
    2ca8:	2401      	movs	r4, #1
}
    2caa:	0020      	movs	r0, r4
    2cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	20002750 	.word	0x20002750
    2cb4:	200026d0 	.word	0x200026d0
    2cb8:	0000286d 	.word	0x0000286d
    2cbc:	00001ecd 	.word	0x00001ecd
    2cc0:	00001e85 	.word	0x00001e85

00002cc4 <xTaskResumeAll>:
{
    2cc4:	b570      	push	{r4, r5, r6, lr}
	configASSERT(uxSchedulerSuspended);
    2cc6:	4b32      	ldr	r3, [pc, #200]	; (2d90 <xTaskResumeAll+0xcc>)
    2cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d101      	bne.n	2cd2 <xTaskResumeAll+0xe>
    2cce:	b672      	cpsid	i
    2cd0:	e7fe      	b.n	2cd0 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    2cd2:	4b30      	ldr	r3, [pc, #192]	; (2d94 <xTaskResumeAll+0xd0>)
    2cd4:	4798      	blx	r3
		--uxSchedulerSuspended;
    2cd6:	4b2e      	ldr	r3, [pc, #184]	; (2d90 <xTaskResumeAll+0xcc>)
    2cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    2cda:	3a01      	subs	r2, #1
    2cdc:	659a      	str	r2, [r3, #88]	; 0x58
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d150      	bne.n	2d86 <xTaskResumeAll+0xc2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    2ce4:	4b2a      	ldr	r3, [pc, #168]	; (2d90 <xTaskResumeAll+0xcc>)
    2ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d104      	bne.n	2cf6 <xTaskResumeAll+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
    2cec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    2cee:	4b2a      	ldr	r3, [pc, #168]	; (2d98 <xTaskResumeAll+0xd4>)
    2cf0:	4798      	blx	r3
}
    2cf2:	0020      	movs	r0, r4
    2cf4:	bd70      	pop	{r4, r5, r6, pc}
    2cf6:	2400      	movs	r4, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    2cf8:	4b28      	ldr	r3, [pc, #160]	; (2d9c <xTaskResumeAll+0xd8>)
    2cfa:	695b      	ldr	r3, [r3, #20]
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d023      	beq.n	2d48 <xTaskResumeAll+0x84>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    2d00:	4b26      	ldr	r3, [pc, #152]	; (2d9c <xTaskResumeAll+0xd8>)
    2d02:	6a1b      	ldr	r3, [r3, #32]
    2d04:	68dc      	ldr	r4, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    2d06:	0020      	movs	r0, r4
    2d08:	3018      	adds	r0, #24
    2d0a:	4e25      	ldr	r6, [pc, #148]	; (2da0 <xTaskResumeAll+0xdc>)
    2d0c:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2d0e:	1d25      	adds	r5, r4, #4
    2d10:	0028      	movs	r0, r5
    2d12:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    2d14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2d16:	4b1e      	ldr	r3, [pc, #120]	; (2d90 <xTaskResumeAll+0xcc>)
    2d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2d1a:	429a      	cmp	r2, r3
    2d1c:	d901      	bls.n	2d22 <xTaskResumeAll+0x5e>
    2d1e:	4b1c      	ldr	r3, [pc, #112]	; (2d90 <xTaskResumeAll+0xcc>)
    2d20:	651a      	str	r2, [r3, #80]	; 0x50
    2d22:	0093      	lsls	r3, r2, #2
    2d24:	189b      	adds	r3, r3, r2
    2d26:	009a      	lsls	r2, r3, #2
    2d28:	481c      	ldr	r0, [pc, #112]	; (2d9c <xTaskResumeAll+0xd8>)
    2d2a:	3030      	adds	r0, #48	; 0x30
    2d2c:	1880      	adds	r0, r0, r2
    2d2e:	0029      	movs	r1, r5
    2d30:	4b1c      	ldr	r3, [pc, #112]	; (2da4 <xTaskResumeAll+0xe0>)
    2d32:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2d34:	4b16      	ldr	r3, [pc, #88]	; (2d90 <xTaskResumeAll+0xcc>)
    2d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2d3c:	429a      	cmp	r2, r3
    2d3e:	d3db      	bcc.n	2cf8 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
    2d40:	2201      	movs	r2, #1
    2d42:	4b13      	ldr	r3, [pc, #76]	; (2d90 <xTaskResumeAll+0xcc>)
    2d44:	669a      	str	r2, [r3, #104]	; 0x68
    2d46:	e7d7      	b.n	2cf8 <xTaskResumeAll+0x34>
				if (pxTCB != NULL) {
    2d48:	2c00      	cmp	r4, #0
    2d4a:	d001      	beq.n	2d50 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
    2d4c:	4b16      	ldr	r3, [pc, #88]	; (2da8 <xTaskResumeAll+0xe4>)
    2d4e:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2d50:	4b0f      	ldr	r3, [pc, #60]	; (2d90 <xTaskResumeAll+0xcc>)
    2d52:	6e5c      	ldr	r4, [r3, #100]	; 0x64
					if (uxPendedCounts > (UBaseType_t)0U) {
    2d54:	2c00      	cmp	r4, #0
    2d56:	d10a      	bne.n	2d6e <xTaskResumeAll+0xaa>
				if (xYieldPending != pdFALSE) {
    2d58:	4b0d      	ldr	r3, [pc, #52]	; (2d90 <xTaskResumeAll+0xcc>)
    2d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d014      	beq.n	2d8a <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
    2d60:	4b12      	ldr	r3, [pc, #72]	; (2dac <xTaskResumeAll+0xe8>)
    2d62:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    2d64:	2401      	movs	r4, #1
    2d66:	e7c2      	b.n	2cee <xTaskResumeAll+0x2a>
							--uxPendedCounts;
    2d68:	3c01      	subs	r4, #1
						} while (uxPendedCounts > (UBaseType_t)0U);
    2d6a:	2c00      	cmp	r4, #0
    2d6c:	d007      	beq.n	2d7e <xTaskResumeAll+0xba>
							if (xTaskIncrementTick() != pdFALSE) {
    2d6e:	4b10      	ldr	r3, [pc, #64]	; (2db0 <xTaskResumeAll+0xec>)
    2d70:	4798      	blx	r3
    2d72:	2800      	cmp	r0, #0
    2d74:	d0f8      	beq.n	2d68 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
    2d76:	2201      	movs	r2, #1
    2d78:	4b05      	ldr	r3, [pc, #20]	; (2d90 <xTaskResumeAll+0xcc>)
    2d7a:	669a      	str	r2, [r3, #104]	; 0x68
    2d7c:	e7f4      	b.n	2d68 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
    2d7e:	2200      	movs	r2, #0
    2d80:	4b03      	ldr	r3, [pc, #12]	; (2d90 <xTaskResumeAll+0xcc>)
    2d82:	665a      	str	r2, [r3, #100]	; 0x64
    2d84:	e7e8      	b.n	2d58 <xTaskResumeAll+0x94>
	BaseType_t xAlreadyYielded = pdFALSE;
    2d86:	2400      	movs	r4, #0
    2d88:	e7b1      	b.n	2cee <xTaskResumeAll+0x2a>
    2d8a:	2400      	movs	r4, #0
    2d8c:	e7af      	b.n	2cee <xTaskResumeAll+0x2a>
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	20002750 	.word	0x20002750
    2d94:	00002005 	.word	0x00002005
    2d98:	0000201d 	.word	0x0000201d
    2d9c:	200026d0 	.word	0x200026d0
    2da0:	00001ecd 	.word	0x00001ecd
    2da4:	00001e85 	.word	0x00001e85
    2da8:	0000286d 	.word	0x0000286d
    2dac:	00001fed 	.word	0x00001fed
    2db0:	00002bbd 	.word	0x00002bbd

00002db4 <vTaskSwitchContext>:
{
    2db4:	b510      	push	{r4, lr}
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    2db6:	4b1d      	ldr	r3, [pc, #116]	; (2e2c <vTaskSwitchContext+0x78>)
    2db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d10f      	bne.n	2dde <vTaskSwitchContext+0x2a>
		xYieldPending = pdFALSE;
    2dbe:	4b1b      	ldr	r3, [pc, #108]	; (2e2c <vTaskSwitchContext+0x78>)
    2dc0:	2200      	movs	r2, #0
    2dc2:	669a      	str	r2, [r3, #104]	; 0x68
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2dc6:	009a      	lsls	r2, r3, #2
    2dc8:	18d2      	adds	r2, r2, r3
    2dca:	0091      	lsls	r1, r2, #2
    2dcc:	4a18      	ldr	r2, [pc, #96]	; (2e30 <vTaskSwitchContext+0x7c>)
    2dce:	1852      	adds	r2, r2, r1
    2dd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
    2dd2:	2a00      	cmp	r2, #0
    2dd4:	d109      	bne.n	2dea <vTaskSwitchContext+0x36>
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d005      	beq.n	2de6 <vTaskSwitchContext+0x32>
    2dda:	3b01      	subs	r3, #1
    2ddc:	e7f3      	b.n	2dc6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
    2dde:	2201      	movs	r2, #1
    2de0:	4b12      	ldr	r3, [pc, #72]	; (2e2c <vTaskSwitchContext+0x78>)
    2de2:	669a      	str	r2, [r3, #104]	; 0x68
}
    2de4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2de6:	b672      	cpsid	i
    2de8:	e7fe      	b.n	2de8 <vTaskSwitchContext+0x34>
    2dea:	4a11      	ldr	r2, [pc, #68]	; (2e30 <vTaskSwitchContext+0x7c>)
    2dec:	0099      	lsls	r1, r3, #2
    2dee:	18cc      	adds	r4, r1, r3
    2df0:	00a0      	lsls	r0, r4, #2
    2df2:	1810      	adds	r0, r2, r0
    2df4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    2df6:	6864      	ldr	r4, [r4, #4]
    2df8:	6344      	str	r4, [r0, #52]	; 0x34
    2dfa:	3230      	adds	r2, #48	; 0x30
    2dfc:	18c9      	adds	r1, r1, r3
    2dfe:	0088      	lsls	r0, r1, #2
    2e00:	3008      	adds	r0, #8
    2e02:	1812      	adds	r2, r2, r0
    2e04:	4294      	cmp	r4, r2
    2e06:	d00a      	beq.n	2e1e <vTaskSwitchContext+0x6a>
    2e08:	009a      	lsls	r2, r3, #2
    2e0a:	18d2      	adds	r2, r2, r3
    2e0c:	0091      	lsls	r1, r2, #2
    2e0e:	4a08      	ldr	r2, [pc, #32]	; (2e30 <vTaskSwitchContext+0x7c>)
    2e10:	1852      	adds	r2, r2, r1
    2e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
    2e14:	68d1      	ldr	r1, [r2, #12]
    2e16:	4a05      	ldr	r2, [pc, #20]	; (2e2c <vTaskSwitchContext+0x78>)
    2e18:	6451      	str	r1, [r2, #68]	; 0x44
    2e1a:	6513      	str	r3, [r2, #80]	; 0x50
}
    2e1c:	e7e2      	b.n	2de4 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2e1e:	6860      	ldr	r0, [r4, #4]
    2e20:	0089      	lsls	r1, r1, #2
    2e22:	4a03      	ldr	r2, [pc, #12]	; (2e30 <vTaskSwitchContext+0x7c>)
    2e24:	1852      	adds	r2, r2, r1
    2e26:	6350      	str	r0, [r2, #52]	; 0x34
    2e28:	e7ee      	b.n	2e08 <vTaskSwitchContext+0x54>
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	20002750 	.word	0x20002750
    2e30:	200026d0 	.word	0x200026d0

00002e34 <vTaskPlaceOnEventList>:
{
    2e34:	b510      	push	{r4, lr}
    2e36:	000c      	movs	r4, r1
	configASSERT(pxEventList);
    2e38:	2800      	cmp	r0, #0
    2e3a:	d101      	bne.n	2e40 <vTaskPlaceOnEventList+0xc>
    2e3c:	b672      	cpsid	i
    2e3e:	e7fe      	b.n	2e3e <vTaskPlaceOnEventList+0xa>
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    2e40:	4b04      	ldr	r3, [pc, #16]	; (2e54 <vTaskPlaceOnEventList+0x20>)
    2e42:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2e44:	3118      	adds	r1, #24
    2e46:	4b04      	ldr	r3, [pc, #16]	; (2e58 <vTaskPlaceOnEventList+0x24>)
    2e48:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    2e4a:	2101      	movs	r1, #1
    2e4c:	0020      	movs	r0, r4
    2e4e:	4b03      	ldr	r3, [pc, #12]	; (2e5c <vTaskPlaceOnEventList+0x28>)
    2e50:	4798      	blx	r3
}
    2e52:	bd10      	pop	{r4, pc}
    2e54:	20002750 	.word	0x20002750
    2e58:	00001e9d 	.word	0x00001e9d
    2e5c:	00002a59 	.word	0x00002a59

00002e60 <vTaskPlaceOnEventListRestricted>:
{
    2e60:	b570      	push	{r4, r5, r6, lr}
    2e62:	000c      	movs	r4, r1
    2e64:	0015      	movs	r5, r2
	configASSERT(pxEventList);
    2e66:	2800      	cmp	r0, #0
    2e68:	d00d      	beq.n	2e86 <vTaskPlaceOnEventListRestricted+0x26>
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    2e6a:	4b08      	ldr	r3, [pc, #32]	; (2e8c <vTaskPlaceOnEventListRestricted+0x2c>)
    2e6c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2e6e:	3118      	adds	r1, #24
    2e70:	4b07      	ldr	r3, [pc, #28]	; (2e90 <vTaskPlaceOnEventListRestricted+0x30>)
    2e72:	4798      	blx	r3
	if (xWaitIndefinitely != pdFALSE) {
    2e74:	2d00      	cmp	r5, #0
    2e76:	d001      	beq.n	2e7c <vTaskPlaceOnEventListRestricted+0x1c>
		xTicksToWait = portMAX_DELAY;
    2e78:	2401      	movs	r4, #1
    2e7a:	4264      	negs	r4, r4
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    2e7c:	0029      	movs	r1, r5
    2e7e:	0020      	movs	r0, r4
    2e80:	4b04      	ldr	r3, [pc, #16]	; (2e94 <vTaskPlaceOnEventListRestricted+0x34>)
    2e82:	4798      	blx	r3
}
    2e84:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxEventList);
    2e86:	b672      	cpsid	i
    2e88:	e7fe      	b.n	2e88 <vTaskPlaceOnEventListRestricted+0x28>
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20002750 	.word	0x20002750
    2e90:	00001e85 	.word	0x00001e85
    2e94:	00002a59 	.word	0x00002a59

00002e98 <xTaskRemoveFromEventList>:
{
    2e98:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    2e9a:	68c3      	ldr	r3, [r0, #12]
    2e9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    2e9e:	2c00      	cmp	r4, #0
    2ea0:	d027      	beq.n	2ef2 <xTaskRemoveFromEventList+0x5a>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    2ea2:	0025      	movs	r5, r4
    2ea4:	3518      	adds	r5, #24
    2ea6:	0028      	movs	r0, r5
    2ea8:	4b17      	ldr	r3, [pc, #92]	; (2f08 <xTaskRemoveFromEventList+0x70>)
    2eaa:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2eac:	4b17      	ldr	r3, [pc, #92]	; (2f0c <xTaskRemoveFromEventList+0x74>)
    2eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	d120      	bne.n	2ef6 <xTaskRemoveFromEventList+0x5e>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    2eb4:	1d25      	adds	r5, r4, #4
    2eb6:	0028      	movs	r0, r5
    2eb8:	4b13      	ldr	r3, [pc, #76]	; (2f08 <xTaskRemoveFromEventList+0x70>)
    2eba:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    2ebc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2ebe:	4b13      	ldr	r3, [pc, #76]	; (2f0c <xTaskRemoveFromEventList+0x74>)
    2ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2ec2:	429a      	cmp	r2, r3
    2ec4:	d901      	bls.n	2eca <xTaskRemoveFromEventList+0x32>
    2ec6:	4b11      	ldr	r3, [pc, #68]	; (2f0c <xTaskRemoveFromEventList+0x74>)
    2ec8:	651a      	str	r2, [r3, #80]	; 0x50
    2eca:	0093      	lsls	r3, r2, #2
    2ecc:	189b      	adds	r3, r3, r2
    2ece:	009a      	lsls	r2, r3, #2
    2ed0:	480f      	ldr	r0, [pc, #60]	; (2f10 <xTaskRemoveFromEventList+0x78>)
    2ed2:	3030      	adds	r0, #48	; 0x30
    2ed4:	1880      	adds	r0, r0, r2
    2ed6:	0029      	movs	r1, r5
    2ed8:	4b0e      	ldr	r3, [pc, #56]	; (2f14 <xTaskRemoveFromEventList+0x7c>)
    2eda:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    2edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2ede:	4b0b      	ldr	r3, [pc, #44]	; (2f0c <xTaskRemoveFromEventList+0x74>)
    2ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ee4:	429a      	cmp	r2, r3
    2ee6:	d90c      	bls.n	2f02 <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
    2ee8:	2201      	movs	r2, #1
    2eea:	4b08      	ldr	r3, [pc, #32]	; (2f0c <xTaskRemoveFromEventList+0x74>)
    2eec:	669a      	str	r2, [r3, #104]	; 0x68
		xReturn = pdTRUE;
    2eee:	2001      	movs	r0, #1
}
    2ef0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxUnblockedTCB);
    2ef2:	b672      	cpsid	i
    2ef4:	e7fe      	b.n	2ef4 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    2ef6:	0029      	movs	r1, r5
    2ef8:	4805      	ldr	r0, [pc, #20]	; (2f10 <xTaskRemoveFromEventList+0x78>)
    2efa:	3014      	adds	r0, #20
    2efc:	4b05      	ldr	r3, [pc, #20]	; (2f14 <xTaskRemoveFromEventList+0x7c>)
    2efe:	4798      	blx	r3
    2f00:	e7ec      	b.n	2edc <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
    2f02:	2000      	movs	r0, #0
	return xReturn;
    2f04:	e7f4      	b.n	2ef0 <xTaskRemoveFromEventList+0x58>
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	00001ecd 	.word	0x00001ecd
    2f0c:	20002750 	.word	0x20002750
    2f10:	200026d0 	.word	0x200026d0
    2f14:	00001e85 	.word	0x00001e85

00002f18 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    2f18:	4b02      	ldr	r3, [pc, #8]	; (2f24 <vTaskInternalSetTimeOutState+0xc>)
    2f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2f1c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2f20:	6043      	str	r3, [r0, #4]
}
    2f22:	4770      	bx	lr
    2f24:	20002750 	.word	0x20002750

00002f28 <xTaskCheckForTimeOut>:
{
    2f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f2a:	0005      	movs	r5, r0
    2f2c:	000c      	movs	r4, r1
	configASSERT(pxTimeOut);
    2f2e:	2800      	cmp	r0, #0
    2f30:	d01a      	beq.n	2f68 <xTaskCheckForTimeOut+0x40>
	configASSERT(pxTicksToWait);
    2f32:	2900      	cmp	r1, #0
    2f34:	d01a      	beq.n	2f6c <xTaskCheckForTimeOut+0x44>
	taskENTER_CRITICAL();
    2f36:	4b14      	ldr	r3, [pc, #80]	; (2f88 <xTaskCheckForTimeOut+0x60>)
    2f38:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    2f3a:	4b14      	ldr	r3, [pc, #80]	; (2f8c <xTaskCheckForTimeOut+0x64>)
    2f3c:	6d58      	ldr	r0, [r3, #84]	; 0x54
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2f3e:	6869      	ldr	r1, [r5, #4]
    2f40:	1a42      	subs	r2, r0, r1
		    if (*pxTicksToWait == portMAX_DELAY) {
    2f42:	6823      	ldr	r3, [r4, #0]
    2f44:	1c5e      	adds	r6, r3, #1
    2f46:	d01a      	beq.n	2f7e <xTaskCheckForTimeOut+0x56>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    2f48:	4e10      	ldr	r6, [pc, #64]	; (2f8c <xTaskCheckForTimeOut+0x64>)
    2f4a:	6e36      	ldr	r6, [r6, #96]	; 0x60
    2f4c:	682f      	ldr	r7, [r5, #0]
    2f4e:	42b7      	cmp	r7, r6
    2f50:	d001      	beq.n	2f56 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    2f52:	4288      	cmp	r0, r1
    2f54:	d215      	bcs.n	2f82 <xTaskCheckForTimeOut+0x5a>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    2f56:	429a      	cmp	r2, r3
    2f58:	d30a      	bcc.n	2f70 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait = 0;
    2f5a:	2300      	movs	r3, #0
    2f5c:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    2f5e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    2f60:	4b0b      	ldr	r3, [pc, #44]	; (2f90 <xTaskCheckForTimeOut+0x68>)
    2f62:	4798      	blx	r3
}
    2f64:	0020      	movs	r0, r4
    2f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT(pxTimeOut);
    2f68:	b672      	cpsid	i
    2f6a:	e7fe      	b.n	2f6a <xTaskCheckForTimeOut+0x42>
	configASSERT(pxTicksToWait);
    2f6c:	b672      	cpsid	i
    2f6e:	e7fe      	b.n	2f6e <xTaskCheckForTimeOut+0x46>
			*pxTicksToWait -= xElapsedTime;
    2f70:	1a9b      	subs	r3, r3, r2
    2f72:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    2f74:	0028      	movs	r0, r5
    2f76:	4b07      	ldr	r3, [pc, #28]	; (2f94 <xTaskCheckForTimeOut+0x6c>)
    2f78:	4798      	blx	r3
			xReturn = pdFALSE;
    2f7a:	2400      	movs	r4, #0
    2f7c:	e7f0      	b.n	2f60 <xTaskCheckForTimeOut+0x38>
			xReturn = pdFALSE;
    2f7e:	2400      	movs	r4, #0
    2f80:	e7ee      	b.n	2f60 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
    2f82:	2401      	movs	r4, #1
    2f84:	e7ec      	b.n	2f60 <xTaskCheckForTimeOut+0x38>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	00002005 	.word	0x00002005
    2f8c:	20002750 	.word	0x20002750
    2f90:	0000201d 	.word	0x0000201d
    2f94:	00002f19 	.word	0x00002f19

00002f98 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    2f98:	2201      	movs	r2, #1
    2f9a:	4b01      	ldr	r3, [pc, #4]	; (2fa0 <vTaskMissedYield+0x8>)
    2f9c:	669a      	str	r2, [r3, #104]	; 0x68
}
    2f9e:	4770      	bx	lr
    2fa0:	20002750 	.word	0x20002750

00002fa4 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    2fa4:	4b06      	ldr	r3, [pc, #24]	; (2fc0 <xTaskGetSchedulerState+0x1c>)
    2fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d005      	beq.n	2fb8 <xTaskGetSchedulerState+0x14>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2fac:	4b04      	ldr	r3, [pc, #16]	; (2fc0 <xTaskGetSchedulerState+0x1c>)
    2fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d103      	bne.n	2fbc <xTaskGetSchedulerState+0x18>
			xReturn = taskSCHEDULER_RUNNING;
    2fb4:	2002      	movs	r0, #2
}
    2fb6:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    2fb8:	2001      	movs	r0, #1
    2fba:	e7fc      	b.n	2fb6 <xTaskGetSchedulerState+0x12>
			xReturn = taskSCHEDULER_SUSPENDED;
    2fbc:	2000      	movs	r0, #0
	return xReturn;
    2fbe:	e7fa      	b.n	2fb6 <xTaskGetSchedulerState+0x12>
    2fc0:	20002750 	.word	0x20002750

00002fc4 <xTaskPriorityDisinherit>:
{
    2fc4:	b570      	push	{r4, r5, r6, lr}
    2fc6:	1e04      	subs	r4, r0, #0
	if (pxMutexHolder != NULL) {
    2fc8:	d02c      	beq.n	3024 <xTaskPriorityDisinherit+0x60>
		configASSERT(pxTCB == pxCurrentTCB);
    2fca:	4b19      	ldr	r3, [pc, #100]	; (3030 <xTaskPriorityDisinherit+0x6c>)
    2fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fce:	4298      	cmp	r0, r3
    2fd0:	d001      	beq.n	2fd6 <xTaskPriorityDisinherit+0x12>
    2fd2:	b672      	cpsid	i
    2fd4:	e7fe      	b.n	2fd4 <xTaskPriorityDisinherit+0x10>
		configASSERT(pxTCB->uxMutexesHeld);
    2fd6:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d101      	bne.n	2fe0 <xTaskPriorityDisinherit+0x1c>
    2fdc:	b672      	cpsid	i
    2fde:	e7fe      	b.n	2fde <xTaskPriorityDisinherit+0x1a>
		(pxTCB->uxMutexesHeld)--;
    2fe0:	3b01      	subs	r3, #1
    2fe2:	6483      	str	r3, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    2fe4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2fe6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    2fe8:	428a      	cmp	r2, r1
    2fea:	d01d      	beq.n	3028 <xTaskPriorityDisinherit+0x64>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    2fec:	2b00      	cmp	r3, #0
    2fee:	d11d      	bne.n	302c <xTaskPriorityDisinherit+0x68>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    2ff0:	1d05      	adds	r5, r0, #4
    2ff2:	0028      	movs	r0, r5
    2ff4:	4b0f      	ldr	r3, [pc, #60]	; (3034 <xTaskPriorityDisinherit+0x70>)
    2ff6:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2ff8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2ffa:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    2ffc:	2205      	movs	r2, #5
    2ffe:	1ad2      	subs	r2, r2, r3
    3000:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    3002:	4a0b      	ldr	r2, [pc, #44]	; (3030 <xTaskPriorityDisinherit+0x6c>)
    3004:	6d12      	ldr	r2, [r2, #80]	; 0x50
    3006:	4293      	cmp	r3, r2
    3008:	d901      	bls.n	300e <xTaskPriorityDisinherit+0x4a>
    300a:	4a09      	ldr	r2, [pc, #36]	; (3030 <xTaskPriorityDisinherit+0x6c>)
    300c:	6513      	str	r3, [r2, #80]	; 0x50
    300e:	009a      	lsls	r2, r3, #2
    3010:	18d3      	adds	r3, r2, r3
    3012:	009a      	lsls	r2, r3, #2
    3014:	4808      	ldr	r0, [pc, #32]	; (3038 <xTaskPriorityDisinherit+0x74>)
    3016:	3030      	adds	r0, #48	; 0x30
    3018:	1880      	adds	r0, r0, r2
    301a:	0029      	movs	r1, r5
    301c:	4b07      	ldr	r3, [pc, #28]	; (303c <xTaskPriorityDisinherit+0x78>)
    301e:	4798      	blx	r3
				xReturn = pdTRUE;
    3020:	2001      	movs	r0, #1
}
    3022:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t   xReturn = pdFALSE;
    3024:	2000      	movs	r0, #0
    3026:	e7fc      	b.n	3022 <xTaskPriorityDisinherit+0x5e>
    3028:	2000      	movs	r0, #0
    302a:	e7fa      	b.n	3022 <xTaskPriorityDisinherit+0x5e>
    302c:	2000      	movs	r0, #0
	return xReturn;
    302e:	e7f8      	b.n	3022 <xTaskPriorityDisinherit+0x5e>
    3030:	20002750 	.word	0x20002750
    3034:	00001ecd 	.word	0x00001ecd
    3038:	200026d0 	.word	0x200026d0
    303c:	00001e85 	.word	0x00001e85

00003040 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    3040:	4b06      	ldr	r3, [pc, #24]	; (305c <prvGetNextExpireTime+0x1c>)
    3042:	681a      	ldr	r2, [r3, #0]
    3044:	6813      	ldr	r3, [r2, #0]
    3046:	4259      	negs	r1, r3
    3048:	414b      	adcs	r3, r1
    304a:	6003      	str	r3, [r0, #0]
	if (*pxListWasEmpty == pdFALSE) {
    304c:	2b00      	cmp	r3, #0
    304e:	d102      	bne.n	3056 <prvGetNextExpireTime+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    3050:	68d3      	ldr	r3, [r2, #12]
    3052:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
	}

	return xNextExpireTime;
}
    3054:	4770      	bx	lr
		xNextExpireTime = (TickType_t)0U;
    3056:	2000      	movs	r0, #0
	return xNextExpireTime;
    3058:	e7fc      	b.n	3054 <prvGetNextExpireTime+0x14>
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	200027bc 	.word	0x200027bc

00003060 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    3060:	b510      	push	{r4, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    3062:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    3064:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    3066:	4291      	cmp	r1, r2
    3068:	d80c      	bhi.n	3084 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    306a:	1ad2      	subs	r2, r2, r3
    306c:	6983      	ldr	r3, [r0, #24]
    306e:	429a      	cmp	r2, r3
    3070:	d301      	bcc.n	3076 <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3072:	2001      	movs	r0, #1
    3074:	e010      	b.n	3098 <prvInsertTimerInActiveList+0x38>
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    3076:	1d01      	adds	r1, r0, #4
    3078:	4b09      	ldr	r3, [pc, #36]	; (30a0 <prvInsertTimerInActiveList+0x40>)
    307a:	6858      	ldr	r0, [r3, #4]
    307c:	4b09      	ldr	r3, [pc, #36]	; (30a4 <prvInsertTimerInActiveList+0x44>)
    307e:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    3080:	2000      	movs	r0, #0
    3082:	e009      	b.n	3098 <prvInsertTimerInActiveList+0x38>
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    3084:	429a      	cmp	r2, r3
    3086:	d201      	bcs.n	308c <prvInsertTimerInActiveList+0x2c>
    3088:	4299      	cmp	r1, r3
    308a:	d206      	bcs.n	309a <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    308c:	1d01      	adds	r1, r0, #4
    308e:	4b04      	ldr	r3, [pc, #16]	; (30a0 <prvInsertTimerInActiveList+0x40>)
    3090:	6818      	ldr	r0, [r3, #0]
    3092:	4b04      	ldr	r3, [pc, #16]	; (30a4 <prvInsertTimerInActiveList+0x44>)
    3094:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    3096:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
    3098:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
    309a:	2001      	movs	r0, #1
	return xProcessTimerNow;
    309c:	e7fc      	b.n	3098 <prvInsertTimerInActiveList+0x38>
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	200027bc 	.word	0x200027bc
    30a4:	00001e9d 	.word	0x00001e9d

000030a8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    30a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    30aa:	4b0e      	ldr	r3, [pc, #56]	; (30e4 <prvCheckForValidListAndQueue+0x3c>)
    30ac:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    30ae:	4b0e      	ldr	r3, [pc, #56]	; (30e8 <prvCheckForValidListAndQueue+0x40>)
    30b0:	689b      	ldr	r3, [r3, #8]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d002      	beq.n	30bc <prvCheckForValidListAndQueue+0x14>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    30b6:	4b0d      	ldr	r3, [pc, #52]	; (30ec <prvCheckForValidListAndQueue+0x44>)
    30b8:	4798      	blx	r3
}
    30ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    30bc:	4c0a      	ldr	r4, [pc, #40]	; (30e8 <prvCheckForValidListAndQueue+0x40>)
    30be:	0026      	movs	r6, r4
    30c0:	360c      	adds	r6, #12
    30c2:	0030      	movs	r0, r6
    30c4:	4f0a      	ldr	r7, [pc, #40]	; (30f0 <prvCheckForValidListAndQueue+0x48>)
    30c6:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    30c8:	0025      	movs	r5, r4
    30ca:	3520      	adds	r5, #32
    30cc:	0028      	movs	r0, r5
    30ce:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    30d0:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    30d2:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    30d4:	2200      	movs	r2, #0
    30d6:	210c      	movs	r1, #12
    30d8:	2002      	movs	r0, #2
    30da:	4b06      	ldr	r3, [pc, #24]	; (30f4 <prvCheckForValidListAndQueue+0x4c>)
    30dc:	4798      	blx	r3
    30de:	60a0      	str	r0, [r4, #8]
    30e0:	e7e9      	b.n	30b6 <prvCheckForValidListAndQueue+0xe>
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	00002005 	.word	0x00002005
    30e8:	200027bc 	.word	0x200027bc
    30ec:	0000201d 	.word	0x0000201d
    30f0:	00001e69 	.word	0x00001e69
    30f4:	000023ed 	.word	0x000023ed

000030f8 <xTimerCreateTimerTask>:
{
    30f8:	b510      	push	{r4, lr}
    30fa:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    30fc:	4b0c      	ldr	r3, [pc, #48]	; (3130 <xTimerCreateTimerTask+0x38>)
    30fe:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    3100:	4b0c      	ldr	r3, [pc, #48]	; (3134 <xTimerCreateTimerTask+0x3c>)
    3102:	689b      	ldr	r3, [r3, #8]
    3104:	2b00      	cmp	r3, #0
    3106:	d00e      	beq.n	3126 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(prvTimerTask,
    3108:	4b0a      	ldr	r3, [pc, #40]	; (3134 <xTimerCreateTimerTask+0x3c>)
    310a:	3334      	adds	r3, #52	; 0x34
    310c:	9301      	str	r3, [sp, #4]
    310e:	2302      	movs	r3, #2
    3110:	9300      	str	r3, [sp, #0]
    3112:	2300      	movs	r3, #0
    3114:	2240      	movs	r2, #64	; 0x40
    3116:	4908      	ldr	r1, [pc, #32]	; (3138 <xTimerCreateTimerTask+0x40>)
    3118:	4808      	ldr	r0, [pc, #32]	; (313c <xTimerCreateTimerTask+0x44>)
    311a:	4c09      	ldr	r4, [pc, #36]	; (3140 <xTimerCreateTimerTask+0x48>)
    311c:	47a0      	blx	r4
	configASSERT(xReturn);
    311e:	2800      	cmp	r0, #0
    3120:	d103      	bne.n	312a <xTimerCreateTimerTask+0x32>
    3122:	b672      	cpsid	i
    3124:	e7fe      	b.n	3124 <xTimerCreateTimerTask+0x2c>
	BaseType_t xReturn = pdFAIL;
    3126:	2000      	movs	r0, #0
    3128:	e7f9      	b.n	311e <xTimerCreateTimerTask+0x26>
}
    312a:	b002      	add	sp, #8
    312c:	bd10      	pop	{r4, pc}
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	000030a9 	.word	0x000030a9
    3134:	200027bc 	.word	0x200027bc
    3138:	0000379c 	.word	0x0000379c
    313c:	000033fd 	.word	0x000033fd
    3140:	00002ac9 	.word	0x00002ac9

00003144 <xTimerGenericCommand>:
{
    3144:	b530      	push	{r4, r5, lr}
    3146:	b085      	sub	sp, #20
    3148:	0004      	movs	r4, r0
    314a:	001d      	movs	r5, r3
	configASSERT(xTimer);
    314c:	2800      	cmp	r0, #0
    314e:	d014      	beq.n	317a <xTimerGenericCommand+0x36>
	if (xTimerQueue != NULL) {
    3150:	4b13      	ldr	r3, [pc, #76]	; (31a0 <xTimerGenericCommand+0x5c>)
    3152:	6898      	ldr	r0, [r3, #8]
    3154:	2800      	cmp	r0, #0
    3156:	d021      	beq.n	319c <xTimerGenericCommand+0x58>
		xMessage.xMessageID                       = xCommandID;
    3158:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    315a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    315c:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    315e:	2905      	cmp	r1, #5
    3160:	dc15      	bgt.n	318e <xTimerGenericCommand+0x4a>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    3162:	4b10      	ldr	r3, [pc, #64]	; (31a4 <xTimerGenericCommand+0x60>)
    3164:	4798      	blx	r3
    3166:	2802      	cmp	r0, #2
    3168:	d009      	beq.n	317e <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    316a:	4b0d      	ldr	r3, [pc, #52]	; (31a0 <xTimerGenericCommand+0x5c>)
    316c:	6898      	ldr	r0, [r3, #8]
    316e:	2300      	movs	r3, #0
    3170:	2200      	movs	r2, #0
    3172:	a901      	add	r1, sp, #4
    3174:	4c0c      	ldr	r4, [pc, #48]	; (31a8 <xTimerGenericCommand+0x64>)
    3176:	47a0      	blx	r4
    3178:	e00e      	b.n	3198 <xTimerGenericCommand+0x54>
	configASSERT(xTimer);
    317a:	b672      	cpsid	i
    317c:	e7fe      	b.n	317c <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    317e:	4b08      	ldr	r3, [pc, #32]	; (31a0 <xTimerGenericCommand+0x5c>)
    3180:	6898      	ldr	r0, [r3, #8]
    3182:	2300      	movs	r3, #0
    3184:	9a08      	ldr	r2, [sp, #32]
    3186:	a901      	add	r1, sp, #4
    3188:	4c07      	ldr	r4, [pc, #28]	; (31a8 <xTimerGenericCommand+0x64>)
    318a:	47a0      	blx	r4
    318c:	e004      	b.n	3198 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    318e:	2300      	movs	r3, #0
    3190:	002a      	movs	r2, r5
    3192:	a901      	add	r1, sp, #4
    3194:	4c05      	ldr	r4, [pc, #20]	; (31ac <xTimerGenericCommand+0x68>)
    3196:	47a0      	blx	r4
}
    3198:	b005      	add	sp, #20
    319a:	bd30      	pop	{r4, r5, pc}
	BaseType_t          xReturn = pdFAIL;
    319c:	2000      	movs	r0, #0
	return xReturn;
    319e:	e7fb      	b.n	3198 <xTimerGenericCommand+0x54>
    31a0:	200027bc 	.word	0x200027bc
    31a4:	00002fa5 	.word	0x00002fa5
    31a8:	00002435 	.word	0x00002435
    31ac:	000025c5 	.word	0x000025c5

000031b0 <prvSwitchTimerLists>:
{
    31b0:	b570      	push	{r4, r5, r6, lr}
    31b2:	b082      	sub	sp, #8
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    31b4:	4b17      	ldr	r3, [pc, #92]	; (3214 <prvSwitchTimerLists+0x64>)
    31b6:	681b      	ldr	r3, [r3, #0]
    31b8:	681a      	ldr	r2, [r3, #0]
    31ba:	2a00      	cmp	r2, #0
    31bc:	d023      	beq.n	3206 <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    31be:	68db      	ldr	r3, [r3, #12]
    31c0:	681e      	ldr	r6, [r3, #0]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    31c2:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    31c4:	1d25      	adds	r5, r4, #4
    31c6:	0028      	movs	r0, r5
    31c8:	4b13      	ldr	r3, [pc, #76]	; (3218 <prvSwitchTimerLists+0x68>)
    31ca:	4798      	blx	r3
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    31cc:	0020      	movs	r0, r4
    31ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31d0:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    31d2:	69e3      	ldr	r3, [r4, #28]
    31d4:	2b01      	cmp	r3, #1
    31d6:	d1ed      	bne.n	31b4 <prvSwitchTimerLists+0x4>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    31d8:	69a3      	ldr	r3, [r4, #24]
    31da:	18f3      	adds	r3, r6, r3
			if (xReloadTime > xNextExpireTime) {
    31dc:	429e      	cmp	r6, r3
    31de:	d207      	bcs.n	31f0 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    31e0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    31e2:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    31e4:	4b0b      	ldr	r3, [pc, #44]	; (3214 <prvSwitchTimerLists+0x64>)
    31e6:	6818      	ldr	r0, [r3, #0]
    31e8:	0029      	movs	r1, r5
    31ea:	4b0c      	ldr	r3, [pc, #48]	; (321c <prvSwitchTimerLists+0x6c>)
    31ec:	4798      	blx	r3
    31ee:	e7e1      	b.n	31b4 <prvSwitchTimerLists+0x4>
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    31f0:	2300      	movs	r3, #0
    31f2:	9300      	str	r3, [sp, #0]
    31f4:	0032      	movs	r2, r6
    31f6:	2100      	movs	r1, #0
    31f8:	0020      	movs	r0, r4
    31fa:	4c09      	ldr	r4, [pc, #36]	; (3220 <prvSwitchTimerLists+0x70>)
    31fc:	47a0      	blx	r4
				configASSERT(xResult);
    31fe:	2800      	cmp	r0, #0
    3200:	d1d8      	bne.n	31b4 <prvSwitchTimerLists+0x4>
    3202:	b672      	cpsid	i
    3204:	e7fe      	b.n	3204 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList  = pxOverflowTimerList;
    3206:	4a03      	ldr	r2, [pc, #12]	; (3214 <prvSwitchTimerLists+0x64>)
    3208:	6851      	ldr	r1, [r2, #4]
    320a:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    320c:	6053      	str	r3, [r2, #4]
}
    320e:	b002      	add	sp, #8
    3210:	bd70      	pop	{r4, r5, r6, pc}
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	200027bc 	.word	0x200027bc
    3218:	00001ecd 	.word	0x00001ecd
    321c:	00001e9d 	.word	0x00001e9d
    3220:	00003145 	.word	0x00003145

00003224 <prvSampleTimeNow>:
{
    3224:	b570      	push	{r4, r5, r6, lr}
    3226:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
    3228:	4b08      	ldr	r3, [pc, #32]	; (324c <prvSampleTimeNow+0x28>)
    322a:	4798      	blx	r3
    322c:	0004      	movs	r4, r0
	if (xTimeNow < xLastTime) {
    322e:	4b08      	ldr	r3, [pc, #32]	; (3250 <prvSampleTimeNow+0x2c>)
    3230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3232:	4298      	cmp	r0, r3
    3234:	d305      	bcc.n	3242 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
    3236:	2300      	movs	r3, #0
    3238:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
    323a:	4b05      	ldr	r3, [pc, #20]	; (3250 <prvSampleTimeNow+0x2c>)
    323c:	639c      	str	r4, [r3, #56]	; 0x38
}
    323e:	0020      	movs	r0, r4
    3240:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
    3242:	4b04      	ldr	r3, [pc, #16]	; (3254 <prvSampleTimeNow+0x30>)
    3244:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    3246:	2301      	movs	r3, #1
    3248:	602b      	str	r3, [r5, #0]
    324a:	e7f6      	b.n	323a <prvSampleTimeNow+0x16>
    324c:	00002bb1 	.word	0x00002bb1
    3250:	200027bc 	.word	0x200027bc
    3254:	000031b1 	.word	0x000031b1

00003258 <prvProcessExpiredTimer>:
{
    3258:	b570      	push	{r4, r5, r6, lr}
    325a:	b082      	sub	sp, #8
    325c:	0005      	movs	r5, r0
    325e:	000e      	movs	r6, r1
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    3260:	4b11      	ldr	r3, [pc, #68]	; (32a8 <prvProcessExpiredTimer+0x50>)
    3262:	681b      	ldr	r3, [r3, #0]
    3264:	68db      	ldr	r3, [r3, #12]
    3266:	68dc      	ldr	r4, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    3268:	1d20      	adds	r0, r4, #4
    326a:	4b10      	ldr	r3, [pc, #64]	; (32ac <prvProcessExpiredTimer+0x54>)
    326c:	4798      	blx	r3
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    326e:	69e3      	ldr	r3, [r4, #28]
    3270:	2b01      	cmp	r3, #1
    3272:	d004      	beq.n	327e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    3274:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3276:	0020      	movs	r0, r4
    3278:	4798      	blx	r3
}
    327a:	b002      	add	sp, #8
    327c:	bd70      	pop	{r4, r5, r6, pc}
		if (prvInsertTimerInActiveList(
    327e:	69a3      	ldr	r3, [r4, #24]
    3280:	1959      	adds	r1, r3, r5
    3282:	002b      	movs	r3, r5
    3284:	0032      	movs	r2, r6
    3286:	0020      	movs	r0, r4
    3288:	4e09      	ldr	r6, [pc, #36]	; (32b0 <prvProcessExpiredTimer+0x58>)
    328a:	47b0      	blx	r6
    328c:	2800      	cmp	r0, #0
    328e:	d0f1      	beq.n	3274 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    3290:	2300      	movs	r3, #0
    3292:	9300      	str	r3, [sp, #0]
    3294:	002a      	movs	r2, r5
    3296:	2100      	movs	r1, #0
    3298:	0020      	movs	r0, r4
    329a:	4d06      	ldr	r5, [pc, #24]	; (32b4 <prvProcessExpiredTimer+0x5c>)
    329c:	47a8      	blx	r5
			configASSERT(xResult);
    329e:	2800      	cmp	r0, #0
    32a0:	d1e8      	bne.n	3274 <prvProcessExpiredTimer+0x1c>
    32a2:	b672      	cpsid	i
    32a4:	e7fe      	b.n	32a4 <prvProcessExpiredTimer+0x4c>
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	200027bc 	.word	0x200027bc
    32ac:	00001ecd 	.word	0x00001ecd
    32b0:	00003061 	.word	0x00003061
    32b4:	00003145 	.word	0x00003145

000032b8 <prvProcessTimerOrBlockTask>:
{
    32b8:	b570      	push	{r4, r5, r6, lr}
    32ba:	b082      	sub	sp, #8
    32bc:	0005      	movs	r5, r0
    32be:	000c      	movs	r4, r1
	vTaskSuspendAll();
    32c0:	4b16      	ldr	r3, [pc, #88]	; (331c <prvProcessTimerOrBlockTask+0x64>)
    32c2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    32c4:	a801      	add	r0, sp, #4
    32c6:	4b16      	ldr	r3, [pc, #88]	; (3320 <prvProcessTimerOrBlockTask+0x68>)
    32c8:	4798      	blx	r3
    32ca:	0006      	movs	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    32cc:	9b01      	ldr	r3, [sp, #4]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d121      	bne.n	3316 <prvProcessTimerOrBlockTask+0x5e>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    32d2:	2c00      	cmp	r4, #0
    32d4:	d101      	bne.n	32da <prvProcessTimerOrBlockTask+0x22>
    32d6:	42a8      	cmp	r0, r5
    32d8:	d213      	bcs.n	3302 <prvProcessTimerOrBlockTask+0x4a>
				if (xListWasEmpty != pdFALSE) {
    32da:	2c00      	cmp	r4, #0
    32dc:	d005      	beq.n	32ea <prvProcessTimerOrBlockTask+0x32>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    32de:	4b11      	ldr	r3, [pc, #68]	; (3324 <prvProcessTimerOrBlockTask+0x6c>)
    32e0:	685b      	ldr	r3, [r3, #4]
    32e2:	681c      	ldr	r4, [r3, #0]
    32e4:	4263      	negs	r3, r4
    32e6:	415c      	adcs	r4, r3
    32e8:	b2e4      	uxtb	r4, r4
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    32ea:	1ba9      	subs	r1, r5, r6
    32ec:	4b0d      	ldr	r3, [pc, #52]	; (3324 <prvProcessTimerOrBlockTask+0x6c>)
    32ee:	6898      	ldr	r0, [r3, #8]
    32f0:	0022      	movs	r2, r4
    32f2:	4b0d      	ldr	r3, [pc, #52]	; (3328 <prvProcessTimerOrBlockTask+0x70>)
    32f4:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    32f6:	4b0d      	ldr	r3, [pc, #52]	; (332c <prvProcessTimerOrBlockTask+0x74>)
    32f8:	4798      	blx	r3
    32fa:	2800      	cmp	r0, #0
    32fc:	d008      	beq.n	3310 <prvProcessTimerOrBlockTask+0x58>
}
    32fe:	b002      	add	sp, #8
    3300:	bd70      	pop	{r4, r5, r6, pc}
				(void)xTaskResumeAll();
    3302:	4b0a      	ldr	r3, [pc, #40]	; (332c <prvProcessTimerOrBlockTask+0x74>)
    3304:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    3306:	0031      	movs	r1, r6
    3308:	0028      	movs	r0, r5
    330a:	4b09      	ldr	r3, [pc, #36]	; (3330 <prvProcessTimerOrBlockTask+0x78>)
    330c:	4798      	blx	r3
    330e:	e7f6      	b.n	32fe <prvProcessTimerOrBlockTask+0x46>
					portYIELD_WITHIN_API();
    3310:	4b08      	ldr	r3, [pc, #32]	; (3334 <prvProcessTimerOrBlockTask+0x7c>)
    3312:	4798      	blx	r3
    3314:	e7f3      	b.n	32fe <prvProcessTimerOrBlockTask+0x46>
			(void)xTaskResumeAll();
    3316:	4b05      	ldr	r3, [pc, #20]	; (332c <prvProcessTimerOrBlockTask+0x74>)
    3318:	4798      	blx	r3
}
    331a:	e7f0      	b.n	32fe <prvProcessTimerOrBlockTask+0x46>
    331c:	00002ba1 	.word	0x00002ba1
    3320:	00003225 	.word	0x00003225
    3324:	200027bc 	.word	0x200027bc
    3328:	0000280d 	.word	0x0000280d
    332c:	00002cc5 	.word	0x00002cc5
    3330:	00003259 	.word	0x00003259
    3334:	00001fed 	.word	0x00001fed

00003338 <prvProcessReceivedCommands>:
{
    3338:	b530      	push	{r4, r5, lr}
    333a:	b087      	sub	sp, #28
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    333c:	4b27      	ldr	r3, [pc, #156]	; (33dc <prvProcessReceivedCommands+0xa4>)
    333e:	6898      	ldr	r0, [r3, #8]
    3340:	2200      	movs	r2, #0
    3342:	a903      	add	r1, sp, #12
    3344:	4b26      	ldr	r3, [pc, #152]	; (33e0 <prvProcessReceivedCommands+0xa8>)
    3346:	4798      	blx	r3
    3348:	2800      	cmp	r0, #0
    334a:	d045      	beq.n	33d8 <prvProcessReceivedCommands+0xa0>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    334c:	9b03      	ldr	r3, [sp, #12]
    334e:	2b00      	cmp	r3, #0
    3350:	dbf4      	blt.n	333c <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3352:	9c05      	ldr	r4, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    3354:	6963      	ldr	r3, [r4, #20]
    3356:	2b00      	cmp	r3, #0
    3358:	d002      	beq.n	3360 <prvProcessReceivedCommands+0x28>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    335a:	1d20      	adds	r0, r4, #4
    335c:	4b21      	ldr	r3, [pc, #132]	; (33e4 <prvProcessReceivedCommands+0xac>)
    335e:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    3360:	a802      	add	r0, sp, #8
    3362:	4b21      	ldr	r3, [pc, #132]	; (33e8 <prvProcessReceivedCommands+0xb0>)
    3364:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    3366:	9b03      	ldr	r3, [sp, #12]
    3368:	2b09      	cmp	r3, #9
    336a:	d8e7      	bhi.n	333c <prvProcessReceivedCommands+0x4>
    336c:	009b      	lsls	r3, r3, #2
    336e:	4a1f      	ldr	r2, [pc, #124]	; (33ec <prvProcessReceivedCommands+0xb4>)
    3370:	58d3      	ldr	r3, [r2, r3]
    3372:	469f      	mov	pc, r3
				if (prvInsertTimerInActiveList(pxTimer,
    3374:	9b04      	ldr	r3, [sp, #16]
    3376:	69a2      	ldr	r2, [r4, #24]
    3378:	4694      	mov	ip, r2
    337a:	4463      	add	r3, ip
    337c:	0019      	movs	r1, r3
    337e:	9b04      	ldr	r3, [sp, #16]
    3380:	0002      	movs	r2, r0
    3382:	0020      	movs	r0, r4
    3384:	4d1a      	ldr	r5, [pc, #104]	; (33f0 <prvProcessReceivedCommands+0xb8>)
    3386:	47a8      	blx	r5
    3388:	2800      	cmp	r0, #0
    338a:	d0d7      	beq.n	333c <prvProcessReceivedCommands+0x4>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    338c:	0020      	movs	r0, r4
    338e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3390:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    3392:	69e3      	ldr	r3, [r4, #28]
    3394:	2b01      	cmp	r3, #1
    3396:	d1d1      	bne.n	333c <prvProcessReceivedCommands+0x4>
						xResult = xTimerGenericCommand(pxTimer,
    3398:	9b04      	ldr	r3, [sp, #16]
    339a:	69a1      	ldr	r1, [r4, #24]
    339c:	468c      	mov	ip, r1
    339e:	4463      	add	r3, ip
    33a0:	001a      	movs	r2, r3
    33a2:	2300      	movs	r3, #0
    33a4:	9300      	str	r3, [sp, #0]
    33a6:	2100      	movs	r1, #0
    33a8:	0020      	movs	r0, r4
    33aa:	4c12      	ldr	r4, [pc, #72]	; (33f4 <prvProcessReceivedCommands+0xbc>)
    33ac:	47a0      	blx	r4
						configASSERT(xResult);
    33ae:	2800      	cmp	r0, #0
    33b0:	d1c4      	bne.n	333c <prvProcessReceivedCommands+0x4>
    33b2:	b672      	cpsid	i
    33b4:	e7fe      	b.n	33b4 <prvProcessReceivedCommands+0x7c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    33b6:	9904      	ldr	r1, [sp, #16]
    33b8:	61a1      	str	r1, [r4, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    33ba:	2900      	cmp	r1, #0
    33bc:	d006      	beq.n	33cc <prvProcessReceivedCommands+0x94>
				(void)prvInsertTimerInActiveList(
    33be:	1841      	adds	r1, r0, r1
    33c0:	0003      	movs	r3, r0
    33c2:	0002      	movs	r2, r0
    33c4:	0020      	movs	r0, r4
    33c6:	4c0a      	ldr	r4, [pc, #40]	; (33f0 <prvProcessReceivedCommands+0xb8>)
    33c8:	47a0      	blx	r4
				break;
    33ca:	e7b7      	b.n	333c <prvProcessReceivedCommands+0x4>
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    33cc:	b672      	cpsid	i
    33ce:	e7fe      	b.n	33ce <prvProcessReceivedCommands+0x96>
				vPortFree(pxTimer);
    33d0:	0020      	movs	r0, r4
    33d2:	4b09      	ldr	r3, [pc, #36]	; (33f8 <prvProcessReceivedCommands+0xc0>)
    33d4:	4798      	blx	r3
			break;
    33d6:	e7b1      	b.n	333c <prvProcessReceivedCommands+0x4>
}
    33d8:	b007      	add	sp, #28
    33da:	bd30      	pop	{r4, r5, pc}
    33dc:	200027bc 	.word	0x200027bc
    33e0:	000026b1 	.word	0x000026b1
    33e4:	00001ecd 	.word	0x00001ecd
    33e8:	00003225 	.word	0x00003225
    33ec:	00003774 	.word	0x00003774
    33f0:	00003061 	.word	0x00003061
    33f4:	00003145 	.word	0x00003145
    33f8:	0000212d 	.word	0x0000212d

000033fc <prvTimerTask>:
{
    33fc:	b500      	push	{lr}
    33fe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    3400:	a801      	add	r0, sp, #4
    3402:	4b04      	ldr	r3, [pc, #16]	; (3414 <prvTimerTask+0x18>)
    3404:	4798      	blx	r3
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    3406:	9901      	ldr	r1, [sp, #4]
    3408:	4b03      	ldr	r3, [pc, #12]	; (3418 <prvTimerTask+0x1c>)
    340a:	4798      	blx	r3
		prvProcessReceivedCommands();
    340c:	4b03      	ldr	r3, [pc, #12]	; (341c <prvTimerTask+0x20>)
    340e:	4798      	blx	r3
    3410:	e7f6      	b.n	3400 <prvTimerTask+0x4>
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	00003041 	.word	0x00003041
    3418:	000032b9 	.word	0x000032b9
    341c:	00003339 	.word	0x00003339

00003420 <__ffssi2>:
    3420:	b510      	push	{r4, lr}
    3422:	2300      	movs	r3, #0
    3424:	2800      	cmp	r0, #0
    3426:	d002      	beq.n	342e <__ffssi2+0xe>
    3428:	f000 f804 	bl	3434 <__ctzsi2>
    342c:	1c43      	adds	r3, r0, #1
    342e:	0018      	movs	r0, r3
    3430:	bd10      	pop	{r4, pc}
    3432:	46c0      	nop			; (mov r8, r8)

00003434 <__ctzsi2>:
    3434:	4241      	negs	r1, r0
    3436:	4008      	ands	r0, r1
    3438:	211c      	movs	r1, #28
    343a:	2301      	movs	r3, #1
    343c:	041b      	lsls	r3, r3, #16
    343e:	4298      	cmp	r0, r3
    3440:	d301      	bcc.n	3446 <__ctzsi2+0x12>
    3442:	0c00      	lsrs	r0, r0, #16
    3444:	3910      	subs	r1, #16
    3446:	0a1b      	lsrs	r3, r3, #8
    3448:	4298      	cmp	r0, r3
    344a:	d301      	bcc.n	3450 <__ctzsi2+0x1c>
    344c:	0a00      	lsrs	r0, r0, #8
    344e:	3908      	subs	r1, #8
    3450:	091b      	lsrs	r3, r3, #4
    3452:	4298      	cmp	r0, r3
    3454:	d301      	bcc.n	345a <__ctzsi2+0x26>
    3456:	0900      	lsrs	r0, r0, #4
    3458:	3904      	subs	r1, #4
    345a:	a202      	add	r2, pc, #8	; (adr r2, 3464 <__ctzsi2+0x30>)
    345c:	5c10      	ldrb	r0, [r2, r0]
    345e:	1a40      	subs	r0, r0, r1
    3460:	4770      	bx	lr
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	1d1d1c1b 	.word	0x1d1d1c1b
    3468:	1e1e1e1e 	.word	0x1e1e1e1e
    346c:	1f1f1f1f 	.word	0x1f1f1f1f
    3470:	1f1f1f1f 	.word	0x1f1f1f1f

00003474 <__libc_init_array>:
    3474:	b570      	push	{r4, r5, r6, lr}
    3476:	2600      	movs	r6, #0
    3478:	4d0c      	ldr	r5, [pc, #48]	; (34ac <__libc_init_array+0x38>)
    347a:	4c0d      	ldr	r4, [pc, #52]	; (34b0 <__libc_init_array+0x3c>)
    347c:	1b64      	subs	r4, r4, r5
    347e:	10a4      	asrs	r4, r4, #2
    3480:	42a6      	cmp	r6, r4
    3482:	d109      	bne.n	3498 <__libc_init_array+0x24>
    3484:	2600      	movs	r6, #0
    3486:	f000 f98d 	bl	37a4 <_init>
    348a:	4d0a      	ldr	r5, [pc, #40]	; (34b4 <__libc_init_array+0x40>)
    348c:	4c0a      	ldr	r4, [pc, #40]	; (34b8 <__libc_init_array+0x44>)
    348e:	1b64      	subs	r4, r4, r5
    3490:	10a4      	asrs	r4, r4, #2
    3492:	42a6      	cmp	r6, r4
    3494:	d105      	bne.n	34a2 <__libc_init_array+0x2e>
    3496:	bd70      	pop	{r4, r5, r6, pc}
    3498:	00b3      	lsls	r3, r6, #2
    349a:	58eb      	ldr	r3, [r5, r3]
    349c:	4798      	blx	r3
    349e:	3601      	adds	r6, #1
    34a0:	e7ee      	b.n	3480 <__libc_init_array+0xc>
    34a2:	00b3      	lsls	r3, r6, #2
    34a4:	58eb      	ldr	r3, [r5, r3]
    34a6:	4798      	blx	r3
    34a8:	3601      	adds	r6, #1
    34aa:	e7f2      	b.n	3492 <__libc_init_array+0x1e>
    34ac:	000037b0 	.word	0x000037b0
    34b0:	000037b0 	.word	0x000037b0
    34b4:	000037b0 	.word	0x000037b0
    34b8:	000037b4 	.word	0x000037b4

000034bc <memcpy>:
    34bc:	2300      	movs	r3, #0
    34be:	b510      	push	{r4, lr}
    34c0:	429a      	cmp	r2, r3
    34c2:	d100      	bne.n	34c6 <memcpy+0xa>
    34c4:	bd10      	pop	{r4, pc}
    34c6:	5ccc      	ldrb	r4, [r1, r3]
    34c8:	54c4      	strb	r4, [r0, r3]
    34ca:	3301      	adds	r3, #1
    34cc:	e7f8      	b.n	34c0 <memcpy+0x4>

000034ce <memset>:
    34ce:	0003      	movs	r3, r0
    34d0:	1882      	adds	r2, r0, r2
    34d2:	4293      	cmp	r3, r2
    34d4:	d100      	bne.n	34d8 <memset+0xa>
    34d6:	4770      	bx	lr
    34d8:	7019      	strb	r1, [r3, #0]
    34da:	3301      	adds	r3, #1
    34dc:	e7f9      	b.n	34d2 <memset+0x4>
    34de:	0000      	movs	r0, r0
    34e0:	682f2e2e 	.word	0x682f2e2e
    34e4:	732f6c61 	.word	0x732f6c61
    34e8:	682f6372 	.word	0x682f6372
    34ec:	615f6c61 	.word	0x615f6c61
    34f0:	79735f63 	.word	0x79735f63
    34f4:	632e636e 	.word	0x632e636e
    34f8:	00000000 	.word	0x00000000
    34fc:	682f2e2e 	.word	0x682f2e2e
    3500:	732f6c61 	.word	0x732f6c61
    3504:	682f6372 	.word	0x682f6372
    3508:	615f6c61 	.word	0x615f6c61
    350c:	735f6364 	.word	0x735f6364
    3510:	2e636e79 	.word	0x2e636e79
    3514:	00000063 	.word	0x00000063
    3518:	682f2e2e 	.word	0x682f2e2e
    351c:	732f6c61 	.word	0x732f6c61
    3520:	682f6372 	.word	0x682f6372
    3524:	645f6c61 	.word	0x645f6c61
    3528:	735f6361 	.word	0x735f6361
    352c:	2e636e79 	.word	0x2e636e79
    3530:	00000063 	.word	0x00000063
    3534:	682f2e2e 	.word	0x682f2e2e
    3538:	732f6c61 	.word	0x732f6c61
    353c:	682f6372 	.word	0x682f6372
    3540:	665f6c61 	.word	0x665f6c61
    3544:	6873616c 	.word	0x6873616c
    3548:	0000632e 	.word	0x0000632e
    354c:	682f2e2e 	.word	0x682f2e2e
    3550:	732f6c61 	.word	0x732f6c61
    3554:	682f6372 	.word	0x682f6372
    3558:	695f6c61 	.word	0x695f6c61
    355c:	00632e6f 	.word	0x00632e6f
    3560:	682f2e2e 	.word	0x682f2e2e
    3564:	732f6c61 	.word	0x732f6c61
    3568:	682f6372 	.word	0x682f6372
    356c:	705f6c61 	.word	0x705f6c61
    3570:	632e6d77 	.word	0x632e6d77
    3574:	00000000 	.word	0x00000000
    3578:	682f2e2e 	.word	0x682f2e2e
    357c:	732f6c61 	.word	0x732f6c61
    3580:	682f6372 	.word	0x682f6372
    3584:	735f6c61 	.word	0x735f6c61
    3588:	6d5f6970 	.word	0x6d5f6970
    358c:	6e79735f 	.word	0x6e79735f
    3590:	00632e63 	.word	0x00632e63
    3594:	682f2e2e 	.word	0x682f2e2e
    3598:	732f6c61 	.word	0x732f6c61
    359c:	682f6372 	.word	0x682f6372
    35a0:	745f6c61 	.word	0x745f6c61
    35a4:	72656d69 	.word	0x72656d69
    35a8:	0000632e 	.word	0x0000632e
    35ac:	682f2e2e 	.word	0x682f2e2e
    35b0:	732f6c61 	.word	0x732f6c61
    35b4:	682f6372 	.word	0x682f6372
    35b8:	755f6c61 	.word	0x755f6c61
    35bc:	74726173 	.word	0x74726173
    35c0:	7973615f 	.word	0x7973615f
    35c4:	632e636e 	.word	0x632e636e
    35c8:	00000000 	.word	0x00000000
    35cc:	682f2e2e 	.word	0x682f2e2e
    35d0:	752f6c61 	.word	0x752f6c61
    35d4:	736c6974 	.word	0x736c6974
    35d8:	6372732f 	.word	0x6372732f
    35dc:	6974752f 	.word	0x6974752f
    35e0:	6c5f736c 	.word	0x6c5f736c
    35e4:	2e747369 	.word	0x2e747369
    35e8:	00000063 	.word	0x00000063
    35ec:	682f2e2e 	.word	0x682f2e2e
    35f0:	752f6c61 	.word	0x752f6c61
    35f4:	736c6974 	.word	0x736c6974
    35f8:	6372732f 	.word	0x6372732f
    35fc:	6974752f 	.word	0x6974752f
    3600:	725f736c 	.word	0x725f736c
    3604:	62676e69 	.word	0x62676e69
    3608:	65666675 	.word	0x65666675
    360c:	00632e72 	.word	0x00632e72

00003610 <_cfgs>:
    3610:	42004400 00000016 00000600 00000600     .D.B............
    3620:	00000000 682f2e2e 612f6c70 70682f63     ....../hpl/ac/hp
    3630:	63615f6c 0000632e                       l_ac.c..

00003638 <_adcs>:
    3638:	00000200 00000000 00000000 00000000     ................
	...
    3654:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3664:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    3674:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00003684 <_map>:
    3684:	000000ff ffffffff 682f2e2e 652f6c70     ........../hpl/e
    3694:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    36a4:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    36b4:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....

000036c4 <_usarts>:
    36c4:	00000003 40310004 00030000 0000d8ad     ......1@........

000036d4 <_i2cms>:
	...

000036ec <_i2css>:
	...

000036fc <sercomspi_regs>:
    36fc:	0020000c 00020000 00000000 01000009     .. .............
    370c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    371c:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    372c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    373c:	31646e73 00000000 2e2f2e2e 69616d2f     snd1.....././mai
    374c:	00632e6e 32646e73 00000000 00766372     n.c.snd2....rcv.
    375c:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
    376c:	75250975 00000a0d 00003374 00003374     u.%u....t3..t3..
    377c:	00003374 0000333c 000033b6 000033d0     t3..<3...3...3..
    378c:	00003374 00003374 0000333c 000033b6     t3..t3..<3...3..
    379c:	20726d54 00637653                       Tmr Svc.

000037a4 <_init>:
    37a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    37aa:	bc08      	pop	{r3}
    37ac:	469e      	mov	lr, r3
    37ae:	4770      	bx	lr

000037b0 <__init_array_start>:
    37b0:	000000cd 	.word	0x000000cd

000037b4 <_fini>:
    37b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    37ba:	bc08      	pop	{r3}
    37bc:	469e      	mov	lr, r3
    37be:	4770      	bx	lr

000037c0 <__fini_array_start>:
    37c0:	000000a5 	.word	0x000000a5
