
OP3SAT(1).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000386c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000108  20000000  0000386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002978  20000108  00003974  00020108  2**2
                  ALLOC
  3 .stack        00002000  20002a80  000062ec  00020108  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  6 .debug_info   00035759  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e94  00000000  00000000  000558e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00018169  00000000  00000000  0005b776  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001730  00000000  00000000  000738df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001890  00000000  00000000  0007500f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017e7d  00000000  00000000  0007689f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001bb4f  00000000  00000000  0008e71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068d5c  00000000  00000000  000aa26b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003b98  00000000  00000000  00112fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 4a 00 20 1d 01 00 00 19 01 00 00 19 01 00 00     .J. ............
	...
      2c:	fd 1e 00 00 00 00 00 00 00 00 00 00 b1 1f 00 00     ................
      3c:	f5 1f 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      4c:	19 01 00 00 fd 11 00 00 21 13 00 00 19 01 00 00     ........!.......
      5c:	19 01 00 00 19 01 00 00 19 01 00 00 c5 15 00 00     ................
      6c:	19 01 00 00 19 01 00 00 dd 1b 00 00 f1 1b 00 00     ................
      7c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      8c:	19 01 00 00 19 01 00 00 19 01 00 00 19 01 00 00     ................
      9c:	19 01 00 00 19 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000108 	.word	0x20000108
      c4:	00000000 	.word	0x00000000
      c8:	0000386c 	.word	0x0000386c

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	2000010c 	.word	0x2000010c
      f8:	0000386c 	.word	0x0000386c
      fc:	0000386c 	.word	0x0000386c
     100:	00000000 	.word	0x00000000

00000104 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     104:	b510      	push	{r4, lr}
	system_init();
     106:	4b02      	ldr	r3, [pc, #8]	; (110 <atmel_start_init+0xc>)
     108:	4798      	blx	r3

	touch_init();
     10a:	4b02      	ldr	r3, [pc, #8]	; (114 <atmel_start_init+0x10>)
     10c:	4798      	blx	r3
}
     10e:	bd10      	pop	{r4, pc}
     110:	00000509 	.word	0x00000509
     114:	00001c75 	.word	0x00001c75

00000118 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     118:	e7fe      	b.n	118 <Dummy_Handler>
	...

0000011c <Reset_Handler>:
{
     11c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     11e:	4a12      	ldr	r2, [pc, #72]	; (168 <Reset_Handler+0x4c>)
     120:	4b12      	ldr	r3, [pc, #72]	; (16c <Reset_Handler+0x50>)
     122:	429a      	cmp	r2, r3
     124:	d009      	beq.n	13a <Reset_Handler+0x1e>
     126:	4b11      	ldr	r3, [pc, #68]	; (16c <Reset_Handler+0x50>)
     128:	4a0f      	ldr	r2, [pc, #60]	; (168 <Reset_Handler+0x4c>)
     12a:	e003      	b.n	134 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     12c:	6811      	ldr	r1, [r2, #0]
     12e:	6019      	str	r1, [r3, #0]
     130:	3304      	adds	r3, #4
     132:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     134:	490e      	ldr	r1, [pc, #56]	; (170 <Reset_Handler+0x54>)
     136:	428b      	cmp	r3, r1
     138:	d3f8      	bcc.n	12c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <Reset_Handler+0x58>)
     13c:	e002      	b.n	144 <Reset_Handler+0x28>
                *pDest++ = 0;
     13e:	2200      	movs	r2, #0
     140:	601a      	str	r2, [r3, #0]
     142:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     144:	4a0c      	ldr	r2, [pc, #48]	; (178 <Reset_Handler+0x5c>)
     146:	4293      	cmp	r3, r2
     148:	d3f9      	bcc.n	13e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14a:	4a0c      	ldr	r2, [pc, #48]	; (17c <Reset_Handler+0x60>)
     14c:	21ff      	movs	r1, #255	; 0xff
     14e:	4b0c      	ldr	r3, [pc, #48]	; (180 <Reset_Handler+0x64>)
     150:	438b      	bics	r3, r1
     152:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     154:	4a0b      	ldr	r2, [pc, #44]	; (184 <Reset_Handler+0x68>)
     156:	6851      	ldr	r1, [r2, #4]
     158:	2380      	movs	r3, #128	; 0x80
     15a:	430b      	orrs	r3, r1
     15c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <Reset_Handler+0x6c>)
     160:	4798      	blx	r3
        main();
     162:	4b0a      	ldr	r3, [pc, #40]	; (18c <Reset_Handler+0x70>)
     164:	4798      	blx	r3
     166:	e7fe      	b.n	166 <Reset_Handler+0x4a>
     168:	0000386c 	.word	0x0000386c
     16c:	20000000 	.word	0x20000000
     170:	20000108 	.word	0x20000108
     174:	20000108 	.word	0x20000108
     178:	20002a80 	.word	0x20002a80
     17c:	e000ed00 	.word	0xe000ed00
     180:	00000000 	.word	0x00000000
     184:	41004000 	.word	0x41004000
     188:	00003535 	.word	0x00003535
     18c:	00001c05 	.word	0x00001c05

00000190 <PTC_0_clock_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     190:	4a04      	ldr	r2, [pc, #16]	; (1a4 <PTC_0_clock_init+0x14>)
     192:	6a11      	ldr	r1, [r2, #32]
     194:	2380      	movs	r3, #128	; 0x80
     196:	031b      	lsls	r3, r3, #12
     198:	430b      	orrs	r3, r1
     19a:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     19c:	4a02      	ldr	r2, [pc, #8]	; (1a8 <PTC_0_clock_init+0x18>)
     19e:	4b03      	ldr	r3, [pc, #12]	; (1ac <PTC_0_clock_init+0x1c>)
     1a0:	805a      	strh	r2, [r3, #2]
 */
static void PTC_0_clock_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, PTC);
	_gclk_enable_channel(PTC_GCLK_ID, CONF_GCLK_PTC_SRC);
}
     1a2:	4770      	bx	lr
     1a4:	40000400 	.word	0x40000400
     1a8:	0000401b 	.word	0x0000401b
     1ac:	40000c00 	.word	0x40000c00

000001b0 <TIMER_0_init>:
{
     1b0:	b510      	push	{r4, lr}
     1b2:	4a08      	ldr	r2, [pc, #32]	; (1d4 <TIMER_0_init+0x24>)
     1b4:	6a11      	ldr	r1, [r2, #32]
     1b6:	2380      	movs	r3, #128	; 0x80
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	430b      	orrs	r3, r1
     1bc:	6213      	str	r3, [r2, #32]
     1be:	4a06      	ldr	r2, [pc, #24]	; (1d8 <TIMER_0_init+0x28>)
     1c0:	4b06      	ldr	r3, [pc, #24]	; (1dc <TIMER_0_init+0x2c>)
     1c2:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC1, _tc_get_timer());
     1c4:	4b06      	ldr	r3, [pc, #24]	; (1e0 <TIMER_0_init+0x30>)
     1c6:	4798      	blx	r3
     1c8:	0002      	movs	r2, r0
     1ca:	4906      	ldr	r1, [pc, #24]	; (1e4 <TIMER_0_init+0x34>)
     1cc:	4806      	ldr	r0, [pc, #24]	; (1e8 <TIMER_0_init+0x38>)
     1ce:	4b07      	ldr	r3, [pc, #28]	; (1ec <TIMER_0_init+0x3c>)
     1d0:	4798      	blx	r3
}
     1d2:	bd10      	pop	{r4, pc}
     1d4:	40000400 	.word	0x40000400
     1d8:	00004013 	.word	0x00004013
     1dc:	40000c00 	.word	0x40000c00
     1e0:	00001bd5 	.word	0x00001bd5
     1e4:	42002400 	.word	0x42002400
     1e8:	20002a60 	.word	0x20002a60
     1ec:	00000a09 	.word	0x00000a09

000001f0 <ADC_0_CLOCK_init>:
     1f0:	4a04      	ldr	r2, [pc, #16]	; (204 <ADC_0_CLOCK_init+0x14>)
     1f2:	6a11      	ldr	r1, [r2, #32]
     1f4:	2380      	movs	r3, #128	; 0x80
     1f6:	025b      	lsls	r3, r3, #9
     1f8:	430b      	orrs	r3, r1
     1fa:	6213      	str	r3, [r2, #32]
     1fc:	4a02      	ldr	r2, [pc, #8]	; (208 <ADC_0_CLOCK_init+0x18>)
     1fe:	4b03      	ldr	r3, [pc, #12]	; (20c <ADC_0_CLOCK_init+0x1c>)
     200:	805a      	strh	r2, [r3, #2]
}
     202:	4770      	bx	lr
     204:	40000400 	.word	0x40000400
     208:	00004017 	.word	0x00004017
     20c:	40000c00 	.word	0x40000c00

00000210 <ADC_0_init>:
{
     210:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     212:	4b04      	ldr	r3, [pc, #16]	; (224 <ADC_0_init+0x14>)
     214:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     216:	2200      	movs	r2, #0
     218:	4903      	ldr	r1, [pc, #12]	; (228 <ADC_0_init+0x18>)
     21a:	4804      	ldr	r0, [pc, #16]	; (22c <ADC_0_init+0x1c>)
     21c:	4b04      	ldr	r3, [pc, #16]	; (230 <ADC_0_init+0x20>)
     21e:	4798      	blx	r3
}
     220:	bd10      	pop	{r4, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	000001f1 	.word	0x000001f1
     228:	42004000 	.word	0x42004000
     22c:	20002a38 	.word	0x20002a38
     230:	000005d1 	.word	0x000005d1

00000234 <EXTERNAL_IRQ_0_init>:
{
     234:	b510      	push	{r4, lr}
     236:	4a03      	ldr	r2, [pc, #12]	; (244 <EXTERNAL_IRQ_0_init+0x10>)
     238:	4b03      	ldr	r3, [pc, #12]	; (248 <EXTERNAL_IRQ_0_init+0x14>)
     23a:	805a      	strh	r2, [r3, #2]
	ext_irq_init();
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <EXTERNAL_IRQ_0_init+0x18>)
     23e:	4798      	blx	r3
}
     240:	bd10      	pop	{r4, pc}
     242:	46c0      	nop			; (mov r8, r8)
     244:	00004003 	.word	0x00004003
     248:	40000c00 	.word	0x40000c00
     24c:	000006cd 	.word	0x000006cd

00000250 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     250:	4a02      	ldr	r2, [pc, #8]	; (25c <FLASH_0_CLOCK_init+0xc>)
     252:	69d3      	ldr	r3, [r2, #28]
     254:	2104      	movs	r1, #4
     256:	430b      	orrs	r3, r1
     258:	61d3      	str	r3, [r2, #28]
}
     25a:	4770      	bx	lr
     25c:	40000400 	.word	0x40000400

00000260 <FLASH_0_init>:
{
     260:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     262:	4b03      	ldr	r3, [pc, #12]	; (270 <FLASH_0_init+0x10>)
     264:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     266:	4903      	ldr	r1, [pc, #12]	; (274 <FLASH_0_init+0x14>)
     268:	4803      	ldr	r0, [pc, #12]	; (278 <FLASH_0_init+0x18>)
     26a:	4b04      	ldr	r3, [pc, #16]	; (27c <FLASH_0_init+0x1c>)
     26c:	4798      	blx	r3
}
     26e:	bd10      	pop	{r4, pc}
     270:	00000251 	.word	0x00000251
     274:	41004000 	.word	0x41004000
     278:	20002a18 	.word	0x20002a18
     27c:	00000719 	.word	0x00000719

00000280 <SPI_0_PORT_init>:
{
     280:	b5f0      	push	{r4, r5, r6, r7, lr}
     282:	46ce      	mov	lr, r9
     284:	4647      	mov	r7, r8
     286:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     288:	22c0      	movs	r2, #192	; 0xc0
     28a:	05d2      	lsls	r2, r2, #23
     28c:	2401      	movs	r4, #1
     28e:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     290:	6094      	str	r4, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     292:	4b25      	ldr	r3, [pc, #148]	; (328 <SPI_0_PORT_init+0xa8>)
     294:	4925      	ldr	r1, [pc, #148]	; (32c <SPI_0_PORT_init+0xac>)
     296:	6299      	str	r1, [r3, #40]	; 0x28
     298:	27c0      	movs	r7, #192	; 0xc0
     29a:	063f      	lsls	r7, r7, #24
     29c:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	2040      	movs	r0, #64	; 0x40
     2a0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a2:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a4:	2501      	movs	r5, #1
     2a6:	4329      	orrs	r1, r5
     2a8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2aa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2ac:	2630      	movs	r6, #48	; 0x30
     2ae:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2b0:	3831      	subs	r0, #49	; 0x31
     2b2:	4681      	mov	r9, r0
     2b4:	4381      	bics	r1, r0
     2b6:	4688      	mov	r8, r1
	tmp |= PORT_PMUX_PMUXE(data);
     2b8:	2103      	movs	r1, #3
     2ba:	468c      	mov	ip, r1
     2bc:	4661      	mov	r1, ip
     2be:	4640      	mov	r0, r8
     2c0:	4308      	orrs	r0, r1
     2c2:	b2c1      	uxtb	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2c4:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c6:	2102      	movs	r1, #2
     2c8:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2ca:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2cc:	4918      	ldr	r1, [pc, #96]	; (330 <SPI_0_PORT_init+0xb0>)
     2ce:	6299      	str	r1, [r3, #40]	; 0x28
     2d0:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	2741      	movs	r7, #65	; 0x41
     2d4:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d6:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2d8:	4329      	orrs	r1, r5
     2da:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2dc:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2de:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2e0:	3f32      	subs	r7, #50	; 0x32
     2e2:	4039      	ands	r1, r7
	tmp |= PORT_PMUX_PMUXO(data);
     2e4:	2730      	movs	r7, #48	; 0x30
     2e6:	4339      	orrs	r1, r7
     2e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ea:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2ec:	2180      	movs	r1, #128	; 0x80
     2ee:	02c9      	lsls	r1, r1, #11
     2f0:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2f2:	4a10      	ldr	r2, [pc, #64]	; (334 <SPI_0_PORT_init+0xb4>)
     2f4:	629a      	str	r2, [r3, #40]	; 0x28
     2f6:	4a10      	ldr	r2, [pc, #64]	; (338 <SPI_0_PORT_init+0xb8>)
     2f8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2fa:	2152      	movs	r1, #82	; 0x52
     2fc:	5c5a      	ldrb	r2, [r3, r1]
     2fe:	3e2c      	subs	r6, #44	; 0x2c
     300:	43b2      	bics	r2, r6
     302:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     304:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     306:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     308:	432a      	orrs	r2, r5
     30a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     30e:	3919      	subs	r1, #25
     310:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     312:	4648      	mov	r0, r9
     314:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     316:	2002      	movs	r0, #2
     318:	4302      	orrs	r2, r0
     31a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31c:	545a      	strb	r2, [r3, r1]
}
     31e:	bc0c      	pop	{r2, r3}
     320:	4690      	mov	r8, r2
     322:	4699      	mov	r9, r3
     324:	bdf0      	pop	{r4, r5, r6, r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	41004400 	.word	0x41004400
     32c:	40000001 	.word	0x40000001
     330:	40000002 	.word	0x40000002
     334:	40020000 	.word	0x40020000
     338:	c0020004 	.word	0xc0020004

0000033c <SPI_0_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     33c:	4a04      	ldr	r2, [pc, #16]	; (350 <SPI_0_CLOCK_init+0x14>)
     33e:	6a13      	ldr	r3, [r2, #32]
     340:	2108      	movs	r1, #8
     342:	430b      	orrs	r3, r1
     344:	6213      	str	r3, [r2, #32]
     346:	4a03      	ldr	r2, [pc, #12]	; (354 <SPI_0_CLOCK_init+0x18>)
     348:	4b03      	ldr	r3, [pc, #12]	; (358 <SPI_0_CLOCK_init+0x1c>)
     34a:	805a      	strh	r2, [r3, #2]
}
     34c:	4770      	bx	lr
     34e:	46c0      	nop			; (mov r8, r8)
     350:	40000400 	.word	0x40000400
     354:	0000400e 	.word	0x0000400e
     358:	40000c00 	.word	0x40000c00

0000035c <SPI_0_init>:
{
     35c:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     35e:	4b04      	ldr	r3, [pc, #16]	; (370 <SPI_0_init+0x14>)
     360:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     362:	4904      	ldr	r1, [pc, #16]	; (374 <SPI_0_init+0x18>)
     364:	4804      	ldr	r0, [pc, #16]	; (378 <SPI_0_init+0x1c>)
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <SPI_0_init+0x20>)
     368:	4798      	blx	r3
	SPI_0_PORT_init();
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <SPI_0_init+0x24>)
     36c:	4798      	blx	r3
}
     36e:	bd10      	pop	{r4, pc}
     370:	0000033d 	.word	0x0000033d
     374:	42000c00 	.word	0x42000c00
     378:	20002a48 	.word	0x20002a48
     37c:	00000835 	.word	0x00000835
     380:	00000281 	.word	0x00000281

00000384 <SERIAL_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SERIAL_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2120      	movs	r1, #32
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SERIAL_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SERIAL_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004010 	.word	0x00004010
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SERIAL_PORT_init>:
{
     3a4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a6:	4b0f      	ldr	r3, [pc, #60]	; (3e4 <SERIAL_PORT_init+0x40>)
     3a8:	2258      	movs	r2, #88	; 0x58
     3aa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ac:	2501      	movs	r5, #1
     3ae:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b0:	2401      	movs	r4, #1
     3b2:	4321      	orrs	r1, r4
     3b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b8:	203c      	movs	r0, #60	; 0x3c
     3ba:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3bc:	3a49      	subs	r2, #73	; 0x49
     3be:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c0:	2202      	movs	r2, #2
     3c2:	4311      	orrs	r1, r2
     3c4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	2159      	movs	r1, #89	; 0x59
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	394a      	subs	r1, #74	; 0x4a
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	2120      	movs	r1, #32
     3dc:	430a      	orrs	r2, r1
     3de:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e0:	541a      	strb	r2, [r3, r0]
}
     3e2:	bd30      	pop	{r4, r5, pc}
     3e4:	41004400 	.word	0x41004400

000003e8 <SERIAL_init>:
{
     3e8:	b510      	push	{r4, lr}
     3ea:	b082      	sub	sp, #8
	SERIAL_CLOCK_init();
     3ec:	4b06      	ldr	r3, [pc, #24]	; (408 <SERIAL_init+0x20>)
     3ee:	4798      	blx	r3
	usart_async_init(&SERIAL, SERCOM3, SERIAL_buffer, SERIAL_BUFFER_SIZE, (void *)NULL);
     3f0:	2300      	movs	r3, #0
     3f2:	9300      	str	r3, [sp, #0]
     3f4:	3310      	adds	r3, #16
     3f6:	4a05      	ldr	r2, [pc, #20]	; (40c <SERIAL_init+0x24>)
     3f8:	4905      	ldr	r1, [pc, #20]	; (410 <SERIAL_init+0x28>)
     3fa:	4806      	ldr	r0, [pc, #24]	; (414 <SERIAL_init+0x2c>)
     3fc:	4c06      	ldr	r4, [pc, #24]	; (418 <SERIAL_init+0x30>)
     3fe:	47a0      	blx	r4
	SERIAL_PORT_init();
     400:	4b06      	ldr	r3, [pc, #24]	; (41c <SERIAL_init+0x34>)
     402:	4798      	blx	r3
}
     404:	b002      	add	sp, #8
     406:	bd10      	pop	{r4, pc}
     408:	00000385 	.word	0x00000385
     40c:	20000124 	.word	0x20000124
     410:	42001400 	.word	0x42001400
     414:	200029ac 	.word	0x200029ac
     418:	00000bb9 	.word	0x00000bb9
     41c:	000003a5 	.word	0x000003a5

00000420 <delay_driver_init>:
{
     420:	b510      	push	{r4, lr}
	delay_init(SysTick);
     422:	4802      	ldr	r0, [pc, #8]	; (42c <delay_driver_init+0xc>)
     424:	4b02      	ldr	r3, [pc, #8]	; (430 <delay_driver_init+0x10>)
     426:	4798      	blx	r3
}
     428:	bd10      	pop	{r4, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	e000e010 	.word	0xe000e010
     430:	00000675 	.word	0x00000675

00000434 <PWM_0_CLOCK_init>:
     434:	4a04      	ldr	r2, [pc, #16]	; (448 <PWM_0_CLOCK_init+0x14>)
     436:	6a11      	ldr	r1, [r2, #32]
     438:	2380      	movs	r3, #128	; 0x80
     43a:	005b      	lsls	r3, r3, #1
     43c:	430b      	orrs	r3, r1
     43e:	6213      	str	r3, [r2, #32]
     440:	4a02      	ldr	r2, [pc, #8]	; (44c <PWM_0_CLOCK_init+0x18>)
     442:	4b03      	ldr	r3, [pc, #12]	; (450 <PWM_0_CLOCK_init+0x1c>)
     444:	805a      	strh	r2, [r3, #2]
}
     446:	4770      	bx	lr
     448:	40000400 	.word	0x40000400
     44c:	00004013 	.word	0x00004013
     450:	40000c00 	.word	0x40000c00

00000454 <PWM_0_init>:
{
     454:	b510      	push	{r4, lr}
	PWM_0_CLOCK_init();
     456:	4b05      	ldr	r3, [pc, #20]	; (46c <PWM_0_init+0x18>)
     458:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     45a:	4b05      	ldr	r3, [pc, #20]	; (470 <PWM_0_init+0x1c>)
     45c:	4798      	blx	r3
     45e:	0002      	movs	r2, r0
     460:	4904      	ldr	r1, [pc, #16]	; (474 <PWM_0_init+0x20>)
     462:	4805      	ldr	r0, [pc, #20]	; (478 <PWM_0_init+0x24>)
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <PWM_0_init+0x28>)
     466:	4798      	blx	r3
}
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	00000435 	.word	0x00000435
     470:	00001bd9 	.word	0x00001bd9
     474:	42002000 	.word	0x42002000
     478:	200029fc 	.word	0x200029fc
     47c:	000007ed 	.word	0x000007ed

00000480 <AC_0_CLOCK_init>:
     480:	4a05      	ldr	r2, [pc, #20]	; (498 <AC_0_CLOCK_init+0x18>)
     482:	6a11      	ldr	r1, [r2, #32]
     484:	2380      	movs	r3, #128	; 0x80
     486:	029b      	lsls	r3, r3, #10
     488:	430b      	orrs	r3, r1
     48a:	6213      	str	r3, [r2, #32]
     48c:	4b03      	ldr	r3, [pc, #12]	; (49c <AC_0_CLOCK_init+0x1c>)
     48e:	4a04      	ldr	r2, [pc, #16]	; (4a0 <AC_0_CLOCK_init+0x20>)
     490:	805a      	strh	r2, [r3, #2]
     492:	4a04      	ldr	r2, [pc, #16]	; (4a4 <AC_0_CLOCK_init+0x24>)
     494:	805a      	strh	r2, [r3, #2]
}
     496:	4770      	bx	lr
     498:	40000400 	.word	0x40000400
     49c:	40000c00 	.word	0x40000c00
     4a0:	00004018 	.word	0x00004018
     4a4:	00004019 	.word	0x00004019

000004a8 <AC_0_init>:
{
     4a8:	b510      	push	{r4, lr}
	AC_0_CLOCK_init();
     4aa:	4b03      	ldr	r3, [pc, #12]	; (4b8 <AC_0_init+0x10>)
     4ac:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     4ae:	4903      	ldr	r1, [pc, #12]	; (4bc <AC_0_init+0x14>)
     4b0:	4803      	ldr	r0, [pc, #12]	; (4c0 <AC_0_init+0x18>)
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <AC_0_init+0x1c>)
     4b4:	4798      	blx	r3
}
     4b6:	bd10      	pop	{r4, pc}
     4b8:	00000481 	.word	0x00000481
     4bc:	42004400 	.word	0x42004400
     4c0:	20002a34 	.word	0x20002a34
     4c4:	00000599 	.word	0x00000599

000004c8 <DAC_0_CLOCK_init>:
     4c8:	4a04      	ldr	r2, [pc, #16]	; (4dc <DAC_0_CLOCK_init+0x14>)
     4ca:	6a11      	ldr	r1, [r2, #32]
     4cc:	2380      	movs	r3, #128	; 0x80
     4ce:	02db      	lsls	r3, r3, #11
     4d0:	430b      	orrs	r3, r1
     4d2:	6213      	str	r3, [r2, #32]
     4d4:	4a02      	ldr	r2, [pc, #8]	; (4e0 <DAC_0_CLOCK_init+0x18>)
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <DAC_0_CLOCK_init+0x1c>)
     4d8:	805a      	strh	r2, [r3, #2]
}
     4da:	4770      	bx	lr
     4dc:	40000400 	.word	0x40000400
     4e0:	0000401a 	.word	0x0000401a
     4e4:	40000c00 	.word	0x40000c00

000004e8 <DAC_0_init>:
{
     4e8:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     4ea:	4b03      	ldr	r3, [pc, #12]	; (4f8 <DAC_0_init+0x10>)
     4ec:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     4ee:	4903      	ldr	r1, [pc, #12]	; (4fc <DAC_0_init+0x14>)
     4f0:	4803      	ldr	r0, [pc, #12]	; (500 <DAC_0_init+0x18>)
     4f2:	4b04      	ldr	r3, [pc, #16]	; (504 <DAC_0_init+0x1c>)
     4f4:	4798      	blx	r3
}
     4f6:	bd10      	pop	{r4, pc}
     4f8:	000004c9 	.word	0x000004c9
     4fc:	42004800 	.word	0x42004800
     500:	20002a3c 	.word	0x20002a3c
     504:	00000625 	.word	0x00000625

00000508 <system_init>:

void system_init(void)
{
     508:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     50a:	4b15      	ldr	r3, [pc, #84]	; (560 <system_init+0x58>)
     50c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50e:	22c0      	movs	r2, #192	; 0xc0
     510:	05d2      	lsls	r2, r2, #23
     512:	2180      	movs	r1, #128	; 0x80
     514:	01c9      	lsls	r1, r1, #7
     516:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     518:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51a:	4b12      	ldr	r3, [pc, #72]	; (564 <system_init+0x5c>)
     51c:	4812      	ldr	r0, [pc, #72]	; (568 <system_init+0x60>)
     51e:	6298      	str	r0, [r3, #40]	; 0x28
     520:	20c0      	movs	r0, #192	; 0xc0
     522:	0600      	lsls	r0, r0, #24
     524:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     526:	6151      	str	r1, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     528:	214e      	movs	r1, #78	; 0x4e
     52a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     52c:	2001      	movs	r0, #1
     52e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     530:	545a      	strb	r2, [r3, r1]
	// <true"> High
	0);
	
	gpio_set_pin_function(BLINK, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     532:	4b0e      	ldr	r3, [pc, #56]	; (56c <system_init+0x64>)
     534:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
     536:	4b0e      	ldr	r3, [pc, #56]	; (570 <system_init+0x68>)
     538:	4798      	blx	r3

	FLASH_0_init();
     53a:	4b0e      	ldr	r3, [pc, #56]	; (574 <system_init+0x6c>)
     53c:	4798      	blx	r3

	SPI_0_init();
     53e:	4b0e      	ldr	r3, [pc, #56]	; (578 <system_init+0x70>)
     540:	4798      	blx	r3
	SERIAL_init();
     542:	4b0e      	ldr	r3, [pc, #56]	; (57c <system_init+0x74>)
     544:	4798      	blx	r3

	delay_driver_init();
     546:	4b0e      	ldr	r3, [pc, #56]	; (580 <system_init+0x78>)
     548:	4798      	blx	r3

	PWM_0_init();
     54a:	4b0e      	ldr	r3, [pc, #56]	; (584 <system_init+0x7c>)
     54c:	4798      	blx	r3

	TIMER_0_init();
     54e:	4b0e      	ldr	r3, [pc, #56]	; (588 <system_init+0x80>)
     550:	4798      	blx	r3
	AC_0_init();
     552:	4b0e      	ldr	r3, [pc, #56]	; (58c <system_init+0x84>)
     554:	4798      	blx	r3

	DAC_0_init();
     556:	4b0e      	ldr	r3, [pc, #56]	; (590 <system_init+0x88>)
     558:	4798      	blx	r3

	PTC_0_clock_init();
     55a:	4b0e      	ldr	r3, [pc, #56]	; (594 <system_init+0x8c>)
     55c:	4798      	blx	r3
}
     55e:	bd10      	pop	{r4, pc}
     560:	000010cd 	.word	0x000010cd
     564:	41004400 	.word	0x41004400
     568:	40004000 	.word	0x40004000
     56c:	00000211 	.word	0x00000211
     570:	00000235 	.word	0x00000235
     574:	00000261 	.word	0x00000261
     578:	0000035d 	.word	0x0000035d
     57c:	000003e9 	.word	0x000003e9
     580:	00000421 	.word	0x00000421
     584:	00000455 	.word	0x00000455
     588:	000001b1 	.word	0x000001b1
     58c:	000004a9 	.word	0x000004a9
     590:	000004e9 	.word	0x000004e9
     594:	00000191 	.word	0x00000191

00000598 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	0004      	movs	r4, r0
     59c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     59e:	2800      	cmp	r0, #0
     5a0:	d00d      	beq.n	5be <ac_sync_init+0x26>
     5a2:	2900      	cmp	r1, #0
     5a4:	d009      	beq.n	5ba <ac_sync_init+0x22>
     5a6:	2001      	movs	r0, #1
     5a8:	2231      	movs	r2, #49	; 0x31
     5aa:	4906      	ldr	r1, [pc, #24]	; (5c4 <ac_sync_init+0x2c>)
     5ac:	4b06      	ldr	r3, [pc, #24]	; (5c8 <ac_sync_init+0x30>)
     5ae:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
     5b0:	0029      	movs	r1, r5
     5b2:	0020      	movs	r0, r4
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <ac_sync_init+0x34>)
     5b6:	4798      	blx	r3
}
     5b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5ba:	2000      	movs	r0, #0
     5bc:	e7f4      	b.n	5a8 <ac_sync_init+0x10>
     5be:	2000      	movs	r0, #0
     5c0:	e7f2      	b.n	5a8 <ac_sync_init+0x10>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	000035a0 	.word	0x000035a0
     5c8:	00000cf9 	.word	0x00000cf9
     5cc:	00000f1d 	.word	0x00000f1d

000005d0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5d6:	2800      	cmp	r0, #0
     5d8:	d00d      	beq.n	5f6 <adc_sync_init+0x26>
     5da:	2900      	cmp	r1, #0
     5dc:	d009      	beq.n	5f2 <adc_sync_init+0x22>
     5de:	2001      	movs	r0, #1
     5e0:	2239      	movs	r2, #57	; 0x39
     5e2:	4906      	ldr	r1, [pc, #24]	; (5fc <adc_sync_init+0x2c>)
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <adc_sync_init+0x30>)
     5e6:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     5e8:	0029      	movs	r1, r5
     5ea:	0020      	movs	r0, r4
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <adc_sync_init+0x34>)
     5ee:	4798      	blx	r3
}
     5f0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5f2:	2000      	movs	r0, #0
     5f4:	e7f4      	b.n	5e0 <adc_sync_init+0x10>
     5f6:	2000      	movs	r0, #0
     5f8:	e7f2      	b.n	5e0 <adc_sync_init+0x10>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	000035bc 	.word	0x000035bc
     600:	00000cf9 	.word	0x00000cf9
     604:	00001095 	.word	0x00001095

00000608 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     608:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     60c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     60e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     610:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     614:	4770      	bx	lr

00000616 <atomic_leave_critical>:
     616:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     61a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     61c:	f383 8810 	msr	PRIMASK, r3
}
     620:	4770      	bx	lr
	...

00000624 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0004      	movs	r4, r0
     628:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     62a:	2800      	cmp	r0, #0
     62c:	d010      	beq.n	650 <dac_sync_init+0x2c>
     62e:	2900      	cmp	r1, #0
     630:	d00c      	beq.n	64c <dac_sync_init+0x28>
     632:	2001      	movs	r0, #1
     634:	2232      	movs	r2, #50	; 0x32
     636:	490c      	ldr	r1, [pc, #48]	; (668 <dac_sync_init+0x44>)
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <dac_sync_init+0x48>)
     63a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     63c:	0029      	movs	r1, r5
     63e:	0020      	movs	r0, r4
     640:	4b0b      	ldr	r3, [pc, #44]	; (670 <dac_sync_init+0x4c>)
     642:	4798      	blx	r3
	if (rc) {
     644:	2800      	cmp	r0, #0
     646:	d10e      	bne.n	666 <dac_sync_init+0x42>
     648:	2300      	movs	r3, #0
     64a:	e00a      	b.n	662 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
     64c:	2000      	movs	r0, #0
     64e:	e7f1      	b.n	634 <dac_sync_init+0x10>
     650:	2000      	movs	r0, #0
     652:	e7ef      	b.n	634 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     654:	00da      	lsls	r2, r3, #3
     656:	18a2      	adds	r2, r4, r2
     658:	2100      	movs	r1, #0
     65a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
     65c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
     65e:	3301      	adds	r3, #1
     660:	b2db      	uxtb	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	d0f6      	beq.n	654 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
     666:	bd70      	pop	{r4, r5, r6, pc}
     668:	000035d8 	.word	0x000035d8
     66c:	00000cf9 	.word	0x00000cf9
     670:	00001141 	.word	0x00001141

00000674 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     674:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     676:	4b02      	ldr	r3, [pc, #8]	; (680 <delay_init+0xc>)
     678:	6018      	str	r0, [r3, #0]
     67a:	4b02      	ldr	r3, [pc, #8]	; (684 <delay_init+0x10>)
     67c:	4798      	blx	r3
}
     67e:	bd10      	pop	{r4, pc}
     680:	20000134 	.word	0x20000134
     684:	000018ed 	.word	0x000018ed

00000688 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     688:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     68a:	2501      	movs	r5, #1
     68c:	2400      	movs	r4, #0

	while (upper >= lower) {
     68e:	e007      	b.n	6a0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     690:	4a0d      	ldr	r2, [pc, #52]	; (6c8 <process_ext_irq+0x40>)
     692:	58b3      	ldr	r3, [r6, r2]
     694:	2b00      	cmp	r3, #0
     696:	d000      	beq.n	69a <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     698:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     69a:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     69c:	3a01      	subs	r2, #1
     69e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     6a0:	42ac      	cmp	r4, r5
     6a2:	d8fa      	bhi.n	69a <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     6a4:	192b      	adds	r3, r5, r4
     6a6:	105b      	asrs	r3, r3, #1
     6a8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     6aa:	2a00      	cmp	r2, #0
     6ac:	d1f5      	bne.n	69a <process_ext_irq+0x12>
     6ae:	21ff      	movs	r1, #255	; 0xff
     6b0:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     6b2:	00de      	lsls	r6, r3, #3
     6b4:	4904      	ldr	r1, [pc, #16]	; (6c8 <process_ext_irq+0x40>)
     6b6:	1989      	adds	r1, r1, r6
     6b8:	6849      	ldr	r1, [r1, #4]
     6ba:	4281      	cmp	r1, r0
     6bc:	d0e8      	beq.n	690 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     6be:	d2ed      	bcs.n	69c <process_ext_irq+0x14>
			lower = middle + 1;
     6c0:	3201      	adds	r2, #1
     6c2:	b2d4      	uxtb	r4, r2
     6c4:	e7ec      	b.n	6a0 <process_ext_irq+0x18>
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	20000138 	.word	0x20000138

000006cc <ext_irq_init>:
{
     6cc:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     6ce:	2300      	movs	r3, #0
     6d0:	2b00      	cmp	r3, #0
     6d2:	d003      	beq.n	6dc <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     6d4:	4807      	ldr	r0, [pc, #28]	; (6f4 <ext_irq_init+0x28>)
     6d6:	4b08      	ldr	r3, [pc, #32]	; (6f8 <ext_irq_init+0x2c>)
     6d8:	4798      	blx	r3
}
     6da:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     6dc:	4a07      	ldr	r2, [pc, #28]	; (6fc <ext_irq_init+0x30>)
     6de:	00d9      	lsls	r1, r3, #3
     6e0:	1850      	adds	r0, r2, r1
     6e2:	2401      	movs	r4, #1
     6e4:	4264      	negs	r4, r4
     6e6:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     6e8:	2000      	movs	r0, #0
     6ea:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     6ec:	3301      	adds	r3, #1
     6ee:	b29b      	uxth	r3, r3
     6f0:	e7ee      	b.n	6d0 <ext_irq_init+0x4>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	00000689 	.word	0x00000689
     6f8:	0000116d 	.word	0x0000116d
     6fc:	20000138 	.word	0x20000138

00000700 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     700:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     702:	6943      	ldr	r3, [r0, #20]
     704:	2b00      	cmp	r3, #0
     706:	d000      	beq.n	70a <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     708:	4798      	blx	r3
	}
}
     70a:	bd10      	pop	{r4, pc}

0000070c <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     70c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     70e:	6983      	ldr	r3, [r0, #24]
     710:	2b00      	cmp	r3, #0
     712:	d000      	beq.n	716 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     714:	4798      	blx	r3
	}
}
     716:	bd10      	pop	{r4, pc}

00000718 <flash_init>:
{
     718:	b570      	push	{r4, r5, r6, lr}
     71a:	0004      	movs	r4, r0
     71c:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     71e:	2800      	cmp	r0, #0
     720:	d013      	beq.n	74a <flash_init+0x32>
     722:	2900      	cmp	r1, #0
     724:	d00f      	beq.n	746 <flash_init+0x2e>
     726:	2001      	movs	r0, #1
     728:	2238      	movs	r2, #56	; 0x38
     72a:	4909      	ldr	r1, [pc, #36]	; (750 <flash_init+0x38>)
     72c:	4b09      	ldr	r3, [pc, #36]	; (754 <flash_init+0x3c>)
     72e:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     730:	0029      	movs	r1, r5
     732:	0020      	movs	r0, r4
     734:	4b08      	ldr	r3, [pc, #32]	; (758 <flash_init+0x40>)
     736:	4798      	blx	r3
	if (rc) {
     738:	2800      	cmp	r0, #0
     73a:	d103      	bne.n	744 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     73c:	4b07      	ldr	r3, [pc, #28]	; (75c <flash_init+0x44>)
     73e:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     740:	4b07      	ldr	r3, [pc, #28]	; (760 <flash_init+0x48>)
     742:	6063      	str	r3, [r4, #4]
}
     744:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     746:	2000      	movs	r0, #0
     748:	e7ee      	b.n	728 <flash_init+0x10>
     74a:	2000      	movs	r0, #0
     74c:	e7ec      	b.n	728 <flash_init+0x10>
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000035f4 	.word	0x000035f4
     754:	00000cf9 	.word	0x00000cf9
     758:	000012c1 	.word	0x000012c1
     75c:	00000701 	.word	0x00000701
     760:	0000070d 	.word	0x0000070d

00000764 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     764:	b570      	push	{r4, r5, r6, lr}
     766:	0004      	movs	r4, r0
     768:	000d      	movs	r5, r1
     76a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     76c:	2800      	cmp	r0, #0
     76e:	d00e      	beq.n	78e <io_write+0x2a>
     770:	2900      	cmp	r1, #0
     772:	d00a      	beq.n	78a <io_write+0x26>
     774:	2001      	movs	r0, #1
     776:	2234      	movs	r2, #52	; 0x34
     778:	4906      	ldr	r1, [pc, #24]	; (794 <io_write+0x30>)
     77a:	4b07      	ldr	r3, [pc, #28]	; (798 <io_write+0x34>)
     77c:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     77e:	6823      	ldr	r3, [r4, #0]
     780:	0032      	movs	r2, r6
     782:	0029      	movs	r1, r5
     784:	0020      	movs	r0, r4
     786:	4798      	blx	r3
}
     788:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     78a:	2000      	movs	r0, #0
     78c:	e7f3      	b.n	776 <io_write+0x12>
     78e:	2000      	movs	r0, #0
     790:	e7f1      	b.n	776 <io_write+0x12>
     792:	46c0      	nop			; (mov r8, r8)
     794:	0000360c 	.word	0x0000360c
     798:	00000cf9 	.word	0x00000cf9

0000079c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     79c:	b570      	push	{r4, r5, r6, lr}
     79e:	0004      	movs	r4, r0
     7a0:	000d      	movs	r5, r1
     7a2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     7a4:	2800      	cmp	r0, #0
     7a6:	d00e      	beq.n	7c6 <io_read+0x2a>
     7a8:	2900      	cmp	r1, #0
     7aa:	d00a      	beq.n	7c2 <io_read+0x26>
     7ac:	2001      	movs	r0, #1
     7ae:	223d      	movs	r2, #61	; 0x3d
     7b0:	4906      	ldr	r1, [pc, #24]	; (7cc <io_read+0x30>)
     7b2:	4b07      	ldr	r3, [pc, #28]	; (7d0 <io_read+0x34>)
     7b4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     7b6:	6863      	ldr	r3, [r4, #4]
     7b8:	0032      	movs	r2, r6
     7ba:	0029      	movs	r1, r5
     7bc:	0020      	movs	r0, r4
     7be:	4798      	blx	r3
}
     7c0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     7c2:	2000      	movs	r0, #0
     7c4:	e7f3      	b.n	7ae <io_read+0x12>
     7c6:	2000      	movs	r0, #0
     7c8:	e7f1      	b.n	7ae <io_read+0x12>
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	0000360c 	.word	0x0000360c
     7d0:	00000cf9 	.word	0x00000cf9

000007d4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     7d4:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     7d6:	6943      	ldr	r3, [r0, #20]
     7d8:	2b00      	cmp	r3, #0
     7da:	d000      	beq.n	7de <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     7dc:	4798      	blx	r3
	}
}
     7de:	bd10      	pop	{r4, pc}

000007e0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     7e0:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     7e2:	6983      	ldr	r3, [r0, #24]
     7e4:	2b00      	cmp	r3, #0
     7e6:	d000      	beq.n	7ea <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     7e8:	4798      	blx	r3
	}
}
     7ea:	bd10      	pop	{r4, pc}

000007ec <pwm_init>:
{
     7ec:	b570      	push	{r4, r5, r6, lr}
     7ee:	0004      	movs	r4, r0
     7f0:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     7f2:	2800      	cmp	r0, #0
     7f4:	d012      	beq.n	81c <pwm_init+0x30>
     7f6:	2900      	cmp	r1, #0
     7f8:	d00e      	beq.n	818 <pwm_init+0x2c>
     7fa:	2001      	movs	r0, #1
     7fc:	2233      	movs	r2, #51	; 0x33
     7fe:	4908      	ldr	r1, [pc, #32]	; (820 <pwm_init+0x34>)
     800:	4b08      	ldr	r3, [pc, #32]	; (824 <pwm_init+0x38>)
     802:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     804:	0029      	movs	r1, r5
     806:	0020      	movs	r0, r4
     808:	4b07      	ldr	r3, [pc, #28]	; (828 <pwm_init+0x3c>)
     80a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     80c:	4b07      	ldr	r3, [pc, #28]	; (82c <pwm_init+0x40>)
     80e:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     810:	4b07      	ldr	r3, [pc, #28]	; (830 <pwm_init+0x44>)
     812:	6063      	str	r3, [r4, #4]
}
     814:	2000      	movs	r0, #0
     816:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     818:	2000      	movs	r0, #0
     81a:	e7ef      	b.n	7fc <pwm_init+0x10>
     81c:	2000      	movs	r0, #0
     81e:	e7ed      	b.n	7fc <pwm_init+0x10>
     820:	00003620 	.word	0x00003620
     824:	00000cf9 	.word	0x00000cf9
     828:	00001ae1 	.word	0x00001ae1
     82c:	000007d5 	.word	0x000007d5
     830:	000007e1 	.word	0x000007e1

00000834 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     834:	b570      	push	{r4, r5, r6, lr}
     836:	0004      	movs	r4, r0
     838:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     83a:	2800      	cmp	r0, #0
     83c:	d017      	beq.n	86e <spi_m_sync_init+0x3a>
     83e:	2900      	cmp	r1, #0
     840:	d013      	beq.n	86a <spi_m_sync_init+0x36>
     842:	2001      	movs	r0, #1
     844:	2240      	movs	r2, #64	; 0x40
     846:	490b      	ldr	r1, [pc, #44]	; (874 <spi_m_sync_init+0x40>)
     848:	4b0b      	ldr	r3, [pc, #44]	; (878 <spi_m_sync_init+0x44>)
     84a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     84c:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     84e:	1d20      	adds	r0, r4, #4
     850:	0029      	movs	r1, r5
     852:	4b0a      	ldr	r3, [pc, #40]	; (87c <spi_m_sync_init+0x48>)
     854:	4798      	blx	r3

	if (rc < 0) {
     856:	2800      	cmp	r0, #0
     858:	db06      	blt.n	868 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     85a:	4b09      	ldr	r3, [pc, #36]	; (880 <spi_m_sync_init+0x4c>)
     85c:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     85e:	4b09      	ldr	r3, [pc, #36]	; (884 <spi_m_sync_init+0x50>)
     860:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     862:	4b09      	ldr	r3, [pc, #36]	; (888 <spi_m_sync_init+0x54>)
     864:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     866:	2000      	movs	r0, #0
}
     868:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     86a:	2000      	movs	r0, #0
     86c:	e7ea      	b.n	844 <spi_m_sync_init+0x10>
     86e:	2000      	movs	r0, #0
     870:	e7e8      	b.n	844 <spi_m_sync_init+0x10>
     872:	46c0      	nop			; (mov r8, r8)
     874:	00003638 	.word	0x00003638
     878:	00000cf9 	.word	0x00000cf9
     87c:	000015d9 	.word	0x000015d9
     880:	ffff8000 	.word	0xffff8000
     884:	00000911 	.word	0x00000911
     888:	000008d5 	.word	0x000008d5

0000088c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     88c:	b530      	push	{r4, r5, lr}
     88e:	b087      	sub	sp, #28
     890:	0004      	movs	r4, r0
     892:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     894:	2800      	cmp	r0, #0
     896:	d015      	beq.n	8c4 <spi_m_sync_transfer+0x38>
     898:	2900      	cmp	r1, #0
     89a:	d011      	beq.n	8c0 <spi_m_sync_transfer+0x34>
     89c:	2001      	movs	r0, #1
     89e:	22b3      	movs	r2, #179	; 0xb3
     8a0:	4909      	ldr	r1, [pc, #36]	; (8c8 <spi_m_sync_transfer+0x3c>)
     8a2:	4b0a      	ldr	r3, [pc, #40]	; (8cc <spi_m_sync_transfer+0x40>)
     8a4:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     8a6:	682b      	ldr	r3, [r5, #0]
     8a8:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     8aa:	686b      	ldr	r3, [r5, #4]
     8ac:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     8ae:	68ab      	ldr	r3, [r5, #8]
     8b0:	9301      	str	r3, [sp, #4]
     8b2:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     8b4:	1d20      	adds	r0, r4, #4
     8b6:	a903      	add	r1, sp, #12
     8b8:	4b05      	ldr	r3, [pc, #20]	; (8d0 <spi_m_sync_transfer+0x44>)
     8ba:	4798      	blx	r3
}
     8bc:	b007      	add	sp, #28
     8be:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     8c0:	2000      	movs	r0, #0
     8c2:	e7ec      	b.n	89e <spi_m_sync_transfer+0x12>
     8c4:	2000      	movs	r0, #0
     8c6:	e7ea      	b.n	89e <spi_m_sync_transfer+0x12>
     8c8:	00003638 	.word	0x00003638
     8cc:	00000cf9 	.word	0x00000cf9
     8d0:	00001795 	.word	0x00001795

000008d4 <_spi_m_sync_io_write>:
{
     8d4:	b570      	push	{r4, r5, r6, lr}
     8d6:	b084      	sub	sp, #16
     8d8:	0004      	movs	r4, r0
     8da:	000e      	movs	r6, r1
     8dc:	0015      	movs	r5, r2
	ASSERT(io);
     8de:	1e43      	subs	r3, r0, #1
     8e0:	4198      	sbcs	r0, r3
     8e2:	b2c0      	uxtb	r0, r0
     8e4:	22a3      	movs	r2, #163	; 0xa3
     8e6:	4907      	ldr	r1, [pc, #28]	; (904 <_spi_m_sync_io_write+0x30>)
     8e8:	4b07      	ldr	r3, [pc, #28]	; (908 <_spi_m_sync_io_write+0x34>)
     8ea:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     8ec:	0020      	movs	r0, r4
     8ee:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     8f0:	2300      	movs	r3, #0
     8f2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     8f4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     8f6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     8f8:	a901      	add	r1, sp, #4
     8fa:	4b04      	ldr	r3, [pc, #16]	; (90c <_spi_m_sync_io_write+0x38>)
     8fc:	4798      	blx	r3
}
     8fe:	b004      	add	sp, #16
     900:	bd70      	pop	{r4, r5, r6, pc}
     902:	46c0      	nop			; (mov r8, r8)
     904:	00003638 	.word	0x00003638
     908:	00000cf9 	.word	0x00000cf9
     90c:	0000088d 	.word	0x0000088d

00000910 <_spi_m_sync_io_read>:
{
     910:	b570      	push	{r4, r5, r6, lr}
     912:	b084      	sub	sp, #16
     914:	0004      	movs	r4, r0
     916:	000e      	movs	r6, r1
     918:	0015      	movs	r5, r2
	ASSERT(io);
     91a:	1e43      	subs	r3, r0, #1
     91c:	4198      	sbcs	r0, r3
     91e:	b2c0      	uxtb	r0, r0
     920:	2287      	movs	r2, #135	; 0x87
     922:	4907      	ldr	r1, [pc, #28]	; (940 <_spi_m_sync_io_read+0x30>)
     924:	4b07      	ldr	r3, [pc, #28]	; (944 <_spi_m_sync_io_read+0x34>)
     926:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     928:	0020      	movs	r0, r4
     92a:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     92c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     92e:	2300      	movs	r3, #0
     930:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     932:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     934:	a901      	add	r1, sp, #4
     936:	4b04      	ldr	r3, [pc, #16]	; (948 <_spi_m_sync_io_read+0x38>)
     938:	4798      	blx	r3
}
     93a:	b004      	add	sp, #16
     93c:	bd70      	pop	{r4, r5, r6, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	00003638 	.word	0x00003638
     944:	00000cf9 	.word	0x00000cf9
     948:	0000088d 	.word	0x0000088d

0000094c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     94e:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     950:	2e00      	cmp	r6, #0
     952:	d002      	beq.n	95a <timer_add_timer_task+0xe>
     954:	0033      	movs	r3, r6
     956:	2500      	movs	r5, #0
     958:	e00c      	b.n	974 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     95a:	4b10      	ldr	r3, [pc, #64]	; (99c <timer_add_timer_task+0x50>)
     95c:	4798      	blx	r3
		return;
     95e:	e018      	b.n	992 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     960:	689f      	ldr	r7, [r3, #8]
     962:	46bc      	mov	ip, r7
     964:	4464      	add	r4, ip
     966:	1aa4      	subs	r4, r4, r2
     968:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     96a:	688f      	ldr	r7, [r1, #8]
     96c:	42bc      	cmp	r4, r7
     96e:	d20b      	bcs.n	988 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     970:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     972:	681b      	ldr	r3, [r3, #0]
     974:	2b00      	cmp	r3, #0
     976:	d007      	beq.n	988 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     978:	685c      	ldr	r4, [r3, #4]
     97a:	4294      	cmp	r4, r2
     97c:	d8f0      	bhi.n	960 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     97e:	1aa4      	subs	r4, r4, r2
     980:	689f      	ldr	r7, [r3, #8]
     982:	46bc      	mov	ip, r7
     984:	4464      	add	r4, ip
     986:	e7f0      	b.n	96a <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     988:	42b3      	cmp	r3, r6
     98a:	d003      	beq.n	994 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     98c:	0028      	movs	r0, r5
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <timer_add_timer_task+0x54>)
     990:	4798      	blx	r3
	}
}
     992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     994:	4b01      	ldr	r3, [pc, #4]	; (99c <timer_add_timer_task+0x50>)
     996:	4798      	blx	r3
     998:	e7fb      	b.n	992 <timer_add_timer_task+0x46>
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	00000d19 	.word	0x00000d19
     9a0:	00000d45 	.word	0x00000d45

000009a4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9a6:	0005      	movs	r5, r0
     9a8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     9aa:	6903      	ldr	r3, [r0, #16]
     9ac:	1c5e      	adds	r6, r3, #1
     9ae:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     9b0:	7e03      	ldrb	r3, [r0, #24]
     9b2:	07db      	lsls	r3, r3, #31
     9b4:	d402      	bmi.n	9bc <timer_process_counted+0x18>
     9b6:	7e03      	ldrb	r3, [r0, #24]
     9b8:	079b      	lsls	r3, r3, #30
     9ba:	d50a      	bpl.n	9d2 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     9bc:	7e2b      	ldrb	r3, [r5, #24]
     9be:	2202      	movs	r2, #2
     9c0:	4313      	orrs	r3, r2
     9c2:	b2db      	uxtb	r3, r3
     9c4:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9c8:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     9ca:	68e3      	ldr	r3, [r4, #12]
     9cc:	0020      	movs	r0, r4
     9ce:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     9d0:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     9d2:	2c00      	cmp	r4, #0
     9d4:	d0f7      	beq.n	9c6 <timer_process_counted+0x22>
     9d6:	6863      	ldr	r3, [r4, #4]
     9d8:	1af3      	subs	r3, r6, r3
     9da:	68a2      	ldr	r2, [r4, #8]
     9dc:	4293      	cmp	r3, r2
     9de:	d3f2      	bcc.n	9c6 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     9e0:	002f      	movs	r7, r5
     9e2:	3714      	adds	r7, #20
     9e4:	0038      	movs	r0, r7
     9e6:	4b06      	ldr	r3, [pc, #24]	; (a00 <timer_process_counted+0x5c>)
     9e8:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     9ea:	7c23      	ldrb	r3, [r4, #16]
     9ec:	2b01      	cmp	r3, #1
     9ee:	d1eb      	bne.n	9c8 <timer_process_counted+0x24>
			tmp->time_label = time;
     9f0:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9f2:	0032      	movs	r2, r6
     9f4:	0021      	movs	r1, r4
     9f6:	0038      	movs	r0, r7
     9f8:	4b02      	ldr	r3, [pc, #8]	; (a04 <timer_process_counted+0x60>)
     9fa:	4798      	blx	r3
     9fc:	e7e4      	b.n	9c8 <timer_process_counted+0x24>
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	00000d4d 	.word	0x00000d4d
     a04:	0000094d 	.word	0x0000094d

00000a08 <timer_init>:
{
     a08:	b570      	push	{r4, r5, r6, lr}
     a0a:	0004      	movs	r4, r0
     a0c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     a0e:	2800      	cmp	r0, #0
     a10:	d012      	beq.n	a38 <timer_init+0x30>
     a12:	2900      	cmp	r1, #0
     a14:	d00e      	beq.n	a34 <timer_init+0x2c>
     a16:	2001      	movs	r0, #1
     a18:	223b      	movs	r2, #59	; 0x3b
     a1a:	4908      	ldr	r1, [pc, #32]	; (a3c <timer_init+0x34>)
     a1c:	4b08      	ldr	r3, [pc, #32]	; (a40 <timer_init+0x38>)
     a1e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     a20:	0029      	movs	r1, r5
     a22:	0020      	movs	r0, r4
     a24:	4b07      	ldr	r3, [pc, #28]	; (a44 <timer_init+0x3c>)
     a26:	4798      	blx	r3
	descr->time                           = 0;
     a28:	2300      	movs	r3, #0
     a2a:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     a2c:	4b06      	ldr	r3, [pc, #24]	; (a48 <timer_init+0x40>)
     a2e:	6023      	str	r3, [r4, #0]
}
     a30:	2000      	movs	r0, #0
     a32:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     a34:	2000      	movs	r0, #0
     a36:	e7ef      	b.n	a18 <timer_init+0x10>
     a38:	2000      	movs	r0, #0
     a3a:	e7ed      	b.n	a18 <timer_init+0x10>
     a3c:	00003654 	.word	0x00003654
     a40:	00000cf9 	.word	0x00000cf9
     a44:	000019bd 	.word	0x000019bd
     a48:	000009a5 	.word	0x000009a5

00000a4c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     a4c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a4e:	3808      	subs	r0, #8

	descr->stat = 0;
     a50:	2300      	movs	r3, #0
     a52:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     a54:	6a43      	ldr	r3, [r0, #36]	; 0x24
     a56:	2b00      	cmp	r3, #0
     a58:	d000      	beq.n	a5c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     a5a:	4798      	blx	r3
	}
}
     a5c:	bd10      	pop	{r4, pc}

00000a5e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     a5e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a60:	3808      	subs	r0, #8

	descr->stat = 0;
     a62:	2300      	movs	r3, #0
     a64:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     a66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     a68:	2b00      	cmp	r3, #0
     a6a:	d000      	beq.n	a6e <usart_error+0x10>
		descr->usart_cb.error(descr);
     a6c:	4798      	blx	r3
	}
}
     a6e:	bd10      	pop	{r4, pc}

00000a70 <usart_fill_rx_buffer>:
{
     a70:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a72:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     a74:	302c      	adds	r0, #44	; 0x2c
     a76:	4b04      	ldr	r3, [pc, #16]	; (a88 <usart_fill_rx_buffer+0x18>)
     a78:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     a7a:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     a7c:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     a7e:	2b00      	cmp	r3, #0
     a80:	d001      	beq.n	a86 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     a82:	0020      	movs	r0, r4
     a84:	4798      	blx	r3
}
     a86:	bd10      	pop	{r4, pc}
     a88:	00000df9 	.word	0x00000df9

00000a8c <usart_async_write>:
{
     a8c:	b570      	push	{r4, r5, r6, lr}
     a8e:	0004      	movs	r4, r0
     a90:	000e      	movs	r6, r1
     a92:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     a94:	2800      	cmp	r0, #0
     a96:	d01d      	beq.n	ad4 <usart_async_write+0x48>
     a98:	2900      	cmp	r1, #0
     a9a:	d01d      	beq.n	ad8 <usart_async_write+0x4c>
     a9c:	2a00      	cmp	r2, #0
     a9e:	d11d      	bne.n	adc <usart_async_write+0x50>
     aa0:	2000      	movs	r0, #0
     aa2:	223c      	movs	r2, #60	; 0x3c
     aa4:	32ff      	adds	r2, #255	; 0xff
     aa6:	4910      	ldr	r1, [pc, #64]	; (ae8 <usart_async_write+0x5c>)
     aa8:	4b10      	ldr	r3, [pc, #64]	; (aec <usart_async_write+0x60>)
     aaa:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     aac:	2344      	movs	r3, #68	; 0x44
     aae:	5ae2      	ldrh	r2, [r4, r3]
     ab0:	3308      	adds	r3, #8
     ab2:	5ae3      	ldrh	r3, [r4, r3]
     ab4:	429a      	cmp	r2, r3
     ab6:	d113      	bne.n	ae0 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     ab8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     aba:	234c      	movs	r3, #76	; 0x4c
     abc:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     abe:	2200      	movs	r2, #0
     ac0:	3b08      	subs	r3, #8
     ac2:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     ac4:	3b43      	subs	r3, #67	; 0x43
     ac6:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     ac8:	0020      	movs	r0, r4
     aca:	3008      	adds	r0, #8
     acc:	4b08      	ldr	r3, [pc, #32]	; (af0 <usart_async_write+0x64>)
     ace:	4798      	blx	r3
	return (int32_t)length;
     ad0:	0028      	movs	r0, r5
}
     ad2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     ad4:	2000      	movs	r0, #0
     ad6:	e7e4      	b.n	aa2 <usart_async_write+0x16>
     ad8:	2000      	movs	r0, #0
     ada:	e7e2      	b.n	aa2 <usart_async_write+0x16>
     adc:	2001      	movs	r0, #1
     ade:	e7e0      	b.n	aa2 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     ae0:	201c      	movs	r0, #28
     ae2:	4240      	negs	r0, r0
     ae4:	e7f5      	b.n	ad2 <usart_async_write+0x46>
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	0000366c 	.word	0x0000366c
     aec:	00000cf9 	.word	0x00000cf9
     af0:	00001553 	.word	0x00001553

00000af4 <usart_process_byte_sent>:
{
     af4:	b570      	push	{r4, r5, r6, lr}
     af6:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     af8:	0002      	movs	r2, r0
     afa:	3a08      	subs	r2, #8
     afc:	2344      	movs	r3, #68	; 0x44
     afe:	5ad3      	ldrh	r3, [r2, r3]
     b00:	214c      	movs	r1, #76	; 0x4c
     b02:	5a52      	ldrh	r2, [r2, r1]
     b04:	4293      	cmp	r3, r2
     b06:	d00d      	beq.n	b24 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     b08:	0002      	movs	r2, r0
     b0a:	6c01      	ldr	r1, [r0, #64]	; 0x40
     b0c:	3a08      	subs	r2, #8
     b0e:	1c5d      	adds	r5, r3, #1
     b10:	2044      	movs	r0, #68	; 0x44
     b12:	5215      	strh	r5, [r2, r0]
     b14:	5cc9      	ldrb	r1, [r1, r3]
     b16:	0020      	movs	r0, r4
     b18:	4b04      	ldr	r3, [pc, #16]	; (b2c <usart_process_byte_sent+0x38>)
     b1a:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     b1c:	0020      	movs	r0, r4
     b1e:	4b04      	ldr	r3, [pc, #16]	; (b30 <usart_process_byte_sent+0x3c>)
     b20:	4798      	blx	r3
}
     b22:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     b24:	4b03      	ldr	r3, [pc, #12]	; (b34 <usart_process_byte_sent+0x40>)
     b26:	4798      	blx	r3
}
     b28:	e7fb      	b.n	b22 <usart_process_byte_sent+0x2e>
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	0000154b 	.word	0x0000154b
     b30:	00001553 	.word	0x00001553
     b34:	0000155b 	.word	0x0000155b

00000b38 <usart_async_read>:
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	b085      	sub	sp, #20
     b3c:	0004      	movs	r4, r0
     b3e:	000d      	movs	r5, r1
     b40:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     b42:	2800      	cmp	r0, #0
     b44:	d017      	beq.n	b76 <usart_async_read+0x3e>
     b46:	2900      	cmp	r1, #0
     b48:	d017      	beq.n	b7a <usart_async_read+0x42>
     b4a:	2a00      	cmp	r2, #0
     b4c:	d117      	bne.n	b7e <usart_async_read+0x46>
     b4e:	2000      	movs	r0, #0
     b50:	22ac      	movs	r2, #172	; 0xac
     b52:	0052      	lsls	r2, r2, #1
     b54:	4912      	ldr	r1, [pc, #72]	; (ba0 <usart_async_read+0x68>)
     b56:	4b13      	ldr	r3, [pc, #76]	; (ba4 <usart_async_read+0x6c>)
     b58:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b5a:	a803      	add	r0, sp, #12
     b5c:	4b12      	ldr	r3, [pc, #72]	; (ba8 <usart_async_read+0x70>)
     b5e:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b60:	3434      	adds	r4, #52	; 0x34
     b62:	0020      	movs	r0, r4
     b64:	9401      	str	r4, [sp, #4]
     b66:	4b11      	ldr	r3, [pc, #68]	; (bac <usart_async_read+0x74>)
     b68:	4798      	blx	r3
     b6a:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     b6c:	a803      	add	r0, sp, #12
     b6e:	4b10      	ldr	r3, [pc, #64]	; (bb0 <usart_async_read+0x78>)
     b70:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b72:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     b74:	e00b      	b.n	b8e <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     b76:	2000      	movs	r0, #0
     b78:	e7ea      	b.n	b50 <usart_async_read+0x18>
     b7a:	2000      	movs	r0, #0
     b7c:	e7e8      	b.n	b50 <usart_async_read+0x18>
     b7e:	2001      	movs	r0, #1
     b80:	e7e6      	b.n	b50 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     b82:	3401      	adds	r4, #1
     b84:	b2a4      	uxth	r4, r4
     b86:	1869      	adds	r1, r5, r1
     b88:	9801      	ldr	r0, [sp, #4]
     b8a:	4b0a      	ldr	r3, [pc, #40]	; (bb4 <usart_async_read+0x7c>)
     b8c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b8e:	0021      	movs	r1, r4
     b90:	42a7      	cmp	r7, r4
     b92:	d901      	bls.n	b98 <usart_async_read+0x60>
     b94:	42b4      	cmp	r4, r6
     b96:	d3f4      	bcc.n	b82 <usart_async_read+0x4a>
}
     b98:	0020      	movs	r0, r4
     b9a:	b005      	add	sp, #20
     b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	0000366c 	.word	0x0000366c
     ba4:	00000cf9 	.word	0x00000cf9
     ba8:	00000609 	.word	0x00000609
     bac:	00000e39 	.word	0x00000e39
     bb0:	00000617 	.word	0x00000617
     bb4:	00000dad 	.word	0x00000dad

00000bb8 <usart_async_init>:
{
     bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bba:	0004      	movs	r4, r0
     bbc:	000d      	movs	r5, r1
     bbe:	0016      	movs	r6, r2
     bc0:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     bc2:	2800      	cmp	r0, #0
     bc4:	d026      	beq.n	c14 <usart_async_init+0x5c>
     bc6:	2900      	cmp	r1, #0
     bc8:	d026      	beq.n	c18 <usart_async_init+0x60>
     bca:	2a00      	cmp	r2, #0
     bcc:	d026      	beq.n	c1c <usart_async_init+0x64>
     bce:	2b00      	cmp	r3, #0
     bd0:	d126      	bne.n	c20 <usart_async_init+0x68>
     bd2:	2000      	movs	r0, #0
     bd4:	223a      	movs	r2, #58	; 0x3a
     bd6:	4915      	ldr	r1, [pc, #84]	; (c2c <usart_async_init+0x74>)
     bd8:	4b15      	ldr	r3, [pc, #84]	; (c30 <usart_async_init+0x78>)
     bda:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     bdc:	0020      	movs	r0, r4
     bde:	3034      	adds	r0, #52	; 0x34
     be0:	003a      	movs	r2, r7
     be2:	0031      	movs	r1, r6
     be4:	4b13      	ldr	r3, [pc, #76]	; (c34 <usart_async_init+0x7c>)
     be6:	4798      	blx	r3
     be8:	2800      	cmp	r0, #0
     bea:	d11b      	bne.n	c24 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     bec:	0020      	movs	r0, r4
     bee:	3008      	adds	r0, #8
     bf0:	0029      	movs	r1, r5
     bf2:	4b11      	ldr	r3, [pc, #68]	; (c38 <usart_async_init+0x80>)
     bf4:	4798      	blx	r3
	if (init_status) {
     bf6:	2800      	cmp	r0, #0
     bf8:	d10b      	bne.n	c12 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     bfa:	4b10      	ldr	r3, [pc, #64]	; (c3c <usart_async_init+0x84>)
     bfc:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     bfe:	4b10      	ldr	r3, [pc, #64]	; (c40 <usart_async_init+0x88>)
     c00:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     c02:	4b10      	ldr	r3, [pc, #64]	; (c44 <usart_async_init+0x8c>)
     c04:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     c06:	4b10      	ldr	r3, [pc, #64]	; (c48 <usart_async_init+0x90>)
     c08:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     c0a:	4b10      	ldr	r3, [pc, #64]	; (c4c <usart_async_init+0x94>)
     c0c:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     c0e:	4b10      	ldr	r3, [pc, #64]	; (c50 <usart_async_init+0x98>)
     c10:	6163      	str	r3, [r4, #20]
}
     c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c14:	2000      	movs	r0, #0
     c16:	e7dd      	b.n	bd4 <usart_async_init+0x1c>
     c18:	2000      	movs	r0, #0
     c1a:	e7db      	b.n	bd4 <usart_async_init+0x1c>
     c1c:	2000      	movs	r0, #0
     c1e:	e7d9      	b.n	bd4 <usart_async_init+0x1c>
     c20:	2001      	movs	r0, #1
     c22:	e7d7      	b.n	bd4 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     c24:	200d      	movs	r0, #13
     c26:	4240      	negs	r0, r0
     c28:	e7f3      	b.n	c12 <usart_async_init+0x5a>
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	0000366c 	.word	0x0000366c
     c30:	00000cf9 	.word	0x00000cf9
     c34:	00000d61 	.word	0x00000d61
     c38:	000014ad 	.word	0x000014ad
     c3c:	00000b39 	.word	0x00000b39
     c40:	00000a8d 	.word	0x00000a8d
     c44:	00000af5 	.word	0x00000af5
     c48:	00000a71 	.word	0x00000a71
     c4c:	00000a4d 	.word	0x00000a4d
     c50:	00000a5f 	.word	0x00000a5f

00000c54 <usart_async_enable>:
{
     c54:	b510      	push	{r4, lr}
     c56:	0004      	movs	r4, r0
	ASSERT(descr);
     c58:	1e43      	subs	r3, r0, #1
     c5a:	4198      	sbcs	r0, r3
     c5c:	b2c0      	uxtb	r0, r0
     c5e:	2261      	movs	r2, #97	; 0x61
     c60:	4904      	ldr	r1, [pc, #16]	; (c74 <usart_async_enable+0x20>)
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <usart_async_enable+0x24>)
     c64:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     c66:	0020      	movs	r0, r4
     c68:	3008      	adds	r0, #8
     c6a:	4b04      	ldr	r3, [pc, #16]	; (c7c <usart_async_enable+0x28>)
     c6c:	4798      	blx	r3
}
     c6e:	2000      	movs	r0, #0
     c70:	bd10      	pop	{r4, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	0000366c 	.word	0x0000366c
     c78:	00000cf9 	.word	0x00000cf9
     c7c:	00001539 	.word	0x00001539

00000c80 <usart_async_register_callback>:
{
     c80:	b570      	push	{r4, r5, r6, lr}
     c82:	0005      	movs	r5, r0
     c84:	000e      	movs	r6, r1
     c86:	0014      	movs	r4, r2
	ASSERT(descr);
     c88:	1e43      	subs	r3, r0, #1
     c8a:	4198      	sbcs	r0, r3
     c8c:	b2c0      	uxtb	r0, r0
     c8e:	2283      	movs	r2, #131	; 0x83
     c90:	4916      	ldr	r1, [pc, #88]	; (cec <usart_async_register_callback+0x6c>)
     c92:	4b17      	ldr	r3, [pc, #92]	; (cf0 <usart_async_register_callback+0x70>)
     c94:	4798      	blx	r3
	switch (type) {
     c96:	2e01      	cmp	r6, #1
     c98:	d011      	beq.n	cbe <usart_async_register_callback+0x3e>
     c9a:	2e00      	cmp	r6, #0
     c9c:	d004      	beq.n	ca8 <usart_async_register_callback+0x28>
     c9e:	2e02      	cmp	r6, #2
     ca0:	d018      	beq.n	cd4 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     ca2:	200d      	movs	r0, #13
     ca4:	4240      	negs	r0, r0
     ca6:	e009      	b.n	cbc <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     ca8:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     caa:	1e62      	subs	r2, r4, #1
     cac:	4194      	sbcs	r4, r2
     cae:	b2e2      	uxtb	r2, r4
     cb0:	0028      	movs	r0, r5
     cb2:	3008      	adds	r0, #8
     cb4:	2101      	movs	r1, #1
     cb6:	4b0f      	ldr	r3, [pc, #60]	; (cf4 <usart_async_register_callback+0x74>)
     cb8:	4798      	blx	r3
	return ERR_NONE;
     cba:	2000      	movs	r0, #0
}
     cbc:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     cbe:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     cc0:	1e62      	subs	r2, r4, #1
     cc2:	4194      	sbcs	r4, r2
     cc4:	b2e2      	uxtb	r2, r4
     cc6:	0028      	movs	r0, r5
     cc8:	3008      	adds	r0, #8
     cca:	2102      	movs	r1, #2
     ccc:	4b09      	ldr	r3, [pc, #36]	; (cf4 <usart_async_register_callback+0x74>)
     cce:	4798      	blx	r3
	return ERR_NONE;
     cd0:	2000      	movs	r0, #0
		break;
     cd2:	e7f3      	b.n	cbc <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     cd4:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     cd6:	1e62      	subs	r2, r4, #1
     cd8:	4194      	sbcs	r4, r2
     cda:	b2e2      	uxtb	r2, r4
     cdc:	0028      	movs	r0, r5
     cde:	3008      	adds	r0, #8
     ce0:	2103      	movs	r1, #3
     ce2:	4b04      	ldr	r3, [pc, #16]	; (cf4 <usart_async_register_callback+0x74>)
     ce4:	4798      	blx	r3
	return ERR_NONE;
     ce6:	2000      	movs	r0, #0
		break;
     ce8:	e7e8      	b.n	cbc <usart_async_register_callback+0x3c>
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	0000366c 	.word	0x0000366c
     cf0:	00000cf9 	.word	0x00000cf9
     cf4:	00001565 	.word	0x00001565

00000cf8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     cf8:	2800      	cmp	r0, #0
     cfa:	d100      	bne.n	cfe <assert+0x6>
		__asm("BKPT #0");
     cfc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     cfe:	4770      	bx	lr

00000d00 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     d00:	6803      	ldr	r3, [r0, #0]
     d02:	2b00      	cmp	r3, #0
     d04:	d003      	beq.n	d0e <is_list_element+0xe>
		if (it == element) {
     d06:	428b      	cmp	r3, r1
     d08:	d003      	beq.n	d12 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	e7f9      	b.n	d02 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     d0e:	2000      	movs	r0, #0
}
     d10:	4770      	bx	lr
			return true;
     d12:	2001      	movs	r0, #1
     d14:	e7fc      	b.n	d10 <is_list_element+0x10>
	...

00000d18 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     d18:	b570      	push	{r4, r5, r6, lr}
     d1a:	0004      	movs	r4, r0
     d1c:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     d1e:	4b06      	ldr	r3, [pc, #24]	; (d38 <list_insert_as_head+0x20>)
     d20:	4798      	blx	r3
     d22:	2301      	movs	r3, #1
     d24:	4058      	eors	r0, r3
     d26:	b2c0      	uxtb	r0, r0
     d28:	2239      	movs	r2, #57	; 0x39
     d2a:	4904      	ldr	r1, [pc, #16]	; (d3c <list_insert_as_head+0x24>)
     d2c:	4b04      	ldr	r3, [pc, #16]	; (d40 <list_insert_as_head+0x28>)
     d2e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     d30:	6823      	ldr	r3, [r4, #0]
     d32:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     d34:	6025      	str	r5, [r4, #0]
}
     d36:	bd70      	pop	{r4, r5, r6, pc}
     d38:	00000d01 	.word	0x00000d01
     d3c:	0000368c 	.word	0x0000368c
     d40:	00000cf9 	.word	0x00000cf9

00000d44 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     d44:	6803      	ldr	r3, [r0, #0]
     d46:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     d48:	6001      	str	r1, [r0, #0]
}
     d4a:	4770      	bx	lr

00000d4c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     d4c:	6803      	ldr	r3, [r0, #0]
     d4e:	2b00      	cmp	r3, #0
     d50:	d003      	beq.n	d5a <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     d52:	681a      	ldr	r2, [r3, #0]
     d54:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     d56:	0018      	movs	r0, r3
	}

	return NULL;
}
     d58:	4770      	bx	lr
	return NULL;
     d5a:	2000      	movs	r0, #0
     d5c:	e7fc      	b.n	d58 <list_remove_head+0xc>
	...

00000d60 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     d60:	b570      	push	{r4, r5, r6, lr}
     d62:	0004      	movs	r4, r0
     d64:	000e      	movs	r6, r1
     d66:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     d68:	2800      	cmp	r0, #0
     d6a:	d012      	beq.n	d92 <ringbuffer_init+0x32>
     d6c:	2900      	cmp	r1, #0
     d6e:	d012      	beq.n	d96 <ringbuffer_init+0x36>
     d70:	2a00      	cmp	r2, #0
     d72:	d112      	bne.n	d9a <ringbuffer_init+0x3a>
     d74:	2000      	movs	r0, #0
     d76:	2228      	movs	r2, #40	; 0x28
     d78:	490a      	ldr	r1, [pc, #40]	; (da4 <ringbuffer_init+0x44>)
     d7a:	4b0b      	ldr	r3, [pc, #44]	; (da8 <ringbuffer_init+0x48>)
     d7c:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     d7e:	1e6b      	subs	r3, r5, #1
     d80:	422b      	tst	r3, r5
     d82:	d10c      	bne.n	d9e <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     d84:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     d86:	2300      	movs	r3, #0
     d88:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     d8a:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     d8c:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     d8e:	2000      	movs	r0, #0
}
     d90:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     d92:	2000      	movs	r0, #0
     d94:	e7ef      	b.n	d76 <ringbuffer_init+0x16>
     d96:	2000      	movs	r0, #0
     d98:	e7ed      	b.n	d76 <ringbuffer_init+0x16>
     d9a:	2001      	movs	r0, #1
     d9c:	e7eb      	b.n	d76 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     d9e:	200d      	movs	r0, #13
     da0:	4240      	negs	r0, r0
     da2:	e7f5      	b.n	d90 <ringbuffer_init+0x30>
     da4:	000036ac 	.word	0x000036ac
     da8:	00000cf9 	.word	0x00000cf9

00000dac <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     dac:	b570      	push	{r4, r5, r6, lr}
     dae:	0004      	movs	r4, r0
     db0:	000d      	movs	r5, r1
	ASSERT(rb && data);
     db2:	2800      	cmp	r0, #0
     db4:	d016      	beq.n	de4 <ringbuffer_get+0x38>
     db6:	2900      	cmp	r1, #0
     db8:	d012      	beq.n	de0 <ringbuffer_get+0x34>
     dba:	2001      	movs	r0, #1
     dbc:	2240      	movs	r2, #64	; 0x40
     dbe:	490c      	ldr	r1, [pc, #48]	; (df0 <ringbuffer_get+0x44>)
     dc0:	4b0c      	ldr	r3, [pc, #48]	; (df4 <ringbuffer_get+0x48>)
     dc2:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     dc4:	68a3      	ldr	r3, [r4, #8]
     dc6:	68e2      	ldr	r2, [r4, #12]
     dc8:	429a      	cmp	r2, r3
     dca:	d00d      	beq.n	de8 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     dcc:	6862      	ldr	r2, [r4, #4]
     dce:	4013      	ands	r3, r2
     dd0:	6822      	ldr	r2, [r4, #0]
     dd2:	5cd3      	ldrb	r3, [r2, r3]
     dd4:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     dd6:	68a3      	ldr	r3, [r4, #8]
     dd8:	3301      	adds	r3, #1
     dda:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     ddc:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     dde:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     de0:	2000      	movs	r0, #0
     de2:	e7eb      	b.n	dbc <ringbuffer_get+0x10>
     de4:	2000      	movs	r0, #0
     de6:	e7e9      	b.n	dbc <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     de8:	200a      	movs	r0, #10
     dea:	4240      	negs	r0, r0
     dec:	e7f7      	b.n	dde <ringbuffer_get+0x32>
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	000036ac 	.word	0x000036ac
     df4:	00000cf9 	.word	0x00000cf9

00000df8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     df8:	b570      	push	{r4, r5, r6, lr}
     dfa:	0004      	movs	r4, r0
     dfc:	000d      	movs	r5, r1
	ASSERT(rb);
     dfe:	1e43      	subs	r3, r0, #1
     e00:	4198      	sbcs	r0, r3
     e02:	b2c0      	uxtb	r0, r0
     e04:	2251      	movs	r2, #81	; 0x51
     e06:	490a      	ldr	r1, [pc, #40]	; (e30 <ringbuffer_put+0x38>)
     e08:	4b0a      	ldr	r3, [pc, #40]	; (e34 <ringbuffer_put+0x3c>)
     e0a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     e0c:	6863      	ldr	r3, [r4, #4]
     e0e:	68e2      	ldr	r2, [r4, #12]
     e10:	4013      	ands	r3, r2
     e12:	6822      	ldr	r2, [r4, #0]
     e14:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     e16:	68e3      	ldr	r3, [r4, #12]
     e18:	68a2      	ldr	r2, [r4, #8]
     e1a:	1a9a      	subs	r2, r3, r2
     e1c:	6861      	ldr	r1, [r4, #4]
     e1e:	428a      	cmp	r2, r1
     e20:	d901      	bls.n	e26 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     e22:	1a59      	subs	r1, r3, r1
     e24:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     e26:	3301      	adds	r3, #1
     e28:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     e2a:	2000      	movs	r0, #0
     e2c:	bd70      	pop	{r4, r5, r6, pc}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	000036ac 	.word	0x000036ac
     e34:	00000cf9 	.word	0x00000cf9

00000e38 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     e38:	b510      	push	{r4, lr}
     e3a:	0004      	movs	r4, r0
	ASSERT(rb);
     e3c:	1e43      	subs	r3, r0, #1
     e3e:	4198      	sbcs	r0, r3
     e40:	b2c0      	uxtb	r0, r0
     e42:	2267      	movs	r2, #103	; 0x67
     e44:	4903      	ldr	r1, [pc, #12]	; (e54 <ringbuffer_num+0x1c>)
     e46:	4b04      	ldr	r3, [pc, #16]	; (e58 <ringbuffer_num+0x20>)
     e48:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     e4a:	68e0      	ldr	r0, [r4, #12]
     e4c:	68a3      	ldr	r3, [r4, #8]
     e4e:	1ac0      	subs	r0, r0, r3
}
     e50:	bd10      	pop	{r4, pc}
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	000036ac 	.word	0x000036ac
     e58:	00000cf9 	.word	0x00000cf9

00000e5c <_get_ac_cfg>:
		hri_ac_write_CTRLB_reg(hw, AC_CTRLB_START1);
	}
}

static const struct _ac_cfg *_get_ac_cfg(void *hw)
{
     e5c:	b510      	push	{r4, lr}
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
     e5e:	2300      	movs	r3, #0
     e60:	2b00      	cmp	r3, #0
     e62:	d001      	beq.n	e68 <_get_ac_cfg+0xc>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
     e64:	2000      	movs	r0, #0
}
     e66:	bd10      	pop	{r4, pc}
		if (_cfgs[i].hw == hw) {
     e68:	009a      	lsls	r2, r3, #2
     e6a:	18d2      	adds	r2, r2, r3
     e6c:	0091      	lsls	r1, r2, #2
     e6e:	4a05      	ldr	r2, [pc, #20]	; (e84 <_get_ac_cfg+0x28>)
     e70:	588a      	ldr	r2, [r1, r2]
     e72:	4282      	cmp	r2, r0
     e74:	d002      	beq.n	e7c <_get_ac_cfg+0x20>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
     e76:	3301      	adds	r3, #1
     e78:	b2db      	uxtb	r3, r3
     e7a:	e7f1      	b.n	e60 <_get_ac_cfg+0x4>
			return &(_cfgs[i]);
     e7c:	4801      	ldr	r0, [pc, #4]	; (e84 <_get_ac_cfg+0x28>)
     e7e:	1840      	adds	r0, r0, r1
     e80:	e7f1      	b.n	e66 <_get_ac_cfg+0xa>
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	000036d0 	.word	0x000036d0

00000e88 <_ac_init>:
{
     e88:	b510      	push	{r4, lr}
     e8a:	0004      	movs	r4, r0
	ASSERT(hw);
     e8c:	1e43      	subs	r3, r0, #1
     e8e:	4198      	sbcs	r0, r3
     e90:	b2c0      	uxtb	r0, r0
     e92:	22fa      	movs	r2, #250	; 0xfa
     e94:	491e      	ldr	r1, [pc, #120]	; (f10 <_ac_init+0x88>)
     e96:	4b1f      	ldr	r3, [pc, #124]	; (f14 <_ac_init+0x8c>)
     e98:	4798      	blx	r3
	const struct _ac_cfg *cfg = _get_ac_cfg(hw);
     e9a:	0020      	movs	r0, r4
     e9c:	4b1e      	ldr	r3, [pc, #120]	; (f18 <_ac_init+0x90>)
     e9e:	4798      	blx	r3
	if (cfg == NULL) {
     ea0:	2800      	cmp	r0, #0
     ea2:	d031      	beq.n	f08 <_ac_init+0x80>
typedef uint8_t  hri_ac_statusc_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw)
{
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     ea4:	7a63      	ldrb	r3, [r4, #9]
     ea6:	09db      	lsrs	r3, r3, #7
     ea8:	d1fc      	bne.n	ea4 <_ac_init+0x1c>
     eaa:	7a63      	ldrb	r3, [r4, #9]
     eac:	09db      	lsrs	r3, r3, #7
     eae:	d1fc      	bne.n	eaa <_ac_init+0x22>

static inline hri_ac_ctrla_reg_t hri_ac_get_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw);
	tmp = ((Ac *)hw)->CTRLA.reg;
     eb0:	7823      	ldrb	r3, [r4, #0]
	if (hri_ac_get_CTRLA_reg(hw, AC_CTRLA_ENABLE)) {
     eb2:	079b      	lsls	r3, r3, #30
     eb4:	d507      	bpl.n	ec6 <_ac_init+0x3e>
}

static inline void hri_ac_write_CTRLA_reg(const void *const hw, hri_ac_ctrla_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->CTRLA.reg = data;
     eb6:	2300      	movs	r3, #0
     eb8:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     eba:	7a63      	ldrb	r3, [r4, #9]
     ebc:	09db      	lsrs	r3, r3, #7
     ebe:	d1fc      	bne.n	eba <_ac_init+0x32>
     ec0:	7a63      	ldrb	r3, [r4, #9]
     ec2:	09db      	lsrs	r3, r3, #7
     ec4:	d1fc      	bne.n	ec0 <_ac_init+0x38>
	((Ac *)hw)->CTRLA.reg = data;
     ec6:	2301      	movs	r3, #1
     ec8:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     eca:	7a63      	ldrb	r3, [r4, #9]
     ecc:	09db      	lsrs	r3, r3, #7
     ece:	d1fc      	bne.n	eca <_ac_init+0x42>
     ed0:	7a63      	ldrb	r3, [r4, #9]
     ed2:	09db      	lsrs	r3, r3, #7
     ed4:	d1fc      	bne.n	ed0 <_ac_init+0x48>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
     ed6:	6883      	ldr	r3, [r0, #8]
     ed8:	6123      	str	r3, [r4, #16]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     eda:	7a63      	ldrb	r3, [r4, #9]
     edc:	09db      	lsrs	r3, r3, #7
     ede:	d1fc      	bne.n	eda <_ac_init+0x52>
	((Ac *)hw)->COMPCTRL[index].reg = data;
     ee0:	68c3      	ldr	r3, [r0, #12]
     ee2:	6163      	str	r3, [r4, #20]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     ee4:	7a63      	ldrb	r3, [r4, #9]
     ee6:	09db      	lsrs	r3, r3, #7
     ee8:	d1fc      	bne.n	ee4 <_ac_init+0x5c>
	hri_ac_write_SCALER_reg(hw, 0, cfg->comp_scaler0);
     eea:	7c02      	ldrb	r2, [r0, #16]
}

static inline void hri_ac_write_SCALER_reg(const void *const hw, uint8_t index, hri_ac_scaler_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->SCALER[index].reg = data;
     eec:	3320      	adds	r3, #32
     eee:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_SCALER_reg(hw, 1, cfg->comp_scaler1);
     ef0:	7c42      	ldrb	r2, [r0, #17]
     ef2:	3301      	adds	r3, #1
     ef4:	54e2      	strb	r2, [r4, r3]
	hri_ac_write_EVCTRL_reg(hw, cfg->ev_ctrl);
     ef6:	88c3      	ldrh	r3, [r0, #6]
	((Ac *)hw)->EVCTRL.reg = data;
     ef8:	8063      	strh	r3, [r4, #2]
	hri_ac_write_CTRLA_reg(hw, cfg->ctrla);
     efa:	7943      	ldrb	r3, [r0, #5]
	((Ac *)hw)->CTRLA.reg = data;
     efc:	7023      	strb	r3, [r4, #0]
	while (((const Ac *)hw)->STATUSB.bit.SYNCBUSY)
     efe:	7a63      	ldrb	r3, [r4, #9]
     f00:	09db      	lsrs	r3, r3, #7
     f02:	d1fc      	bne.n	efe <_ac_init+0x76>
	return ERR_NONE;
     f04:	2000      	movs	r0, #0
}
     f06:	bd10      	pop	{r4, pc}
		return ERR_NOT_FOUND;
     f08:	200a      	movs	r0, #10
     f0a:	4240      	negs	r0, r0
     f0c:	e7fb      	b.n	f06 <_ac_init+0x7e>
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	000036e4 	.word	0x000036e4
     f14:	00000cf9 	.word	0x00000cf9
     f18:	00000e5d 	.word	0x00000e5d

00000f1c <_ac_sync_init>:
{
     f1c:	b570      	push	{r4, r5, r6, lr}
     f1e:	0005      	movs	r5, r0
     f20:	000c      	movs	r4, r1
	ASSERT(device);
     f22:	1e43      	subs	r3, r0, #1
     f24:	4198      	sbcs	r0, r3
     f26:	b2c0      	uxtb	r0, r0
     f28:	2262      	movs	r2, #98	; 0x62
     f2a:	4904      	ldr	r1, [pc, #16]	; (f3c <_ac_sync_init+0x20>)
     f2c:	4b04      	ldr	r3, [pc, #16]	; (f40 <_ac_sync_init+0x24>)
     f2e:	4798      	blx	r3
	device->hw = hw;
     f30:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
     f32:	0020      	movs	r0, r4
     f34:	4b03      	ldr	r3, [pc, #12]	; (f44 <_ac_sync_init+0x28>)
     f36:	4798      	blx	r3
}
     f38:	bd70      	pop	{r4, r5, r6, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	000036e4 	.word	0x000036e4
     f40:	00000cf9 	.word	0x00000cf9
     f44:	00000e89 	.word	0x00000e89

00000f48 <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
     f48:	2000      	movs	r0, #0
     f4a:	4770      	bx	lr

00000f4c <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     f4c:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     f4e:	4b0b      	ldr	r3, [pc, #44]	; (f7c <_adc_get_regs+0x30>)
     f50:	4798      	blx	r3
     f52:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     f54:	2000      	movs	r0, #0
     f56:	2800      	cmp	r0, #0
     f58:	d006      	beq.n	f68 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     f5a:	227f      	movs	r2, #127	; 0x7f
     f5c:	4908      	ldr	r1, [pc, #32]	; (f80 <_adc_get_regs+0x34>)
     f5e:	2000      	movs	r0, #0
     f60:	4b08      	ldr	r3, [pc, #32]	; (f84 <_adc_get_regs+0x38>)
     f62:	4798      	blx	r3
	return 0;
     f64:	2000      	movs	r0, #0
}
     f66:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     f68:	00c3      	lsls	r3, r0, #3
     f6a:	1a1b      	subs	r3, r3, r0
     f6c:	0099      	lsls	r1, r3, #2
     f6e:	4b06      	ldr	r3, [pc, #24]	; (f88 <_adc_get_regs+0x3c>)
     f70:	5ccb      	ldrb	r3, [r1, r3]
     f72:	429a      	cmp	r2, r3
     f74:	d0f7      	beq.n	f66 <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     f76:	3001      	adds	r0, #1
     f78:	b2c0      	uxtb	r0, r0
     f7a:	e7ec      	b.n	f56 <_adc_get_regs+0xa>
     f7c:	00000f49 	.word	0x00000f49
     f80:	00003714 	.word	0x00003714
     f84:	00000cf9 	.word	0x00000cf9
     f88:	000036f8 	.word	0x000036f8

00000f8c <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     f8c:	b570      	push	{r4, r5, r6, lr}
     f8e:	0004      	movs	r4, r0
     f90:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     f92:	4b3a      	ldr	r3, [pc, #232]	; (107c <_adc_init+0xf0>)
     f94:	18c0      	adds	r0, r0, r3
     f96:	4243      	negs	r3, r0
     f98:	4158      	adcs	r0, r3
     f9a:	b2c0      	uxtb	r0, r0
     f9c:	2294      	movs	r2, #148	; 0x94
     f9e:	4938      	ldr	r1, [pc, #224]	; (1080 <_adc_init+0xf4>)
     fa0:	4b38      	ldr	r3, [pc, #224]	; (1084 <_adc_init+0xf8>)
     fa2:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     fa4:	4b38      	ldr	r3, [pc, #224]	; (1088 <_adc_init+0xfc>)
     fa6:	681a      	ldr	r2, [r3, #0]
     fa8:	08d2      	lsrs	r2, r2, #3
     faa:	0212      	lsls	r2, r2, #8
     fac:	23e0      	movs	r3, #224	; 0xe0
     fae:	00db      	lsls	r3, r3, #3
     fb0:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     fb2:	4936      	ldr	r1, [pc, #216]	; (108c <_adc_init+0x100>)
     fb4:	680b      	ldr	r3, [r1, #0]
     fb6:	6849      	ldr	r1, [r1, #4]
     fb8:	0149      	lsls	r1, r1, #5
     fba:	0edb      	lsrs	r3, r3, #27
     fbc:	430b      	orrs	r3, r1
     fbe:	21ff      	movs	r1, #255	; 0xff
     fc0:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     fc2:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     fc4:	7e63      	ldrb	r3, [r4, #25]
     fc6:	09db      	lsrs	r3, r3, #7
     fc8:	d1fc      	bne.n	fc4 <_adc_init+0x38>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     fca:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     fcc:	079b      	lsls	r3, r3, #30
     fce:	d504      	bpl.n	fda <_adc_init+0x4e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     fd0:	2300      	movs	r3, #0
     fd2:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     fd4:	7e63      	ldrb	r3, [r4, #25]
     fd6:	09db      	lsrs	r3, r3, #7
     fd8:	d1fc      	bne.n	fd4 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg = data;
     fda:	2301      	movs	r3, #1
     fdc:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     fde:	7e63      	ldrb	r3, [r4, #25]
     fe0:	09db      	lsrs	r3, r3, #7
     fe2:	d1fc      	bne.n	fde <_adc_init+0x52>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     fe4:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     fe6:	00ea      	lsls	r2, r5, #3
     fe8:	1b52      	subs	r2, r2, r5
     fea:	0091      	lsls	r1, r2, #2
     fec:	4b28      	ldr	r3, [pc, #160]	; (1090 <_adc_init+0x104>)
     fee:	185b      	adds	r3, r3, r1
     ff0:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     ff2:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     ff4:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     ff6:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     ff8:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     ffa:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     ffc:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     ffe:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1000:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
    1002:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1004:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
    1006:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1008:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    100a:	222a      	movs	r2, #42	; 0x2a
    100c:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    100e:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
    1010:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1012:	7e63      	ldrb	r3, [r4, #25]
    1014:	09db      	lsrs	r3, r3, #7
    1016:	d1fc      	bne.n	1012 <_adc_init+0x86>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1018:	00eb      	lsls	r3, r5, #3
    101a:	1b5b      	subs	r3, r3, r5
    101c:	009a      	lsls	r2, r3, #2
    101e:	4b1c      	ldr	r3, [pc, #112]	; (1090 <_adc_init+0x104>)
    1020:	189b      	adds	r3, r3, r2
    1022:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1024:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1026:	7e63      	ldrb	r3, [r4, #25]
    1028:	09db      	lsrs	r3, r3, #7
    102a:	d1fc      	bne.n	1026 <_adc_init+0x9a>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    102c:	00eb      	lsls	r3, r5, #3
    102e:	1b5b      	subs	r3, r3, r5
    1030:	009a      	lsls	r2, r3, #2
    1032:	4b17      	ldr	r3, [pc, #92]	; (1090 <_adc_init+0x104>)
    1034:	189b      	adds	r3, r3, r2
    1036:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
    1038:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    103a:	7e63      	ldrb	r3, [r4, #25]
    103c:	09db      	lsrs	r3, r3, #7
    103e:	d1fc      	bne.n	103a <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1040:	00eb      	lsls	r3, r5, #3
    1042:	1b5b      	subs	r3, r3, r5
    1044:	009a      	lsls	r2, r3, #2
    1046:	4b12      	ldr	r3, [pc, #72]	; (1090 <_adc_init+0x104>)
    1048:	189b      	adds	r3, r3, r2
    104a:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
    104c:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    104e:	7e63      	ldrb	r3, [r4, #25]
    1050:	09db      	lsrs	r3, r3, #7
    1052:	d1fc      	bne.n	104e <_adc_init+0xc2>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1054:	00eb      	lsls	r3, r5, #3
    1056:	1b5b      	subs	r3, r3, r5
    1058:	009a      	lsls	r2, r3, #2
    105a:	4b0d      	ldr	r3, [pc, #52]	; (1090 <_adc_init+0x104>)
    105c:	189b      	adds	r3, r3, r2
    105e:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
    1060:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    1062:	7e63      	ldrb	r3, [r4, #25]
    1064:	09db      	lsrs	r3, r3, #7
    1066:	d1fc      	bne.n	1062 <_adc_init+0xd6>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1068:	00eb      	lsls	r3, r5, #3
    106a:	1b5d      	subs	r5, r3, r5
    106c:	00aa      	lsls	r2, r5, #2
    106e:	4b08      	ldr	r3, [pc, #32]	; (1090 <_adc_init+0x104>)
    1070:	189b      	adds	r3, r3, r2
    1072:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
    1074:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
    1076:	2000      	movs	r0, #0
    1078:	bd70      	pop	{r4, r5, r6, pc}
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	bdffc000 	.word	0xbdffc000
    1080:	00003714 	.word	0x00003714
    1084:	00000cf9 	.word	0x00000cf9
    1088:	00806024 	.word	0x00806024
    108c:	00806020 	.word	0x00806020
    1090:	000036f8 	.word	0x000036f8

00001094 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1094:	b570      	push	{r4, r5, r6, lr}
    1096:	0005      	movs	r5, r0
    1098:	000c      	movs	r4, r1
	ASSERT(device);
    109a:	1e43      	subs	r3, r0, #1
    109c:	4198      	sbcs	r0, r3
    109e:	b2c0      	uxtb	r0, r0
    10a0:	22c5      	movs	r2, #197	; 0xc5
    10a2:	4906      	ldr	r1, [pc, #24]	; (10bc <_adc_sync_init+0x28>)
    10a4:	4b06      	ldr	r3, [pc, #24]	; (10c0 <_adc_sync_init+0x2c>)
    10a6:	4798      	blx	r3

	device->hw = hw;
    10a8:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    10aa:	0020      	movs	r0, r4
    10ac:	4b05      	ldr	r3, [pc, #20]	; (10c4 <_adc_sync_init+0x30>)
    10ae:	4798      	blx	r3
    10b0:	0001      	movs	r1, r0
    10b2:	0020      	movs	r0, r4
    10b4:	4b04      	ldr	r3, [pc, #16]	; (10c8 <_adc_sync_init+0x34>)
    10b6:	4798      	blx	r3
}
    10b8:	bd70      	pop	{r4, r5, r6, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	00003714 	.word	0x00003714
    10c0:	00000cf9 	.word	0x00000cf9
    10c4:	00000f4d 	.word	0x00000f4d
    10c8:	00000f8d 	.word	0x00000f8d

000010cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    10cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <_init_chip+0x1c>)
    10d0:	685a      	ldr	r2, [r3, #4]
    10d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    10d4:	4b05      	ldr	r3, [pc, #20]	; (10ec <_init_chip+0x20>)
    10d6:	4798      	blx	r3
	_sysctrl_init_sources();
    10d8:	4b05      	ldr	r3, [pc, #20]	; (10f0 <_init_chip+0x24>)
    10da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    10dc:	4b05      	ldr	r3, [pc, #20]	; (10f4 <_init_chip+0x28>)
    10de:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    10e0:	20ff      	movs	r0, #255	; 0xff
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <_init_chip+0x2c>)
    10e4:	4798      	blx	r3
}
    10e6:	bd10      	pop	{r4, pc}
    10e8:	41004000 	.word	0x41004000
    10ec:	00001351 	.word	0x00001351
    10f0:	0000187d 	.word	0x0000187d
    10f4:	000018c9 	.word	0x000018c9
    10f8:	000012a1 	.word	0x000012a1

000010fc <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    10fc:	79c3      	ldrb	r3, [r0, #7]
    10fe:	09db      	lsrs	r3, r3, #7
    1100:	d1fc      	bne.n	10fc <_dac_init>
    1102:	79c3      	ldrb	r3, [r0, #7]
    1104:	09db      	lsrs	r3, r3, #7
    1106:	d1fc      	bne.n	1102 <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1108:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    110a:	079b      	lsls	r3, r3, #30
    110c:	d507      	bpl.n	111e <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    110e:	2300      	movs	r3, #0
    1110:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1112:	79c3      	ldrb	r3, [r0, #7]
    1114:	09db      	lsrs	r3, r3, #7
    1116:	d1fc      	bne.n	1112 <_dac_init+0x16>
    1118:	79c3      	ldrb	r3, [r0, #7]
    111a:	09db      	lsrs	r3, r3, #7
    111c:	d1fc      	bne.n	1118 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    111e:	2301      	movs	r3, #1
    1120:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1122:	79c3      	ldrb	r3, [r0, #7]
    1124:	09db      	lsrs	r3, r3, #7
    1126:	d1fc      	bne.n	1122 <_dac_init+0x26>
    1128:	79c3      	ldrb	r3, [r0, #7]
    112a:	09db      	lsrs	r3, r3, #7
    112c:	d1fc      	bne.n	1128 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    112e:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    1130:	2201      	movs	r2, #1
    1132:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    1134:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    1136:	79c3      	ldrb	r3, [r0, #7]
    1138:	09db      	lsrs	r3, r3, #7
    113a:	d1fc      	bne.n	1136 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    113c:	2000      	movs	r0, #0
    113e:	4770      	bx	lr

00001140 <_dac_sync_init>:
{
    1140:	b570      	push	{r4, r5, r6, lr}
    1142:	0005      	movs	r5, r0
    1144:	000c      	movs	r4, r1
	ASSERT(device);
    1146:	1e43      	subs	r3, r0, #1
    1148:	4198      	sbcs	r0, r3
    114a:	b2c0      	uxtb	r0, r0
    114c:	2249      	movs	r2, #73	; 0x49
    114e:	4904      	ldr	r1, [pc, #16]	; (1160 <_dac_sync_init+0x20>)
    1150:	4b04      	ldr	r3, [pc, #16]	; (1164 <_dac_sync_init+0x24>)
    1152:	4798      	blx	r3
	device->hw = hw;
    1154:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1156:	0020      	movs	r0, r4
    1158:	4b03      	ldr	r3, [pc, #12]	; (1168 <_dac_sync_init+0x28>)
    115a:	4798      	blx	r3
}
    115c:	bd70      	pop	{r4, r5, r6, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	0000372c 	.word	0x0000372c
    1164:	00000cf9 	.word	0x00000cf9
    1168:	000010fd 	.word	0x000010fd

0000116c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    116c:	4b20      	ldr	r3, [pc, #128]	; (11f0 <_ext_irq_init+0x84>)
    116e:	785b      	ldrb	r3, [r3, #1]
    1170:	09db      	lsrs	r3, r3, #7
    1172:	d1fb      	bne.n	116c <_ext_irq_init>
    1174:	4b1e      	ldr	r3, [pc, #120]	; (11f0 <_ext_irq_init+0x84>)
    1176:	785b      	ldrb	r3, [r3, #1]
    1178:	09db      	lsrs	r3, r3, #7
    117a:	d1fb      	bne.n	1174 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    117c:	4b1c      	ldr	r3, [pc, #112]	; (11f0 <_ext_irq_init+0x84>)
    117e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1180:	079b      	lsls	r3, r3, #30
    1182:	d50a      	bpl.n	119a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1184:	2200      	movs	r2, #0
    1186:	4b1a      	ldr	r3, [pc, #104]	; (11f0 <_ext_irq_init+0x84>)
    1188:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    118a:	4b19      	ldr	r3, [pc, #100]	; (11f0 <_ext_irq_init+0x84>)
    118c:	785b      	ldrb	r3, [r3, #1]
    118e:	09db      	lsrs	r3, r3, #7
    1190:	d1fb      	bne.n	118a <_ext_irq_init+0x1e>
    1192:	4b17      	ldr	r3, [pc, #92]	; (11f0 <_ext_irq_init+0x84>)
    1194:	785b      	ldrb	r3, [r3, #1]
    1196:	09db      	lsrs	r3, r3, #7
    1198:	d1fb      	bne.n	1192 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    119a:	2201      	movs	r2, #1
    119c:	4b14      	ldr	r3, [pc, #80]	; (11f0 <_ext_irq_init+0x84>)
    119e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11a0:	4b13      	ldr	r3, [pc, #76]	; (11f0 <_ext_irq_init+0x84>)
    11a2:	785b      	ldrb	r3, [r3, #1]
    11a4:	09db      	lsrs	r3, r3, #7
    11a6:	d1fb      	bne.n	11a0 <_ext_irq_init+0x34>
    11a8:	4b11      	ldr	r3, [pc, #68]	; (11f0 <_ext_irq_init+0x84>)
    11aa:	785b      	ldrb	r3, [r3, #1]
    11ac:	09db      	lsrs	r3, r3, #7
    11ae:	d1fb      	bne.n	11a8 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    11b0:	4b0f      	ldr	r3, [pc, #60]	; (11f0 <_ext_irq_init+0x84>)
    11b2:	2200      	movs	r2, #0
    11b4:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    11b6:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    11b8:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    11ba:	619a      	str	r2, [r3, #24]
    11bc:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    11be:	781a      	ldrb	r2, [r3, #0]
    11c0:	2102      	movs	r1, #2
    11c2:	430a      	orrs	r2, r1
    11c4:	b2d2      	uxtb	r2, r2
    11c6:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    11c8:	4b09      	ldr	r3, [pc, #36]	; (11f0 <_ext_irq_init+0x84>)
    11ca:	785b      	ldrb	r3, [r3, #1]
    11cc:	09db      	lsrs	r3, r3, #7
    11ce:	d1fb      	bne.n	11c8 <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11d0:	4b08      	ldr	r3, [pc, #32]	; (11f4 <_ext_irq_init+0x88>)
    11d2:	2210      	movs	r2, #16
    11d4:	2180      	movs	r1, #128	; 0x80
    11d6:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    11d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11dc:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11e0:	3101      	adds	r1, #1
    11e2:	31ff      	adds	r1, #255	; 0xff
    11e4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11e6:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    11e8:	4b03      	ldr	r3, [pc, #12]	; (11f8 <_ext_irq_init+0x8c>)
    11ea:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    11ec:	2000      	movs	r0, #0
    11ee:	4770      	bx	lr
    11f0:	40001800 	.word	0x40001800
    11f4:	e000e100 	.word	0xe000e100
    11f8:	20000140 	.word	0x20000140

000011fc <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    11fc:	b530      	push	{r4, r5, lr}
    11fe:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    1200:	4b21      	ldr	r3, [pc, #132]	; (1288 <EIC_Handler+0x8c>)
    1202:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1204:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1206:	400a      	ands	r2, r1
    1208:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    120a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    120c:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    120e:	4b1f      	ldr	r3, [pc, #124]	; (128c <EIC_Handler+0x90>)
    1210:	6818      	ldr	r0, [r3, #0]
    1212:	1e43      	subs	r3, r0, #1
    1214:	4198      	sbcs	r0, r3
    1216:	b2c0      	uxtb	r0, r0
    1218:	22d2      	movs	r2, #210	; 0xd2
    121a:	491d      	ldr	r1, [pc, #116]	; (1290 <EIC_Handler+0x94>)
    121c:	4b1d      	ldr	r3, [pc, #116]	; (1294 <EIC_Handler+0x98>)
    121e:	4798      	blx	r3

	while (flags) {
    1220:	e027      	b.n	1272 <EIC_Handler+0x76>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    1222:	3901      	subs	r1, #1
    1224:	b2cd      	uxtb	r5, r1
			while (upper >= lower) {
    1226:	42ac      	cmp	r4, r5
    1228:	d80d      	bhi.n	1246 <EIC_Handler+0x4a>
				middle = (upper + lower) >> 1;
    122a:	192a      	adds	r2, r5, r4
    122c:	1052      	asrs	r2, r2, #1
    122e:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    1230:	23ff      	movs	r3, #255	; 0xff
    1232:	4013      	ands	r3, r2
    1234:	00db      	lsls	r3, r3, #3
    1236:	4a18      	ldr	r2, [pc, #96]	; (1298 <EIC_Handler+0x9c>)
    1238:	5c9b      	ldrb	r3, [r3, r2]
    123a:	4283      	cmp	r3, r0
    123c:	d003      	beq.n	1246 <EIC_Handler+0x4a>
				if (_map[middle].extint < pos) {
    123e:	daf0      	bge.n	1222 <EIC_Handler+0x26>
					lower = middle + 1;
    1240:	3101      	adds	r1, #1
    1242:	b2cc      	uxtb	r4, r1
    1244:	e7ef      	b.n	1226 <EIC_Handler+0x2a>
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
			}
			flags &= ~(1ul << pos);
    1246:	2201      	movs	r2, #1
    1248:	4082      	lsls	r2, r0
    124a:	9b01      	ldr	r3, [sp, #4]
    124c:	4393      	bics	r3, r2
    124e:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1250:	9801      	ldr	r0, [sp, #4]
    1252:	4b12      	ldr	r3, [pc, #72]	; (129c <EIC_Handler+0xa0>)
    1254:	4798      	blx	r3
    1256:	3801      	subs	r0, #1
    1258:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    125a:	1c43      	adds	r3, r0, #1
    125c:	d002      	beq.n	1264 <EIC_Handler+0x68>
    125e:	2500      	movs	r5, #0
    1260:	2400      	movs	r4, #0
    1262:	e7e0      	b.n	1226 <EIC_Handler+0x2a>
	return ((Eic *)hw)->INTFLAG.reg;
    1264:	4b08      	ldr	r3, [pc, #32]	; (1288 <EIC_Handler+0x8c>)
    1266:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1268:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    126a:	400a      	ands	r2, r1
    126c:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    126e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1270:	611a      	str	r2, [r3, #16]
	while (flags) {
    1272:	9b01      	ldr	r3, [sp, #4]
    1274:	2b00      	cmp	r3, #0
    1276:	d005      	beq.n	1284 <EIC_Handler+0x88>
		pos = ffs(flags) - 1;
    1278:	9801      	ldr	r0, [sp, #4]
    127a:	4b08      	ldr	r3, [pc, #32]	; (129c <EIC_Handler+0xa0>)
    127c:	4798      	blx	r3
    127e:	3801      	subs	r0, #1
    1280:	b240      	sxtb	r0, r0
		while (-1 != pos) {
    1282:	e7ea      	b.n	125a <EIC_Handler+0x5e>
	}
}
    1284:	b003      	add	sp, #12
    1286:	bd30      	pop	{r4, r5, pc}
    1288:	40001800 	.word	0x40001800
    128c:	20000140 	.word	0x20000140
    1290:	0000374c 	.word	0x0000374c
    1294:	00000cf9 	.word	0x00000cf9
    1298:	00003744 	.word	0x00003744
    129c:	000034e1 	.word	0x000034e1

000012a0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    12a0:	07c3      	lsls	r3, r0, #31
    12a2:	d50a      	bpl.n	12ba <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    12a4:	4b05      	ldr	r3, [pc, #20]	; (12bc <_gclk_init_generators_by_fref+0x1c>)
    12a6:	2280      	movs	r2, #128	; 0x80
    12a8:	0052      	lsls	r2, r2, #1
    12aa:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    12ac:	2283      	movs	r2, #131	; 0x83
    12ae:	0252      	lsls	r2, r2, #9
    12b0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    12b2:	4b02      	ldr	r3, [pc, #8]	; (12bc <_gclk_init_generators_by_fref+0x1c>)
    12b4:	785b      	ldrb	r3, [r3, #1]
    12b6:	09db      	lsrs	r3, r3, #7
    12b8:	d1fb      	bne.n	12b2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    12ba:	4770      	bx	lr
    12bc:	40000c00 	.word	0x40000c00

000012c0 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
    12c0:	b570      	push	{r4, r5, r6, lr}
    12c2:	0005      	movs	r5, r0
    12c4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    12c6:	2800      	cmp	r0, #0
    12c8:	d01c      	beq.n	1304 <_flash_init+0x44>
    12ca:	4b10      	ldr	r3, [pc, #64]	; (130c <_flash_init+0x4c>)
    12cc:	4299      	cmp	r1, r3
    12ce:	d01b      	beq.n	1308 <_flash_init+0x48>
    12d0:	2000      	movs	r0, #0
    12d2:	2246      	movs	r2, #70	; 0x46
    12d4:	490e      	ldr	r1, [pc, #56]	; (1310 <_flash_init+0x50>)
    12d6:	4b0f      	ldr	r3, [pc, #60]	; (1314 <_flash_init+0x54>)
    12d8:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
    12da:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    12dc:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    12de:	239e      	movs	r3, #158	; 0x9e
    12e0:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    12e2:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
    12e4:	4b0c      	ldr	r3, [pc, #48]	; (1318 <_flash_init+0x58>)
    12e6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12e8:	4b0c      	ldr	r3, [pc, #48]	; (131c <_flash_init+0x5c>)
    12ea:	2220      	movs	r2, #32
    12ec:	2180      	movs	r1, #128	; 0x80
    12ee:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    12f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12f8:	3101      	adds	r1, #1
    12fa:	31ff      	adds	r1, #255	; 0xff
    12fc:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12fe:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
    1300:	2000      	movs	r0, #0
    1302:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    1304:	2000      	movs	r0, #0
    1306:	e7e4      	b.n	12d2 <_flash_init+0x12>
    1308:	2001      	movs	r0, #1
    130a:	e7e2      	b.n	12d2 <_flash_init+0x12>
    130c:	41004000 	.word	0x41004000
    1310:	00003764 	.word	0x00003764
    1314:	00000cf9 	.word	0x00000cf9
    1318:	20000144 	.word	0x20000144
    131c:	e000e100 	.word	0xe000e100

00001320 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    1320:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    1322:	4b0a      	ldr	r3, [pc, #40]	; (134c <NVMCTRL_Handler+0x2c>)
    1324:	6818      	ldr	r0, [r3, #0]
    1326:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1328:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    132a:	07d2      	lsls	r2, r2, #31
    132c:	d504      	bpl.n	1338 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    132e:	6803      	ldr	r3, [r0, #0]
    1330:	2b00      	cmp	r3, #0
    1332:	d000      	beq.n	1336 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    1334:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    1336:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    1338:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    133a:	0792      	lsls	r2, r2, #30
    133c:	d5fb      	bpl.n	1336 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    133e:	2202      	movs	r2, #2
    1340:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    1342:	6843      	ldr	r3, [r0, #4]
    1344:	2b00      	cmp	r3, #0
    1346:	d0f6      	beq.n	1336 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    1348:	4798      	blx	r3
}
    134a:	e7f4      	b.n	1336 <NVMCTRL_Handler+0x16>
    134c:	20000144 	.word	0x20000144

00001350 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1350:	4b06      	ldr	r3, [pc, #24]	; (136c <_pm_init+0x1c>)
    1352:	7a1a      	ldrb	r2, [r3, #8]
    1354:	b2d2      	uxtb	r2, r2
    1356:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1358:	7a5a      	ldrb	r2, [r3, #9]
    135a:	b2d2      	uxtb	r2, r2
    135c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    135e:	7a9a      	ldrb	r2, [r3, #10]
    1360:	b2d2      	uxtb	r2, r2
    1362:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1364:	7ada      	ldrb	r2, [r3, #11]
    1366:	b2d2      	uxtb	r2, r2
    1368:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    136a:	4770      	bx	lr
    136c:	40000400 	.word	0x40000400

00001370 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1370:	4b02      	ldr	r3, [pc, #8]	; (137c <_sercom_get_hardware_index+0xc>)
    1372:	469c      	mov	ip, r3
    1374:	4460      	add	r0, ip
    1376:	0a80      	lsrs	r0, r0, #10
    1378:	b2c0      	uxtb	r0, r0
}
    137a:	4770      	bx	lr
    137c:	bdfff800 	.word	0xbdfff800

00001380 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1380:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1382:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1384:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1386:	07d2      	lsls	r2, r2, #31
    1388:	d502      	bpl.n	1390 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    138a:	7b5a      	ldrb	r2, [r3, #13]
    138c:	07d2      	lsls	r2, r2, #31
    138e:	d40e      	bmi.n	13ae <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1390:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1392:	0792      	lsls	r2, r2, #30
    1394:	d502      	bpl.n	139c <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1396:	7b5a      	ldrb	r2, [r3, #13]
    1398:	0792      	lsls	r2, r2, #30
    139a:	d40d      	bmi.n	13b8 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    139c:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    139e:	0752      	lsls	r2, r2, #29
    13a0:	d504      	bpl.n	13ac <_sercom_usart_interrupt_handler+0x2c>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    13a2:	8a1a      	ldrh	r2, [r3, #16]
		if (hri_sercomusart_read_STATUS_reg(hw)
    13a4:	0752      	lsls	r2, r2, #29
    13a6:	d00c      	beq.n	13c2 <_sercom_usart_interrupt_handler+0x42>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    13a8:	4a08      	ldr	r2, [pc, #32]	; (13cc <_sercom_usart_interrupt_handler+0x4c>)
    13aa:	821a      	strh	r2, [r3, #16]
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
	}
}
    13ac:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    13ae:	2201      	movs	r2, #1
    13b0:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
    13b2:	6803      	ldr	r3, [r0, #0]
    13b4:	4798      	blx	r3
    13b6:	e7f9      	b.n	13ac <_sercom_usart_interrupt_handler+0x2c>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    13b8:	2202      	movs	r2, #2
    13ba:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
    13bc:	6883      	ldr	r3, [r0, #8]
    13be:	4798      	blx	r3
    13c0:	e7f4      	b.n	13ac <_sercom_usart_interrupt_handler+0x2c>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    13c2:	6842      	ldr	r2, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    13c4:	8b19      	ldrh	r1, [r3, #24]
    13c6:	b2c9      	uxtb	r1, r1
    13c8:	4790      	blx	r2
    13ca:	e7ef      	b.n	13ac <_sercom_usart_interrupt_handler+0x2c>
    13cc:	ffff8007 	.word	0xffff8007

000013d0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    13d0:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    13d2:	4b02      	ldr	r3, [pc, #8]	; (13dc <_sercom_get_irq_num+0xc>)
    13d4:	4798      	blx	r3
    13d6:	3007      	adds	r0, #7
    13d8:	b2c0      	uxtb	r0, r0
}
    13da:	bd10      	pop	{r4, pc}
    13dc:	00001371 	.word	0x00001371

000013e0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    13e0:	4b03      	ldr	r3, [pc, #12]	; (13f0 <_sercom_init_irq_param+0x10>)
    13e2:	4298      	cmp	r0, r3
    13e4:	d000      	beq.n	13e8 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    13e6:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    13e8:	4b02      	ldr	r3, [pc, #8]	; (13f4 <_sercom_init_irq_param+0x14>)
    13ea:	6019      	str	r1, [r3, #0]
}
    13ec:	e7fb      	b.n	13e6 <_sercom_init_irq_param+0x6>
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	42001400 	.word	0x42001400
    13f4:	20000148 	.word	0x20000148

000013f8 <_get_sercom_index>:
{
    13f8:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    13fa:	4b0a      	ldr	r3, [pc, #40]	; (1424 <_get_sercom_index+0x2c>)
    13fc:	4798      	blx	r3
    13fe:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1400:	2000      	movs	r0, #0
    1402:	2800      	cmp	r0, #0
    1404:	d006      	beq.n	1414 <_get_sercom_index+0x1c>
	ASSERT(false);
    1406:	4a08      	ldr	r2, [pc, #32]	; (1428 <_get_sercom_index+0x30>)
    1408:	4908      	ldr	r1, [pc, #32]	; (142c <_get_sercom_index+0x34>)
    140a:	2000      	movs	r0, #0
    140c:	4b08      	ldr	r3, [pc, #32]	; (1430 <_get_sercom_index+0x38>)
    140e:	4798      	blx	r3
	return 0;
    1410:	2000      	movs	r0, #0
}
    1412:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1414:	0102      	lsls	r2, r0, #4
    1416:	4907      	ldr	r1, [pc, #28]	; (1434 <_get_sercom_index+0x3c>)
    1418:	5c52      	ldrb	r2, [r2, r1]
    141a:	4293      	cmp	r3, r2
    141c:	d0f9      	beq.n	1412 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    141e:	3001      	adds	r0, #1
    1420:	b2c0      	uxtb	r0, r0
    1422:	e7ee      	b.n	1402 <_get_sercom_index+0xa>
    1424:	00001371 	.word	0x00001371
    1428:	0000024e 	.word	0x0000024e
    142c:	000037cc 	.word	0x000037cc
    1430:	00000cf9 	.word	0x00000cf9
    1434:	00003784 	.word	0x00003784

00001438 <_usart_init>:
{
    1438:	b510      	push	{r4, lr}
    143a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    143c:	4b19      	ldr	r3, [pc, #100]	; (14a4 <_usart_init+0x6c>)
    143e:	4798      	blx	r3
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1440:	8a23      	ldrh	r3, [r4, #16]
    1442:	0bdb      	lsrs	r3, r3, #15
    1444:	d1fc      	bne.n	1440 <_usart_init+0x8>
    1446:	8a23      	ldrh	r3, [r4, #16]
    1448:	0bdb      	lsrs	r3, r3, #15
    144a:	d1fc      	bne.n	1446 <_usart_init+0xe>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    144c:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    144e:	079b      	lsls	r3, r3, #30
    1450:	d507      	bpl.n	1462 <_usart_init+0x2a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1452:	2300      	movs	r3, #0
    1454:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1456:	8a23      	ldrh	r3, [r4, #16]
    1458:	0bdb      	lsrs	r3, r3, #15
    145a:	d1fc      	bne.n	1456 <_usart_init+0x1e>
    145c:	8a23      	ldrh	r3, [r4, #16]
    145e:	0bdb      	lsrs	r3, r3, #15
    1460:	d1fc      	bne.n	145c <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1462:	2301      	movs	r3, #1
    1464:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1466:	8a23      	ldrh	r3, [r4, #16]
    1468:	0bdb      	lsrs	r3, r3, #15
    146a:	d1fc      	bne.n	1466 <_usart_init+0x2e>
    146c:	8a23      	ldrh	r3, [r4, #16]
    146e:	0bdb      	lsrs	r3, r3, #15
    1470:	d1fc      	bne.n	146c <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1472:	0102      	lsls	r2, r0, #4
    1474:	4b0c      	ldr	r3, [pc, #48]	; (14a8 <_usart_init+0x70>)
    1476:	189b      	adds	r3, r3, r2
    1478:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    147a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    147c:	8a23      	ldrh	r3, [r4, #16]
    147e:	0bdb      	lsrs	r3, r3, #15
    1480:	d1fc      	bne.n	147c <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1482:	0102      	lsls	r2, r0, #4
    1484:	4b08      	ldr	r3, [pc, #32]	; (14a8 <_usart_init+0x70>)
    1486:	189b      	adds	r3, r3, r2
    1488:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    148a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    148c:	8a23      	ldrh	r3, [r4, #16]
    148e:	0bdb      	lsrs	r3, r3, #15
    1490:	d1fc      	bne.n	148c <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1492:	0100      	lsls	r0, r0, #4
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <_usart_init+0x70>)
    1496:	1818      	adds	r0, r3, r0
    1498:	8983      	ldrh	r3, [r0, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    149a:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    149c:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    149e:	7223      	strb	r3, [r4, #8]
}
    14a0:	2000      	movs	r0, #0
    14a2:	bd10      	pop	{r4, pc}
    14a4:	000013f9 	.word	0x000013f9
    14a8:	00003784 	.word	0x00003784

000014ac <_usart_async_init>:
{
    14ac:	b570      	push	{r4, r5, r6, lr}
    14ae:	0006      	movs	r6, r0
    14b0:	000c      	movs	r4, r1
	ASSERT(device);
    14b2:	1e43      	subs	r3, r0, #1
    14b4:	4198      	sbcs	r0, r3
    14b6:	b2c0      	uxtb	r0, r0
    14b8:	22b1      	movs	r2, #177	; 0xb1
    14ba:	4919      	ldr	r1, [pc, #100]	; (1520 <_usart_async_init+0x74>)
    14bc:	4b19      	ldr	r3, [pc, #100]	; (1524 <_usart_async_init+0x78>)
    14be:	4798      	blx	r3
	init_status = _usart_init(hw);
    14c0:	0020      	movs	r0, r4
    14c2:	4b19      	ldr	r3, [pc, #100]	; (1528 <_usart_async_init+0x7c>)
    14c4:	4798      	blx	r3
    14c6:	1e05      	subs	r5, r0, #0
	if (init_status) {
    14c8:	d001      	beq.n	14ce <_usart_async_init+0x22>
}
    14ca:	0028      	movs	r0, r5
    14cc:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    14ce:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    14d0:	0031      	movs	r1, r6
    14d2:	0020      	movs	r0, r4
    14d4:	4b15      	ldr	r3, [pc, #84]	; (152c <_usart_async_init+0x80>)
    14d6:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    14d8:	0020      	movs	r0, r4
    14da:	4b15      	ldr	r3, [pc, #84]	; (1530 <_usart_async_init+0x84>)
    14dc:	4798      	blx	r3
    14de:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    14e0:	2b00      	cmp	r3, #0
    14e2:	db0a      	blt.n	14fa <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14e4:	211f      	movs	r1, #31
    14e6:	4001      	ands	r1, r0
    14e8:	2201      	movs	r2, #1
    14ea:	408a      	lsls	r2, r1
    14ec:	2180      	movs	r1, #128	; 0x80
    14ee:	4c11      	ldr	r4, [pc, #68]	; (1534 <_usart_async_init+0x88>)
    14f0:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    14f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14f6:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    14fa:	2b00      	cmp	r3, #0
    14fc:	db07      	blt.n	150e <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14fe:	211f      	movs	r1, #31
    1500:	4001      	ands	r1, r0
    1502:	2201      	movs	r2, #1
    1504:	408a      	lsls	r2, r1
    1506:	21c0      	movs	r1, #192	; 0xc0
    1508:	0049      	lsls	r1, r1, #1
    150a:	4c0a      	ldr	r4, [pc, #40]	; (1534 <_usart_async_init+0x88>)
    150c:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    150e:	2b00      	cmp	r3, #0
    1510:	dbdb      	blt.n	14ca <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1512:	231f      	movs	r3, #31
    1514:	4018      	ands	r0, r3
    1516:	3b1e      	subs	r3, #30
    1518:	4083      	lsls	r3, r0
    151a:	4a06      	ldr	r2, [pc, #24]	; (1534 <_usart_async_init+0x88>)
    151c:	6013      	str	r3, [r2, #0]
    151e:	e7d4      	b.n	14ca <_usart_async_init+0x1e>
    1520:	000037cc 	.word	0x000037cc
    1524:	00000cf9 	.word	0x00000cf9
    1528:	00001439 	.word	0x00001439
    152c:	000013e1 	.word	0x000013e1
    1530:	000013d1 	.word	0x000013d1
    1534:	e000e100 	.word	0xe000e100

00001538 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1538:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    153a:	6813      	ldr	r3, [r2, #0]
    153c:	2102      	movs	r1, #2
    153e:	430b      	orrs	r3, r1
    1540:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1542:	8a13      	ldrh	r3, [r2, #16]
    1544:	0bdb      	lsrs	r3, r3, #15
    1546:	d1fc      	bne.n	1542 <_usart_async_enable+0xa>
}
    1548:	4770      	bx	lr

0000154a <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    154a:	6983      	ldr	r3, [r0, #24]
    154c:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    154e:	8319      	strh	r1, [r3, #24]
}
    1550:	4770      	bx	lr

00001552 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1552:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1554:	2201      	movs	r2, #1
    1556:	735a      	strb	r2, [r3, #13]
}
    1558:	4770      	bx	lr

0000155a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    155a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    155c:	2202      	movs	r2, #2
    155e:	735a      	strb	r2, [r3, #13]
}
    1560:	4770      	bx	lr
	...

00001564 <_usart_async_set_irq_state>:
{
    1564:	b570      	push	{r4, r5, r6, lr}
    1566:	0004      	movs	r4, r0
    1568:	000d      	movs	r5, r1
    156a:	0016      	movs	r6, r2
	ASSERT(device);
    156c:	1e43      	subs	r3, r0, #1
    156e:	4198      	sbcs	r0, r3
    1570:	b2c0      	uxtb	r0, r0
    1572:	2284      	movs	r2, #132	; 0x84
    1574:	0092      	lsls	r2, r2, #2
    1576:	4911      	ldr	r1, [pc, #68]	; (15bc <_usart_async_set_irq_state+0x58>)
    1578:	4b11      	ldr	r3, [pc, #68]	; (15c0 <_usart_async_set_irq_state+0x5c>)
    157a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    157c:	2d00      	cmp	r5, #0
    157e:	d009      	beq.n	1594 <_usart_async_set_irq_state+0x30>
    1580:	2d02      	cmp	r5, #2
    1582:	d007      	beq.n	1594 <_usart_async_set_irq_state+0x30>
	} else if (USART_ASYNC_RX_DONE == type) {
    1584:	2d01      	cmp	r5, #1
    1586:	d10f      	bne.n	15a8 <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1588:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    158a:	2e00      	cmp	r6, #0
    158c:	d013      	beq.n	15b6 <_usart_async_set_irq_state+0x52>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    158e:	2204      	movs	r2, #4
    1590:	735a      	strb	r2, [r3, #13]
}
    1592:	e009      	b.n	15a8 <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1594:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1596:	2e00      	cmp	r6, #0
    1598:	d107      	bne.n	15aa <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    159a:	2201      	movs	r2, #1
    159c:	731a      	strb	r2, [r3, #12]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    159e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    15a0:	2e00      	cmp	r6, #0
    15a2:	d105      	bne.n	15b0 <_usart_async_set_irq_state+0x4c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    15a4:	2202      	movs	r2, #2
    15a6:	731a      	strb	r2, [r3, #12]
}
    15a8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    15aa:	2201      	movs	r2, #1
    15ac:	735a      	strb	r2, [r3, #13]
    15ae:	e7f6      	b.n	159e <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    15b0:	2202      	movs	r2, #2
    15b2:	735a      	strb	r2, [r3, #13]
    15b4:	e7f8      	b.n	15a8 <_usart_async_set_irq_state+0x44>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    15b6:	2204      	movs	r2, #4
    15b8:	731a      	strb	r2, [r3, #12]
    15ba:	e7f5      	b.n	15a8 <_usart_async_set_irq_state+0x44>
    15bc:	000037cc 	.word	0x000037cc
    15c0:	00000cf9 	.word	0x00000cf9

000015c4 <SERCOM3_Handler>:
{
    15c4:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    15c6:	4b02      	ldr	r3, [pc, #8]	; (15d0 <SERCOM3_Handler+0xc>)
    15c8:	6818      	ldr	r0, [r3, #0]
    15ca:	4b02      	ldr	r3, [pc, #8]	; (15d4 <SERCOM3_Handler+0x10>)
    15cc:	4798      	blx	r3
}
    15ce:	bd10      	pop	{r4, pc}
    15d0:	20000148 	.word	0x20000148
    15d4:	00001381 	.word	0x00001381

000015d8 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    15d8:	b570      	push	{r4, r5, r6, lr}
    15da:	0006      	movs	r6, r0
    15dc:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    15de:	0008      	movs	r0, r1
    15e0:	4b62      	ldr	r3, [pc, #392]	; (176c <_spi_m_sync_init+0x194>)
    15e2:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    15e4:	2300      	movs	r3, #0
    15e6:	2b00      	cmp	r3, #0
    15e8:	d100      	bne.n	15ec <_spi_m_sync_init+0x14>
    15ea:	e06c      	b.n	16c6 <_spi_m_sync_init+0xee>
	return NULL;
    15ec:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    15ee:	2e00      	cmp	r6, #0
    15f0:	d100      	bne.n	15f4 <_spi_m_sync_init+0x1c>
    15f2:	e074      	b.n	16de <_spi_m_sync_init+0x106>
    15f4:	2c00      	cmp	r4, #0
    15f6:	d100      	bne.n	15fa <_spi_m_sync_init+0x22>
    15f8:	e06f      	b.n	16da <_spi_m_sync_init+0x102>
    15fa:	2001      	movs	r0, #1
    15fc:	4a5c      	ldr	r2, [pc, #368]	; (1770 <_spi_m_sync_init+0x198>)
    15fe:	495d      	ldr	r1, [pc, #372]	; (1774 <_spi_m_sync_init+0x19c>)
    1600:	4b5d      	ldr	r3, [pc, #372]	; (1778 <_spi_m_sync_init+0x1a0>)
    1602:	4798      	blx	r3

	if (regs == NULL) {
    1604:	2d00      	cmp	r5, #0
    1606:	d100      	bne.n	160a <_spi_m_sync_init+0x32>
    1608:	e0ac      	b.n	1764 <_spi_m_sync_init+0x18c>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    160a:	8a23      	ldrh	r3, [r4, #16]
    160c:	0bdb      	lsrs	r3, r3, #15
    160e:	d1fc      	bne.n	160a <_spi_m_sync_init+0x32>
    1610:	8a23      	ldrh	r3, [r4, #16]
    1612:	0bdb      	lsrs	r3, r3, #15
    1614:	d1fc      	bne.n	1610 <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1616:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1618:	079b      	lsls	r3, r3, #30
    161a:	d507      	bpl.n	162c <_spi_m_sync_init+0x54>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    161c:	2300      	movs	r3, #0
    161e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1620:	8a23      	ldrh	r3, [r4, #16]
    1622:	0bdb      	lsrs	r3, r3, #15
    1624:	d1fc      	bne.n	1620 <_spi_m_sync_init+0x48>
    1626:	8a23      	ldrh	r3, [r4, #16]
    1628:	0bdb      	lsrs	r3, r3, #15
    162a:	d1fc      	bne.n	1626 <_spi_m_sync_init+0x4e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    162c:	2301      	movs	r3, #1
    162e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1630:	8a23      	ldrh	r3, [r4, #16]
    1632:	0bdb      	lsrs	r3, r3, #15
    1634:	d1fc      	bne.n	1630 <_spi_m_sync_init+0x58>
    1636:	8a23      	ldrh	r3, [r4, #16]
    1638:	0bdb      	lsrs	r3, r3, #15
    163a:	d1fc      	bne.n	1636 <_spi_m_sync_init+0x5e>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    163c:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    163e:	782b      	ldrb	r3, [r5, #0]
    1640:	786a      	ldrb	r2, [r5, #1]
    1642:	0212      	lsls	r2, r2, #8
    1644:	431a      	orrs	r2, r3
    1646:	78ab      	ldrb	r3, [r5, #2]
    1648:	041b      	lsls	r3, r3, #16
    164a:	431a      	orrs	r2, r3
    164c:	78eb      	ldrb	r3, [r5, #3]
    164e:	061b      	lsls	r3, r3, #24
    1650:	4313      	orrs	r3, r2
    1652:	221c      	movs	r2, #28
    1654:	4013      	ands	r3, r2
    1656:	2b08      	cmp	r3, #8
    1658:	d043      	beq.n	16e2 <_spi_m_sync_init+0x10a>
	ASSERT(hw && regs);
    165a:	2c00      	cmp	r4, #0
    165c:	d100      	bne.n	1660 <_spi_m_sync_init+0x88>
    165e:	e07d      	b.n	175c <_spi_m_sync_init+0x184>
    1660:	2d00      	cmp	r5, #0
    1662:	d100      	bne.n	1666 <_spi_m_sync_init+0x8e>
    1664:	e078      	b.n	1758 <_spi_m_sync_init+0x180>
    1666:	2001      	movs	r0, #1
    1668:	4a44      	ldr	r2, [pc, #272]	; (177c <_spi_m_sync_init+0x1a4>)
    166a:	4942      	ldr	r1, [pc, #264]	; (1774 <_spi_m_sync_init+0x19c>)
    166c:	4b42      	ldr	r3, [pc, #264]	; (1778 <_spi_m_sync_init+0x1a0>)
    166e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1670:	782b      	ldrb	r3, [r5, #0]
    1672:	786a      	ldrb	r2, [r5, #1]
    1674:	0212      	lsls	r2, r2, #8
    1676:	431a      	orrs	r2, r3
    1678:	78ab      	ldrb	r3, [r5, #2]
    167a:	041b      	lsls	r3, r3, #16
    167c:	431a      	orrs	r2, r3
    167e:	78eb      	ldrb	r3, [r5, #3]
    1680:	061b      	lsls	r3, r3, #24
    1682:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1684:	4a3e      	ldr	r2, [pc, #248]	; (1780 <_spi_m_sync_init+0x1a8>)
    1686:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1688:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    168a:	8a23      	ldrh	r3, [r4, #16]
    168c:	0bdb      	lsrs	r3, r3, #15
    168e:	d1fc      	bne.n	168a <_spi_m_sync_init+0xb2>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    1690:	792b      	ldrb	r3, [r5, #4]
    1692:	796a      	ldrb	r2, [r5, #5]
    1694:	0212      	lsls	r2, r2, #8
    1696:	431a      	orrs	r2, r3
    1698:	79ab      	ldrb	r3, [r5, #6]
    169a:	041b      	lsls	r3, r3, #16
    169c:	431a      	orrs	r2, r3
    169e:	79eb      	ldrb	r3, [r5, #7]
    16a0:	061b      	lsls	r3, r3, #24
    16a2:	4313      	orrs	r3, r2
    16a4:	4a37      	ldr	r2, [pc, #220]	; (1784 <_spi_m_sync_init+0x1ac>)
    16a6:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    16a8:	2280      	movs	r2, #128	; 0x80
    16aa:	0292      	lsls	r2, r2, #10
    16ac:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    16ae:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    16b0:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    16b2:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    16b4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    16b6:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    16b8:	792b      	ldrb	r3, [r5, #4]
    16ba:	075b      	lsls	r3, r3, #29
    16bc:	d150      	bne.n	1760 <_spi_m_sync_init+0x188>
    16be:	2301      	movs	r3, #1
    16c0:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    16c2:	2000      	movs	r0, #0
}
    16c4:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    16c6:	2801      	cmp	r0, #1
    16c8:	d002      	beq.n	16d0 <_spi_m_sync_init+0xf8>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    16ca:	3301      	adds	r3, #1
    16cc:	b2db      	uxtb	r3, r3
    16ce:	e78a      	b.n	15e6 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    16d0:	011d      	lsls	r5, r3, #4
    16d2:	4b2d      	ldr	r3, [pc, #180]	; (1788 <_spi_m_sync_init+0x1b0>)
    16d4:	3338      	adds	r3, #56	; 0x38
    16d6:	195d      	adds	r5, r3, r5
    16d8:	e789      	b.n	15ee <_spi_m_sync_init+0x16>
	ASSERT(dev && hw);
    16da:	2000      	movs	r0, #0
    16dc:	e78e      	b.n	15fc <_spi_m_sync_init+0x24>
    16de:	2000      	movs	r0, #0
    16e0:	e78c      	b.n	15fc <_spi_m_sync_init+0x24>
	ASSERT(hw && regs);
    16e2:	2c00      	cmp	r4, #0
    16e4:	d036      	beq.n	1754 <_spi_m_sync_init+0x17c>
    16e6:	2d00      	cmp	r5, #0
    16e8:	d032      	beq.n	1750 <_spi_m_sync_init+0x178>
    16ea:	2001      	movs	r0, #1
    16ec:	4a27      	ldr	r2, [pc, #156]	; (178c <_spi_m_sync_init+0x1b4>)
    16ee:	4921      	ldr	r1, [pc, #132]	; (1774 <_spi_m_sync_init+0x19c>)
    16f0:	4b21      	ldr	r3, [pc, #132]	; (1778 <_spi_m_sync_init+0x1a0>)
    16f2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    16f4:	782b      	ldrb	r3, [r5, #0]
    16f6:	786a      	ldrb	r2, [r5, #1]
    16f8:	0212      	lsls	r2, r2, #8
    16fa:	431a      	orrs	r2, r3
    16fc:	78ab      	ldrb	r3, [r5, #2]
    16fe:	041b      	lsls	r3, r3, #16
    1700:	431a      	orrs	r2, r3
    1702:	78eb      	ldrb	r3, [r5, #3]
    1704:	061b      	lsls	r3, r3, #24
    1706:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1708:	4a1d      	ldr	r2, [pc, #116]	; (1780 <_spi_m_sync_init+0x1a8>)
    170a:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    170c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    170e:	8a23      	ldrh	r3, [r4, #16]
    1710:	0bdb      	lsrs	r3, r3, #15
    1712:	d1fc      	bne.n	170e <_spi_m_sync_init+0x136>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    1714:	792b      	ldrb	r3, [r5, #4]
    1716:	796a      	ldrb	r2, [r5, #5]
    1718:	0212      	lsls	r2, r2, #8
    171a:	431a      	orrs	r2, r3
    171c:	79ab      	ldrb	r3, [r5, #6]
    171e:	041b      	lsls	r3, r3, #16
    1720:	431a      	orrs	r2, r3
    1722:	79eb      	ldrb	r3, [r5, #7]
    1724:	061b      	lsls	r3, r3, #24
    1726:	4313      	orrs	r3, r2
    1728:	4a19      	ldr	r2, [pc, #100]	; (1790 <_spi_m_sync_init+0x1b8>)
    172a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    172c:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    172e:	7a2b      	ldrb	r3, [r5, #8]
    1730:	7a6a      	ldrb	r2, [r5, #9]
    1732:	0212      	lsls	r2, r2, #8
    1734:	431a      	orrs	r2, r3
    1736:	7aab      	ldrb	r3, [r5, #10]
    1738:	041b      	lsls	r3, r3, #16
    173a:	431a      	orrs	r2, r3
    173c:	7aeb      	ldrb	r3, [r5, #11]
    173e:	061b      	lsls	r3, r3, #24
    1740:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1742:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1744:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1746:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    1748:	8a23      	ldrh	r3, [r4, #16]
    174a:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    174c:	d1fc      	bne.n	1748 <_spi_m_sync_init+0x170>
    174e:	e7b3      	b.n	16b8 <_spi_m_sync_init+0xe0>
	ASSERT(hw && regs);
    1750:	2000      	movs	r0, #0
    1752:	e7cb      	b.n	16ec <_spi_m_sync_init+0x114>
    1754:	2000      	movs	r0, #0
    1756:	e7c9      	b.n	16ec <_spi_m_sync_init+0x114>
	ASSERT(hw && regs);
    1758:	2000      	movs	r0, #0
    175a:	e785      	b.n	1668 <_spi_m_sync_init+0x90>
    175c:	2000      	movs	r0, #0
    175e:	e783      	b.n	1668 <_spi_m_sync_init+0x90>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1760:	2302      	movs	r3, #2
    1762:	e7ad      	b.n	16c0 <_spi_m_sync_init+0xe8>
		return ERR_INVALID_ARG;
    1764:	200d      	movs	r0, #13
    1766:	4240      	negs	r0, r0
    1768:	e7ac      	b.n	16c4 <_spi_m_sync_init+0xec>
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	00001371 	.word	0x00001371
    1770:	000008cb 	.word	0x000008cb
    1774:	000037cc 	.word	0x000037cc
    1778:	00000cf9 	.word	0x00000cf9
    177c:	0000089a 	.word	0x0000089a
    1780:	fffffefc 	.word	0xfffffefc
    1784:	fffd3fbf 	.word	0xfffd3fbf
    1788:	00003784 	.word	0x00003784
    178c:	000008ab 	.word	0x000008ab
    1790:	00020040 	.word	0x00020040

00001794 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1794:	b570      	push	{r4, r5, r6, lr}
    1796:	b088      	sub	sp, #32
    1798:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    179a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    179c:	680b      	ldr	r3, [r1, #0]
    179e:	9303      	str	r3, [sp, #12]
    17a0:	684b      	ldr	r3, [r1, #4]
    17a2:	9304      	str	r3, [sp, #16]
    17a4:	2300      	movs	r3, #0
    17a6:	9305      	str	r3, [sp, #20]
    17a8:	9306      	str	r3, [sp, #24]
    17aa:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    17ac:	2800      	cmp	r0, #0
    17ae:	d014      	beq.n	17da <_spi_m_sync_trans+0x46>
    17b0:	2c00      	cmp	r4, #0
    17b2:	d010      	beq.n	17d6 <_spi_m_sync_trans+0x42>
    17b4:	2001      	movs	r0, #1
    17b6:	4a2d      	ldr	r2, [pc, #180]	; (186c <_spi_m_sync_trans+0xd8>)
    17b8:	492d      	ldr	r1, [pc, #180]	; (1870 <_spi_m_sync_trans+0xdc>)
    17ba:	4b2e      	ldr	r3, [pc, #184]	; (1874 <_spi_m_sync_trans+0xe0>)
    17bc:	4798      	blx	r3
    17be:	8a23      	ldrh	r3, [r4, #16]
    17c0:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    17c2:	d14f      	bne.n	1864 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    17c4:	8a23      	ldrh	r3, [r4, #16]
    17c6:	0bdb      	lsrs	r3, r3, #15
    17c8:	d1fc      	bne.n	17c4 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17ca:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    17cc:	079b      	lsls	r3, r3, #30
    17ce:	d418      	bmi.n	1802 <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    17d0:	2014      	movs	r0, #20
    17d2:	4240      	negs	r0, r0
    17d4:	e044      	b.n	1860 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    17d6:	2000      	movs	r0, #0
    17d8:	e7ed      	b.n	17b6 <_spi_m_sync_trans+0x22>
    17da:	2000      	movs	r0, #0
    17dc:	e7eb      	b.n	17b6 <_spi_m_sync_trans+0x22>
		return false;
    17de:	2200      	movs	r2, #0
    17e0:	e026      	b.n	1830 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    17e2:	7858      	ldrb	r0, [r3, #1]
    17e4:	0200      	lsls	r0, r0, #8
    17e6:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    17e8:	3302      	adds	r3, #2
    17ea:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    17ec:	3201      	adds	r2, #1
    17ee:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    17f0:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    17f2:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    17f4:	9805      	ldr	r0, [sp, #20]
    17f6:	68ab      	ldr	r3, [r5, #8]
    17f8:	4298      	cmp	r0, r3
    17fa:	d302      	bcc.n	1802 <_spi_m_sync_trans+0x6e>
    17fc:	9a06      	ldr	r2, [sp, #24]
    17fe:	4293      	cmp	r3, r2
    1800:	d929      	bls.n	1856 <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1802:	7ba3      	ldrb	r3, [r4, #14]
    1804:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1806:	075a      	lsls	r2, r3, #29
    1808:	d5e9      	bpl.n	17de <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    180a:	8b22      	ldrh	r2, [r4, #24]
    180c:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    180e:	9904      	ldr	r1, [sp, #16]
    1810:	2900      	cmp	r1, #0
    1812:	d008      	beq.n	1826 <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    1814:	1c48      	adds	r0, r1, #1
    1816:	9004      	str	r0, [sp, #16]
    1818:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    181a:	2e01      	cmp	r6, #1
    181c:	d903      	bls.n	1826 <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    181e:	1c88      	adds	r0, r1, #2
    1820:	9004      	str	r0, [sp, #16]
    1822:	0a12      	lsrs	r2, r2, #8
    1824:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    1826:	9a06      	ldr	r2, [sp, #24]
    1828:	9201      	str	r2, [sp, #4]
    182a:	3201      	adds	r2, #1
    182c:	9206      	str	r2, [sp, #24]
	return true;
    182e:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    1830:	2a00      	cmp	r2, #0
    1832:	d1df      	bne.n	17f4 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1834:	9906      	ldr	r1, [sp, #24]
    1836:	9a05      	ldr	r2, [sp, #20]
    1838:	4291      	cmp	r1, r2
    183a:	d3db      	bcc.n	17f4 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    183c:	07db      	lsls	r3, r3, #31
    183e:	d5d9      	bpl.n	17f4 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    1840:	9b03      	ldr	r3, [sp, #12]
    1842:	2b00      	cmp	r3, #0
    1844:	d005      	beq.n	1852 <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    1846:	1c59      	adds	r1, r3, #1
    1848:	9103      	str	r1, [sp, #12]
    184a:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    184c:	2e01      	cmp	r6, #1
    184e:	d8c8      	bhi.n	17e2 <_spi_m_sync_trans+0x4e>
    1850:	e7cc      	b.n	17ec <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    1852:	4909      	ldr	r1, [pc, #36]	; (1878 <_spi_m_sync_trans+0xe4>)
    1854:	e7ca      	b.n	17ec <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1856:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1858:	079b      	lsls	r3, r3, #30
    185a:	d0fc      	beq.n	1856 <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    185c:	2303      	movs	r3, #3
    185e:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1860:	b008      	add	sp, #32
    1862:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    1864:	2004      	movs	r0, #4
    1866:	4240      	negs	r0, r0
    1868:	e7fa      	b.n	1860 <_spi_m_sync_trans+0xcc>
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	00000a29 	.word	0x00000a29
    1870:	000037cc 	.word	0x000037cc
    1874:	00000cf9 	.word	0x00000cf9
    1878:	000001ff 	.word	0x000001ff

0000187c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    187c:	4b0f      	ldr	r3, [pc, #60]	; (18bc <_sysctrl_init_sources+0x40>)
    187e:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1880:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1882:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1884:	0f92      	lsrs	r2, r2, #30
    1886:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1888:	0409      	lsls	r1, r1, #16
    188a:	480d      	ldr	r0, [pc, #52]	; (18c0 <_sysctrl_init_sources+0x44>)
    188c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    188e:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1890:	490c      	ldr	r1, [pc, #48]	; (18c4 <_sysctrl_init_sources+0x48>)
    1892:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1894:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1896:	699a      	ldr	r2, [r3, #24]
    1898:	2102      	movs	r1, #2
    189a:	430a      	orrs	r2, r1
    189c:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    189e:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    18a0:	311d      	adds	r1, #29
    18a2:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    18a4:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <_sysctrl_init_sources+0x40>)
    18a8:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    18aa:	071b      	lsls	r3, r3, #28
    18ac:	d5fb      	bpl.n	18a6 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    18ae:	4a03      	ldr	r2, [pc, #12]	; (18bc <_sysctrl_init_sources+0x40>)
    18b0:	6a13      	ldr	r3, [r2, #32]
    18b2:	2180      	movs	r1, #128	; 0x80
    18b4:	430b      	orrs	r3, r1
    18b6:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    18b8:	4770      	bx	lr
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	40000800 	.word	0x40000800
    18c0:	0fff0000 	.word	0x0fff0000
    18c4:	00000302 	.word	0x00000302

000018c8 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    18c8:	4a02      	ldr	r2, [pc, #8]	; (18d4 <_sysctrl_init_referenced_generators+0xc>)
    18ca:	6993      	ldr	r3, [r2, #24]
    18cc:	2102      	movs	r1, #2
    18ce:	438b      	bics	r3, r1
    18d0:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    18d2:	4770      	bx	lr
    18d4:	40000800 	.word	0x40000800

000018d8 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    18d8:	4b02      	ldr	r3, [pc, #8]	; (18e4 <_system_time_init+0xc>)
    18da:	4a03      	ldr	r2, [pc, #12]	; (18e8 <_system_time_init+0x10>)
    18dc:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    18de:	2205      	movs	r2, #5
    18e0:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    18e2:	4770      	bx	lr
    18e4:	e000e010 	.word	0xe000e010
    18e8:	00ffffff 	.word	0x00ffffff

000018ec <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    18ec:	b510      	push	{r4, lr}
	_system_time_init(hw);
    18ee:	4b01      	ldr	r3, [pc, #4]	; (18f4 <_delay_init+0x8>)
    18f0:	4798      	blx	r3
}
    18f2:	bd10      	pop	{r4, pc}
    18f4:	000018d9 	.word	0x000018d9

000018f8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    18f8:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    18fa:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    18fc:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    18fe:	07d2      	lsls	r2, r2, #31
    1900:	d400      	bmi.n	1904 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    1902:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1904:	2201      	movs	r2, #1
    1906:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1908:	6803      	ldr	r3, [r0, #0]
    190a:	4798      	blx	r3
}
    190c:	e7f9      	b.n	1902 <tc_interrupt_handler+0xa>

0000190e <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    190e:	b570      	push	{r4, r5, r6, lr}
    1910:	0005      	movs	r5, r0
	void *const hw = device->hw;
    1912:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1914:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1916:	07db      	lsls	r3, r3, #31
    1918:	d505      	bpl.n	1926 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    191a:	2301      	movs	r3, #1
    191c:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    191e:	6803      	ldr	r3, [r0, #0]
    1920:	2b00      	cmp	r3, #0
    1922:	d000      	beq.n	1926 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1924:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1926:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1928:	079b      	lsls	r3, r3, #30
    192a:	d506      	bpl.n	193a <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    192c:	2302      	movs	r3, #2
    192e:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1930:	686b      	ldr	r3, [r5, #4]
    1932:	2b00      	cmp	r3, #0
    1934:	d001      	beq.n	193a <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1936:	0028      	movs	r0, r5
    1938:	4798      	blx	r3
		}
	}
}
    193a:	bd70      	pop	{r4, r5, r6, pc}

0000193c <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    193c:	4b02      	ldr	r3, [pc, #8]	; (1948 <tc_get_hardware_index+0xc>)
    193e:	469c      	mov	ip, r3
    1940:	4460      	add	r0, ip
    1942:	0a80      	lsrs	r0, r0, #10
    1944:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    1946:	4770      	bx	lr
    1948:	bdffe000 	.word	0xbdffe000

0000194c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    194c:	4b06      	ldr	r3, [pc, #24]	; (1968 <_tc_init_irq_param+0x1c>)
    194e:	4298      	cmp	r0, r3
    1950:	d003      	beq.n	195a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    1952:	4b06      	ldr	r3, [pc, #24]	; (196c <_tc_init_irq_param+0x20>)
    1954:	4298      	cmp	r0, r3
    1956:	d003      	beq.n	1960 <_tc_init_irq_param+0x14>
		_tc1_dev = (struct _timer_device *)dev;
	}
}
    1958:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    195a:	4b05      	ldr	r3, [pc, #20]	; (1970 <_tc_init_irq_param+0x24>)
    195c:	6019      	str	r1, [r3, #0]
    195e:	e7f8      	b.n	1952 <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    1960:	4b03      	ldr	r3, [pc, #12]	; (1970 <_tc_init_irq_param+0x24>)
    1962:	6059      	str	r1, [r3, #4]
}
    1964:	e7f8      	b.n	1958 <_tc_init_irq_param+0xc>
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	42002000 	.word	0x42002000
    196c:	42002400 	.word	0x42002400
    1970:	2000014c 	.word	0x2000014c

00001974 <get_tc_index>:
{
    1974:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    1976:	4b0d      	ldr	r3, [pc, #52]	; (19ac <get_tc_index+0x38>)
    1978:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    197a:	2300      	movs	r3, #0
    197c:	2b01      	cmp	r3, #1
    197e:	d80b      	bhi.n	1998 <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    1980:	009a      	lsls	r2, r3, #2
    1982:	18d2      	adds	r2, r2, r3
    1984:	0091      	lsls	r1, r2, #2
    1986:	4a0a      	ldr	r2, [pc, #40]	; (19b0 <get_tc_index+0x3c>)
    1988:	5c8a      	ldrb	r2, [r1, r2]
    198a:	4290      	cmp	r0, r2
    198c:	d002      	beq.n	1994 <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    198e:	3301      	adds	r3, #1
    1990:	b2db      	uxtb	r3, r3
    1992:	e7f3      	b.n	197c <get_tc_index+0x8>
			return i;
    1994:	b258      	sxtb	r0, r3
    1996:	e007      	b.n	19a8 <get_tc_index+0x34>
	ASSERT(false);
    1998:	22f8      	movs	r2, #248	; 0xf8
    199a:	32ff      	adds	r2, #255	; 0xff
    199c:	4905      	ldr	r1, [pc, #20]	; (19b4 <get_tc_index+0x40>)
    199e:	2000      	movs	r0, #0
    19a0:	4b05      	ldr	r3, [pc, #20]	; (19b8 <get_tc_index+0x44>)
    19a2:	4798      	blx	r3
	return -1;
    19a4:	2001      	movs	r0, #1
    19a6:	4240      	negs	r0, r0
}
    19a8:	bd10      	pop	{r4, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	0000193d 	.word	0x0000193d
    19b0:	20000000 	.word	0x20000000
    19b4:	000037e8 	.word	0x000037e8
    19b8:	00000cf9 	.word	0x00000cf9

000019bc <_timer_init>:
{
    19bc:	b570      	push	{r4, r5, r6, lr}
    19be:	0006      	movs	r6, r0
    19c0:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    19c2:	0008      	movs	r0, r1
    19c4:	4b3f      	ldr	r3, [pc, #252]	; (1ac4 <_timer_init+0x108>)
    19c6:	4798      	blx	r3
    19c8:	0005      	movs	r5, r0
	device->hw = hw;
    19ca:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    19cc:	229f      	movs	r2, #159	; 0x9f
    19ce:	493e      	ldr	r1, [pc, #248]	; (1ac8 <_timer_init+0x10c>)
    19d0:	2001      	movs	r0, #1
    19d2:	4b3e      	ldr	r3, [pc, #248]	; (1acc <_timer_init+0x110>)
    19d4:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    19d6:	7be3      	ldrb	r3, [r4, #15]
    19d8:	09db      	lsrs	r3, r3, #7
    19da:	d1fc      	bne.n	19d6 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    19dc:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    19de:	079b      	lsls	r3, r3, #30
    19e0:	d504      	bpl.n	19ec <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    19e2:	2300      	movs	r3, #0
    19e4:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    19e6:	7be3      	ldrb	r3, [r4, #15]
    19e8:	09db      	lsrs	r3, r3, #7
    19ea:	d1fc      	bne.n	19e6 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    19ec:	2301      	movs	r3, #1
    19ee:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    19f0:	7be3      	ldrb	r3, [r4, #15]
    19f2:	09db      	lsrs	r3, r3, #7
    19f4:	d1fc      	bne.n	19f0 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    19f6:	00aa      	lsls	r2, r5, #2
    19f8:	1952      	adds	r2, r2, r5
    19fa:	0091      	lsls	r1, r2, #2
    19fc:	4b34      	ldr	r3, [pc, #208]	; (1ad0 <_timer_init+0x114>)
    19fe:	185b      	adds	r3, r3, r1
    1a00:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a02:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1a04:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1a06:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1a08:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1a0a:	8163      	strh	r3, [r4, #10]
    1a0c:	230c      	movs	r3, #12
    1a0e:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1a10:	2b08      	cmp	r3, #8
    1a12:	d039      	beq.n	1a88 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1a14:	2b00      	cmp	r3, #0
    1a16:	d143      	bne.n	1aa0 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1a18:	4a2d      	ldr	r2, [pc, #180]	; (1ad0 <_timer_init+0x114>)
    1a1a:	00ab      	lsls	r3, r5, #2
    1a1c:	1958      	adds	r0, r3, r5
    1a1e:	0081      	lsls	r1, r0, #2
    1a20:	0008      	movs	r0, r1
    1a22:	1851      	adds	r1, r2, r1
    1a24:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a26:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1a28:	1812      	adds	r2, r2, r0
    1a2a:	8a13      	ldrh	r3, [r2, #16]
    1a2c:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1a2e:	2301      	movs	r3, #1
    1a30:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    1a32:	0031      	movs	r1, r6
    1a34:	0020      	movs	r0, r4
    1a36:	4b27      	ldr	r3, [pc, #156]	; (1ad4 <_timer_init+0x118>)
    1a38:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1a3a:	0020      	movs	r0, r4
    1a3c:	4b26      	ldr	r3, [pc, #152]	; (1ad8 <_timer_init+0x11c>)
    1a3e:	4798      	blx	r3
    1a40:	300d      	adds	r0, #13
    1a42:	b2c0      	uxtb	r0, r0
    1a44:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1a46:	2b00      	cmp	r3, #0
    1a48:	db0a      	blt.n	1a60 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a4a:	211f      	movs	r1, #31
    1a4c:	4001      	ands	r1, r0
    1a4e:	2201      	movs	r2, #1
    1a50:	408a      	lsls	r2, r1
    1a52:	2180      	movs	r1, #128	; 0x80
    1a54:	4c21      	ldr	r4, [pc, #132]	; (1adc <_timer_init+0x120>)
    1a56:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a5c:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1a60:	2b00      	cmp	r3, #0
    1a62:	db07      	blt.n	1a74 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a64:	211f      	movs	r1, #31
    1a66:	4001      	ands	r1, r0
    1a68:	2201      	movs	r2, #1
    1a6a:	408a      	lsls	r2, r1
    1a6c:	21c0      	movs	r1, #192	; 0xc0
    1a6e:	0049      	lsls	r1, r1, #1
    1a70:	4c1a      	ldr	r4, [pc, #104]	; (1adc <_timer_init+0x120>)
    1a72:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1a74:	2b00      	cmp	r3, #0
    1a76:	db05      	blt.n	1a84 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a78:	231f      	movs	r3, #31
    1a7a:	4018      	ands	r0, r3
    1a7c:	3b1e      	subs	r3, #30
    1a7e:	4083      	lsls	r3, r0
    1a80:	4a16      	ldr	r2, [pc, #88]	; (1adc <_timer_init+0x120>)
    1a82:	6013      	str	r3, [r2, #0]
}
    1a84:	2000      	movs	r0, #0
    1a86:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1a88:	4a11      	ldr	r2, [pc, #68]	; (1ad0 <_timer_init+0x114>)
    1a8a:	00ab      	lsls	r3, r5, #2
    1a8c:	1958      	adds	r0, r3, r5
    1a8e:	0081      	lsls	r1, r0, #2
    1a90:	0008      	movs	r0, r1
    1a92:	1851      	adds	r1, r2, r1
    1a94:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1a96:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1a98:	1812      	adds	r2, r2, r0
    1a9a:	6913      	ldr	r3, [r2, #16]
    1a9c:	61e3      	str	r3, [r4, #28]
    1a9e:	e7c6      	b.n	1a2e <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1aa0:	2b04      	cmp	r3, #4
    1aa2:	d1c4      	bne.n	1a2e <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1aa4:	490a      	ldr	r1, [pc, #40]	; (1ad0 <_timer_init+0x114>)
    1aa6:	00ab      	lsls	r3, r5, #2
    1aa8:	1958      	adds	r0, r3, r5
    1aaa:	0082      	lsls	r2, r0, #2
    1aac:	188a      	adds	r2, r1, r2
    1aae:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1ab0:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    1ab2:	7c12      	ldrb	r2, [r2, #16]
    1ab4:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1ab6:	195d      	adds	r5, r3, r5
    1ab8:	00ab      	lsls	r3, r5, #2
    1aba:	18c9      	adds	r1, r1, r3
    1abc:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1abe:	7523      	strb	r3, [r4, #20]
    1ac0:	e7b5      	b.n	1a2e <_timer_init+0x72>
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	00001975 	.word	0x00001975
    1ac8:	000037e8 	.word	0x000037e8
    1acc:	00000cf9 	.word	0x00000cf9
    1ad0:	20000000 	.word	0x20000000
    1ad4:	0000194d 	.word	0x0000194d
    1ad8:	0000193d 	.word	0x0000193d
    1adc:	e000e100 	.word	0xe000e100

00001ae0 <_pwm_init>:
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
    1ae2:	0005      	movs	r5, r0
    1ae4:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    1ae6:	0008      	movs	r0, r1
    1ae8:	4b35      	ldr	r3, [pc, #212]	; (1bc0 <_pwm_init+0xe0>)
    1aea:	4798      	blx	r3
	device->hw = hw;
    1aec:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1aee:	7be3      	ldrb	r3, [r4, #15]
    1af0:	09db      	lsrs	r3, r3, #7
    1af2:	d1fc      	bne.n	1aee <_pwm_init+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1af4:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1af6:	079b      	lsls	r3, r3, #30
    1af8:	d504      	bpl.n	1b04 <_pwm_init+0x24>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1afa:	2300      	movs	r3, #0
    1afc:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1afe:	7be3      	ldrb	r3, [r4, #15]
    1b00:	09db      	lsrs	r3, r3, #7
    1b02:	d1fc      	bne.n	1afe <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b04:	2301      	movs	r3, #1
    1b06:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1b08:	7be3      	ldrb	r3, [r4, #15]
    1b0a:	09db      	lsrs	r3, r3, #7
    1b0c:	d1fc      	bne.n	1b08 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1b0e:	0082      	lsls	r2, r0, #2
    1b10:	1812      	adds	r2, r2, r0
    1b12:	0091      	lsls	r1, r2, #2
    1b14:	4b2b      	ldr	r3, [pc, #172]	; (1bc4 <_pwm_init+0xe4>)
    1b16:	185b      	adds	r3, r3, r1
    1b18:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1b1a:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1b1c:	7919      	ldrb	r1, [r3, #4]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1b1e:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1b20:	88db      	ldrh	r3, [r3, #6]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1b22:	8163      	strh	r3, [r4, #10]
    1b24:	230c      	movs	r3, #12
    1b26:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1b28:	2b08      	cmp	r3, #8
    1b2a:	d037      	beq.n	1b9c <_pwm_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d141      	bne.n	1bb4 <_pwm_init+0xd4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1b30:	4a24      	ldr	r2, [pc, #144]	; (1bc4 <_pwm_init+0xe4>)
    1b32:	0083      	lsls	r3, r0, #2
    1b34:	181e      	adds	r6, r3, r0
    1b36:	00b1      	lsls	r1, r6, #2
    1b38:	000e      	movs	r6, r1
    1b3a:	1851      	adds	r1, r2, r1
    1b3c:	8989      	ldrh	r1, [r1, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1b3e:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1b40:	1992      	adds	r2, r2, r6
    1b42:	8a13      	ldrh	r3, [r2, #16]
    1b44:	8363      	strh	r3, [r4, #26]
	_tc_init_irq_param(hw, (void *)device);
    1b46:	0029      	movs	r1, r5
    1b48:	0020      	movs	r0, r4
    1b4a:	4b1f      	ldr	r3, [pc, #124]	; (1bc8 <_pwm_init+0xe8>)
    1b4c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1b4e:	0020      	movs	r0, r4
    1b50:	4b1e      	ldr	r3, [pc, #120]	; (1bcc <_pwm_init+0xec>)
    1b52:	4798      	blx	r3
    1b54:	300d      	adds	r0, #13
    1b56:	b2c0      	uxtb	r0, r0
    1b58:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	db0a      	blt.n	1b74 <_pwm_init+0x94>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b5e:	211f      	movs	r1, #31
    1b60:	4001      	ands	r1, r0
    1b62:	2201      	movs	r2, #1
    1b64:	408a      	lsls	r2, r1
    1b66:	2180      	movs	r1, #128	; 0x80
    1b68:	4c19      	ldr	r4, [pc, #100]	; (1bd0 <_pwm_init+0xf0>)
    1b6a:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1b6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b70:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1b74:	2b00      	cmp	r3, #0
    1b76:	db07      	blt.n	1b88 <_pwm_init+0xa8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b78:	211f      	movs	r1, #31
    1b7a:	4001      	ands	r1, r0
    1b7c:	2201      	movs	r2, #1
    1b7e:	408a      	lsls	r2, r1
    1b80:	21c0      	movs	r1, #192	; 0xc0
    1b82:	0049      	lsls	r1, r1, #1
    1b84:	4c12      	ldr	r4, [pc, #72]	; (1bd0 <_pwm_init+0xf0>)
    1b86:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1b88:	2b00      	cmp	r3, #0
    1b8a:	db16      	blt.n	1bba <_pwm_init+0xda>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b8c:	231f      	movs	r3, #31
    1b8e:	4018      	ands	r0, r3
    1b90:	3b1e      	subs	r3, #30
    1b92:	4083      	lsls	r3, r0
    1b94:	4a0e      	ldr	r2, [pc, #56]	; (1bd0 <_pwm_init+0xf0>)
    1b96:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    1b98:	2000      	movs	r0, #0
}
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1b9c:	4a09      	ldr	r2, [pc, #36]	; (1bc4 <_pwm_init+0xe4>)
    1b9e:	0083      	lsls	r3, r0, #2
    1ba0:	181e      	adds	r6, r3, r0
    1ba2:	00b1      	lsls	r1, r6, #2
    1ba4:	000e      	movs	r6, r1
    1ba6:	1851      	adds	r1, r2, r1
    1ba8:	68c9      	ldr	r1, [r1, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1baa:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1bac:	1992      	adds	r2, r2, r6
    1bae:	6913      	ldr	r3, [r2, #16]
    1bb0:	61e3      	str	r3, [r4, #28]
    1bb2:	e7c8      	b.n	1b46 <_pwm_init+0x66>
		return ERR_INVALID_DATA;
    1bb4:	2001      	movs	r0, #1
    1bb6:	4240      	negs	r0, r0
    1bb8:	e7ef      	b.n	1b9a <_pwm_init+0xba>
	return ERR_NONE;
    1bba:	2000      	movs	r0, #0
    1bbc:	e7ed      	b.n	1b9a <_pwm_init+0xba>
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	00001975 	.word	0x00001975
    1bc4:	20000000 	.word	0x20000000
    1bc8:	0000194d 	.word	0x0000194d
    1bcc:	0000193d 	.word	0x0000193d
    1bd0:	e000e100 	.word	0xe000e100

00001bd4 <_tc_get_timer>:
}
    1bd4:	2000      	movs	r0, #0
    1bd6:	4770      	bx	lr

00001bd8 <_tc_get_pwm>:
}
    1bd8:	2000      	movs	r0, #0
    1bda:	4770      	bx	lr

00001bdc <TC0_Handler>:
{
    1bdc:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    1bde:	4b02      	ldr	r3, [pc, #8]	; (1be8 <TC0_Handler+0xc>)
    1be0:	6818      	ldr	r0, [r3, #0]
    1be2:	4b02      	ldr	r3, [pc, #8]	; (1bec <TC0_Handler+0x10>)
    1be4:	4798      	blx	r3
}
    1be6:	bd10      	pop	{r4, pc}
    1be8:	2000014c 	.word	0x2000014c
    1bec:	0000190f 	.word	0x0000190f

00001bf0 <TC1_Handler>:
{
    1bf0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc1_dev);
    1bf2:	4b02      	ldr	r3, [pc, #8]	; (1bfc <TC1_Handler+0xc>)
    1bf4:	6858      	ldr	r0, [r3, #4]
    1bf6:	4b02      	ldr	r3, [pc, #8]	; (1c00 <TC1_Handler+0x10>)
    1bf8:	4798      	blx	r3
}
    1bfa:	bd10      	pop	{r4, pc}
    1bfc:	2000014c 	.word	0x2000014c
    1c00:	000018f9 	.word	0x000018f9

00001c04 <main>:
volatile uint8_t help[4] = "help";
volatile uint8_t test[4] = "test";


int main(void)
{
    1c04:	b510      	push	{r4, lr}
    1c06:	b082      	sub	sp, #8
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1c08:	4810      	ldr	r0, [pc, #64]	; (1c4c <main+0x48>)
    1c0a:	21c2      	movs	r1, #194	; 0xc2
    1c0c:	0089      	lsls	r1, r1, #2
    1c0e:	5843      	ldr	r3, [r0, r1]
    1c10:	4a0f      	ldr	r2, [pc, #60]	; (1c50 <main+0x4c>)
    1c12:	401a      	ands	r2, r3
    1c14:	2380      	movs	r3, #128	; 0x80
    1c16:	03db      	lsls	r3, r3, #15
    1c18:	4313      	orrs	r3, r2
    1c1a:	5043      	str	r3, [r0, r1]
	NVIC_SetPriority(10,1);
	/* Initializes MCU, drivers and middle ware */
	atmel_start_init();
    1c1c:	4b0d      	ldr	r3, [pc, #52]	; (1c54 <main+0x50>)
    1c1e:	4798      	blx	r3
	
	// init asynchronous driver
	async_setup();
    1c20:	4b0d      	ldr	r3, [pc, #52]	; (1c58 <main+0x54>)
    1c22:	4798      	blx	r3
	
	SPQ = xQueueCreate((UBaseType_t) 20, (UBaseType_t) sizeof(SPPEvent));
    1c24:	2200      	movs	r2, #0
    1c26:	2108      	movs	r1, #8
    1c28:	2014      	movs	r0, #20
    1c2a:	4b0c      	ldr	r3, [pc, #48]	; (1c5c <main+0x58>)
    1c2c:	4798      	blx	r3
    1c2e:	0003      	movs	r3, r0
    1c30:	4a0b      	ldr	r2, [pc, #44]	; (1c60 <main+0x5c>)
    1c32:	6010      	str	r0, [r2, #0]
		
	xTaskCreate(sppe_task, "sppe", configMINIMAL_STACK_SIZE, SPQ, 1, NULL);
    1c34:	2200      	movs	r2, #0
    1c36:	9201      	str	r2, [sp, #4]
    1c38:	3201      	adds	r2, #1
    1c3a:	9200      	str	r2, [sp, #0]
    1c3c:	323f      	adds	r2, #63	; 0x3f
    1c3e:	4909      	ldr	r1, [pc, #36]	; (1c64 <main+0x60>)
    1c40:	4809      	ldr	r0, [pc, #36]	; (1c68 <main+0x64>)
    1c42:	4c0a      	ldr	r4, [pc, #40]	; (1c6c <main+0x68>)
    1c44:	47a0      	blx	r4

	vTaskStartScheduler();
    1c46:	4b0a      	ldr	r3, [pc, #40]	; (1c70 <main+0x6c>)
    1c48:	4798      	blx	r3
    1c4a:	e7fe      	b.n	1c4a <main+0x46>
    1c4c:	e000e100 	.word	0xe000e100
    1c50:	ff00ffff 	.word	0xff00ffff
    1c54:	00000105 	.word	0x00000105
    1c58:	00001d5d 	.word	0x00001d5d
    1c5c:	000024ad 	.word	0x000024ad
    1c60:	20002a7c 	.word	0x20002a7c
    1c64:	000037fc 	.word	0x000037fc
    1c68:	00001d91 	.word	0x00001d91
    1c6c:	00002b89 	.word	0x00002b89
    1c70:	00002bf9 	.word	0x00002bf9

00001c74 <touch_init>:
#include <atmel_start.h>

#include "touch.h"
void touch_init(void)
{
}
    1c74:	4770      	bx	lr

00001c76 <serial_tx_cb>:


static void serial_tx_cb(const struct usart_async_descriptor *const io_descr)
{
	
}
    1c76:	4770      	bx	lr

00001c78 <serial_rx_cb>:
{
    1c78:	b570      	push	{r4, r5, r6, lr}
    1c7a:	b084      	sub	sp, #16
	count = io_read(&SERIAL.io, &ch, 1);
    1c7c:	2201      	movs	r2, #1
    1c7e:	466b      	mov	r3, sp
    1c80:	1dd9      	adds	r1, r3, #7
    1c82:	482d      	ldr	r0, [pc, #180]	; (1d38 <serial_rx_cb+0xc0>)
    1c84:	4b2d      	ldr	r3, [pc, #180]	; (1d3c <serial_rx_cb+0xc4>)
    1c86:	4798      	blx	r3
    1c88:	b2c1      	uxtb	r1, r0
	if (serial_receiving == 0)
    1c8a:	4b2d      	ldr	r3, [pc, #180]	; (1d40 <serial_rx_cb+0xc8>)
    1c8c:	781b      	ldrb	r3, [r3, #0]
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d112      	bne.n	1cb8 <serial_rx_cb+0x40>
		if(ch != '\r' && ch != '\n')
    1c92:	466b      	mov	r3, sp
    1c94:	79da      	ldrb	r2, [r3, #7]
    1c96:	2a0d      	cmp	r2, #13
    1c98:	d024      	beq.n	1ce4 <serial_rx_cb+0x6c>
    1c9a:	2a0a      	cmp	r2, #10
    1c9c:	d022      	beq.n	1ce4 <serial_rx_cb+0x6c>
			serial_receiving = 1;
    1c9e:	4b28      	ldr	r3, [pc, #160]	; (1d40 <serial_rx_cb+0xc8>)
    1ca0:	2001      	movs	r0, #1
    1ca2:	7018      	strb	r0, [r3, #0]
			byteCount = 0;
    1ca4:	2000      	movs	r0, #0
    1ca6:	7058      	strb	r0, [r3, #1]
			rx_buffer[byteCount] = ch;
    1ca8:	7858      	ldrb	r0, [r3, #1]
    1caa:	1818      	adds	r0, r3, r0
    1cac:	7102      	strb	r2, [r0, #4]
			byteCount += count;
    1cae:	7858      	ldrb	r0, [r3, #1]
    1cb0:	1840      	adds	r0, r0, r1
    1cb2:	b2c0      	uxtb	r0, r0
    1cb4:	7058      	strb	r0, [r3, #1]
    1cb6:	e015      	b.n	1ce4 <serial_rx_cb+0x6c>
		rx_buffer[byteCount] = ch;
    1cb8:	4b21      	ldr	r3, [pc, #132]	; (1d40 <serial_rx_cb+0xc8>)
    1cba:	785a      	ldrb	r2, [r3, #1]
    1cbc:	4668      	mov	r0, sp
    1cbe:	79c4      	ldrb	r4, [r0, #7]
    1cc0:	189a      	adds	r2, r3, r2
    1cc2:	7114      	strb	r4, [r2, #4]
		byteCount += count;
    1cc4:	7858      	ldrb	r0, [r3, #1]
    1cc6:	1840      	adds	r0, r0, r1
    1cc8:	b2c0      	uxtb	r0, r0
    1cca:	7058      	strb	r0, [r3, #1]
		if (ch == '\r' || ch == '\n')
    1ccc:	2c0d      	cmp	r4, #13
    1cce:	d00b      	beq.n	1ce8 <serial_rx_cb+0x70>
    1cd0:	2c0a      	cmp	r4, #10
    1cd2:	d009      	beq.n	1ce8 <serial_rx_cb+0x70>
		if (byteCount >= SERIAL_BUFFER_SIZE)
    1cd4:	4b1a      	ldr	r3, [pc, #104]	; (1d40 <serial_rx_cb+0xc8>)
    1cd6:	785b      	ldrb	r3, [r3, #1]
    1cd8:	b2db      	uxtb	r3, r3
    1cda:	2bc7      	cmp	r3, #199	; 0xc7
    1cdc:	d902      	bls.n	1ce4 <serial_rx_cb+0x6c>
			byteCount = 0;
    1cde:	2200      	movs	r2, #0
    1ce0:	4b17      	ldr	r3, [pc, #92]	; (1d40 <serial_rx_cb+0xc8>)
    1ce2:	705a      	strb	r2, [r3, #1]
}
    1ce4:	b004      	add	sp, #16
    1ce6:	bd70      	pop	{r4, r5, r6, pc}
			totalBytes = byteCount - 2;
    1ce8:	4c15      	ldr	r4, [pc, #84]	; (1d40 <serial_rx_cb+0xc8>)
    1cea:	7863      	ldrb	r3, [r4, #1]
    1cec:	3b02      	subs	r3, #2
    1cee:	b2db      	uxtb	r3, r3
    1cf0:	4d14      	ldr	r5, [pc, #80]	; (1d44 <serial_rx_cb+0xcc>)
    1cf2:	224c      	movs	r2, #76	; 0x4c
    1cf4:	54ab      	strb	r3, [r5, r2]
			serial_receiving = 0;
    1cf6:	2300      	movs	r3, #0
    1cf8:	7023      	strb	r3, [r4, #0]
			serial_complete = 0;
    1cfa:	3201      	adds	r2, #1
    1cfc:	54ab      	strb	r3, [r5, r2]
			memcpy(&tx_buffer[20], &rx_buffer[0], SERIAL_BUFFER_SIZE); //get rid of "Processing Command: " from buffer
    1cfe:	3404      	adds	r4, #4
    1d00:	327b      	adds	r2, #123	; 0x7b
    1d02:	0021      	movs	r1, r4
    1d04:	4810      	ldr	r0, [pc, #64]	; (1d48 <serial_rx_cb+0xd0>)
    1d06:	3014      	adds	r0, #20
    1d08:	4e10      	ldr	r6, [pc, #64]	; (1d4c <serial_rx_cb+0xd4>)
    1d0a:	47b0      	blx	r6
			memcpy(&command_buffer[0], &rx_buffer[0], SERIAL_BUFFER_SIZE); // can delete this later
    1d0c:	3550      	adds	r5, #80	; 0x50
    1d0e:	22c8      	movs	r2, #200	; 0xc8
    1d10:	0021      	movs	r1, r4
    1d12:	0028      	movs	r0, r5
    1d14:	47b0      	blx	r6
			event.pvData = command_buffer;
    1d16:	a902      	add	r1, sp, #8
    1d18:	604d      	str	r5, [r1, #4]
			event.eventType = eSPPTxEvent;
    1d1a:	2302      	movs	r3, #2
    1d1c:	700b      	strb	r3, [r1, #0]
			xQueueSendFromISR(SPQ, &event, configMAX_PRIORITIES-1);
    1d1e:	4b0c      	ldr	r3, [pc, #48]	; (1d50 <serial_rx_cb+0xd8>)
    1d20:	6818      	ldr	r0, [r3, #0]
    1d22:	2300      	movs	r3, #0
    1d24:	2204      	movs	r2, #4
    1d26:	4d0b      	ldr	r5, [pc, #44]	; (1d54 <serial_rx_cb+0xdc>)
    1d28:	47a8      	blx	r5
			memset(&rx_buffer, 0x00, SERIAL_BUFFER_SIZE);
    1d2a:	22c8      	movs	r2, #200	; 0xc8
    1d2c:	2100      	movs	r1, #0
    1d2e:	0020      	movs	r0, r4
    1d30:	4b09      	ldr	r3, [pc, #36]	; (1d58 <serial_rx_cb+0xe0>)
    1d32:	4798      	blx	r3
    1d34:	e7ce      	b.n	1cd4 <serial_rx_cb+0x5c>
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	200029ac 	.word	0x200029ac
    1d3c:	0000079d 	.word	0x0000079d
    1d40:	20000154 	.word	0x20000154
    1d44:	200001d4 	.word	0x200001d4
    1d48:	20000028 	.word	0x20000028
    1d4c:	0000357d 	.word	0x0000357d
    1d50:	20002a7c 	.word	0x20002a7c
    1d54:	00002685 	.word	0x00002685
    1d58:	0000358f 	.word	0x0000358f

00001d5c <async_setup>:

void async_setup(void)
{
    1d5c:	b570      	push	{r4, r5, r6, lr}
	
	usart_async_register_callback(&SERIAL, USART_ASYNC_TXC_CB, serial_tx_cb);
    1d5e:	4c07      	ldr	r4, [pc, #28]	; (1d7c <async_setup+0x20>)
    1d60:	4a07      	ldr	r2, [pc, #28]	; (1d80 <async_setup+0x24>)
    1d62:	2101      	movs	r1, #1
    1d64:	0020      	movs	r0, r4
    1d66:	4d07      	ldr	r5, [pc, #28]	; (1d84 <async_setup+0x28>)
    1d68:	47a8      	blx	r5
	usart_async_register_callback(&SERIAL, USART_ASYNC_RXC_CB, serial_rx_cb);
    1d6a:	4a07      	ldr	r2, [pc, #28]	; (1d88 <async_setup+0x2c>)
    1d6c:	2100      	movs	r1, #0
    1d6e:	0020      	movs	r0, r4
    1d70:	47a8      	blx	r5
	usart_async_enable(&SERIAL);
    1d72:	0020      	movs	r0, r4
    1d74:	4b05      	ldr	r3, [pc, #20]	; (1d8c <async_setup+0x30>)
    1d76:	4798      	blx	r3
	
	
    1d78:	bd70      	pop	{r4, r5, r6, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	200029ac 	.word	0x200029ac
    1d80:	00001c77 	.word	0x00001c77
    1d84:	00000c81 	.word	0x00000c81
    1d88:	00001c79 	.word	0x00001c79
    1d8c:	00000c55 	.word	0x00000c55

00001d90 <sppe_task>:
#include "send_transmit.h"
//volatile uint8_t help[4] = "help";
volatile uint8_t help1[5] = "help1";

void sppe_task(void *pvParameters)
{
    1d90:	b500      	push	{lr}
    1d92:	b0bb      	sub	sp, #236	; 0xec
	volatile uint8_t received[220] = {0x00};
    1d94:	22dc      	movs	r2, #220	; 0xdc
    1d96:	2100      	movs	r1, #0
    1d98:	a803      	add	r0, sp, #12
    1d9a:	4b07      	ldr	r3, [pc, #28]	; (1db8 <sppe_task+0x28>)
    1d9c:	4798      	blx	r3
	SPPEvent receivedEvent;
	for (;;)
	{
		/* Wait until there is something to do. */
		xQueueReceive(SPQ, &receivedEvent, portMAX_DELAY);
    1d9e:	4b07      	ldr	r3, [pc, #28]	; (1dbc <sppe_task+0x2c>)
    1da0:	6818      	ldr	r0, [r3, #0]
    1da2:	2201      	movs	r2, #1
    1da4:	4252      	negs	r2, r2
    1da6:	a901      	add	r1, sp, #4
    1da8:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <sppe_task+0x30>)
    1daa:	4798      	blx	r3
		io_write(&SERIAL.io, receivedEvent.pvData, 30);
    1dac:	9902      	ldr	r1, [sp, #8]
    1dae:	221e      	movs	r2, #30
    1db0:	4804      	ldr	r0, [pc, #16]	; (1dc4 <sppe_task+0x34>)
    1db2:	4b05      	ldr	r3, [pc, #20]	; (1dc8 <sppe_task+0x38>)
    1db4:	4798      	blx	r3
    1db6:	e7f2      	b.n	1d9e <sppe_task+0xe>
    1db8:	0000358f 	.word	0x0000358f
    1dbc:	20002a7c 	.word	0x20002a7c
    1dc0:	00002771 	.word	0x00002771
    1dc4:	200029ac 	.word	0x200029ac
    1dc8:	00000765 	.word	0x00000765

00001dcc <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    1dcc:	0003      	movs	r3, r0
    1dce:	3308      	adds	r3, #8
    1dd0:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1dd2:	2201      	movs	r2, #1
    1dd4:	4252      	negs	r2, r2
    1dd6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    1dd8:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    1dda:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    1ddc:	2300      	movs	r3, #0
    1dde:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
	listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
    1de0:	4770      	bx	lr

00001de2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1de2:	2300      	movs	r3, #0
    1de4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
    1de6:	4770      	bx	lr

00001de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    1de8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    1dea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1dec:	689a      	ldr	r2, [r3, #8]
    1dee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1df0:	689a      	ldr	r2, [r3, #8]
    1df2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    1df4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    1df6:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1df8:	6803      	ldr	r3, [r0, #0]
    1dfa:	3301      	adds	r3, #1
    1dfc:	6003      	str	r3, [r0, #0]
}
    1dfe:	4770      	bx	lr

00001e00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    1e00:	b530      	push	{r4, r5, lr}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1e02:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    1e04:	1c63      	adds	r3, r4, #1
    1e06:	d002      	beq.n	1e0e <vListInsert+0xe>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1e08:	0002      	movs	r2, r0
    1e0a:	3208      	adds	r2, #8
    1e0c:	e002      	b.n	1e14 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
    1e0e:	6902      	ldr	r2, [r0, #16]
    1e10:	e004      	b.n	1e1c <vListInsert+0x1c>
		     pxIterator
		     = pxIterator
    1e12:	001a      	movs	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1e14:	6853      	ldr	r3, [r2, #4]
    1e16:	681d      	ldr	r5, [r3, #0]
    1e18:	42ac      	cmp	r4, r5
    1e1a:	d2fa      	bcs.n	1e12 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    1e1c:	6853      	ldr	r3, [r2, #4]
    1e1e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1e20:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    1e22:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    1e24:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    1e26:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1e28:	6803      	ldr	r3, [r0, #0]
    1e2a:	3301      	adds	r3, #1
    1e2c:	6003      	str	r3, [r0, #0]
}
    1e2e:	bd30      	pop	{r4, r5, pc}

00001e30 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    1e30:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1e32:	6842      	ldr	r2, [r0, #4]
    1e34:	6881      	ldr	r1, [r0, #8]
    1e36:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1e38:	6882      	ldr	r2, [r0, #8]
    1e3a:	6841      	ldr	r1, [r0, #4]
    1e3c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    1e3e:	685a      	ldr	r2, [r3, #4]
    1e40:	4290      	cmp	r0, r2
    1e42:	d006      	beq.n	1e52 <uxListRemove+0x22>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1e44:	2200      	movs	r2, #0
    1e46:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    1e48:	681a      	ldr	r2, [r3, #0]
    1e4a:	3a01      	subs	r2, #1
    1e4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1e4e:	6818      	ldr	r0, [r3, #0]
}
    1e50:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1e52:	6882      	ldr	r2, [r0, #8]
    1e54:	605a      	str	r2, [r3, #4]
    1e56:	e7f5      	b.n	1e44 <uxListRemove+0x14>

00001e58 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    1e58:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0UL;
    1e5a:	2300      	movs	r3, #0
    1e5c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    1e5e:	4b06      	ldr	r3, [pc, #24]	; (1e78 <prvTaskExitError+0x20>)
    1e60:	681b      	ldr	r3, [r3, #0]
    1e62:	3301      	adds	r3, #1
    1e64:	d001      	beq.n	1e6a <prvTaskExitError+0x12>
    1e66:	b672      	cpsid	i
    1e68:	e7fe      	b.n	1e68 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    1e6a:	b672      	cpsid	i
	while (ulDummy == 0) {
    1e6c:	9b01      	ldr	r3, [sp, #4]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d0fc      	beq.n	1e6c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1e72:	b002      	add	sp, #8
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	20000104 	.word	0x20000104
    1e7c:	00000000 	.word	0x00000000

00001e80 <vPortStartFirstTask>:
void vPortStartFirstTask(void)
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1e80:	4a0b      	ldr	r2, [pc, #44]	; (1eb0 <pxCurrentTCBConst2>)
    1e82:	6813      	ldr	r3, [r2, #0]
    1e84:	6818      	ldr	r0, [r3, #0]
    1e86:	3020      	adds	r0, #32
    1e88:	f380 8809 	msr	PSP, r0
    1e8c:	2002      	movs	r0, #2
    1e8e:	f380 8814 	msr	CONTROL, r0
    1e92:	f3bf 8f6f 	isb	sy
    1e96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1e98:	46ae      	mov	lr, r5
    1e9a:	bc08      	pop	{r3}
    1e9c:	bc04      	pop	{r2}
    1e9e:	b662      	cpsie	i
    1ea0:	4718      	bx	r3
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	46c0      	nop			; (mov r8, r8)
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	46c0      	nop			; (mov r8, r8)
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	46c0      	nop			; (mov r8, r8)
    1eae:	46c0      	nop			; (mov r8, r8)

00001eb0 <pxCurrentTCBConst2>:
    1eb0:	20002948 	.word	0x20002948

00001eb4 <prvSetupTimerInterrupt>:
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL)          = 0UL;
    1eb4:	4b05      	ldr	r3, [pc, #20]	; (1ecc <prvSetupTimerInterrupt+0x18>)
    1eb6:	2200      	movs	r2, #0
    1eb8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1eba:	4905      	ldr	r1, [pc, #20]	; (1ed0 <prvSetupTimerInterrupt+0x1c>)
    1ebc:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = (configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    1ebe:	4905      	ldr	r1, [pc, #20]	; (1ed4 <prvSetupTimerInterrupt+0x20>)
    1ec0:	4a05      	ldr	r2, [pc, #20]	; (1ed8 <prvSetupTimerInterrupt+0x24>)
    1ec2:	6011      	str	r1, [r2, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1ec4:	2207      	movs	r2, #7
    1ec6:	601a      	str	r2, [r3, #0]
}
    1ec8:	4770      	bx	lr
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	e000e010 	.word	0xe000e010
    1ed0:	e000e018 	.word	0xe000e018
    1ed4:	000003e7 	.word	0x000003e7
    1ed8:	e000e014 	.word	0xe000e014

00001edc <pxPortInitialiseStack>:
{
    1edc:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    1ede:	1f03      	subs	r3, r0, #4
    1ee0:	2480      	movs	r4, #128	; 0x80
    1ee2:	0464      	lsls	r4, r4, #17
    1ee4:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = (StackType_t)pxCode; /* PC */
    1ee6:	3b04      	subs	r3, #4
    1ee8:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    1eea:	3b04      	subs	r3, #4
    1eec:	4902      	ldr	r1, [pc, #8]	; (1ef8 <pxPortInitialiseStack+0x1c>)
    1eee:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = (StackType_t)pvParameters;            /* R0 */
    1ef0:	3b14      	subs	r3, #20
    1ef2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;                                    /* R11..R4. */
    1ef4:	3840      	subs	r0, #64	; 0x40
}
    1ef6:	bd10      	pop	{r4, pc}
    1ef8:	00001e59 	.word	0x00001e59

00001efc <SVCall_Handler>:
}
    1efc:	4770      	bx	lr
	...

00001f00 <xPortStartScheduler>:
{
    1f00:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1f02:	4b0c      	ldr	r3, [pc, #48]	; (1f34 <xPortStartScheduler+0x34>)
    1f04:	6819      	ldr	r1, [r3, #0]
    1f06:	22ff      	movs	r2, #255	; 0xff
    1f08:	0412      	lsls	r2, r2, #16
    1f0a:	430a      	orrs	r2, r1
    1f0c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1f0e:	6819      	ldr	r1, [r3, #0]
    1f10:	22ff      	movs	r2, #255	; 0xff
    1f12:	0612      	lsls	r2, r2, #24
    1f14:	430a      	orrs	r2, r1
    1f16:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
    1f18:	4b07      	ldr	r3, [pc, #28]	; (1f38 <xPortStartScheduler+0x38>)
    1f1a:	4798      	blx	r3
	uxCriticalNesting = 0;
    1f1c:	2200      	movs	r2, #0
    1f1e:	4b07      	ldr	r3, [pc, #28]	; (1f3c <xPortStartScheduler+0x3c>)
    1f20:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
    1f22:	4b07      	ldr	r3, [pc, #28]	; (1f40 <xPortStartScheduler+0x40>)
    1f24:	4798      	blx	r3
	vTaskSwitchContext();
    1f26:	4b07      	ldr	r3, [pc, #28]	; (1f44 <xPortStartScheduler+0x44>)
    1f28:	4798      	blx	r3
	prvTaskExitError();
    1f2a:	4b07      	ldr	r3, [pc, #28]	; (1f48 <xPortStartScheduler+0x48>)
    1f2c:	4798      	blx	r3
}
    1f2e:	2000      	movs	r0, #0
    1f30:	bd10      	pop	{r4, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	e000ed20 	.word	0xe000ed20
    1f38:	00001eb5 	.word	0x00001eb5
    1f3c:	20000104 	.word	0x20000104
    1f40:	00001e81 	.word	0x00001e81
    1f44:	00002e75 	.word	0x00002e75
    1f48:	00001e59 	.word	0x00001e59

00001f4c <vPortYield>:
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1f4c:	2280      	movs	r2, #128	; 0x80
    1f4e:	0552      	lsls	r2, r2, #21
    1f50:	4b03      	ldr	r3, [pc, #12]	; (1f60 <vPortYield+0x14>)
    1f52:	601a      	str	r2, [r3, #0]
	__asm volatile("dsb" ::: "memory");
    1f54:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    1f58:	f3bf 8f6f 	isb	sy
}
    1f5c:	4770      	bx	lr
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	e000ed04 	.word	0xe000ed04

00001f64 <vPortEnterCritical>:
	portDISABLE_INTERRUPTS();
    1f64:	b672      	cpsid	i
	uxCriticalNesting++;
    1f66:	4a04      	ldr	r2, [pc, #16]	; (1f78 <vPortEnterCritical+0x14>)
    1f68:	6813      	ldr	r3, [r2, #0]
    1f6a:	3301      	adds	r3, #1
    1f6c:	6013      	str	r3, [r2, #0]
	__asm volatile("dsb" ::: "memory");
    1f6e:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    1f72:	f3bf 8f6f 	isb	sy
}
    1f76:	4770      	bx	lr
    1f78:	20000104 	.word	0x20000104

00001f7c <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    1f7c:	4b06      	ldr	r3, [pc, #24]	; (1f98 <vPortExitCritical+0x1c>)
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d101      	bne.n	1f88 <vPortExitCritical+0xc>
    1f84:	b672      	cpsid	i
    1f86:	e7fe      	b.n	1f86 <vPortExitCritical+0xa>
	uxCriticalNesting--;
    1f88:	3b01      	subs	r3, #1
    1f8a:	4a03      	ldr	r2, [pc, #12]	; (1f98 <vPortExitCritical+0x1c>)
    1f8c:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d100      	bne.n	1f94 <vPortExitCritical+0x18>
		portENABLE_INTERRUPTS();
    1f92:	b662      	cpsie	i
}
    1f94:	4770      	bx	lr
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	20000104 	.word	0x20000104

00001f9c <ulSetInterruptMaskFromISR>:
	__asm volatile(" mrs r0, PRIMASK	\n"
    1f9c:	f3ef 8010 	mrs	r0, PRIMASK
    1fa0:	b672      	cpsid	i
    1fa2:	4770      	bx	lr

00001fa4 <vClearInterruptMaskFromISR>:
	__asm volatile(" msr PRIMASK, r0	\n"
    1fa4:	f380 8810 	msr	PRIMASK, r0
    1fa8:	4770      	bx	lr
    1faa:	0000      	movs	r0, r0
    1fac:	0000      	movs	r0, r0
	...

00001fb0 <PendSV_Handler>:
	__asm volatile(
    1fb0:	f3ef 8009 	mrs	r0, PSP
    1fb4:	4b0e      	ldr	r3, [pc, #56]	; (1ff0 <pxCurrentTCBConst>)
    1fb6:	681a      	ldr	r2, [r3, #0]
    1fb8:	3820      	subs	r0, #32
    1fba:	6010      	str	r0, [r2, #0]
    1fbc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fbe:	4644      	mov	r4, r8
    1fc0:	464d      	mov	r5, r9
    1fc2:	4656      	mov	r6, sl
    1fc4:	465f      	mov	r7, fp
    1fc6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fc8:	b508      	push	{r3, lr}
    1fca:	b672      	cpsid	i
    1fcc:	f000 ff52 	bl	2e74 <vTaskSwitchContext>
    1fd0:	b662      	cpsie	i
    1fd2:	bc0c      	pop	{r2, r3}
    1fd4:	6811      	ldr	r1, [r2, #0]
    1fd6:	6808      	ldr	r0, [r1, #0]
    1fd8:	3010      	adds	r0, #16
    1fda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1fdc:	46a0      	mov	r8, r4
    1fde:	46a9      	mov	r9, r5
    1fe0:	46b2      	mov	sl, r6
    1fe2:	46bb      	mov	fp, r7
    1fe4:	f380 8809 	msr	PSP, r0
    1fe8:	3820      	subs	r0, #32
    1fea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1fec:	4718      	bx	r3
    1fee:	46c0      	nop			; (mov r8, r8)

00001ff0 <pxCurrentTCBConst>:
    1ff0:	20002948 	.word	0x20002948

00001ff4 <SysTick_Handler>:
{
    1ff4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1ff6:	4b07      	ldr	r3, [pc, #28]	; (2014 <STACK_SIZE+0x14>)
    1ff8:	4798      	blx	r3
    1ffa:	0004      	movs	r4, r0
		if (xTaskIncrementTick() != pdFALSE) {
    1ffc:	4b06      	ldr	r3, [pc, #24]	; (2018 <STACK_SIZE+0x18>)
    1ffe:	4798      	blx	r3
    2000:	2800      	cmp	r0, #0
    2002:	d003      	beq.n	200c <STACK_SIZE+0xc>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2004:	2280      	movs	r2, #128	; 0x80
    2006:	0552      	lsls	r2, r2, #21
    2008:	4b04      	ldr	r3, [pc, #16]	; (201c <STACK_SIZE+0x1c>)
    200a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulPreviousMask);
    200c:	0020      	movs	r0, r4
    200e:	4b04      	ldr	r3, [pc, #16]	; (2020 <STACK_SIZE+0x20>)
    2010:	4798      	blx	r3
}
    2012:	bd10      	pop	{r4, pc}
    2014:	00001f9d 	.word	0x00001f9d
    2018:	00002c7d 	.word	0x00002c7d
    201c:	e000ed04 	.word	0xe000ed04
    2020:	00001fa5 	.word	0x00001fa5

00002024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    2024:	b510      	push	{r4, lr}
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
    2026:	4a11      	ldr	r2, [pc, #68]	; (206c <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    2028:	0753      	lsls	r3, r2, #29
    202a:	d01b      	beq.n	2064 <prvHeapInit+0x40>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
    202c:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
    202e:	2307      	movs	r3, #7
    2030:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
    2032:	2396      	movs	r3, #150	; 0x96
    2034:	019b      	lsls	r3, r3, #6
    2036:	1a5b      	subs	r3, r3, r1
    2038:	189b      	adds	r3, r3, r2
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
    203a:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    203c:	490c      	ldr	r1, [pc, #48]	; (2070 <prvHeapInit+0x4c>)
    203e:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    2040:	2000      	movs	r0, #0
    2042:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
    2044:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
    2046:	3b08      	subs	r3, #8
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
    2048:	2407      	movs	r4, #7
    204a:	43a3      	bics	r3, r4
	pxEnd = ( void * ) ulAddress;
    204c:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
    204e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    2050:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
    2052:	1a98      	subs	r0, r3, r2
    2054:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    2056:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2058:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    205a:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    205c:	2380      	movs	r3, #128	; 0x80
    205e:	061b      	lsls	r3, r3, #24
    2060:	614b      	str	r3, [r1, #20]
}
    2062:	bd10      	pop	{r4, pc}
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    2064:	2396      	movs	r3, #150	; 0x96
    2066:	019b      	lsls	r3, r3, #6
    2068:	e7e8      	b.n	203c <prvHeapInit+0x18>
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	200002ec 	.word	0x200002ec
    2070:	2000286c 	.word	0x2000286c

00002074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    2074:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2076:	4b12      	ldr	r3, [pc, #72]	; (20c0 <prvInsertBlockIntoFreeList+0x4c>)
    2078:	681a      	ldr	r2, [r3, #0]
    207a:	4282      	cmp	r2, r0
    207c:	d319      	bcc.n	20b2 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    207e:	6859      	ldr	r1, [r3, #4]
    2080:	185c      	adds	r4, r3, r1
    2082:	42a0      	cmp	r0, r4
    2084:	d103      	bne.n	208e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    2086:	6840      	ldr	r0, [r0, #4]
    2088:	1809      	adds	r1, r1, r0
    208a:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
    208c:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    208e:	6841      	ldr	r1, [r0, #4]
    2090:	1844      	adds	r4, r0, r1
    2092:	42a2      	cmp	r2, r4
    2094:	d111      	bne.n	20ba <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    2096:	4c0a      	ldr	r4, [pc, #40]	; (20c0 <prvInsertBlockIntoFreeList+0x4c>)
    2098:	68a4      	ldr	r4, [r4, #8]
    209a:	42a2      	cmp	r2, r4
    209c:	d00b      	beq.n	20b6 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    209e:	6852      	ldr	r2, [r2, #4]
    20a0:	1889      	adds	r1, r1, r2
    20a2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    20a4:	681a      	ldr	r2, [r3, #0]
    20a6:	6812      	ldr	r2, [r2, #0]
    20a8:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    20aa:	4298      	cmp	r0, r3
    20ac:	d000      	beq.n	20b0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    20ae:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    20b0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    20b2:	0013      	movs	r3, r2
    20b4:	e7e0      	b.n	2078 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    20b6:	6004      	str	r4, [r0, #0]
    20b8:	e7f7      	b.n	20aa <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    20ba:	6002      	str	r2, [r0, #0]
    20bc:	e7f5      	b.n	20aa <prvInsertBlockIntoFreeList+0x36>
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	2000286c 	.word	0x2000286c

000020c4 <pvPortMalloc>:
{
    20c4:	b570      	push	{r4, r5, r6, lr}
    20c6:	0004      	movs	r4, r0
	vTaskSuspendAll();
    20c8:	4b2f      	ldr	r3, [pc, #188]	; (2188 <pvPortMalloc+0xc4>)
    20ca:	4798      	blx	r3
		if( pxEnd == NULL )
    20cc:	4b2f      	ldr	r3, [pc, #188]	; (218c <pvPortMalloc+0xc8>)
    20ce:	689b      	ldr	r3, [r3, #8]
    20d0:	2b00      	cmp	r3, #0
    20d2:	d00f      	beq.n	20f4 <pvPortMalloc+0x30>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    20d4:	4b2d      	ldr	r3, [pc, #180]	; (218c <pvPortMalloc+0xc8>)
    20d6:	695b      	ldr	r3, [r3, #20]
    20d8:	4223      	tst	r3, r4
    20da:	d14a      	bne.n	2172 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
    20dc:	2c00      	cmp	r4, #0
    20de:	d00c      	beq.n	20fa <pvPortMalloc+0x36>
				xWantedSize += xHeapStructSize;
    20e0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    20e2:	0763      	lsls	r3, r4, #29
    20e4:	d009      	beq.n	20fa <pvPortMalloc+0x36>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    20e6:	2307      	movs	r3, #7
    20e8:	439c      	bics	r4, r3
    20ea:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    20ec:	4223      	tst	r3, r4
    20ee:	d004      	beq.n	20fa <pvPortMalloc+0x36>
    20f0:	b672      	cpsid	i
    20f2:	e7fe      	b.n	20f2 <pvPortMalloc+0x2e>
			prvHeapInit();
    20f4:	4b26      	ldr	r3, [pc, #152]	; (2190 <pvPortMalloc+0xcc>)
    20f6:	4798      	blx	r3
    20f8:	e7ec      	b.n	20d4 <pvPortMalloc+0x10>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    20fa:	2c00      	cmp	r4, #0
    20fc:	d03b      	beq.n	2176 <pvPortMalloc+0xb2>
    20fe:	4b23      	ldr	r3, [pc, #140]	; (218c <pvPortMalloc+0xc8>)
    2100:	691b      	ldr	r3, [r3, #16]
    2102:	429c      	cmp	r4, r3
    2104:	d839      	bhi.n	217a <pvPortMalloc+0xb6>
				pxBlock = xStart.pxNextFreeBlock;
    2106:	4b21      	ldr	r3, [pc, #132]	; (218c <pvPortMalloc+0xc8>)
    2108:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    210a:	e001      	b.n	2110 <pvPortMalloc+0x4c>
					pxPreviousBlock = pxBlock;
    210c:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
    210e:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2110:	686a      	ldr	r2, [r5, #4]
    2112:	4294      	cmp	r4, r2
    2114:	d902      	bls.n	211c <pvPortMalloc+0x58>
    2116:	682a      	ldr	r2, [r5, #0]
    2118:	2a00      	cmp	r2, #0
    211a:	d1f7      	bne.n	210c <pvPortMalloc+0x48>
				if( pxBlock != pxEnd )
    211c:	4a1b      	ldr	r2, [pc, #108]	; (218c <pvPortMalloc+0xc8>)
    211e:	6892      	ldr	r2, [r2, #8]
    2120:	4295      	cmp	r5, r2
    2122:	d02c      	beq.n	217e <pvPortMalloc+0xba>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    2124:	681e      	ldr	r6, [r3, #0]
    2126:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2128:	682a      	ldr	r2, [r5, #0]
    212a:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    212c:	686b      	ldr	r3, [r5, #4]
    212e:	1b1b      	subs	r3, r3, r4
    2130:	2b10      	cmp	r3, #16
    2132:	d908      	bls.n	2146 <pvPortMalloc+0x82>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2134:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    2136:	0742      	lsls	r2, r0, #29
    2138:	d001      	beq.n	213e <pvPortMalloc+0x7a>
    213a:	b672      	cpsid	i
    213c:	e7fe      	b.n	213c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    213e:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
    2140:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2142:	4b14      	ldr	r3, [pc, #80]	; (2194 <pvPortMalloc+0xd0>)
    2144:	4798      	blx	r3
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    2146:	6869      	ldr	r1, [r5, #4]
    2148:	4a10      	ldr	r2, [pc, #64]	; (218c <pvPortMalloc+0xc8>)
    214a:	6913      	ldr	r3, [r2, #16]
    214c:	1a5b      	subs	r3, r3, r1
    214e:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    2150:	68d2      	ldr	r2, [r2, #12]
    2152:	4293      	cmp	r3, r2
    2154:	d201      	bcs.n	215a <pvPortMalloc+0x96>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    2156:	4a0d      	ldr	r2, [pc, #52]	; (218c <pvPortMalloc+0xc8>)
    2158:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    215a:	4b0c      	ldr	r3, [pc, #48]	; (218c <pvPortMalloc+0xc8>)
    215c:	695b      	ldr	r3, [r3, #20]
    215e:	430b      	orrs	r3, r1
    2160:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
    2162:	2300      	movs	r3, #0
    2164:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
    2166:	4b0c      	ldr	r3, [pc, #48]	; (2198 <pvPortMalloc+0xd4>)
    2168:	4798      	blx	r3
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    216a:	0773      	lsls	r3, r6, #29
    216c:	d009      	beq.n	2182 <pvPortMalloc+0xbe>
    216e:	b672      	cpsid	i
    2170:	e7fe      	b.n	2170 <pvPortMalloc+0xac>
void *pvReturn = NULL;
    2172:	2600      	movs	r6, #0
    2174:	e7f7      	b.n	2166 <pvPortMalloc+0xa2>
    2176:	2600      	movs	r6, #0
    2178:	e7f5      	b.n	2166 <pvPortMalloc+0xa2>
    217a:	2600      	movs	r6, #0
    217c:	e7f3      	b.n	2166 <pvPortMalloc+0xa2>
    217e:	2600      	movs	r6, #0
    2180:	e7f1      	b.n	2166 <pvPortMalloc+0xa2>
}
    2182:	0030      	movs	r0, r6
    2184:	bd70      	pop	{r4, r5, r6, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	00002c61 	.word	0x00002c61
    218c:	2000286c 	.word	0x2000286c
    2190:	00002025 	.word	0x00002025
    2194:	00002075 	.word	0x00002075
    2198:	00002d85 	.word	0x00002d85

0000219c <vPortFree>:
{
    219c:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
    219e:	2800      	cmp	r0, #0
    21a0:	d020      	beq.n	21e4 <vPortFree+0x48>
		puc -= xHeapStructSize;
    21a2:	0005      	movs	r5, r0
    21a4:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    21a6:	686b      	ldr	r3, [r5, #4]
    21a8:	4a0f      	ldr	r2, [pc, #60]	; (21e8 <vPortFree+0x4c>)
    21aa:	6952      	ldr	r2, [r2, #20]
    21ac:	421a      	tst	r2, r3
    21ae:	d101      	bne.n	21b4 <vPortFree+0x18>
    21b0:	b672      	cpsid	i
    21b2:	e7fe      	b.n	21b2 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    21b4:	0001      	movs	r1, r0
    21b6:	3908      	subs	r1, #8
    21b8:	6809      	ldr	r1, [r1, #0]
    21ba:	2900      	cmp	r1, #0
    21bc:	d001      	beq.n	21c2 <vPortFree+0x26>
    21be:	b672      	cpsid	i
    21c0:	e7fe      	b.n	21c0 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    21c2:	3808      	subs	r0, #8
    21c4:	0004      	movs	r4, r0
    21c6:	4393      	bics	r3, r2
    21c8:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <vPortFree+0x50>)
    21cc:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
    21ce:	6863      	ldr	r3, [r4, #4]
    21d0:	4a05      	ldr	r2, [pc, #20]	; (21e8 <vPortFree+0x4c>)
    21d2:	6911      	ldr	r1, [r2, #16]
    21d4:	468c      	mov	ip, r1
    21d6:	4463      	add	r3, ip
    21d8:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    21da:	0028      	movs	r0, r5
    21dc:	4b04      	ldr	r3, [pc, #16]	; (21f0 <vPortFree+0x54>)
    21de:	4798      	blx	r3
				( void ) xTaskResumeAll();
    21e0:	4b04      	ldr	r3, [pc, #16]	; (21f4 <vPortFree+0x58>)
    21e2:	4798      	blx	r3
}
    21e4:	bd70      	pop	{r4, r5, r6, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	2000286c 	.word	0x2000286c
    21ec:	00002c61 	.word	0x00002c61
    21f0:	00002075 	.word	0x00002075
    21f4:	00002d85 	.word	0x00002d85

000021f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    21f8:	b510      	push	{r4, lr}
    21fa:	0004      	movs	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    21fc:	4b06      	ldr	r3, [pc, #24]	; (2218 <prvIsQueueFull+0x20>)
    21fe:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    2200:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2202:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2204:	429a      	cmp	r2, r3
    2206:	d004      	beq.n	2212 <prvIsQueueFull+0x1a>
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
    2208:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
    220a:	4b04      	ldr	r3, [pc, #16]	; (221c <prvIsQueueFull+0x24>)
    220c:	4798      	blx	r3

	return xReturn;
}
    220e:	0020      	movs	r0, r4
    2210:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    2212:	2401      	movs	r4, #1
    2214:	e7f9      	b.n	220a <prvIsQueueFull+0x12>
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	00001f65 	.word	0x00001f65
    221c:	00001f7d 	.word	0x00001f7d

00002220 <prvIsQueueEmpty>:
{
    2220:	b510      	push	{r4, lr}
    2222:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
    2224:	4b05      	ldr	r3, [pc, #20]	; (223c <prvIsQueueEmpty+0x1c>)
    2226:	4798      	blx	r3
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    2228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    222a:	2b00      	cmp	r3, #0
    222c:	d004      	beq.n	2238 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
    222e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    2230:	4b03      	ldr	r3, [pc, #12]	; (2240 <prvIsQueueEmpty+0x20>)
    2232:	4798      	blx	r3
}
    2234:	0020      	movs	r0, r4
    2236:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    2238:	2401      	movs	r4, #1
    223a:	e7f9      	b.n	2230 <prvIsQueueEmpty+0x10>
    223c:	00001f65 	.word	0x00001f65
    2240:	00001f7d 	.word	0x00001f7d

00002244 <prvCopyDataToQueue>:
{
    2244:	b570      	push	{r4, r5, r6, lr}
    2246:	0004      	movs	r4, r0
    2248:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    224a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    224c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    224e:	2a00      	cmp	r2, #0
    2250:	d10a      	bne.n	2268 <prvCopyDataToQueue+0x24>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    2252:	6803      	ldr	r3, [r0, #0]
    2254:	2b00      	cmp	r3, #0
    2256:	d12e      	bne.n	22b6 <prvCopyDataToQueue+0x72>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    2258:	6840      	ldr	r0, [r0, #4]
    225a:	4b1b      	ldr	r3, [pc, #108]	; (22c8 <prvCopyDataToQueue+0x84>)
    225c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    225e:	2300      	movs	r3, #0
    2260:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    2262:	3501      	adds	r5, #1
    2264:	63a5      	str	r5, [r4, #56]	; 0x38
}
    2266:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    2268:	2e00      	cmp	r6, #0
    226a:	d10e      	bne.n	228a <prvCopyDataToQueue+0x46>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    226c:	6880      	ldr	r0, [r0, #8]
    226e:	4b17      	ldr	r3, [pc, #92]	; (22cc <prvCopyDataToQueue+0x88>)
    2270:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2272:	68a3      	ldr	r3, [r4, #8]
    2274:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2276:	4694      	mov	ip, r2
    2278:	4463      	add	r3, ip
    227a:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    227c:	6862      	ldr	r2, [r4, #4]
    227e:	4293      	cmp	r3, r2
    2280:	d31b      	bcc.n	22ba <prvCopyDataToQueue+0x76>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2282:	6823      	ldr	r3, [r4, #0]
    2284:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    2286:	2000      	movs	r0, #0
    2288:	e7eb      	b.n	2262 <prvCopyDataToQueue+0x1e>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    228a:	68c0      	ldr	r0, [r0, #12]
    228c:	4b0f      	ldr	r3, [pc, #60]	; (22cc <prvCopyDataToQueue+0x88>)
    228e:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2290:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2292:	425b      	negs	r3, r3
    2294:	68e2      	ldr	r2, [r4, #12]
    2296:	18d2      	adds	r2, r2, r3
    2298:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    229a:	6821      	ldr	r1, [r4, #0]
    229c:	428a      	cmp	r2, r1
    229e:	d203      	bcs.n	22a8 <prvCopyDataToQueue+0x64>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    22a0:	6862      	ldr	r2, [r4, #4]
    22a2:	4694      	mov	ip, r2
    22a4:	4463      	add	r3, ip
    22a6:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    22a8:	2e02      	cmp	r6, #2
    22aa:	d108      	bne.n	22be <prvCopyDataToQueue+0x7a>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    22ac:	2d00      	cmp	r5, #0
    22ae:	d008      	beq.n	22c2 <prvCopyDataToQueue+0x7e>
				--uxMessagesWaiting;
    22b0:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    22b2:	2000      	movs	r0, #0
    22b4:	e7d5      	b.n	2262 <prvCopyDataToQueue+0x1e>
    22b6:	2000      	movs	r0, #0
    22b8:	e7d3      	b.n	2262 <prvCopyDataToQueue+0x1e>
    22ba:	2000      	movs	r0, #0
    22bc:	e7d1      	b.n	2262 <prvCopyDataToQueue+0x1e>
    22be:	2000      	movs	r0, #0
    22c0:	e7cf      	b.n	2262 <prvCopyDataToQueue+0x1e>
    22c2:	2000      	movs	r0, #0
    22c4:	e7cd      	b.n	2262 <prvCopyDataToQueue+0x1e>
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	00003085 	.word	0x00003085
    22cc:	0000357d 	.word	0x0000357d

000022d0 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    22d0:	b570      	push	{r4, r5, r6, lr}
    22d2:	b082      	sub	sp, #8
    22d4:	9001      	str	r0, [sp, #4]
    22d6:	000a      	movs	r2, r1
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    22d8:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    22da:	2c00      	cmp	r4, #0
    22dc:	d005      	beq.n	22ea <prvNotifyQueueSetContainer+0x1a>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    22de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    22e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    22e2:	4299      	cmp	r1, r3
    22e4:	d303      	bcc.n	22ee <prvNotifyQueueSetContainer+0x1e>
    22e6:	b672      	cpsid	i
    22e8:	e7fe      	b.n	22e8 <prvNotifyQueueSetContainer+0x18>
	configASSERT(pxQueueSetContainer);
    22ea:	b672      	cpsid	i
    22ec:	e7fe      	b.n	22ec <prvNotifyQueueSetContainer+0x1c>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    22ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    22f0:	428b      	cmp	r3, r1
    22f2:	d803      	bhi.n	22fc <prvNotifyQueueSetContainer+0x2c>
	BaseType_t xReturn             = pdFALSE;
    22f4:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    22f6:	0030      	movs	r0, r6
    22f8:	b002      	add	sp, #8
    22fa:	bd70      	pop	{r4, r5, r6, pc}
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    22fc:	2345      	movs	r3, #69	; 0x45
    22fe:	5ce5      	ldrb	r5, [r4, r3]
    2300:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    2302:	a901      	add	r1, sp, #4
    2304:	0020      	movs	r0, r4
    2306:	4b0a      	ldr	r3, [pc, #40]	; (2330 <prvNotifyQueueSetContainer+0x60>)
    2308:	4798      	blx	r3
    230a:	0006      	movs	r6, r0
		if (cTxLock == queueUNLOCKED) {
    230c:	1c6b      	adds	r3, r5, #1
    230e:	d10a      	bne.n	2326 <prvNotifyQueueSetContainer+0x56>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    2310:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2312:	2b00      	cmp	r3, #0
    2314:	d0ef      	beq.n	22f6 <prvNotifyQueueSetContainer+0x26>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    2316:	0020      	movs	r0, r4
    2318:	3024      	adds	r0, #36	; 0x24
    231a:	4b06      	ldr	r3, [pc, #24]	; (2334 <prvNotifyQueueSetContainer+0x64>)
    231c:	4798      	blx	r3
    231e:	2800      	cmp	r0, #0
    2320:	d0e9      	beq.n	22f6 <prvNotifyQueueSetContainer+0x26>
					xReturn = pdTRUE;
    2322:	2601      	movs	r6, #1
	return xReturn;
    2324:	e7e7      	b.n	22f6 <prvNotifyQueueSetContainer+0x26>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    2326:	3501      	adds	r5, #1
    2328:	b26d      	sxtb	r5, r5
    232a:	2345      	movs	r3, #69	; 0x45
    232c:	54e5      	strb	r5, [r4, r3]
    232e:	e7e2      	b.n	22f6 <prvNotifyQueueSetContainer+0x26>
    2330:	00002245 	.word	0x00002245
    2334:	00002f59 	.word	0x00002f59

00002338 <prvCopyDataFromQueue>:
{
    2338:	b510      	push	{r4, lr}
    233a:	000c      	movs	r4, r1
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    233c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    233e:	2a00      	cmp	r2, #0
    2340:	d00b      	beq.n	235a <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2342:	68c3      	ldr	r3, [r0, #12]
    2344:	189b      	adds	r3, r3, r2
    2346:	60c3      	str	r3, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    2348:	6841      	ldr	r1, [r0, #4]
    234a:	428b      	cmp	r3, r1
    234c:	d301      	bcc.n	2352 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    234e:	6803      	ldr	r3, [r0, #0]
    2350:	60c3      	str	r3, [r0, #12]
		             (void *)pxQueue->u.pcReadFrom,
    2352:	68c1      	ldr	r1, [r0, #12]
		(void)memcpy((void *)pvBuffer,
    2354:	0020      	movs	r0, r4
    2356:	4b01      	ldr	r3, [pc, #4]	; (235c <prvCopyDataFromQueue+0x24>)
    2358:	4798      	blx	r3
}
    235a:	bd10      	pop	{r4, pc}
    235c:	0000357d 	.word	0x0000357d

00002360 <prvUnlockQueue>:
{
    2360:	b570      	push	{r4, r5, r6, lr}
    2362:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
    2364:	4b21      	ldr	r3, [pc, #132]	; (23ec <prvUnlockQueue+0x8c>)
    2366:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    2368:	2345      	movs	r3, #69	; 0x45
    236a:	5cec      	ldrb	r4, [r5, r3]
    236c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    236e:	e00a      	b.n	2386 <prvUnlockQueue+0x26>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    2370:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2372:	2b00      	cmp	r3, #0
    2374:	d018      	beq.n	23a8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2376:	0028      	movs	r0, r5
    2378:	3024      	adds	r0, #36	; 0x24
    237a:	4b1d      	ldr	r3, [pc, #116]	; (23f0 <prvUnlockQueue+0x90>)
    237c:	4798      	blx	r3
    237e:	2800      	cmp	r0, #0
    2380:	d10f      	bne.n	23a2 <prvUnlockQueue+0x42>
			--cTxLock;
    2382:	3c01      	subs	r4, #1
    2384:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    2386:	2c00      	cmp	r4, #0
    2388:	dd0e      	ble.n	23a8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    238a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    238c:	2b00      	cmp	r3, #0
    238e:	d0ef      	beq.n	2370 <prvUnlockQueue+0x10>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    2390:	2100      	movs	r1, #0
    2392:	0028      	movs	r0, r5
    2394:	4b17      	ldr	r3, [pc, #92]	; (23f4 <prvUnlockQueue+0x94>)
    2396:	4798      	blx	r3
    2398:	2800      	cmp	r0, #0
    239a:	d0f2      	beq.n	2382 <prvUnlockQueue+0x22>
						vTaskMissedYield();
    239c:	4b16      	ldr	r3, [pc, #88]	; (23f8 <prvUnlockQueue+0x98>)
    239e:	4798      	blx	r3
    23a0:	e7ef      	b.n	2382 <prvUnlockQueue+0x22>
							vTaskMissedYield();
    23a2:	4b15      	ldr	r3, [pc, #84]	; (23f8 <prvUnlockQueue+0x98>)
    23a4:	4798      	blx	r3
    23a6:	e7ec      	b.n	2382 <prvUnlockQueue+0x22>
		pxQueue->cTxLock = queueUNLOCKED;
    23a8:	22ff      	movs	r2, #255	; 0xff
    23aa:	2345      	movs	r3, #69	; 0x45
    23ac:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
    23ae:	4b13      	ldr	r3, [pc, #76]	; (23fc <prvUnlockQueue+0x9c>)
    23b0:	4798      	blx	r3
	taskENTER_CRITICAL();
    23b2:	4b0e      	ldr	r3, [pc, #56]	; (23ec <prvUnlockQueue+0x8c>)
    23b4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    23b6:	2344      	movs	r3, #68	; 0x44
    23b8:	5cec      	ldrb	r4, [r5, r3]
    23ba:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    23bc:	e001      	b.n	23c2 <prvUnlockQueue+0x62>
				--cRxLock;
    23be:	3c01      	subs	r4, #1
    23c0:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    23c2:	2c00      	cmp	r4, #0
    23c4:	dd0b      	ble.n	23de <prvUnlockQueue+0x7e>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    23c6:	692b      	ldr	r3, [r5, #16]
    23c8:	2b00      	cmp	r3, #0
    23ca:	d008      	beq.n	23de <prvUnlockQueue+0x7e>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    23cc:	0028      	movs	r0, r5
    23ce:	3010      	adds	r0, #16
    23d0:	4b07      	ldr	r3, [pc, #28]	; (23f0 <prvUnlockQueue+0x90>)
    23d2:	4798      	blx	r3
    23d4:	2800      	cmp	r0, #0
    23d6:	d0f2      	beq.n	23be <prvUnlockQueue+0x5e>
					vTaskMissedYield();
    23d8:	4b07      	ldr	r3, [pc, #28]	; (23f8 <prvUnlockQueue+0x98>)
    23da:	4798      	blx	r3
    23dc:	e7ef      	b.n	23be <prvUnlockQueue+0x5e>
		pxQueue->cRxLock = queueUNLOCKED;
    23de:	22ff      	movs	r2, #255	; 0xff
    23e0:	2344      	movs	r3, #68	; 0x44
    23e2:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
    23e4:	4b05      	ldr	r3, [pc, #20]	; (23fc <prvUnlockQueue+0x9c>)
    23e6:	4798      	blx	r3
}
    23e8:	bd70      	pop	{r4, r5, r6, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	00001f65 	.word	0x00001f65
    23f0:	00002f59 	.word	0x00002f59
    23f4:	000022d1 	.word	0x000022d1
    23f8:	00003059 	.word	0x00003059
    23fc:	00001f7d 	.word	0x00001f7d

00002400 <xQueueGenericReset>:
{
    2400:	b570      	push	{r4, r5, r6, lr}
    2402:	0004      	movs	r4, r0
    2404:	000d      	movs	r5, r1
	configASSERT(pxQueue);
    2406:	2800      	cmp	r0, #0
    2408:	d023      	beq.n	2452 <xQueueGenericReset+0x52>
	taskENTER_CRITICAL();
    240a:	4b18      	ldr	r3, [pc, #96]	; (246c <xQueueGenericReset+0x6c>)
    240c:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    240e:	6822      	ldr	r2, [r4, #0]
    2410:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2412:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2414:	0001      	movs	r1, r0
    2416:	4359      	muls	r1, r3
    2418:	1851      	adds	r1, r2, r1
    241a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    241c:	2100      	movs	r1, #0
    241e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    2420:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    2422:	3b01      	subs	r3, #1
    2424:	4343      	muls	r3, r0
    2426:	18d3      	adds	r3, r2, r3
    2428:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    242a:	23ff      	movs	r3, #255	; 0xff
    242c:	2244      	movs	r2, #68	; 0x44
    242e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock           = queueUNLOCKED;
    2430:	3201      	adds	r2, #1
    2432:	54a3      	strb	r3, [r4, r2]
		if (xNewQueue == pdFALSE) {
    2434:	2d00      	cmp	r5, #0
    2436:	d111      	bne.n	245c <xQueueGenericReset+0x5c>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2438:	6923      	ldr	r3, [r4, #16]
    243a:	2b00      	cmp	r3, #0
    243c:	d005      	beq.n	244a <xQueueGenericReset+0x4a>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    243e:	0020      	movs	r0, r4
    2440:	3010      	adds	r0, #16
    2442:	4b0b      	ldr	r3, [pc, #44]	; (2470 <xQueueGenericReset+0x70>)
    2444:	4798      	blx	r3
    2446:	2800      	cmp	r0, #0
    2448:	d105      	bne.n	2456 <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
    244a:	4b0a      	ldr	r3, [pc, #40]	; (2474 <xQueueGenericReset+0x74>)
    244c:	4798      	blx	r3
}
    244e:	2001      	movs	r0, #1
    2450:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxQueue);
    2452:	b672      	cpsid	i
    2454:	e7fe      	b.n	2454 <xQueueGenericReset+0x54>
					queueYIELD_IF_USING_PREEMPTION();
    2456:	4b08      	ldr	r3, [pc, #32]	; (2478 <xQueueGenericReset+0x78>)
    2458:	4798      	blx	r3
    245a:	e7f6      	b.n	244a <xQueueGenericReset+0x4a>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    245c:	0020      	movs	r0, r4
    245e:	3010      	adds	r0, #16
    2460:	4d06      	ldr	r5, [pc, #24]	; (247c <xQueueGenericReset+0x7c>)
    2462:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    2464:	0020      	movs	r0, r4
    2466:	3024      	adds	r0, #36	; 0x24
    2468:	47a8      	blx	r5
    246a:	e7ee      	b.n	244a <xQueueGenericReset+0x4a>
    246c:	00001f65 	.word	0x00001f65
    2470:	00002f59 	.word	0x00002f59
    2474:	00001f7d 	.word	0x00001f7d
    2478:	00001f4d 	.word	0x00001f4d
    247c:	00001dcd 	.word	0x00001dcd

00002480 <prvInitialiseNewQueue>:
{
    2480:	b570      	push	{r4, r5, r6, lr}
    2482:	001d      	movs	r5, r3
    2484:	9c04      	ldr	r4, [sp, #16]
	if (uxItemSize == (UBaseType_t)0) {
    2486:	2900      	cmp	r1, #0
    2488:	d00b      	beq.n	24a2 <prvInitialiseNewQueue+0x22>
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    248a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    248c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    248e:	6421      	str	r1, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    2490:	2101      	movs	r1, #1
    2492:	0020      	movs	r0, r4
    2494:	4b04      	ldr	r3, [pc, #16]	; (24a8 <prvInitialiseNewQueue+0x28>)
    2496:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    2498:	2350      	movs	r3, #80	; 0x50
    249a:	54e5      	strb	r5, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    249c:	2300      	movs	r3, #0
    249e:	64a3      	str	r3, [r4, #72]	; 0x48
}
    24a0:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    24a2:	6024      	str	r4, [r4, #0]
    24a4:	e7f2      	b.n	248c <prvInitialiseNewQueue+0xc>
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	00002401 	.word	0x00002401

000024ac <xQueueGenericCreate>:
{
    24ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ae:	b083      	sub	sp, #12
    24b0:	0006      	movs	r6, r0
    24b2:	000f      	movs	r7, r1
    24b4:	0015      	movs	r5, r2
	configASSERT(uxQueueLength > (UBaseType_t)0);
    24b6:	2800      	cmp	r0, #0
    24b8:	d101      	bne.n	24be <xQueueGenericCreate+0x12>
    24ba:	b672      	cpsid	i
    24bc:	e7fe      	b.n	24bc <xQueueGenericCreate+0x10>
	if (uxItemSize == (UBaseType_t)0) {
    24be:	2900      	cmp	r1, #0
    24c0:	d002      	beq.n	24c8 <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = (size_t)(
    24c2:	0008      	movs	r0, r1
    24c4:	4370      	muls	r0, r6
    24c6:	e000      	b.n	24ca <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = (size_t)0;
    24c8:	2000      	movs	r0, #0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    24ca:	3054      	adds	r0, #84	; 0x54
    24cc:	4b07      	ldr	r3, [pc, #28]	; (24ec <xQueueGenericCreate+0x40>)
    24ce:	4798      	blx	r3
    24d0:	1e04      	subs	r4, r0, #0
	if (pxNewQueue != NULL) {
    24d2:	d007      	beq.n	24e4 <xQueueGenericCreate+0x38>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    24d4:	0002      	movs	r2, r0
    24d6:	3254      	adds	r2, #84	; 0x54
		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
    24d8:	9000      	str	r0, [sp, #0]
    24da:	002b      	movs	r3, r5
    24dc:	0039      	movs	r1, r7
    24de:	0030      	movs	r0, r6
    24e0:	4d03      	ldr	r5, [pc, #12]	; (24f0 <xQueueGenericCreate+0x44>)
    24e2:	47a8      	blx	r5
}
    24e4:	0020      	movs	r0, r4
    24e6:	b003      	add	sp, #12
    24e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	000020c5 	.word	0x000020c5
    24f0:	00002481 	.word	0x00002481

000024f4 <xQueueGenericSend>:
{
    24f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24f6:	b085      	sub	sp, #20
    24f8:	0004      	movs	r4, r0
    24fa:	000f      	movs	r7, r1
    24fc:	9201      	str	r2, [sp, #4]
    24fe:	001e      	movs	r6, r3
	configASSERT(pxQueue);
    2500:	2800      	cmp	r0, #0
    2502:	d006      	beq.n	2512 <xQueueGenericSend+0x1e>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2504:	2900      	cmp	r1, #0
    2506:	d006      	beq.n	2516 <xQueueGenericSend+0x22>
    2508:	2501      	movs	r5, #1
    250a:	2d00      	cmp	r5, #0
    250c:	d10a      	bne.n	2524 <xQueueGenericSend+0x30>
    250e:	b672      	cpsid	i
    2510:	e7fe      	b.n	2510 <xQueueGenericSend+0x1c>
	configASSERT(pxQueue);
    2512:	b672      	cpsid	i
    2514:	e7fe      	b.n	2514 <xQueueGenericSend+0x20>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2516:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2518:	2b00      	cmp	r3, #0
    251a:	d101      	bne.n	2520 <xQueueGenericSend+0x2c>
    251c:	2501      	movs	r5, #1
    251e:	e7f4      	b.n	250a <xQueueGenericSend+0x16>
    2520:	2500      	movs	r5, #0
    2522:	e7f2      	b.n	250a <xQueueGenericSend+0x16>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    2524:	2e02      	cmp	r6, #2
    2526:	d003      	beq.n	2530 <xQueueGenericSend+0x3c>
    2528:	2d00      	cmp	r5, #0
    252a:	d106      	bne.n	253a <xQueueGenericSend+0x46>
    252c:	b672      	cpsid	i
    252e:	e7fe      	b.n	252e <xQueueGenericSend+0x3a>
    2530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2532:	2b01      	cmp	r3, #1
    2534:	d0f8      	beq.n	2528 <xQueueGenericSend+0x34>
    2536:	2500      	movs	r5, #0
    2538:	e7f6      	b.n	2528 <xQueueGenericSend+0x34>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    253a:	4b44      	ldr	r3, [pc, #272]	; (264c <xQueueGenericSend+0x158>)
    253c:	4798      	blx	r3
    253e:	2800      	cmp	r0, #0
    2540:	d103      	bne.n	254a <xQueueGenericSend+0x56>
    2542:	9b01      	ldr	r3, [sp, #4]
    2544:	2b00      	cmp	r3, #0
    2546:	d000      	beq.n	254a <xQueueGenericSend+0x56>
    2548:	2500      	movs	r5, #0
    254a:	2d00      	cmp	r5, #0
    254c:	d101      	bne.n	2552 <xQueueGenericSend+0x5e>
    254e:	b672      	cpsid	i
    2550:	e7fe      	b.n	2550 <xQueueGenericSend+0x5c>
    2552:	2500      	movs	r5, #0
    2554:	e042      	b.n	25dc <xQueueGenericSend+0xe8>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    2556:	0032      	movs	r2, r6
    2558:	0039      	movs	r1, r7
    255a:	0020      	movs	r0, r4
    255c:	4b3c      	ldr	r3, [pc, #240]	; (2650 <xQueueGenericSend+0x15c>)
    255e:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    2560:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2562:	2b00      	cmp	r3, #0
    2564:	d00c      	beq.n	2580 <xQueueGenericSend+0x8c>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    2566:	0031      	movs	r1, r6
    2568:	0020      	movs	r0, r4
    256a:	4b3a      	ldr	r3, [pc, #232]	; (2654 <xQueueGenericSend+0x160>)
    256c:	4798      	blx	r3
    256e:	2800      	cmp	r0, #0
    2570:	d001      	beq.n	2576 <xQueueGenericSend+0x82>
							queueYIELD_IF_USING_PREEMPTION();
    2572:	4b39      	ldr	r3, [pc, #228]	; (2658 <xQueueGenericSend+0x164>)
    2574:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2576:	4b39      	ldr	r3, [pc, #228]	; (265c <xQueueGenericSend+0x168>)
    2578:	4798      	blx	r3
				return pdPASS;
    257a:	2001      	movs	r0, #1
}
    257c:	b005      	add	sp, #20
    257e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    2580:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2582:	2b00      	cmp	r3, #0
    2584:	d008      	beq.n	2598 <xQueueGenericSend+0xa4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2586:	0020      	movs	r0, r4
    2588:	3024      	adds	r0, #36	; 0x24
    258a:	4b35      	ldr	r3, [pc, #212]	; (2660 <xQueueGenericSend+0x16c>)
    258c:	4798      	blx	r3
    258e:	2800      	cmp	r0, #0
    2590:	d0f1      	beq.n	2576 <xQueueGenericSend+0x82>
								queueYIELD_IF_USING_PREEMPTION();
    2592:	4b31      	ldr	r3, [pc, #196]	; (2658 <xQueueGenericSend+0x164>)
    2594:	4798      	blx	r3
    2596:	e7ee      	b.n	2576 <xQueueGenericSend+0x82>
						} else if (xYieldRequired != pdFALSE) {
    2598:	2800      	cmp	r0, #0
    259a:	d0ec      	beq.n	2576 <xQueueGenericSend+0x82>
							queueYIELD_IF_USING_PREEMPTION();
    259c:	4b2e      	ldr	r3, [pc, #184]	; (2658 <xQueueGenericSend+0x164>)
    259e:	4798      	blx	r3
    25a0:	e7e9      	b.n	2576 <xQueueGenericSend+0x82>
					taskEXIT_CRITICAL();
    25a2:	4b2e      	ldr	r3, [pc, #184]	; (265c <xQueueGenericSend+0x168>)
    25a4:	4798      	blx	r3
					return errQUEUE_FULL;
    25a6:	2000      	movs	r0, #0
    25a8:	e7e8      	b.n	257c <xQueueGenericSend+0x88>
		prvLockQueue(pxQueue);
    25aa:	4b2c      	ldr	r3, [pc, #176]	; (265c <xQueueGenericSend+0x168>)
    25ac:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    25ae:	a901      	add	r1, sp, #4
    25b0:	a802      	add	r0, sp, #8
    25b2:	4b2c      	ldr	r3, [pc, #176]	; (2664 <xQueueGenericSend+0x170>)
    25b4:	4798      	blx	r3
    25b6:	2800      	cmp	r0, #0
    25b8:	d141      	bne.n	263e <xQueueGenericSend+0x14a>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    25ba:	0020      	movs	r0, r4
    25bc:	4b2a      	ldr	r3, [pc, #168]	; (2668 <xQueueGenericSend+0x174>)
    25be:	4798      	blx	r3
    25c0:	2800      	cmp	r0, #0
    25c2:	d036      	beq.n	2632 <xQueueGenericSend+0x13e>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    25c4:	0020      	movs	r0, r4
    25c6:	3010      	adds	r0, #16
    25c8:	9901      	ldr	r1, [sp, #4]
    25ca:	4b28      	ldr	r3, [pc, #160]	; (266c <xQueueGenericSend+0x178>)
    25cc:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    25ce:	0020      	movs	r0, r4
    25d0:	4b27      	ldr	r3, [pc, #156]	; (2670 <xQueueGenericSend+0x17c>)
    25d2:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    25d4:	4b27      	ldr	r3, [pc, #156]	; (2674 <xQueueGenericSend+0x180>)
    25d6:	4798      	blx	r3
    25d8:	2800      	cmp	r0, #0
    25da:	d027      	beq.n	262c <xQueueGenericSend+0x138>
		taskENTER_CRITICAL();
    25dc:	4b26      	ldr	r3, [pc, #152]	; (2678 <xQueueGenericSend+0x184>)
    25de:	4798      	blx	r3
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    25e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    25e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    25e4:	4293      	cmp	r3, r2
    25e6:	d3b6      	bcc.n	2556 <xQueueGenericSend+0x62>
    25e8:	2e02      	cmp	r6, #2
    25ea:	d0b4      	beq.n	2556 <xQueueGenericSend+0x62>
				if (xTicksToWait == (TickType_t)0) {
    25ec:	9b01      	ldr	r3, [sp, #4]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d0d7      	beq.n	25a2 <xQueueGenericSend+0xae>
				} else if (xEntryTimeSet == pdFALSE) {
    25f2:	2d00      	cmp	r5, #0
    25f4:	d103      	bne.n	25fe <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    25f6:	a802      	add	r0, sp, #8
    25f8:	4b20      	ldr	r3, [pc, #128]	; (267c <xQueueGenericSend+0x188>)
    25fa:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    25fc:	3501      	adds	r5, #1
		taskEXIT_CRITICAL();
    25fe:	4b17      	ldr	r3, [pc, #92]	; (265c <xQueueGenericSend+0x168>)
    2600:	4798      	blx	r3
		vTaskSuspendAll();
    2602:	4b1f      	ldr	r3, [pc, #124]	; (2680 <xQueueGenericSend+0x18c>)
    2604:	4798      	blx	r3
		prvLockQueue(pxQueue);
    2606:	4b1c      	ldr	r3, [pc, #112]	; (2678 <xQueueGenericSend+0x184>)
    2608:	4798      	blx	r3
    260a:	2344      	movs	r3, #68	; 0x44
    260c:	5ce3      	ldrb	r3, [r4, r3]
    260e:	b25b      	sxtb	r3, r3
    2610:	3301      	adds	r3, #1
    2612:	d102      	bne.n	261a <xQueueGenericSend+0x126>
    2614:	2200      	movs	r2, #0
    2616:	2344      	movs	r3, #68	; 0x44
    2618:	54e2      	strb	r2, [r4, r3]
    261a:	2345      	movs	r3, #69	; 0x45
    261c:	5ce3      	ldrb	r3, [r4, r3]
    261e:	b25b      	sxtb	r3, r3
    2620:	3301      	adds	r3, #1
    2622:	d1c2      	bne.n	25aa <xQueueGenericSend+0xb6>
    2624:	2200      	movs	r2, #0
    2626:	2345      	movs	r3, #69	; 0x45
    2628:	54e2      	strb	r2, [r4, r3]
    262a:	e7be      	b.n	25aa <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
    262c:	4b0a      	ldr	r3, [pc, #40]	; (2658 <xQueueGenericSend+0x164>)
    262e:	4798      	blx	r3
    2630:	e7d4      	b.n	25dc <xQueueGenericSend+0xe8>
				prvUnlockQueue(pxQueue);
    2632:	0020      	movs	r0, r4
    2634:	4b0e      	ldr	r3, [pc, #56]	; (2670 <xQueueGenericSend+0x17c>)
    2636:	4798      	blx	r3
				(void)xTaskResumeAll();
    2638:	4b0e      	ldr	r3, [pc, #56]	; (2674 <xQueueGenericSend+0x180>)
    263a:	4798      	blx	r3
    263c:	e7ce      	b.n	25dc <xQueueGenericSend+0xe8>
			prvUnlockQueue(pxQueue);
    263e:	0020      	movs	r0, r4
    2640:	4b0b      	ldr	r3, [pc, #44]	; (2670 <xQueueGenericSend+0x17c>)
    2642:	4798      	blx	r3
			(void)xTaskResumeAll();
    2644:	4b0b      	ldr	r3, [pc, #44]	; (2674 <xQueueGenericSend+0x180>)
    2646:	4798      	blx	r3
			return errQUEUE_FULL;
    2648:	2000      	movs	r0, #0
    264a:	e797      	b.n	257c <xQueueGenericSend+0x88>
    264c:	00003065 	.word	0x00003065
    2650:	00002245 	.word	0x00002245
    2654:	000022d1 	.word	0x000022d1
    2658:	00001f4d 	.word	0x00001f4d
    265c:	00001f7d 	.word	0x00001f7d
    2660:	00002f59 	.word	0x00002f59
    2664:	00002fe9 	.word	0x00002fe9
    2668:	000021f9 	.word	0x000021f9
    266c:	00002ef5 	.word	0x00002ef5
    2670:	00002361 	.word	0x00002361
    2674:	00002d85 	.word	0x00002d85
    2678:	00001f65 	.word	0x00001f65
    267c:	00002fd9 	.word	0x00002fd9
    2680:	00002c61 	.word	0x00002c61

00002684 <xQueueGenericSendFromISR>:
{
    2684:	b5f0      	push	{r4, r5, r6, r7, lr}
    2686:	b083      	sub	sp, #12
    2688:	0004      	movs	r4, r0
    268a:	9100      	str	r1, [sp, #0]
    268c:	0017      	movs	r7, r2
    268e:	001d      	movs	r5, r3
	configASSERT(pxQueue);
    2690:	2800      	cmp	r0, #0
    2692:	d007      	beq.n	26a4 <xQueueGenericSendFromISR+0x20>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2694:	9b00      	ldr	r3, [sp, #0]
    2696:	2b00      	cmp	r3, #0
    2698:	d006      	beq.n	26a8 <xQueueGenericSendFromISR+0x24>
    269a:	2301      	movs	r3, #1
    269c:	2b00      	cmp	r3, #0
    269e:	d10a      	bne.n	26b6 <xQueueGenericSendFromISR+0x32>
    26a0:	b672      	cpsid	i
    26a2:	e7fe      	b.n	26a2 <xQueueGenericSendFromISR+0x1e>
	configASSERT(pxQueue);
    26a4:	b672      	cpsid	i
    26a6:	e7fe      	b.n	26a6 <xQueueGenericSendFromISR+0x22>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    26a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    26aa:	2b00      	cmp	r3, #0
    26ac:	d101      	bne.n	26b2 <xQueueGenericSendFromISR+0x2e>
    26ae:	3301      	adds	r3, #1
    26b0:	e7f4      	b.n	269c <xQueueGenericSendFromISR+0x18>
    26b2:	2300      	movs	r3, #0
    26b4:	e7f2      	b.n	269c <xQueueGenericSendFromISR+0x18>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    26b6:	2d02      	cmp	r5, #2
    26b8:	d003      	beq.n	26c2 <xQueueGenericSendFromISR+0x3e>
    26ba:	2b00      	cmp	r3, #0
    26bc:	d106      	bne.n	26cc <xQueueGenericSendFromISR+0x48>
    26be:	b672      	cpsid	i
    26c0:	e7fe      	b.n	26c0 <xQueueGenericSendFromISR+0x3c>
    26c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    26c4:	2a01      	cmp	r2, #1
    26c6:	d0f8      	beq.n	26ba <xQueueGenericSendFromISR+0x36>
    26c8:	2300      	movs	r3, #0
    26ca:	e7f6      	b.n	26ba <xQueueGenericSendFromISR+0x36>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    26cc:	4b23      	ldr	r3, [pc, #140]	; (275c <xQueueGenericSendFromISR+0xd8>)
    26ce:	4798      	blx	r3
    26d0:	9001      	str	r0, [sp, #4]
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    26d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    26d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    26d6:	4293      	cmp	r3, r2
    26d8:	d301      	bcc.n	26de <xQueueGenericSendFromISR+0x5a>
    26da:	2d02      	cmp	r5, #2
    26dc:	d132      	bne.n	2744 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
    26de:	2345      	movs	r3, #69	; 0x45
    26e0:	5ce6      	ldrb	r6, [r4, r3]
    26e2:	b276      	sxtb	r6, r6
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    26e4:	002a      	movs	r2, r5
    26e6:	9900      	ldr	r1, [sp, #0]
    26e8:	0020      	movs	r0, r4
    26ea:	4b1d      	ldr	r3, [pc, #116]	; (2760 <xQueueGenericSendFromISR+0xdc>)
    26ec:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    26ee:	1c73      	adds	r3, r6, #1
    26f0:	d122      	bne.n	2738 <xQueueGenericSendFromISR+0xb4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    26f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    26f4:	2b00      	cmp	r3, #0
    26f6:	d010      	beq.n	271a <xQueueGenericSendFromISR+0x96>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    26f8:	0029      	movs	r1, r5
    26fa:	0020      	movs	r0, r4
    26fc:	4b19      	ldr	r3, [pc, #100]	; (2764 <xQueueGenericSendFromISR+0xe0>)
    26fe:	4798      	blx	r3
    2700:	2800      	cmp	r0, #0
    2702:	d021      	beq.n	2748 <xQueueGenericSendFromISR+0xc4>
							if (pxHigherPriorityTaskWoken != NULL) {
    2704:	2f00      	cmp	r7, #0
    2706:	d021      	beq.n	274c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    2708:	2301      	movs	r3, #1
    270a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
    270c:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    270e:	9801      	ldr	r0, [sp, #4]
    2710:	4b15      	ldr	r3, [pc, #84]	; (2768 <xQueueGenericSendFromISR+0xe4>)
    2712:	4798      	blx	r3
}
    2714:	0020      	movs	r0, r4
    2716:	b003      	add	sp, #12
    2718:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    271a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    271c:	2b00      	cmp	r3, #0
    271e:	d017      	beq.n	2750 <xQueueGenericSendFromISR+0xcc>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2720:	0020      	movs	r0, r4
    2722:	3024      	adds	r0, #36	; 0x24
    2724:	4b11      	ldr	r3, [pc, #68]	; (276c <xQueueGenericSendFromISR+0xe8>)
    2726:	4798      	blx	r3
    2728:	2800      	cmp	r0, #0
    272a:	d013      	beq.n	2754 <xQueueGenericSendFromISR+0xd0>
								if (pxHigherPriorityTaskWoken != NULL) {
    272c:	2f00      	cmp	r7, #0
    272e:	d013      	beq.n	2758 <xQueueGenericSendFromISR+0xd4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    2730:	2301      	movs	r3, #1
    2732:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
    2734:	2401      	movs	r4, #1
    2736:	e7ea      	b.n	270e <xQueueGenericSendFromISR+0x8a>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    2738:	1c73      	adds	r3, r6, #1
    273a:	b25b      	sxtb	r3, r3
    273c:	2245      	movs	r2, #69	; 0x45
    273e:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    2740:	2401      	movs	r4, #1
    2742:	e7e4      	b.n	270e <xQueueGenericSendFromISR+0x8a>
			xReturn = errQUEUE_FULL;
    2744:	2400      	movs	r4, #0
    2746:	e7e2      	b.n	270e <xQueueGenericSendFromISR+0x8a>
			xReturn = pdPASS;
    2748:	2401      	movs	r4, #1
    274a:	e7e0      	b.n	270e <xQueueGenericSendFromISR+0x8a>
    274c:	2401      	movs	r4, #1
    274e:	e7de      	b.n	270e <xQueueGenericSendFromISR+0x8a>
    2750:	2401      	movs	r4, #1
    2752:	e7dc      	b.n	270e <xQueueGenericSendFromISR+0x8a>
    2754:	2401      	movs	r4, #1
    2756:	e7da      	b.n	270e <xQueueGenericSendFromISR+0x8a>
    2758:	2401      	movs	r4, #1
    275a:	e7d8      	b.n	270e <xQueueGenericSendFromISR+0x8a>
    275c:	00001f9d 	.word	0x00001f9d
    2760:	00002245 	.word	0x00002245
    2764:	000022d1 	.word	0x000022d1
    2768:	00001fa5 	.word	0x00001fa5
    276c:	00002f59 	.word	0x00002f59

00002770 <xQueueReceive>:
{
    2770:	b5f0      	push	{r4, r5, r6, r7, lr}
    2772:	b085      	sub	sp, #20
    2774:	0004      	movs	r4, r0
    2776:	000e      	movs	r6, r1
    2778:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    277a:	2800      	cmp	r0, #0
    277c:	d006      	beq.n	278c <xQueueReceive+0x1c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    277e:	2900      	cmp	r1, #0
    2780:	d006      	beq.n	2790 <xQueueReceive+0x20>
    2782:	2501      	movs	r5, #1
    2784:	2d00      	cmp	r5, #0
    2786:	d10a      	bne.n	279e <xQueueReceive+0x2e>
    2788:	b672      	cpsid	i
    278a:	e7fe      	b.n	278a <xQueueReceive+0x1a>
	configASSERT((pxQueue));
    278c:	b672      	cpsid	i
    278e:	e7fe      	b.n	278e <xQueueReceive+0x1e>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    2790:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2792:	2b00      	cmp	r3, #0
    2794:	d101      	bne.n	279a <xQueueReceive+0x2a>
    2796:	2501      	movs	r5, #1
    2798:	e7f4      	b.n	2784 <xQueueReceive+0x14>
    279a:	2500      	movs	r5, #0
    279c:	e7f2      	b.n	2784 <xQueueReceive+0x14>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    279e:	4b3e      	ldr	r3, [pc, #248]	; (2898 <xQueueReceive+0x128>)
    27a0:	4798      	blx	r3
    27a2:	2800      	cmp	r0, #0
    27a4:	d103      	bne.n	27ae <xQueueReceive+0x3e>
    27a6:	9b01      	ldr	r3, [sp, #4]
    27a8:	2b00      	cmp	r3, #0
    27aa:	d000      	beq.n	27ae <xQueueReceive+0x3e>
    27ac:	2500      	movs	r5, #0
    27ae:	2d00      	cmp	r5, #0
    27b0:	d101      	bne.n	27b6 <xQueueReceive+0x46>
    27b2:	b672      	cpsid	i
    27b4:	e7fe      	b.n	27b4 <xQueueReceive+0x44>
    27b6:	2700      	movs	r7, #0
    27b8:	e02b      	b.n	2812 <xQueueReceive+0xa2>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    27ba:	0031      	movs	r1, r6
    27bc:	0020      	movs	r0, r4
    27be:	4b37      	ldr	r3, [pc, #220]	; (289c <xQueueReceive+0x12c>)
    27c0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    27c2:	3d01      	subs	r5, #1
    27c4:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    27c6:	6923      	ldr	r3, [r4, #16]
    27c8:	2b00      	cmp	r3, #0
    27ca:	d007      	beq.n	27dc <xQueueReceive+0x6c>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    27cc:	0020      	movs	r0, r4
    27ce:	3010      	adds	r0, #16
    27d0:	4b33      	ldr	r3, [pc, #204]	; (28a0 <xQueueReceive+0x130>)
    27d2:	4798      	blx	r3
    27d4:	2800      	cmp	r0, #0
    27d6:	d001      	beq.n	27dc <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
    27d8:	4b32      	ldr	r3, [pc, #200]	; (28a4 <xQueueReceive+0x134>)
    27da:	4798      	blx	r3
				taskEXIT_CRITICAL();
    27dc:	4b32      	ldr	r3, [pc, #200]	; (28a8 <xQueueReceive+0x138>)
    27de:	4798      	blx	r3
				return pdPASS;
    27e0:	2001      	movs	r0, #1
}
    27e2:	b005      	add	sp, #20
    27e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    27e6:	4b30      	ldr	r3, [pc, #192]	; (28a8 <xQueueReceive+0x138>)
    27e8:	4798      	blx	r3
					return errQUEUE_EMPTY;
    27ea:	2000      	movs	r0, #0
    27ec:	e7f9      	b.n	27e2 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState(&xTimeOut);
    27ee:	a802      	add	r0, sp, #8
    27f0:	4b2e      	ldr	r3, [pc, #184]	; (28ac <xQueueReceive+0x13c>)
    27f2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    27f4:	3701      	adds	r7, #1
    27f6:	e016      	b.n	2826 <xQueueReceive+0xb6>
		prvLockQueue(pxQueue);
    27f8:	2200      	movs	r2, #0
    27fa:	2344      	movs	r3, #68	; 0x44
    27fc:	54e2      	strb	r2, [r4, r3]
    27fe:	e01d      	b.n	283c <xQueueReceive+0xcc>
    2800:	2200      	movs	r2, #0
    2802:	2345      	movs	r3, #69	; 0x45
    2804:	54e2      	strb	r2, [r4, r3]
    2806:	e01e      	b.n	2846 <xQueueReceive+0xd6>
				prvUnlockQueue(pxQueue);
    2808:	0020      	movs	r0, r4
    280a:	4b29      	ldr	r3, [pc, #164]	; (28b0 <xQueueReceive+0x140>)
    280c:	4798      	blx	r3
				(void)xTaskResumeAll();
    280e:	4b29      	ldr	r3, [pc, #164]	; (28b4 <xQueueReceive+0x144>)
    2810:	4798      	blx	r3
		taskENTER_CRITICAL();
    2812:	4b29      	ldr	r3, [pc, #164]	; (28b8 <xQueueReceive+0x148>)
    2814:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2816:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    2818:	2d00      	cmp	r5, #0
    281a:	d1ce      	bne.n	27ba <xQueueReceive+0x4a>
				if (xTicksToWait == (TickType_t)0) {
    281c:	9b01      	ldr	r3, [sp, #4]
    281e:	2b00      	cmp	r3, #0
    2820:	d0e1      	beq.n	27e6 <xQueueReceive+0x76>
				} else if (xEntryTimeSet == pdFALSE) {
    2822:	2f00      	cmp	r7, #0
    2824:	d0e3      	beq.n	27ee <xQueueReceive+0x7e>
		taskEXIT_CRITICAL();
    2826:	4b20      	ldr	r3, [pc, #128]	; (28a8 <xQueueReceive+0x138>)
    2828:	4798      	blx	r3
		vTaskSuspendAll();
    282a:	4b24      	ldr	r3, [pc, #144]	; (28bc <xQueueReceive+0x14c>)
    282c:	4798      	blx	r3
		prvLockQueue(pxQueue);
    282e:	4b22      	ldr	r3, [pc, #136]	; (28b8 <xQueueReceive+0x148>)
    2830:	4798      	blx	r3
    2832:	2344      	movs	r3, #68	; 0x44
    2834:	5ce3      	ldrb	r3, [r4, r3]
    2836:	b25b      	sxtb	r3, r3
    2838:	3301      	adds	r3, #1
    283a:	d0dd      	beq.n	27f8 <xQueueReceive+0x88>
    283c:	2345      	movs	r3, #69	; 0x45
    283e:	5ce3      	ldrb	r3, [r4, r3]
    2840:	b25b      	sxtb	r3, r3
    2842:	3301      	adds	r3, #1
    2844:	d0dc      	beq.n	2800 <xQueueReceive+0x90>
    2846:	4b18      	ldr	r3, [pc, #96]	; (28a8 <xQueueReceive+0x138>)
    2848:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    284a:	a901      	add	r1, sp, #4
    284c:	a802      	add	r0, sp, #8
    284e:	4b1c      	ldr	r3, [pc, #112]	; (28c0 <xQueueReceive+0x150>)
    2850:	4798      	blx	r3
    2852:	2800      	cmp	r0, #0
    2854:	d113      	bne.n	287e <xQueueReceive+0x10e>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    2856:	0020      	movs	r0, r4
    2858:	4b1a      	ldr	r3, [pc, #104]	; (28c4 <xQueueReceive+0x154>)
    285a:	4798      	blx	r3
    285c:	2800      	cmp	r0, #0
    285e:	d0d3      	beq.n	2808 <xQueueReceive+0x98>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    2860:	0020      	movs	r0, r4
    2862:	3024      	adds	r0, #36	; 0x24
    2864:	9901      	ldr	r1, [sp, #4]
    2866:	4b18      	ldr	r3, [pc, #96]	; (28c8 <xQueueReceive+0x158>)
    2868:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    286a:	0020      	movs	r0, r4
    286c:	4b10      	ldr	r3, [pc, #64]	; (28b0 <xQueueReceive+0x140>)
    286e:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    2870:	4b10      	ldr	r3, [pc, #64]	; (28b4 <xQueueReceive+0x144>)
    2872:	4798      	blx	r3
    2874:	2800      	cmp	r0, #0
    2876:	d1cc      	bne.n	2812 <xQueueReceive+0xa2>
					portYIELD_WITHIN_API();
    2878:	4b0a      	ldr	r3, [pc, #40]	; (28a4 <xQueueReceive+0x134>)
    287a:	4798      	blx	r3
    287c:	e7c9      	b.n	2812 <xQueueReceive+0xa2>
			prvUnlockQueue(pxQueue);
    287e:	0020      	movs	r0, r4
    2880:	4b0b      	ldr	r3, [pc, #44]	; (28b0 <xQueueReceive+0x140>)
    2882:	4798      	blx	r3
			(void)xTaskResumeAll();
    2884:	4b0b      	ldr	r3, [pc, #44]	; (28b4 <xQueueReceive+0x144>)
    2886:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    2888:	0020      	movs	r0, r4
    288a:	4b0e      	ldr	r3, [pc, #56]	; (28c4 <xQueueReceive+0x154>)
    288c:	4798      	blx	r3
    288e:	2800      	cmp	r0, #0
    2890:	d0bf      	beq.n	2812 <xQueueReceive+0xa2>
				return errQUEUE_EMPTY;
    2892:	2000      	movs	r0, #0
    2894:	e7a5      	b.n	27e2 <xQueueReceive+0x72>
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	00003065 	.word	0x00003065
    289c:	00002339 	.word	0x00002339
    28a0:	00002f59 	.word	0x00002f59
    28a4:	00001f4d 	.word	0x00001f4d
    28a8:	00001f7d 	.word	0x00001f7d
    28ac:	00002fd9 	.word	0x00002fd9
    28b0:	00002361 	.word	0x00002361
    28b4:	00002d85 	.word	0x00002d85
    28b8:	00001f65 	.word	0x00001f65
    28bc:	00002c61 	.word	0x00002c61
    28c0:	00002fe9 	.word	0x00002fe9
    28c4:	00002221 	.word	0x00002221
    28c8:	00002ef5 	.word	0x00002ef5

000028cc <vQueueWaitForMessageRestricted>:
{
    28cc:	b570      	push	{r4, r5, r6, lr}
    28ce:	0004      	movs	r4, r0
    28d0:	000d      	movs	r5, r1
    28d2:	0016      	movs	r6, r2
	prvLockQueue(pxQueue);
    28d4:	4b11      	ldr	r3, [pc, #68]	; (291c <vQueueWaitForMessageRestricted+0x50>)
    28d6:	4798      	blx	r3
    28d8:	2344      	movs	r3, #68	; 0x44
    28da:	5ce3      	ldrb	r3, [r4, r3]
    28dc:	b25b      	sxtb	r3, r3
    28de:	3301      	adds	r3, #1
    28e0:	d00d      	beq.n	28fe <vQueueWaitForMessageRestricted+0x32>
    28e2:	2345      	movs	r3, #69	; 0x45
    28e4:	5ce3      	ldrb	r3, [r4, r3]
    28e6:	b25b      	sxtb	r3, r3
    28e8:	3301      	adds	r3, #1
    28ea:	d00c      	beq.n	2906 <vQueueWaitForMessageRestricted+0x3a>
    28ec:	4b0c      	ldr	r3, [pc, #48]	; (2920 <vQueueWaitForMessageRestricted+0x54>)
    28ee:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    28f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28f2:	2b00      	cmp	r3, #0
    28f4:	d00b      	beq.n	290e <vQueueWaitForMessageRestricted+0x42>
	prvUnlockQueue(pxQueue);
    28f6:	0020      	movs	r0, r4
    28f8:	4b0a      	ldr	r3, [pc, #40]	; (2924 <vQueueWaitForMessageRestricted+0x58>)
    28fa:	4798      	blx	r3
}
    28fc:	bd70      	pop	{r4, r5, r6, pc}
	prvLockQueue(pxQueue);
    28fe:	2200      	movs	r2, #0
    2900:	2344      	movs	r3, #68	; 0x44
    2902:	54e2      	strb	r2, [r4, r3]
    2904:	e7ed      	b.n	28e2 <vQueueWaitForMessageRestricted+0x16>
    2906:	2200      	movs	r2, #0
    2908:	2345      	movs	r3, #69	; 0x45
    290a:	54e2      	strb	r2, [r4, r3]
    290c:	e7ee      	b.n	28ec <vQueueWaitForMessageRestricted+0x20>
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    290e:	0020      	movs	r0, r4
    2910:	3024      	adds	r0, #36	; 0x24
    2912:	0032      	movs	r2, r6
    2914:	0029      	movs	r1, r5
    2916:	4b04      	ldr	r3, [pc, #16]	; (2928 <vQueueWaitForMessageRestricted+0x5c>)
    2918:	4798      	blx	r3
    291a:	e7ec      	b.n	28f6 <vQueueWaitForMessageRestricted+0x2a>
    291c:	00001f65 	.word	0x00001f65
    2920:	00001f7d 	.word	0x00001f7d
    2924:	00002361 	.word	0x00002361
    2928:	00002f21 	.word	0x00002f21

0000292c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    292c:	4b0a      	ldr	r3, [pc, #40]	; (2958 <prvResetNextTaskUnblockTime+0x2c>)
    292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	2b00      	cmp	r3, #0
    2934:	d109      	bne.n	294a <prvResetNextTaskUnblockTime+0x1e>
    2936:	3301      	adds	r3, #1
    2938:	2b00      	cmp	r3, #0
    293a:	d108      	bne.n	294e <prvResetNextTaskUnblockTime+0x22>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    293c:	4b06      	ldr	r3, [pc, #24]	; (2958 <prvResetNextTaskUnblockTime+0x2c>)
    293e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2940:	68d2      	ldr	r2, [r2, #12]
    2942:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    2944:	6852      	ldr	r2, [r2, #4]
    2946:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
    2948:	4770      	bx	lr
	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    294a:	2300      	movs	r3, #0
    294c:	e7f4      	b.n	2938 <prvResetNextTaskUnblockTime+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
    294e:	2201      	movs	r2, #1
    2950:	4252      	negs	r2, r2
    2952:	4b01      	ldr	r3, [pc, #4]	; (2958 <prvResetNextTaskUnblockTime+0x2c>)
    2954:	62da      	str	r2, [r3, #44]	; 0x2c
    2956:	e7f7      	b.n	2948 <prvResetNextTaskUnblockTime+0x1c>
    2958:	20002884 	.word	0x20002884

0000295c <prvInitialiseNewTask>:
{
    295c:	b5f0      	push	{r4, r5, r6, r7, lr}
    295e:	46c6      	mov	lr, r8
    2960:	b500      	push	{lr}
    2962:	b082      	sub	sp, #8
    2964:	9000      	str	r0, [sp, #0]
    2966:	000f      	movs	r7, r1
    2968:	0015      	movs	r5, r2
    296a:	9301      	str	r3, [sp, #4]
    296c:	9c08      	ldr	r4, [sp, #32]
    296e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    2970:	0092      	lsls	r2, r2, #2
    2972:	21a5      	movs	r1, #165	; 0xa5
    2974:	6b30      	ldr	r0, [r6, #48]	; 0x30
    2976:	4b1f      	ldr	r3, [pc, #124]	; (29f4 <prvInitialiseNewTask+0x98>)
    2978:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    297a:	4b1f      	ldr	r3, [pc, #124]	; (29f8 <prvInitialiseNewTask+0x9c>)
    297c:	18eb      	adds	r3, r5, r3
    297e:	009b      	lsls	r3, r3, #2
    2980:	6b32      	ldr	r2, [r6, #48]	; 0x30
    2982:	4694      	mov	ip, r2
    2984:	4463      	add	r3, ip
		                      & (~(
    2986:	2207      	movs	r2, #7
    2988:	4393      	bics	r3, r2
    298a:	4698      	mov	r8, r3
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    298c:	2300      	movs	r3, #0
    298e:	2b07      	cmp	r3, #7
    2990:	d809      	bhi.n	29a6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pcTaskName[x] = pcName[x];
    2992:	18f9      	adds	r1, r7, r3
    2994:	7808      	ldrb	r0, [r1, #0]
    2996:	18f2      	adds	r2, r6, r3
    2998:	3234      	adds	r2, #52	; 0x34
    299a:	7010      	strb	r0, [r2, #0]
		if (pcName[x] == 0x00) {
    299c:	780a      	ldrb	r2, [r1, #0]
    299e:	2a00      	cmp	r2, #0
    29a0:	d001      	beq.n	29a6 <prvInitialiseNewTask+0x4a>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    29a2:	3301      	adds	r3, #1
    29a4:	e7f3      	b.n	298e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    29a6:	2200      	movs	r2, #0
    29a8:	233b      	movs	r3, #59	; 0x3b
    29aa:	54f2      	strb	r2, [r6, r3]
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    29ac:	2c04      	cmp	r4, #4
    29ae:	d900      	bls.n	29b2 <prvInitialiseNewTask+0x56>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    29b0:	2404      	movs	r4, #4
	pxNewTCB->uxPriority = uxPriority;
    29b2:	62f4      	str	r4, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    29b4:	6474      	str	r4, [r6, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    29b6:	2500      	movs	r5, #0
    29b8:	64b5      	str	r5, [r6, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    29ba:	1d30      	adds	r0, r6, #4
    29bc:	4f0f      	ldr	r7, [pc, #60]	; (29fc <prvInitialiseNewTask+0xa0>)
    29be:	47b8      	blx	r7
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    29c0:	0030      	movs	r0, r6
    29c2:	3018      	adds	r0, #24
    29c4:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    29c6:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE(
    29c8:	2305      	movs	r3, #5
    29ca:	1b1c      	subs	r4, r3, r4
    29cc:	61b4      	str	r4, [r6, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    29ce:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    29d0:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    29d2:	334b      	adds	r3, #75	; 0x4b
    29d4:	54f5      	strb	r5, [r6, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    29d6:	9a01      	ldr	r2, [sp, #4]
    29d8:	9900      	ldr	r1, [sp, #0]
    29da:	4640      	mov	r0, r8
    29dc:	4b08      	ldr	r3, [pc, #32]	; (2a00 <prvInitialiseNewTask+0xa4>)
    29de:	4798      	blx	r3
    29e0:	6030      	str	r0, [r6, #0]
	if ((void *)pxCreatedTask != NULL) {
    29e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29e4:	2b00      	cmp	r3, #0
    29e6:	d000      	beq.n	29ea <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    29e8:	601e      	str	r6, [r3, #0]
}
    29ea:	b002      	add	sp, #8
    29ec:	bc04      	pop	{r2}
    29ee:	4690      	mov	r8, r2
    29f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	0000358f 	.word	0x0000358f
    29f8:	3fffffff 	.word	0x3fffffff
    29fc:	00001de3 	.word	0x00001de3
    2a00:	00001edd 	.word	0x00001edd

00002a04 <prvIdleTask>:
{
    2a04:	b510      	push	{r4, lr}
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    2a06:	4b03      	ldr	r3, [pc, #12]	; (2a14 <prvIdleTask+0x10>)
    2a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a0a:	2b01      	cmp	r3, #1
    2a0c:	d9fb      	bls.n	2a06 <prvIdleTask+0x2>
				taskYIELD();
    2a0e:	4b02      	ldr	r3, [pc, #8]	; (2a18 <prvIdleTask+0x14>)
    2a10:	4798      	blx	r3
    2a12:	e7f8      	b.n	2a06 <prvIdleTask+0x2>
    2a14:	20002884 	.word	0x20002884
    2a18:	00001f4d 	.word	0x00001f4d

00002a1c <prvInitialiseTaskLists>:
{
    2a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a1e:	46c6      	mov	lr, r8
    2a20:	b500      	push	{lr}
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    2a22:	2400      	movs	r4, #0
    2a24:	e008      	b.n	2a38 <prvInitialiseTaskLists+0x1c>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    2a26:	00a3      	lsls	r3, r4, #2
    2a28:	191b      	adds	r3, r3, r4
    2a2a:	009a      	lsls	r2, r3, #2
    2a2c:	480f      	ldr	r0, [pc, #60]	; (2a6c <prvInitialiseTaskLists+0x50>)
    2a2e:	3030      	adds	r0, #48	; 0x30
    2a30:	1880      	adds	r0, r0, r2
    2a32:	4b0f      	ldr	r3, [pc, #60]	; (2a70 <prvInitialiseTaskLists+0x54>)
    2a34:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    2a36:	3401      	adds	r4, #1
    2a38:	2c04      	cmp	r4, #4
    2a3a:	d9f4      	bls.n	2a26 <prvInitialiseTaskLists+0xa>
	vListInitialise(&xDelayedTaskList1);
    2a3c:	4d0d      	ldr	r5, [pc, #52]	; (2a74 <prvInitialiseTaskLists+0x58>)
    2a3e:	2314      	movs	r3, #20
    2a40:	4698      	mov	r8, r3
    2a42:	44a8      	add	r8, r5
    2a44:	4640      	mov	r0, r8
    2a46:	4c0a      	ldr	r4, [pc, #40]	; (2a70 <prvInitialiseTaskLists+0x54>)
    2a48:	47a0      	blx	r4
	vListInitialise(&xDelayedTaskList2);
    2a4a:	002f      	movs	r7, r5
    2a4c:	3728      	adds	r7, #40	; 0x28
    2a4e:	0038      	movs	r0, r7
    2a50:	47a0      	blx	r4
	vListInitialise(&xPendingReadyList);
    2a52:	4e06      	ldr	r6, [pc, #24]	; (2a6c <prvInitialiseTaskLists+0x50>)
    2a54:	0030      	movs	r0, r6
    2a56:	3014      	adds	r0, #20
    2a58:	47a0      	blx	r4
		vListInitialise(&xSuspendedTaskList);
    2a5a:	0030      	movs	r0, r6
    2a5c:	47a0      	blx	r4
	pxDelayedTaskList         = &xDelayedTaskList1;
    2a5e:	4643      	mov	r3, r8
    2a60:	62b3      	str	r3, [r6, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2a62:	63ef      	str	r7, [r5, #60]	; 0x3c
}
    2a64:	bc04      	pop	{r2}
    2a66:	4690      	mov	r8, r2
    2a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	20002884 	.word	0x20002884
    2a70:	00001dcd 	.word	0x00001dcd
    2a74:	20002904 	.word	0x20002904

00002a78 <prvAddNewTaskToReadyList>:
{
    2a78:	b510      	push	{r4, lr}
    2a7a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
    2a7c:	4b1f      	ldr	r3, [pc, #124]	; (2afc <prvAddNewTaskToReadyList+0x84>)
    2a7e:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    2a80:	4b1f      	ldr	r3, [pc, #124]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2a84:	3201      	adds	r2, #1
    2a86:	641a      	str	r2, [r3, #64]	; 0x40
		if (pxCurrentTCB == NULL) {
    2a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d02b      	beq.n	2ae6 <prvAddNewTaskToReadyList+0x6e>
			if (xSchedulerRunning == pdFALSE) {
    2a8e:	4b1c      	ldr	r3, [pc, #112]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2a92:	2b00      	cmp	r3, #0
    2a94:	d107      	bne.n	2aa6 <prvAddNewTaskToReadyList+0x2e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    2a96:	4b1a      	ldr	r3, [pc, #104]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2a9e:	4293      	cmp	r3, r2
    2aa0:	d801      	bhi.n	2aa6 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
    2aa2:	4b17      	ldr	r3, [pc, #92]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2aa4:	645c      	str	r4, [r3, #68]	; 0x44
		uxTaskNumber++;
    2aa6:	4916      	ldr	r1, [pc, #88]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2aa8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    2aaa:	3301      	adds	r3, #1
    2aac:	64cb      	str	r3, [r1, #76]	; 0x4c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    2aae:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    2ab0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2ab2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    2ab4:	429a      	cmp	r2, r3
    2ab6:	d900      	bls.n	2aba <prvAddNewTaskToReadyList+0x42>
    2ab8:	650a      	str	r2, [r1, #80]	; 0x50
    2aba:	1d21      	adds	r1, r4, #4
    2abc:	0093      	lsls	r3, r2, #2
    2abe:	189b      	adds	r3, r3, r2
    2ac0:	009a      	lsls	r2, r3, #2
    2ac2:	4810      	ldr	r0, [pc, #64]	; (2b04 <prvAddNewTaskToReadyList+0x8c>)
    2ac4:	3030      	adds	r0, #48	; 0x30
    2ac6:	1880      	adds	r0, r0, r2
    2ac8:	4b0f      	ldr	r3, [pc, #60]	; (2b08 <prvAddNewTaskToReadyList+0x90>)
    2aca:	4798      	blx	r3
	taskEXIT_CRITICAL();
    2acc:	4b0f      	ldr	r3, [pc, #60]	; (2b0c <prvAddNewTaskToReadyList+0x94>)
    2ace:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    2ad0:	4b0b      	ldr	r3, [pc, #44]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d005      	beq.n	2ae4 <prvAddNewTaskToReadyList+0x6c>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    2ad8:	4b09      	ldr	r3, [pc, #36]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ade:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ae0:	429a      	cmp	r2, r3
    2ae2:	d308      	bcc.n	2af6 <prvAddNewTaskToReadyList+0x7e>
}
    2ae4:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
    2ae6:	4b06      	ldr	r3, [pc, #24]	; (2b00 <prvAddNewTaskToReadyList+0x88>)
    2ae8:	645c      	str	r4, [r3, #68]	; 0x44
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    2aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2aec:	2b01      	cmp	r3, #1
    2aee:	d1da      	bne.n	2aa6 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
    2af0:	4b07      	ldr	r3, [pc, #28]	; (2b10 <prvAddNewTaskToReadyList+0x98>)
    2af2:	4798      	blx	r3
    2af4:	e7d7      	b.n	2aa6 <prvAddNewTaskToReadyList+0x2e>
			taskYIELD_IF_USING_PREEMPTION();
    2af6:	4b07      	ldr	r3, [pc, #28]	; (2b14 <prvAddNewTaskToReadyList+0x9c>)
    2af8:	4798      	blx	r3
}
    2afa:	e7f3      	b.n	2ae4 <prvAddNewTaskToReadyList+0x6c>
    2afc:	00001f65 	.word	0x00001f65
    2b00:	20002904 	.word	0x20002904
    2b04:	20002884 	.word	0x20002884
    2b08:	00001de9 	.word	0x00001de9
    2b0c:	00001f7d 	.word	0x00001f7d
    2b10:	00002a1d 	.word	0x00002a1d
    2b14:	00001f4d 	.word	0x00001f4d

00002b18 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    2b18:	b570      	push	{r4, r5, r6, lr}
    2b1a:	0004      	movs	r4, r0
    2b1c:	000d      	movs	r5, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    2b1e:	4b15      	ldr	r3, [pc, #84]	; (2b74 <prvAddCurrentTaskToDelayedList+0x5c>)
    2b20:	6d5e      	ldr	r6, [r3, #84]	; 0x54
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    2b22:	6c58      	ldr	r0, [r3, #68]	; 0x44
    2b24:	3004      	adds	r0, #4
    2b26:	4b14      	ldr	r3, [pc, #80]	; (2b78 <prvAddCurrentTaskToDelayedList+0x60>)
    2b28:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2b2a:	1c63      	adds	r3, r4, #1
    2b2c:	d012      	beq.n	2b54 <prvAddCurrentTaskToDelayedList+0x3c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2b2e:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    2b30:	4b10      	ldr	r3, [pc, #64]	; (2b74 <prvAddCurrentTaskToDelayedList+0x5c>)
    2b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2b34:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    2b36:	42a6      	cmp	r6, r4
    2b38:	d815      	bhi.n	2b66 <prvAddCurrentTaskToDelayedList+0x4e>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2b3a:	4d10      	ldr	r5, [pc, #64]	; (2b7c <prvAddCurrentTaskToDelayedList+0x64>)
    2b3c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2b3e:	4b0d      	ldr	r3, [pc, #52]	; (2b74 <prvAddCurrentTaskToDelayedList+0x5c>)
    2b40:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2b42:	3104      	adds	r1, #4
    2b44:	4b0e      	ldr	r3, [pc, #56]	; (2b80 <prvAddCurrentTaskToDelayedList+0x68>)
    2b46:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    2b48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2b4a:	429c      	cmp	r4, r3
    2b4c:	d211      	bcs.n	2b72 <prvAddCurrentTaskToDelayedList+0x5a>
					xNextTaskUnblockTime = xTimeToWake;
    2b4e:	4b0b      	ldr	r3, [pc, #44]	; (2b7c <prvAddCurrentTaskToDelayedList+0x64>)
    2b50:	62dc      	str	r4, [r3, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		(void)xCanBlockIndefinitely;
	}
#endif /* INCLUDE_vTaskSuspend */
}
    2b52:	e00e      	b.n	2b72 <prvAddCurrentTaskToDelayedList+0x5a>
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2b54:	2d00      	cmp	r5, #0
    2b56:	d0ea      	beq.n	2b2e <prvAddCurrentTaskToDelayedList+0x16>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    2b58:	4b06      	ldr	r3, [pc, #24]	; (2b74 <prvAddCurrentTaskToDelayedList+0x5c>)
    2b5a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2b5c:	3104      	adds	r1, #4
    2b5e:	4807      	ldr	r0, [pc, #28]	; (2b7c <prvAddCurrentTaskToDelayedList+0x64>)
    2b60:	4b08      	ldr	r3, [pc, #32]	; (2b84 <prvAddCurrentTaskToDelayedList+0x6c>)
    2b62:	4798      	blx	r3
    2b64:	e005      	b.n	2b72 <prvAddCurrentTaskToDelayedList+0x5a>
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2b66:	4b03      	ldr	r3, [pc, #12]	; (2b74 <prvAddCurrentTaskToDelayedList+0x5c>)
    2b68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2b6a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2b6c:	3104      	adds	r1, #4
    2b6e:	4b04      	ldr	r3, [pc, #16]	; (2b80 <prvAddCurrentTaskToDelayedList+0x68>)
    2b70:	4798      	blx	r3
}
    2b72:	bd70      	pop	{r4, r5, r6, pc}
    2b74:	20002904 	.word	0x20002904
    2b78:	00001e31 	.word	0x00001e31
    2b7c:	20002884 	.word	0x20002884
    2b80:	00001e01 	.word	0x00001e01
    2b84:	00001de9 	.word	0x00001de9

00002b88 <xTaskCreate>:
{
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	b087      	sub	sp, #28
    2b8c:	9004      	str	r0, [sp, #16]
    2b8e:	9105      	str	r1, [sp, #20]
    2b90:	0014      	movs	r4, r2
    2b92:	001f      	movs	r7, r3
		pxStack = (StackType_t *)pvPortMalloc(
    2b94:	0090      	lsls	r0, r2, #2
    2b96:	4b14      	ldr	r3, [pc, #80]	; (2be8 <xTaskCreate+0x60>)
    2b98:	4798      	blx	r3
    2b9a:	1e06      	subs	r6, r0, #0
		if (pxStack != NULL) {
    2b9c:	d01e      	beq.n	2bdc <xTaskCreate+0x54>
			pxNewTCB = (TCB_t *)pvPortMalloc(
    2b9e:	2054      	movs	r0, #84	; 0x54
    2ba0:	4b11      	ldr	r3, [pc, #68]	; (2be8 <xTaskCreate+0x60>)
    2ba2:	4798      	blx	r3
    2ba4:	1e05      	subs	r5, r0, #0
			if (pxNewTCB != NULL) {
    2ba6:	d015      	beq.n	2bd4 <xTaskCreate+0x4c>
				pxNewTCB->pxStack = pxStack;
    2ba8:	6306      	str	r6, [r0, #48]	; 0x30
	if (pxNewTCB != NULL) {
    2baa:	2d00      	cmp	r5, #0
    2bac:	d018      	beq.n	2be0 <xTaskCreate+0x58>
		prvInitialiseNewTask(
    2bae:	2300      	movs	r3, #0
    2bb0:	9303      	str	r3, [sp, #12]
    2bb2:	9502      	str	r5, [sp, #8]
    2bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2bb6:	9301      	str	r3, [sp, #4]
    2bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bba:	9300      	str	r3, [sp, #0]
    2bbc:	003b      	movs	r3, r7
    2bbe:	0022      	movs	r2, r4
    2bc0:	9905      	ldr	r1, [sp, #20]
    2bc2:	9804      	ldr	r0, [sp, #16]
    2bc4:	4c09      	ldr	r4, [pc, #36]	; (2bec <xTaskCreate+0x64>)
    2bc6:	47a0      	blx	r4
		prvAddNewTaskToReadyList(pxNewTCB);
    2bc8:	0028      	movs	r0, r5
    2bca:	4b09      	ldr	r3, [pc, #36]	; (2bf0 <xTaskCreate+0x68>)
    2bcc:	4798      	blx	r3
		xReturn = pdPASS;
    2bce:	2001      	movs	r0, #1
}
    2bd0:	b007      	add	sp, #28
    2bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree(pxStack);
    2bd4:	0030      	movs	r0, r6
    2bd6:	4b07      	ldr	r3, [pc, #28]	; (2bf4 <xTaskCreate+0x6c>)
    2bd8:	4798      	blx	r3
    2bda:	e7e6      	b.n	2baa <xTaskCreate+0x22>
			pxNewTCB = NULL;
    2bdc:	2500      	movs	r5, #0
    2bde:	e7e4      	b.n	2baa <xTaskCreate+0x22>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2be0:	2001      	movs	r0, #1
    2be2:	4240      	negs	r0, r0
	return xReturn;
    2be4:	e7f4      	b.n	2bd0 <xTaskCreate+0x48>
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	000020c5 	.word	0x000020c5
    2bec:	0000295d 	.word	0x0000295d
    2bf0:	00002a79 	.word	0x00002a79
    2bf4:	0000219d 	.word	0x0000219d

00002bf8 <vTaskStartScheduler>:
{
    2bf8:	b510      	push	{r4, lr}
    2bfa:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    2bfc:	4b11      	ldr	r3, [pc, #68]	; (2c44 <vTaskStartScheduler+0x4c>)
    2bfe:	335c      	adds	r3, #92	; 0x5c
    2c00:	9301      	str	r3, [sp, #4]
    2c02:	2300      	movs	r3, #0
    2c04:	9300      	str	r3, [sp, #0]
    2c06:	2240      	movs	r2, #64	; 0x40
    2c08:	490f      	ldr	r1, [pc, #60]	; (2c48 <vTaskStartScheduler+0x50>)
    2c0a:	4810      	ldr	r0, [pc, #64]	; (2c4c <vTaskStartScheduler+0x54>)
    2c0c:	4c10      	ldr	r4, [pc, #64]	; (2c50 <vTaskStartScheduler+0x58>)
    2c0e:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    2c10:	2801      	cmp	r0, #1
    2c12:	d005      	beq.n	2c20 <vTaskStartScheduler+0x28>
	if (xReturn == pdPASS) {
    2c14:	2801      	cmp	r0, #1
    2c16:	d006      	beq.n	2c26 <vTaskStartScheduler+0x2e>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    2c18:	1c43      	adds	r3, r0, #1
    2c1a:	d011      	beq.n	2c40 <vTaskStartScheduler+0x48>
}
    2c1c:	b002      	add	sp, #8
    2c1e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    2c20:	4b0c      	ldr	r3, [pc, #48]	; (2c54 <vTaskStartScheduler+0x5c>)
    2c22:	4798      	blx	r3
    2c24:	e7f6      	b.n	2c14 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    2c26:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    2c28:	2201      	movs	r2, #1
    2c2a:	4252      	negs	r2, r2
    2c2c:	4b0a      	ldr	r3, [pc, #40]	; (2c58 <vTaskStartScheduler+0x60>)
    2c2e:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning    = pdTRUE;
    2c30:	4b04      	ldr	r3, [pc, #16]	; (2c44 <vTaskStartScheduler+0x4c>)
    2c32:	3202      	adds	r2, #2
    2c34:	649a      	str	r2, [r3, #72]	; 0x48
		xTickCount           = (TickType_t)0U;
    2c36:	2200      	movs	r2, #0
    2c38:	655a      	str	r2, [r3, #84]	; 0x54
		if (xPortStartScheduler() != pdFALSE) {
    2c3a:	4b08      	ldr	r3, [pc, #32]	; (2c5c <vTaskStartScheduler+0x64>)
    2c3c:	4798      	blx	r3
    2c3e:	e7ed      	b.n	2c1c <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    2c40:	b672      	cpsid	i
    2c42:	e7fe      	b.n	2c42 <vTaskStartScheduler+0x4a>
    2c44:	20002904 	.word	0x20002904
    2c48:	00003804 	.word	0x00003804
    2c4c:	00002a05 	.word	0x00002a05
    2c50:	00002b89 	.word	0x00002b89
    2c54:	000031b9 	.word	0x000031b9
    2c58:	20002884 	.word	0x20002884
    2c5c:	00001f01 	.word	0x00001f01

00002c60 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2c60:	4a02      	ldr	r2, [pc, #8]	; (2c6c <vTaskSuspendAll+0xc>)
    2c62:	6d93      	ldr	r3, [r2, #88]	; 0x58
    2c64:	3301      	adds	r3, #1
    2c66:	6593      	str	r3, [r2, #88]	; 0x58
}
    2c68:	4770      	bx	lr
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	20002904 	.word	0x20002904

00002c70 <xTaskGetTickCount>:
		xTicks = xTickCount;
    2c70:	4b01      	ldr	r3, [pc, #4]	; (2c78 <xTaskGetTickCount+0x8>)
    2c72:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
    2c74:	4770      	bx	lr
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	20002904 	.word	0x20002904

00002c7c <xTaskIncrementTick>:
{
    2c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2c7e:	4b3c      	ldr	r3, [pc, #240]	; (2d70 <xTaskIncrementTick+0xf4>)
    2c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2c82:	2b00      	cmp	r3, #0
    2c84:	d167      	bne.n	2d56 <xTaskIncrementTick+0xda>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    2c86:	4b3a      	ldr	r3, [pc, #232]	; (2d70 <xTaskIncrementTick+0xf4>)
    2c88:	6d5d      	ldr	r5, [r3, #84]	; 0x54
    2c8a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    2c8c:	655d      	str	r5, [r3, #84]	; 0x54
		if (xConstTickCount
    2c8e:	2d00      	cmp	r5, #0
    2c90:	d111      	bne.n	2cb6 <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
    2c92:	4b38      	ldr	r3, [pc, #224]	; (2d74 <xTaskIncrementTick+0xf8>)
    2c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d001      	beq.n	2ca0 <xTaskIncrementTick+0x24>
    2c9c:	b672      	cpsid	i
    2c9e:	e7fe      	b.n	2c9e <xTaskIncrementTick+0x22>
    2ca0:	4a34      	ldr	r2, [pc, #208]	; (2d74 <xTaskIncrementTick+0xf8>)
    2ca2:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2ca4:	4b32      	ldr	r3, [pc, #200]	; (2d70 <xTaskIncrementTick+0xf4>)
    2ca6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2ca8:	6290      	str	r0, [r2, #40]	; 0x28
    2caa:	63d9      	str	r1, [r3, #60]	; 0x3c
    2cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2cae:	3201      	adds	r2, #1
    2cb0:	661a      	str	r2, [r3, #96]	; 0x60
    2cb2:	4b31      	ldr	r3, [pc, #196]	; (2d78 <xTaskIncrementTick+0xfc>)
    2cb4:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    2cb6:	4b2f      	ldr	r3, [pc, #188]	; (2d74 <xTaskIncrementTick+0xf8>)
    2cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2cba:	429d      	cmp	r5, r3
    2cbc:	d23f      	bcs.n	2d3e <xTaskIncrementTick+0xc2>
	BaseType_t xSwitchRequired = pdFALSE;
    2cbe:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    2cc0:	4b2b      	ldr	r3, [pc, #172]	; (2d70 <xTaskIncrementTick+0xf4>)
    2cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cc6:	0093      	lsls	r3, r2, #2
    2cc8:	189b      	adds	r3, r3, r2
    2cca:	009a      	lsls	r2, r3, #2
    2ccc:	4b29      	ldr	r3, [pc, #164]	; (2d74 <xTaskIncrementTick+0xf8>)
    2cce:	189b      	adds	r3, r3, r2
    2cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cd2:	2b01      	cmp	r3, #1
    2cd4:	d944      	bls.n	2d60 <xTaskIncrementTick+0xe4>
				xSwitchRequired = pdTRUE;
    2cd6:	2401      	movs	r4, #1
    2cd8:	e042      	b.n	2d60 <xTaskIncrementTick+0xe4>
							xSwitchRequired = pdTRUE;
    2cda:	2401      	movs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2cdc:	4b25      	ldr	r3, [pc, #148]	; (2d74 <xTaskIncrementTick+0xf8>)
    2cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ce0:	681b      	ldr	r3, [r3, #0]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d02d      	beq.n	2d42 <xTaskIncrementTick+0xc6>
    2ce6:	2300      	movs	r3, #0
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d12c      	bne.n	2d46 <xTaskIncrementTick+0xca>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2cec:	4b21      	ldr	r3, [pc, #132]	; (2d74 <xTaskIncrementTick+0xf8>)
    2cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2cf0:	68db      	ldr	r3, [r3, #12]
    2cf2:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    2cf4:	6873      	ldr	r3, [r6, #4]
					if (xConstTickCount < xItemValue) {
    2cf6:	429d      	cmp	r5, r3
    2cf8:	d32a      	bcc.n	2d50 <xTaskIncrementTick+0xd4>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2cfa:	1d37      	adds	r7, r6, #4
    2cfc:	0038      	movs	r0, r7
    2cfe:	4b1f      	ldr	r3, [pc, #124]	; (2d7c <xTaskIncrementTick+0x100>)
    2d00:	4798      	blx	r3
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    2d02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2d04:	2b00      	cmp	r3, #0
    2d06:	d003      	beq.n	2d10 <xTaskIncrementTick+0x94>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    2d08:	0030      	movs	r0, r6
    2d0a:	3018      	adds	r0, #24
    2d0c:	4b1b      	ldr	r3, [pc, #108]	; (2d7c <xTaskIncrementTick+0x100>)
    2d0e:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    2d10:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2d12:	4b17      	ldr	r3, [pc, #92]	; (2d70 <xTaskIncrementTick+0xf4>)
    2d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2d16:	429a      	cmp	r2, r3
    2d18:	d901      	bls.n	2d1e <xTaskIncrementTick+0xa2>
    2d1a:	4b15      	ldr	r3, [pc, #84]	; (2d70 <xTaskIncrementTick+0xf4>)
    2d1c:	651a      	str	r2, [r3, #80]	; 0x50
    2d1e:	0093      	lsls	r3, r2, #2
    2d20:	189b      	adds	r3, r3, r2
    2d22:	009a      	lsls	r2, r3, #2
    2d24:	4813      	ldr	r0, [pc, #76]	; (2d74 <xTaskIncrementTick+0xf8>)
    2d26:	3030      	adds	r0, #48	; 0x30
    2d28:	1880      	adds	r0, r0, r2
    2d2a:	0039      	movs	r1, r7
    2d2c:	4b14      	ldr	r3, [pc, #80]	; (2d80 <xTaskIncrementTick+0x104>)
    2d2e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2d30:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    2d32:	4b0f      	ldr	r3, [pc, #60]	; (2d70 <xTaskIncrementTick+0xf4>)
    2d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d38:	429a      	cmp	r2, r3
    2d3a:	d2ce      	bcs.n	2cda <xTaskIncrementTick+0x5e>
    2d3c:	e7ce      	b.n	2cdc <xTaskIncrementTick+0x60>
    2d3e:	2400      	movs	r4, #0
    2d40:	e7cc      	b.n	2cdc <xTaskIncrementTick+0x60>
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2d42:	3301      	adds	r3, #1
    2d44:	e7d0      	b.n	2ce8 <xTaskIncrementTick+0x6c>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2d46:	2201      	movs	r2, #1
    2d48:	4252      	negs	r2, r2
    2d4a:	4b0a      	ldr	r3, [pc, #40]	; (2d74 <xTaskIncrementTick+0xf8>)
    2d4c:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
    2d4e:	e7b7      	b.n	2cc0 <xTaskIncrementTick+0x44>
						xNextTaskUnblockTime = xItemValue;
    2d50:	4a08      	ldr	r2, [pc, #32]	; (2d74 <xTaskIncrementTick+0xf8>)
    2d52:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
    2d54:	e7b4      	b.n	2cc0 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
    2d56:	4a06      	ldr	r2, [pc, #24]	; (2d70 <xTaskIncrementTick+0xf4>)
    2d58:	6e53      	ldr	r3, [r2, #100]	; 0x64
    2d5a:	3301      	adds	r3, #1
    2d5c:	6653      	str	r3, [r2, #100]	; 0x64
	BaseType_t xSwitchRequired = pdFALSE;
    2d5e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    2d60:	4b03      	ldr	r3, [pc, #12]	; (2d70 <xTaskIncrementTick+0xf4>)
    2d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2d64:	2b00      	cmp	r3, #0
    2d66:	d000      	beq.n	2d6a <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
    2d68:	2401      	movs	r4, #1
}
    2d6a:	0020      	movs	r0, r4
    2d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	20002904 	.word	0x20002904
    2d74:	20002884 	.word	0x20002884
    2d78:	0000292d 	.word	0x0000292d
    2d7c:	00001e31 	.word	0x00001e31
    2d80:	00001de9 	.word	0x00001de9

00002d84 <xTaskResumeAll>:
{
    2d84:	b570      	push	{r4, r5, r6, lr}
	configASSERT(uxSchedulerSuspended);
    2d86:	4b32      	ldr	r3, [pc, #200]	; (2e50 <xTaskResumeAll+0xcc>)
    2d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d101      	bne.n	2d92 <xTaskResumeAll+0xe>
    2d8e:	b672      	cpsid	i
    2d90:	e7fe      	b.n	2d90 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    2d92:	4b30      	ldr	r3, [pc, #192]	; (2e54 <xTaskResumeAll+0xd0>)
    2d94:	4798      	blx	r3
		--uxSchedulerSuspended;
    2d96:	4b2e      	ldr	r3, [pc, #184]	; (2e50 <xTaskResumeAll+0xcc>)
    2d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    2d9a:	3a01      	subs	r2, #1
    2d9c:	659a      	str	r2, [r3, #88]	; 0x58
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2da0:	2b00      	cmp	r3, #0
    2da2:	d150      	bne.n	2e46 <xTaskResumeAll+0xc2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    2da4:	4b2a      	ldr	r3, [pc, #168]	; (2e50 <xTaskResumeAll+0xcc>)
    2da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2da8:	2b00      	cmp	r3, #0
    2daa:	d104      	bne.n	2db6 <xTaskResumeAll+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
    2dac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    2dae:	4b2a      	ldr	r3, [pc, #168]	; (2e58 <xTaskResumeAll+0xd4>)
    2db0:	4798      	blx	r3
}
    2db2:	0020      	movs	r0, r4
    2db4:	bd70      	pop	{r4, r5, r6, pc}
    2db6:	2400      	movs	r4, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    2db8:	4b28      	ldr	r3, [pc, #160]	; (2e5c <xTaskResumeAll+0xd8>)
    2dba:	695b      	ldr	r3, [r3, #20]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d023      	beq.n	2e08 <xTaskResumeAll+0x84>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    2dc0:	4b26      	ldr	r3, [pc, #152]	; (2e5c <xTaskResumeAll+0xd8>)
    2dc2:	6a1b      	ldr	r3, [r3, #32]
    2dc4:	68dc      	ldr	r4, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    2dc6:	0020      	movs	r0, r4
    2dc8:	3018      	adds	r0, #24
    2dca:	4e25      	ldr	r6, [pc, #148]	; (2e60 <xTaskResumeAll+0xdc>)
    2dcc:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2dce:	1d25      	adds	r5, r4, #4
    2dd0:	0028      	movs	r0, r5
    2dd2:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    2dd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2dd6:	4b1e      	ldr	r3, [pc, #120]	; (2e50 <xTaskResumeAll+0xcc>)
    2dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2dda:	429a      	cmp	r2, r3
    2ddc:	d901      	bls.n	2de2 <xTaskResumeAll+0x5e>
    2dde:	4b1c      	ldr	r3, [pc, #112]	; (2e50 <xTaskResumeAll+0xcc>)
    2de0:	651a      	str	r2, [r3, #80]	; 0x50
    2de2:	0093      	lsls	r3, r2, #2
    2de4:	189b      	adds	r3, r3, r2
    2de6:	009a      	lsls	r2, r3, #2
    2de8:	481c      	ldr	r0, [pc, #112]	; (2e5c <xTaskResumeAll+0xd8>)
    2dea:	3030      	adds	r0, #48	; 0x30
    2dec:	1880      	adds	r0, r0, r2
    2dee:	0029      	movs	r1, r5
    2df0:	4b1c      	ldr	r3, [pc, #112]	; (2e64 <xTaskResumeAll+0xe0>)
    2df2:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2df4:	4b16      	ldr	r3, [pc, #88]	; (2e50 <xTaskResumeAll+0xcc>)
    2df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2dfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2dfc:	429a      	cmp	r2, r3
    2dfe:	d3db      	bcc.n	2db8 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
    2e00:	2201      	movs	r2, #1
    2e02:	4b13      	ldr	r3, [pc, #76]	; (2e50 <xTaskResumeAll+0xcc>)
    2e04:	669a      	str	r2, [r3, #104]	; 0x68
    2e06:	e7d7      	b.n	2db8 <xTaskResumeAll+0x34>
				if (pxTCB != NULL) {
    2e08:	2c00      	cmp	r4, #0
    2e0a:	d001      	beq.n	2e10 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
    2e0c:	4b16      	ldr	r3, [pc, #88]	; (2e68 <xTaskResumeAll+0xe4>)
    2e0e:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2e10:	4b0f      	ldr	r3, [pc, #60]	; (2e50 <xTaskResumeAll+0xcc>)
    2e12:	6e5c      	ldr	r4, [r3, #100]	; 0x64
					if (uxPendedCounts > (UBaseType_t)0U) {
    2e14:	2c00      	cmp	r4, #0
    2e16:	d10a      	bne.n	2e2e <xTaskResumeAll+0xaa>
				if (xYieldPending != pdFALSE) {
    2e18:	4b0d      	ldr	r3, [pc, #52]	; (2e50 <xTaskResumeAll+0xcc>)
    2e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d014      	beq.n	2e4a <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
    2e20:	4b12      	ldr	r3, [pc, #72]	; (2e6c <xTaskResumeAll+0xe8>)
    2e22:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    2e24:	2401      	movs	r4, #1
    2e26:	e7c2      	b.n	2dae <xTaskResumeAll+0x2a>
							--uxPendedCounts;
    2e28:	3c01      	subs	r4, #1
						} while (uxPendedCounts > (UBaseType_t)0U);
    2e2a:	2c00      	cmp	r4, #0
    2e2c:	d007      	beq.n	2e3e <xTaskResumeAll+0xba>
							if (xTaskIncrementTick() != pdFALSE) {
    2e2e:	4b10      	ldr	r3, [pc, #64]	; (2e70 <xTaskResumeAll+0xec>)
    2e30:	4798      	blx	r3
    2e32:	2800      	cmp	r0, #0
    2e34:	d0f8      	beq.n	2e28 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
    2e36:	2201      	movs	r2, #1
    2e38:	4b05      	ldr	r3, [pc, #20]	; (2e50 <xTaskResumeAll+0xcc>)
    2e3a:	669a      	str	r2, [r3, #104]	; 0x68
    2e3c:	e7f4      	b.n	2e28 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
    2e3e:	2200      	movs	r2, #0
    2e40:	4b03      	ldr	r3, [pc, #12]	; (2e50 <xTaskResumeAll+0xcc>)
    2e42:	665a      	str	r2, [r3, #100]	; 0x64
    2e44:	e7e8      	b.n	2e18 <xTaskResumeAll+0x94>
	BaseType_t xAlreadyYielded = pdFALSE;
    2e46:	2400      	movs	r4, #0
    2e48:	e7b1      	b.n	2dae <xTaskResumeAll+0x2a>
    2e4a:	2400      	movs	r4, #0
    2e4c:	e7af      	b.n	2dae <xTaskResumeAll+0x2a>
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	20002904 	.word	0x20002904
    2e54:	00001f65 	.word	0x00001f65
    2e58:	00001f7d 	.word	0x00001f7d
    2e5c:	20002884 	.word	0x20002884
    2e60:	00001e31 	.word	0x00001e31
    2e64:	00001de9 	.word	0x00001de9
    2e68:	0000292d 	.word	0x0000292d
    2e6c:	00001f4d 	.word	0x00001f4d
    2e70:	00002c7d 	.word	0x00002c7d

00002e74 <vTaskSwitchContext>:
{
    2e74:	b510      	push	{r4, lr}
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    2e76:	4b1d      	ldr	r3, [pc, #116]	; (2eec <vTaskSwitchContext+0x78>)
    2e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d10f      	bne.n	2e9e <vTaskSwitchContext+0x2a>
		xYieldPending = pdFALSE;
    2e7e:	4b1b      	ldr	r3, [pc, #108]	; (2eec <vTaskSwitchContext+0x78>)
    2e80:	2200      	movs	r2, #0
    2e82:	669a      	str	r2, [r3, #104]	; 0x68
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2e86:	009a      	lsls	r2, r3, #2
    2e88:	18d2      	adds	r2, r2, r3
    2e8a:	0091      	lsls	r1, r2, #2
    2e8c:	4a18      	ldr	r2, [pc, #96]	; (2ef0 <vTaskSwitchContext+0x7c>)
    2e8e:	1852      	adds	r2, r2, r1
    2e90:	6b12      	ldr	r2, [r2, #48]	; 0x30
    2e92:	2a00      	cmp	r2, #0
    2e94:	d109      	bne.n	2eaa <vTaskSwitchContext+0x36>
    2e96:	2b00      	cmp	r3, #0
    2e98:	d005      	beq.n	2ea6 <vTaskSwitchContext+0x32>
    2e9a:	3b01      	subs	r3, #1
    2e9c:	e7f3      	b.n	2e86 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
    2e9e:	2201      	movs	r2, #1
    2ea0:	4b12      	ldr	r3, [pc, #72]	; (2eec <vTaskSwitchContext+0x78>)
    2ea2:	669a      	str	r2, [r3, #104]	; 0x68
}
    2ea4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2ea6:	b672      	cpsid	i
    2ea8:	e7fe      	b.n	2ea8 <vTaskSwitchContext+0x34>
    2eaa:	4a11      	ldr	r2, [pc, #68]	; (2ef0 <vTaskSwitchContext+0x7c>)
    2eac:	0099      	lsls	r1, r3, #2
    2eae:	18cc      	adds	r4, r1, r3
    2eb0:	00a0      	lsls	r0, r4, #2
    2eb2:	1810      	adds	r0, r2, r0
    2eb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    2eb6:	6864      	ldr	r4, [r4, #4]
    2eb8:	6344      	str	r4, [r0, #52]	; 0x34
    2eba:	3230      	adds	r2, #48	; 0x30
    2ebc:	18c9      	adds	r1, r1, r3
    2ebe:	0088      	lsls	r0, r1, #2
    2ec0:	3008      	adds	r0, #8
    2ec2:	1812      	adds	r2, r2, r0
    2ec4:	4294      	cmp	r4, r2
    2ec6:	d00a      	beq.n	2ede <vTaskSwitchContext+0x6a>
    2ec8:	009a      	lsls	r2, r3, #2
    2eca:	18d2      	adds	r2, r2, r3
    2ecc:	0091      	lsls	r1, r2, #2
    2ece:	4a08      	ldr	r2, [pc, #32]	; (2ef0 <vTaskSwitchContext+0x7c>)
    2ed0:	1852      	adds	r2, r2, r1
    2ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
    2ed4:	68d1      	ldr	r1, [r2, #12]
    2ed6:	4a05      	ldr	r2, [pc, #20]	; (2eec <vTaskSwitchContext+0x78>)
    2ed8:	6451      	str	r1, [r2, #68]	; 0x44
    2eda:	6513      	str	r3, [r2, #80]	; 0x50
}
    2edc:	e7e2      	b.n	2ea4 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2ede:	6860      	ldr	r0, [r4, #4]
    2ee0:	0089      	lsls	r1, r1, #2
    2ee2:	4a03      	ldr	r2, [pc, #12]	; (2ef0 <vTaskSwitchContext+0x7c>)
    2ee4:	1852      	adds	r2, r2, r1
    2ee6:	6350      	str	r0, [r2, #52]	; 0x34
    2ee8:	e7ee      	b.n	2ec8 <vTaskSwitchContext+0x54>
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	20002904 	.word	0x20002904
    2ef0:	20002884 	.word	0x20002884

00002ef4 <vTaskPlaceOnEventList>:
{
    2ef4:	b510      	push	{r4, lr}
    2ef6:	000c      	movs	r4, r1
	configASSERT(pxEventList);
    2ef8:	2800      	cmp	r0, #0
    2efa:	d101      	bne.n	2f00 <vTaskPlaceOnEventList+0xc>
    2efc:	b672      	cpsid	i
    2efe:	e7fe      	b.n	2efe <vTaskPlaceOnEventList+0xa>
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    2f00:	4b04      	ldr	r3, [pc, #16]	; (2f14 <vTaskPlaceOnEventList+0x20>)
    2f02:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2f04:	3118      	adds	r1, #24
    2f06:	4b04      	ldr	r3, [pc, #16]	; (2f18 <vTaskPlaceOnEventList+0x24>)
    2f08:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    2f0a:	2101      	movs	r1, #1
    2f0c:	0020      	movs	r0, r4
    2f0e:	4b03      	ldr	r3, [pc, #12]	; (2f1c <vTaskPlaceOnEventList+0x28>)
    2f10:	4798      	blx	r3
}
    2f12:	bd10      	pop	{r4, pc}
    2f14:	20002904 	.word	0x20002904
    2f18:	00001e01 	.word	0x00001e01
    2f1c:	00002b19 	.word	0x00002b19

00002f20 <vTaskPlaceOnEventListRestricted>:
{
    2f20:	b570      	push	{r4, r5, r6, lr}
    2f22:	000c      	movs	r4, r1
    2f24:	0015      	movs	r5, r2
	configASSERT(pxEventList);
    2f26:	2800      	cmp	r0, #0
    2f28:	d00d      	beq.n	2f46 <vTaskPlaceOnEventListRestricted+0x26>
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    2f2a:	4b08      	ldr	r3, [pc, #32]	; (2f4c <vTaskPlaceOnEventListRestricted+0x2c>)
    2f2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    2f2e:	3118      	adds	r1, #24
    2f30:	4b07      	ldr	r3, [pc, #28]	; (2f50 <vTaskPlaceOnEventListRestricted+0x30>)
    2f32:	4798      	blx	r3
	if (xWaitIndefinitely != pdFALSE) {
    2f34:	2d00      	cmp	r5, #0
    2f36:	d001      	beq.n	2f3c <vTaskPlaceOnEventListRestricted+0x1c>
		xTicksToWait = portMAX_DELAY;
    2f38:	2401      	movs	r4, #1
    2f3a:	4264      	negs	r4, r4
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    2f3c:	0029      	movs	r1, r5
    2f3e:	0020      	movs	r0, r4
    2f40:	4b04      	ldr	r3, [pc, #16]	; (2f54 <vTaskPlaceOnEventListRestricted+0x34>)
    2f42:	4798      	blx	r3
}
    2f44:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxEventList);
    2f46:	b672      	cpsid	i
    2f48:	e7fe      	b.n	2f48 <vTaskPlaceOnEventListRestricted+0x28>
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	20002904 	.word	0x20002904
    2f50:	00001de9 	.word	0x00001de9
    2f54:	00002b19 	.word	0x00002b19

00002f58 <xTaskRemoveFromEventList>:
{
    2f58:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    2f5a:	68c3      	ldr	r3, [r0, #12]
    2f5c:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    2f5e:	2c00      	cmp	r4, #0
    2f60:	d027      	beq.n	2fb2 <xTaskRemoveFromEventList+0x5a>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    2f62:	0025      	movs	r5, r4
    2f64:	3518      	adds	r5, #24
    2f66:	0028      	movs	r0, r5
    2f68:	4b17      	ldr	r3, [pc, #92]	; (2fc8 <xTaskRemoveFromEventList+0x70>)
    2f6a:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2f6c:	4b17      	ldr	r3, [pc, #92]	; (2fcc <xTaskRemoveFromEventList+0x74>)
    2f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2f70:	2b00      	cmp	r3, #0
    2f72:	d120      	bne.n	2fb6 <xTaskRemoveFromEventList+0x5e>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    2f74:	1d25      	adds	r5, r4, #4
    2f76:	0028      	movs	r0, r5
    2f78:	4b13      	ldr	r3, [pc, #76]	; (2fc8 <xTaskRemoveFromEventList+0x70>)
    2f7a:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    2f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2f7e:	4b13      	ldr	r3, [pc, #76]	; (2fcc <xTaskRemoveFromEventList+0x74>)
    2f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2f82:	429a      	cmp	r2, r3
    2f84:	d901      	bls.n	2f8a <xTaskRemoveFromEventList+0x32>
    2f86:	4b11      	ldr	r3, [pc, #68]	; (2fcc <xTaskRemoveFromEventList+0x74>)
    2f88:	651a      	str	r2, [r3, #80]	; 0x50
    2f8a:	0093      	lsls	r3, r2, #2
    2f8c:	189b      	adds	r3, r3, r2
    2f8e:	009a      	lsls	r2, r3, #2
    2f90:	480f      	ldr	r0, [pc, #60]	; (2fd0 <xTaskRemoveFromEventList+0x78>)
    2f92:	3030      	adds	r0, #48	; 0x30
    2f94:	1880      	adds	r0, r0, r2
    2f96:	0029      	movs	r1, r5
    2f98:	4b0e      	ldr	r3, [pc, #56]	; (2fd4 <xTaskRemoveFromEventList+0x7c>)
    2f9a:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    2f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2f9e:	4b0b      	ldr	r3, [pc, #44]	; (2fcc <xTaskRemoveFromEventList+0x74>)
    2fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2fa4:	429a      	cmp	r2, r3
    2fa6:	d90c      	bls.n	2fc2 <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
    2fa8:	2201      	movs	r2, #1
    2faa:	4b08      	ldr	r3, [pc, #32]	; (2fcc <xTaskRemoveFromEventList+0x74>)
    2fac:	669a      	str	r2, [r3, #104]	; 0x68
		xReturn = pdTRUE;
    2fae:	2001      	movs	r0, #1
}
    2fb0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pxUnblockedTCB);
    2fb2:	b672      	cpsid	i
    2fb4:	e7fe      	b.n	2fb4 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    2fb6:	0029      	movs	r1, r5
    2fb8:	4805      	ldr	r0, [pc, #20]	; (2fd0 <xTaskRemoveFromEventList+0x78>)
    2fba:	3014      	adds	r0, #20
    2fbc:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <xTaskRemoveFromEventList+0x7c>)
    2fbe:	4798      	blx	r3
    2fc0:	e7ec      	b.n	2f9c <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
    2fc2:	2000      	movs	r0, #0
	return xReturn;
    2fc4:	e7f4      	b.n	2fb0 <xTaskRemoveFromEventList+0x58>
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00001e31 	.word	0x00001e31
    2fcc:	20002904 	.word	0x20002904
    2fd0:	20002884 	.word	0x20002884
    2fd4:	00001de9 	.word	0x00001de9

00002fd8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    2fd8:	4b02      	ldr	r3, [pc, #8]	; (2fe4 <vTaskInternalSetTimeOutState+0xc>)
    2fda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2fdc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2fe0:	6043      	str	r3, [r0, #4]
}
    2fe2:	4770      	bx	lr
    2fe4:	20002904 	.word	0x20002904

00002fe8 <xTaskCheckForTimeOut>:
{
    2fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fea:	0005      	movs	r5, r0
    2fec:	000c      	movs	r4, r1
	configASSERT(pxTimeOut);
    2fee:	2800      	cmp	r0, #0
    2ff0:	d01a      	beq.n	3028 <xTaskCheckForTimeOut+0x40>
	configASSERT(pxTicksToWait);
    2ff2:	2900      	cmp	r1, #0
    2ff4:	d01a      	beq.n	302c <xTaskCheckForTimeOut+0x44>
	taskENTER_CRITICAL();
    2ff6:	4b14      	ldr	r3, [pc, #80]	; (3048 <xTaskCheckForTimeOut+0x60>)
    2ff8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    2ffa:	4b14      	ldr	r3, [pc, #80]	; (304c <xTaskCheckForTimeOut+0x64>)
    2ffc:	6d58      	ldr	r0, [r3, #84]	; 0x54
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2ffe:	6869      	ldr	r1, [r5, #4]
    3000:	1a42      	subs	r2, r0, r1
		    if (*pxTicksToWait == portMAX_DELAY) {
    3002:	6823      	ldr	r3, [r4, #0]
    3004:	1c5e      	adds	r6, r3, #1
    3006:	d01a      	beq.n	303e <xTaskCheckForTimeOut+0x56>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    3008:	4e10      	ldr	r6, [pc, #64]	; (304c <xTaskCheckForTimeOut+0x64>)
    300a:	6e36      	ldr	r6, [r6, #96]	; 0x60
    300c:	682f      	ldr	r7, [r5, #0]
    300e:	42b7      	cmp	r7, r6
    3010:	d001      	beq.n	3016 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    3012:	4288      	cmp	r0, r1
    3014:	d215      	bcs.n	3042 <xTaskCheckForTimeOut+0x5a>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    3016:	429a      	cmp	r2, r3
    3018:	d30a      	bcc.n	3030 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait = 0;
    301a:	2300      	movs	r3, #0
    301c:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    301e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    3020:	4b0b      	ldr	r3, [pc, #44]	; (3050 <xTaskCheckForTimeOut+0x68>)
    3022:	4798      	blx	r3
}
    3024:	0020      	movs	r0, r4
    3026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT(pxTimeOut);
    3028:	b672      	cpsid	i
    302a:	e7fe      	b.n	302a <xTaskCheckForTimeOut+0x42>
	configASSERT(pxTicksToWait);
    302c:	b672      	cpsid	i
    302e:	e7fe      	b.n	302e <xTaskCheckForTimeOut+0x46>
			*pxTicksToWait -= xElapsedTime;
    3030:	1a9b      	subs	r3, r3, r2
    3032:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    3034:	0028      	movs	r0, r5
    3036:	4b07      	ldr	r3, [pc, #28]	; (3054 <xTaskCheckForTimeOut+0x6c>)
    3038:	4798      	blx	r3
			xReturn = pdFALSE;
    303a:	2400      	movs	r4, #0
    303c:	e7f0      	b.n	3020 <xTaskCheckForTimeOut+0x38>
			xReturn = pdFALSE;
    303e:	2400      	movs	r4, #0
    3040:	e7ee      	b.n	3020 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
    3042:	2401      	movs	r4, #1
    3044:	e7ec      	b.n	3020 <xTaskCheckForTimeOut+0x38>
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	00001f65 	.word	0x00001f65
    304c:	20002904 	.word	0x20002904
    3050:	00001f7d 	.word	0x00001f7d
    3054:	00002fd9 	.word	0x00002fd9

00003058 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    3058:	2201      	movs	r2, #1
    305a:	4b01      	ldr	r3, [pc, #4]	; (3060 <vTaskMissedYield+0x8>)
    305c:	669a      	str	r2, [r3, #104]	; 0x68
}
    305e:	4770      	bx	lr
    3060:	20002904 	.word	0x20002904

00003064 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    3064:	4b06      	ldr	r3, [pc, #24]	; (3080 <xTaskGetSchedulerState+0x1c>)
    3066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3068:	2b00      	cmp	r3, #0
    306a:	d005      	beq.n	3078 <xTaskGetSchedulerState+0x14>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    306c:	4b04      	ldr	r3, [pc, #16]	; (3080 <xTaskGetSchedulerState+0x1c>)
    306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    3070:	2b00      	cmp	r3, #0
    3072:	d103      	bne.n	307c <xTaskGetSchedulerState+0x18>
			xReturn = taskSCHEDULER_RUNNING;
    3074:	2002      	movs	r0, #2
}
    3076:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    3078:	2001      	movs	r0, #1
    307a:	e7fc      	b.n	3076 <xTaskGetSchedulerState+0x12>
			xReturn = taskSCHEDULER_SUSPENDED;
    307c:	2000      	movs	r0, #0
	return xReturn;
    307e:	e7fa      	b.n	3076 <xTaskGetSchedulerState+0x12>
    3080:	20002904 	.word	0x20002904

00003084 <xTaskPriorityDisinherit>:
{
    3084:	b570      	push	{r4, r5, r6, lr}
    3086:	1e04      	subs	r4, r0, #0
	if (pxMutexHolder != NULL) {
    3088:	d02c      	beq.n	30e4 <xTaskPriorityDisinherit+0x60>
		configASSERT(pxTCB == pxCurrentTCB);
    308a:	4b19      	ldr	r3, [pc, #100]	; (30f0 <xTaskPriorityDisinherit+0x6c>)
    308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    308e:	4298      	cmp	r0, r3
    3090:	d001      	beq.n	3096 <xTaskPriorityDisinherit+0x12>
    3092:	b672      	cpsid	i
    3094:	e7fe      	b.n	3094 <xTaskPriorityDisinherit+0x10>
		configASSERT(pxTCB->uxMutexesHeld);
    3096:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3098:	2b00      	cmp	r3, #0
    309a:	d101      	bne.n	30a0 <xTaskPriorityDisinherit+0x1c>
    309c:	b672      	cpsid	i
    309e:	e7fe      	b.n	309e <xTaskPriorityDisinherit+0x1a>
		(pxTCB->uxMutexesHeld)--;
    30a0:	3b01      	subs	r3, #1
    30a2:	6483      	str	r3, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    30a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    30a6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    30a8:	428a      	cmp	r2, r1
    30aa:	d01d      	beq.n	30e8 <xTaskPriorityDisinherit+0x64>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    30ac:	2b00      	cmp	r3, #0
    30ae:	d11d      	bne.n	30ec <xTaskPriorityDisinherit+0x68>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    30b0:	1d05      	adds	r5, r0, #4
    30b2:	0028      	movs	r0, r5
    30b4:	4b0f      	ldr	r3, [pc, #60]	; (30f4 <xTaskPriorityDisinherit+0x70>)
    30b6:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    30b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    30ba:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    30bc:	2205      	movs	r2, #5
    30be:	1ad2      	subs	r2, r2, r3
    30c0:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    30c2:	4a0b      	ldr	r2, [pc, #44]	; (30f0 <xTaskPriorityDisinherit+0x6c>)
    30c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
    30c6:	4293      	cmp	r3, r2
    30c8:	d901      	bls.n	30ce <xTaskPriorityDisinherit+0x4a>
    30ca:	4a09      	ldr	r2, [pc, #36]	; (30f0 <xTaskPriorityDisinherit+0x6c>)
    30cc:	6513      	str	r3, [r2, #80]	; 0x50
    30ce:	009a      	lsls	r2, r3, #2
    30d0:	18d3      	adds	r3, r2, r3
    30d2:	009a      	lsls	r2, r3, #2
    30d4:	4808      	ldr	r0, [pc, #32]	; (30f8 <xTaskPriorityDisinherit+0x74>)
    30d6:	3030      	adds	r0, #48	; 0x30
    30d8:	1880      	adds	r0, r0, r2
    30da:	0029      	movs	r1, r5
    30dc:	4b07      	ldr	r3, [pc, #28]	; (30fc <xTaskPriorityDisinherit+0x78>)
    30de:	4798      	blx	r3
				xReturn = pdTRUE;
    30e0:	2001      	movs	r0, #1
}
    30e2:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t   xReturn = pdFALSE;
    30e4:	2000      	movs	r0, #0
    30e6:	e7fc      	b.n	30e2 <xTaskPriorityDisinherit+0x5e>
    30e8:	2000      	movs	r0, #0
    30ea:	e7fa      	b.n	30e2 <xTaskPriorityDisinherit+0x5e>
    30ec:	2000      	movs	r0, #0
	return xReturn;
    30ee:	e7f8      	b.n	30e2 <xTaskPriorityDisinherit+0x5e>
    30f0:	20002904 	.word	0x20002904
    30f4:	00001e31 	.word	0x00001e31
    30f8:	20002884 	.word	0x20002884
    30fc:	00001de9 	.word	0x00001de9

00003100 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    3100:	4b06      	ldr	r3, [pc, #24]	; (311c <prvGetNextExpireTime+0x1c>)
    3102:	681a      	ldr	r2, [r3, #0]
    3104:	6813      	ldr	r3, [r2, #0]
    3106:	4259      	negs	r1, r3
    3108:	414b      	adcs	r3, r1
    310a:	6003      	str	r3, [r0, #0]
	if (*pxListWasEmpty == pdFALSE) {
    310c:	2b00      	cmp	r3, #0
    310e:	d102      	bne.n	3116 <prvGetNextExpireTime+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    3110:	68d3      	ldr	r3, [r2, #12]
    3112:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
	}

	return xNextExpireTime;
}
    3114:	4770      	bx	lr
		xNextExpireTime = (TickType_t)0U;
    3116:	2000      	movs	r0, #0
	return xNextExpireTime;
    3118:	e7fc      	b.n	3114 <prvGetNextExpireTime+0x14>
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	20002970 	.word	0x20002970

00003120 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    3120:	b510      	push	{r4, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    3122:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    3124:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    3126:	4291      	cmp	r1, r2
    3128:	d80c      	bhi.n	3144 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    312a:	1ad2      	subs	r2, r2, r3
    312c:	6983      	ldr	r3, [r0, #24]
    312e:	429a      	cmp	r2, r3
    3130:	d301      	bcc.n	3136 <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3132:	2001      	movs	r0, #1
    3134:	e010      	b.n	3158 <prvInsertTimerInActiveList+0x38>
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    3136:	1d01      	adds	r1, r0, #4
    3138:	4b09      	ldr	r3, [pc, #36]	; (3160 <prvInsertTimerInActiveList+0x40>)
    313a:	6858      	ldr	r0, [r3, #4]
    313c:	4b09      	ldr	r3, [pc, #36]	; (3164 <prvInsertTimerInActiveList+0x44>)
    313e:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    3140:	2000      	movs	r0, #0
    3142:	e009      	b.n	3158 <prvInsertTimerInActiveList+0x38>
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    3144:	429a      	cmp	r2, r3
    3146:	d201      	bcs.n	314c <prvInsertTimerInActiveList+0x2c>
    3148:	4299      	cmp	r1, r3
    314a:	d206      	bcs.n	315a <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    314c:	1d01      	adds	r1, r0, #4
    314e:	4b04      	ldr	r3, [pc, #16]	; (3160 <prvInsertTimerInActiveList+0x40>)
    3150:	6818      	ldr	r0, [r3, #0]
    3152:	4b04      	ldr	r3, [pc, #16]	; (3164 <prvInsertTimerInActiveList+0x44>)
    3154:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    3156:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
    3158:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
    315a:	2001      	movs	r0, #1
	return xProcessTimerNow;
    315c:	e7fc      	b.n	3158 <prvInsertTimerInActiveList+0x38>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	20002970 	.word	0x20002970
    3164:	00001e01 	.word	0x00001e01

00003168 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    3168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    316a:	4b0e      	ldr	r3, [pc, #56]	; (31a4 <prvCheckForValidListAndQueue+0x3c>)
    316c:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    316e:	4b0e      	ldr	r3, [pc, #56]	; (31a8 <prvCheckForValidListAndQueue+0x40>)
    3170:	689b      	ldr	r3, [r3, #8]
    3172:	2b00      	cmp	r3, #0
    3174:	d002      	beq.n	317c <prvCheckForValidListAndQueue+0x14>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3176:	4b0d      	ldr	r3, [pc, #52]	; (31ac <prvCheckForValidListAndQueue+0x44>)
    3178:	4798      	blx	r3
}
    317a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    317c:	4c0a      	ldr	r4, [pc, #40]	; (31a8 <prvCheckForValidListAndQueue+0x40>)
    317e:	0026      	movs	r6, r4
    3180:	360c      	adds	r6, #12
    3182:	0030      	movs	r0, r6
    3184:	4f0a      	ldr	r7, [pc, #40]	; (31b0 <prvCheckForValidListAndQueue+0x48>)
    3186:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    3188:	0025      	movs	r5, r4
    318a:	3520      	adds	r5, #32
    318c:	0028      	movs	r0, r5
    318e:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    3190:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3192:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    3194:	2200      	movs	r2, #0
    3196:	210c      	movs	r1, #12
    3198:	2002      	movs	r0, #2
    319a:	4b06      	ldr	r3, [pc, #24]	; (31b4 <prvCheckForValidListAndQueue+0x4c>)
    319c:	4798      	blx	r3
    319e:	60a0      	str	r0, [r4, #8]
    31a0:	e7e9      	b.n	3176 <prvCheckForValidListAndQueue+0xe>
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	00001f65 	.word	0x00001f65
    31a8:	20002970 	.word	0x20002970
    31ac:	00001f7d 	.word	0x00001f7d
    31b0:	00001dcd 	.word	0x00001dcd
    31b4:	000024ad 	.word	0x000024ad

000031b8 <xTimerCreateTimerTask>:
{
    31b8:	b510      	push	{r4, lr}
    31ba:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    31bc:	4b0c      	ldr	r3, [pc, #48]	; (31f0 <xTimerCreateTimerTask+0x38>)
    31be:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    31c0:	4b0c      	ldr	r3, [pc, #48]	; (31f4 <xTimerCreateTimerTask+0x3c>)
    31c2:	689b      	ldr	r3, [r3, #8]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d00e      	beq.n	31e6 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(prvTimerTask,
    31c8:	4b0a      	ldr	r3, [pc, #40]	; (31f4 <xTimerCreateTimerTask+0x3c>)
    31ca:	3334      	adds	r3, #52	; 0x34
    31cc:	9301      	str	r3, [sp, #4]
    31ce:	2302      	movs	r3, #2
    31d0:	9300      	str	r3, [sp, #0]
    31d2:	2300      	movs	r3, #0
    31d4:	2240      	movs	r2, #64	; 0x40
    31d6:	4908      	ldr	r1, [pc, #32]	; (31f8 <xTimerCreateTimerTask+0x40>)
    31d8:	4808      	ldr	r0, [pc, #32]	; (31fc <xTimerCreateTimerTask+0x44>)
    31da:	4c09      	ldr	r4, [pc, #36]	; (3200 <xTimerCreateTimerTask+0x48>)
    31dc:	47a0      	blx	r4
	configASSERT(xReturn);
    31de:	2800      	cmp	r0, #0
    31e0:	d103      	bne.n	31ea <xTimerCreateTimerTask+0x32>
    31e2:	b672      	cpsid	i
    31e4:	e7fe      	b.n	31e4 <xTimerCreateTimerTask+0x2c>
	BaseType_t xReturn = pdFAIL;
    31e6:	2000      	movs	r0, #0
    31e8:	e7f9      	b.n	31de <xTimerCreateTimerTask+0x26>
}
    31ea:	b002      	add	sp, #8
    31ec:	bd10      	pop	{r4, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00003169 	.word	0x00003169
    31f4:	20002970 	.word	0x20002970
    31f8:	00003844 	.word	0x00003844
    31fc:	000034bd 	.word	0x000034bd
    3200:	00002b89 	.word	0x00002b89

00003204 <xTimerGenericCommand>:
{
    3204:	b530      	push	{r4, r5, lr}
    3206:	b085      	sub	sp, #20
    3208:	0004      	movs	r4, r0
    320a:	001d      	movs	r5, r3
	configASSERT(xTimer);
    320c:	2800      	cmp	r0, #0
    320e:	d014      	beq.n	323a <xTimerGenericCommand+0x36>
	if (xTimerQueue != NULL) {
    3210:	4b13      	ldr	r3, [pc, #76]	; (3260 <xTimerGenericCommand+0x5c>)
    3212:	6898      	ldr	r0, [r3, #8]
    3214:	2800      	cmp	r0, #0
    3216:	d021      	beq.n	325c <xTimerGenericCommand+0x58>
		xMessage.xMessageID                       = xCommandID;
    3218:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    321a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    321c:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    321e:	2905      	cmp	r1, #5
    3220:	dc15      	bgt.n	324e <xTimerGenericCommand+0x4a>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    3222:	4b10      	ldr	r3, [pc, #64]	; (3264 <xTimerGenericCommand+0x60>)
    3224:	4798      	blx	r3
    3226:	2802      	cmp	r0, #2
    3228:	d009      	beq.n	323e <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    322a:	4b0d      	ldr	r3, [pc, #52]	; (3260 <xTimerGenericCommand+0x5c>)
    322c:	6898      	ldr	r0, [r3, #8]
    322e:	2300      	movs	r3, #0
    3230:	2200      	movs	r2, #0
    3232:	a901      	add	r1, sp, #4
    3234:	4c0c      	ldr	r4, [pc, #48]	; (3268 <xTimerGenericCommand+0x64>)
    3236:	47a0      	blx	r4
    3238:	e00e      	b.n	3258 <xTimerGenericCommand+0x54>
	configASSERT(xTimer);
    323a:	b672      	cpsid	i
    323c:	e7fe      	b.n	323c <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    323e:	4b08      	ldr	r3, [pc, #32]	; (3260 <xTimerGenericCommand+0x5c>)
    3240:	6898      	ldr	r0, [r3, #8]
    3242:	2300      	movs	r3, #0
    3244:	9a08      	ldr	r2, [sp, #32]
    3246:	a901      	add	r1, sp, #4
    3248:	4c07      	ldr	r4, [pc, #28]	; (3268 <xTimerGenericCommand+0x64>)
    324a:	47a0      	blx	r4
    324c:	e004      	b.n	3258 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    324e:	2300      	movs	r3, #0
    3250:	002a      	movs	r2, r5
    3252:	a901      	add	r1, sp, #4
    3254:	4c05      	ldr	r4, [pc, #20]	; (326c <xTimerGenericCommand+0x68>)
    3256:	47a0      	blx	r4
}
    3258:	b005      	add	sp, #20
    325a:	bd30      	pop	{r4, r5, pc}
	BaseType_t          xReturn = pdFAIL;
    325c:	2000      	movs	r0, #0
	return xReturn;
    325e:	e7fb      	b.n	3258 <xTimerGenericCommand+0x54>
    3260:	20002970 	.word	0x20002970
    3264:	00003065 	.word	0x00003065
    3268:	000024f5 	.word	0x000024f5
    326c:	00002685 	.word	0x00002685

00003270 <prvSwitchTimerLists>:
{
    3270:	b570      	push	{r4, r5, r6, lr}
    3272:	b082      	sub	sp, #8
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    3274:	4b17      	ldr	r3, [pc, #92]	; (32d4 <prvSwitchTimerLists+0x64>)
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	681a      	ldr	r2, [r3, #0]
    327a:	2a00      	cmp	r2, #0
    327c:	d023      	beq.n	32c6 <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    327e:	68db      	ldr	r3, [r3, #12]
    3280:	681e      	ldr	r6, [r3, #0]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    3282:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    3284:	1d25      	adds	r5, r4, #4
    3286:	0028      	movs	r0, r5
    3288:	4b13      	ldr	r3, [pc, #76]	; (32d8 <prvSwitchTimerLists+0x68>)
    328a:	4798      	blx	r3
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    328c:	0020      	movs	r0, r4
    328e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3290:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    3292:	69e3      	ldr	r3, [r4, #28]
    3294:	2b01      	cmp	r3, #1
    3296:	d1ed      	bne.n	3274 <prvSwitchTimerLists+0x4>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    3298:	69a3      	ldr	r3, [r4, #24]
    329a:	18f3      	adds	r3, r6, r3
			if (xReloadTime > xNextExpireTime) {
    329c:	429e      	cmp	r6, r3
    329e:	d207      	bcs.n	32b0 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    32a0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    32a2:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    32a4:	4b0b      	ldr	r3, [pc, #44]	; (32d4 <prvSwitchTimerLists+0x64>)
    32a6:	6818      	ldr	r0, [r3, #0]
    32a8:	0029      	movs	r1, r5
    32aa:	4b0c      	ldr	r3, [pc, #48]	; (32dc <prvSwitchTimerLists+0x6c>)
    32ac:	4798      	blx	r3
    32ae:	e7e1      	b.n	3274 <prvSwitchTimerLists+0x4>
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    32b0:	2300      	movs	r3, #0
    32b2:	9300      	str	r3, [sp, #0]
    32b4:	0032      	movs	r2, r6
    32b6:	2100      	movs	r1, #0
    32b8:	0020      	movs	r0, r4
    32ba:	4c09      	ldr	r4, [pc, #36]	; (32e0 <prvSwitchTimerLists+0x70>)
    32bc:	47a0      	blx	r4
				configASSERT(xResult);
    32be:	2800      	cmp	r0, #0
    32c0:	d1d8      	bne.n	3274 <prvSwitchTimerLists+0x4>
    32c2:	b672      	cpsid	i
    32c4:	e7fe      	b.n	32c4 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList  = pxOverflowTimerList;
    32c6:	4a03      	ldr	r2, [pc, #12]	; (32d4 <prvSwitchTimerLists+0x64>)
    32c8:	6851      	ldr	r1, [r2, #4]
    32ca:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    32cc:	6053      	str	r3, [r2, #4]
}
    32ce:	b002      	add	sp, #8
    32d0:	bd70      	pop	{r4, r5, r6, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	20002970 	.word	0x20002970
    32d8:	00001e31 	.word	0x00001e31
    32dc:	00001e01 	.word	0x00001e01
    32e0:	00003205 	.word	0x00003205

000032e4 <prvSampleTimeNow>:
{
    32e4:	b570      	push	{r4, r5, r6, lr}
    32e6:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
    32e8:	4b08      	ldr	r3, [pc, #32]	; (330c <prvSampleTimeNow+0x28>)
    32ea:	4798      	blx	r3
    32ec:	0004      	movs	r4, r0
	if (xTimeNow < xLastTime) {
    32ee:	4b08      	ldr	r3, [pc, #32]	; (3310 <prvSampleTimeNow+0x2c>)
    32f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32f2:	4298      	cmp	r0, r3
    32f4:	d305      	bcc.n	3302 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
    32f6:	2300      	movs	r3, #0
    32f8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
    32fa:	4b05      	ldr	r3, [pc, #20]	; (3310 <prvSampleTimeNow+0x2c>)
    32fc:	639c      	str	r4, [r3, #56]	; 0x38
}
    32fe:	0020      	movs	r0, r4
    3300:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
    3302:	4b04      	ldr	r3, [pc, #16]	; (3314 <prvSampleTimeNow+0x30>)
    3304:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    3306:	2301      	movs	r3, #1
    3308:	602b      	str	r3, [r5, #0]
    330a:	e7f6      	b.n	32fa <prvSampleTimeNow+0x16>
    330c:	00002c71 	.word	0x00002c71
    3310:	20002970 	.word	0x20002970
    3314:	00003271 	.word	0x00003271

00003318 <prvProcessExpiredTimer>:
{
    3318:	b570      	push	{r4, r5, r6, lr}
    331a:	b082      	sub	sp, #8
    331c:	0005      	movs	r5, r0
    331e:	000e      	movs	r6, r1
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    3320:	4b11      	ldr	r3, [pc, #68]	; (3368 <prvProcessExpiredTimer+0x50>)
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	68db      	ldr	r3, [r3, #12]
    3326:	68dc      	ldr	r4, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    3328:	1d20      	adds	r0, r4, #4
    332a:	4b10      	ldr	r3, [pc, #64]	; (336c <prvProcessExpiredTimer+0x54>)
    332c:	4798      	blx	r3
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    332e:	69e3      	ldr	r3, [r4, #28]
    3330:	2b01      	cmp	r3, #1
    3332:	d004      	beq.n	333e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    3334:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3336:	0020      	movs	r0, r4
    3338:	4798      	blx	r3
}
    333a:	b002      	add	sp, #8
    333c:	bd70      	pop	{r4, r5, r6, pc}
		if (prvInsertTimerInActiveList(
    333e:	69a3      	ldr	r3, [r4, #24]
    3340:	1959      	adds	r1, r3, r5
    3342:	002b      	movs	r3, r5
    3344:	0032      	movs	r2, r6
    3346:	0020      	movs	r0, r4
    3348:	4e09      	ldr	r6, [pc, #36]	; (3370 <prvProcessExpiredTimer+0x58>)
    334a:	47b0      	blx	r6
    334c:	2800      	cmp	r0, #0
    334e:	d0f1      	beq.n	3334 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    3350:	2300      	movs	r3, #0
    3352:	9300      	str	r3, [sp, #0]
    3354:	002a      	movs	r2, r5
    3356:	2100      	movs	r1, #0
    3358:	0020      	movs	r0, r4
    335a:	4d06      	ldr	r5, [pc, #24]	; (3374 <prvProcessExpiredTimer+0x5c>)
    335c:	47a8      	blx	r5
			configASSERT(xResult);
    335e:	2800      	cmp	r0, #0
    3360:	d1e8      	bne.n	3334 <prvProcessExpiredTimer+0x1c>
    3362:	b672      	cpsid	i
    3364:	e7fe      	b.n	3364 <prvProcessExpiredTimer+0x4c>
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	20002970 	.word	0x20002970
    336c:	00001e31 	.word	0x00001e31
    3370:	00003121 	.word	0x00003121
    3374:	00003205 	.word	0x00003205

00003378 <prvProcessTimerOrBlockTask>:
{
    3378:	b570      	push	{r4, r5, r6, lr}
    337a:	b082      	sub	sp, #8
    337c:	0005      	movs	r5, r0
    337e:	000c      	movs	r4, r1
	vTaskSuspendAll();
    3380:	4b16      	ldr	r3, [pc, #88]	; (33dc <prvProcessTimerOrBlockTask+0x64>)
    3382:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    3384:	a801      	add	r0, sp, #4
    3386:	4b16      	ldr	r3, [pc, #88]	; (33e0 <prvProcessTimerOrBlockTask+0x68>)
    3388:	4798      	blx	r3
    338a:	0006      	movs	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    338c:	9b01      	ldr	r3, [sp, #4]
    338e:	2b00      	cmp	r3, #0
    3390:	d121      	bne.n	33d6 <prvProcessTimerOrBlockTask+0x5e>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    3392:	2c00      	cmp	r4, #0
    3394:	d101      	bne.n	339a <prvProcessTimerOrBlockTask+0x22>
    3396:	42a8      	cmp	r0, r5
    3398:	d213      	bcs.n	33c2 <prvProcessTimerOrBlockTask+0x4a>
				if (xListWasEmpty != pdFALSE) {
    339a:	2c00      	cmp	r4, #0
    339c:	d005      	beq.n	33aa <prvProcessTimerOrBlockTask+0x32>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    339e:	4b11      	ldr	r3, [pc, #68]	; (33e4 <prvProcessTimerOrBlockTask+0x6c>)
    33a0:	685b      	ldr	r3, [r3, #4]
    33a2:	681c      	ldr	r4, [r3, #0]
    33a4:	4263      	negs	r3, r4
    33a6:	415c      	adcs	r4, r3
    33a8:	b2e4      	uxtb	r4, r4
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    33aa:	1ba9      	subs	r1, r5, r6
    33ac:	4b0d      	ldr	r3, [pc, #52]	; (33e4 <prvProcessTimerOrBlockTask+0x6c>)
    33ae:	6898      	ldr	r0, [r3, #8]
    33b0:	0022      	movs	r2, r4
    33b2:	4b0d      	ldr	r3, [pc, #52]	; (33e8 <prvProcessTimerOrBlockTask+0x70>)
    33b4:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    33b6:	4b0d      	ldr	r3, [pc, #52]	; (33ec <prvProcessTimerOrBlockTask+0x74>)
    33b8:	4798      	blx	r3
    33ba:	2800      	cmp	r0, #0
    33bc:	d008      	beq.n	33d0 <prvProcessTimerOrBlockTask+0x58>
}
    33be:	b002      	add	sp, #8
    33c0:	bd70      	pop	{r4, r5, r6, pc}
				(void)xTaskResumeAll();
    33c2:	4b0a      	ldr	r3, [pc, #40]	; (33ec <prvProcessTimerOrBlockTask+0x74>)
    33c4:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    33c6:	0031      	movs	r1, r6
    33c8:	0028      	movs	r0, r5
    33ca:	4b09      	ldr	r3, [pc, #36]	; (33f0 <prvProcessTimerOrBlockTask+0x78>)
    33cc:	4798      	blx	r3
    33ce:	e7f6      	b.n	33be <prvProcessTimerOrBlockTask+0x46>
					portYIELD_WITHIN_API();
    33d0:	4b08      	ldr	r3, [pc, #32]	; (33f4 <prvProcessTimerOrBlockTask+0x7c>)
    33d2:	4798      	blx	r3
    33d4:	e7f3      	b.n	33be <prvProcessTimerOrBlockTask+0x46>
			(void)xTaskResumeAll();
    33d6:	4b05      	ldr	r3, [pc, #20]	; (33ec <prvProcessTimerOrBlockTask+0x74>)
    33d8:	4798      	blx	r3
}
    33da:	e7f0      	b.n	33be <prvProcessTimerOrBlockTask+0x46>
    33dc:	00002c61 	.word	0x00002c61
    33e0:	000032e5 	.word	0x000032e5
    33e4:	20002970 	.word	0x20002970
    33e8:	000028cd 	.word	0x000028cd
    33ec:	00002d85 	.word	0x00002d85
    33f0:	00003319 	.word	0x00003319
    33f4:	00001f4d 	.word	0x00001f4d

000033f8 <prvProcessReceivedCommands>:
{
    33f8:	b530      	push	{r4, r5, lr}
    33fa:	b087      	sub	sp, #28
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    33fc:	4b27      	ldr	r3, [pc, #156]	; (349c <prvProcessReceivedCommands+0xa4>)
    33fe:	6898      	ldr	r0, [r3, #8]
    3400:	2200      	movs	r2, #0
    3402:	a903      	add	r1, sp, #12
    3404:	4b26      	ldr	r3, [pc, #152]	; (34a0 <prvProcessReceivedCommands+0xa8>)
    3406:	4798      	blx	r3
    3408:	2800      	cmp	r0, #0
    340a:	d045      	beq.n	3498 <prvProcessReceivedCommands+0xa0>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    340c:	9b03      	ldr	r3, [sp, #12]
    340e:	2b00      	cmp	r3, #0
    3410:	dbf4      	blt.n	33fc <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3412:	9c05      	ldr	r4, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    3414:	6963      	ldr	r3, [r4, #20]
    3416:	2b00      	cmp	r3, #0
    3418:	d002      	beq.n	3420 <prvProcessReceivedCommands+0x28>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    341a:	1d20      	adds	r0, r4, #4
    341c:	4b21      	ldr	r3, [pc, #132]	; (34a4 <prvProcessReceivedCommands+0xac>)
    341e:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    3420:	a802      	add	r0, sp, #8
    3422:	4b21      	ldr	r3, [pc, #132]	; (34a8 <prvProcessReceivedCommands+0xb0>)
    3424:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    3426:	9b03      	ldr	r3, [sp, #12]
    3428:	2b09      	cmp	r3, #9
    342a:	d8e7      	bhi.n	33fc <prvProcessReceivedCommands+0x4>
    342c:	009b      	lsls	r3, r3, #2
    342e:	4a1f      	ldr	r2, [pc, #124]	; (34ac <prvProcessReceivedCommands+0xb4>)
    3430:	58d3      	ldr	r3, [r2, r3]
    3432:	469f      	mov	pc, r3
				if (prvInsertTimerInActiveList(pxTimer,
    3434:	9b04      	ldr	r3, [sp, #16]
    3436:	69a2      	ldr	r2, [r4, #24]
    3438:	4694      	mov	ip, r2
    343a:	4463      	add	r3, ip
    343c:	0019      	movs	r1, r3
    343e:	9b04      	ldr	r3, [sp, #16]
    3440:	0002      	movs	r2, r0
    3442:	0020      	movs	r0, r4
    3444:	4d1a      	ldr	r5, [pc, #104]	; (34b0 <prvProcessReceivedCommands+0xb8>)
    3446:	47a8      	blx	r5
    3448:	2800      	cmp	r0, #0
    344a:	d0d7      	beq.n	33fc <prvProcessReceivedCommands+0x4>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    344c:	0020      	movs	r0, r4
    344e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3450:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    3452:	69e3      	ldr	r3, [r4, #28]
    3454:	2b01      	cmp	r3, #1
    3456:	d1d1      	bne.n	33fc <prvProcessReceivedCommands+0x4>
						xResult = xTimerGenericCommand(pxTimer,
    3458:	9b04      	ldr	r3, [sp, #16]
    345a:	69a1      	ldr	r1, [r4, #24]
    345c:	468c      	mov	ip, r1
    345e:	4463      	add	r3, ip
    3460:	001a      	movs	r2, r3
    3462:	2300      	movs	r3, #0
    3464:	9300      	str	r3, [sp, #0]
    3466:	2100      	movs	r1, #0
    3468:	0020      	movs	r0, r4
    346a:	4c12      	ldr	r4, [pc, #72]	; (34b4 <prvProcessReceivedCommands+0xbc>)
    346c:	47a0      	blx	r4
						configASSERT(xResult);
    346e:	2800      	cmp	r0, #0
    3470:	d1c4      	bne.n	33fc <prvProcessReceivedCommands+0x4>
    3472:	b672      	cpsid	i
    3474:	e7fe      	b.n	3474 <prvProcessReceivedCommands+0x7c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3476:	9904      	ldr	r1, [sp, #16]
    3478:	61a1      	str	r1, [r4, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    347a:	2900      	cmp	r1, #0
    347c:	d006      	beq.n	348c <prvProcessReceivedCommands+0x94>
				(void)prvInsertTimerInActiveList(
    347e:	1841      	adds	r1, r0, r1
    3480:	0003      	movs	r3, r0
    3482:	0002      	movs	r2, r0
    3484:	0020      	movs	r0, r4
    3486:	4c0a      	ldr	r4, [pc, #40]	; (34b0 <prvProcessReceivedCommands+0xb8>)
    3488:	47a0      	blx	r4
				break;
    348a:	e7b7      	b.n	33fc <prvProcessReceivedCommands+0x4>
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    348c:	b672      	cpsid	i
    348e:	e7fe      	b.n	348e <prvProcessReceivedCommands+0x96>
				vPortFree(pxTimer);
    3490:	0020      	movs	r0, r4
    3492:	4b09      	ldr	r3, [pc, #36]	; (34b8 <prvProcessReceivedCommands+0xc0>)
    3494:	4798      	blx	r3
			break;
    3496:	e7b1      	b.n	33fc <prvProcessReceivedCommands+0x4>
}
    3498:	b007      	add	sp, #28
    349a:	bd30      	pop	{r4, r5, pc}
    349c:	20002970 	.word	0x20002970
    34a0:	00002771 	.word	0x00002771
    34a4:	00001e31 	.word	0x00001e31
    34a8:	000032e5 	.word	0x000032e5
    34ac:	0000381c 	.word	0x0000381c
    34b0:	00003121 	.word	0x00003121
    34b4:	00003205 	.word	0x00003205
    34b8:	0000219d 	.word	0x0000219d

000034bc <prvTimerTask>:
{
    34bc:	b500      	push	{lr}
    34be:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    34c0:	a801      	add	r0, sp, #4
    34c2:	4b04      	ldr	r3, [pc, #16]	; (34d4 <prvTimerTask+0x18>)
    34c4:	4798      	blx	r3
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    34c6:	9901      	ldr	r1, [sp, #4]
    34c8:	4b03      	ldr	r3, [pc, #12]	; (34d8 <prvTimerTask+0x1c>)
    34ca:	4798      	blx	r3
		prvProcessReceivedCommands();
    34cc:	4b03      	ldr	r3, [pc, #12]	; (34dc <prvTimerTask+0x20>)
    34ce:	4798      	blx	r3
    34d0:	e7f6      	b.n	34c0 <prvTimerTask+0x4>
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	00003101 	.word	0x00003101
    34d8:	00003379 	.word	0x00003379
    34dc:	000033f9 	.word	0x000033f9

000034e0 <__ffssi2>:
    34e0:	b510      	push	{r4, lr}
    34e2:	2300      	movs	r3, #0
    34e4:	2800      	cmp	r0, #0
    34e6:	d002      	beq.n	34ee <__ffssi2+0xe>
    34e8:	f000 f804 	bl	34f4 <__ctzsi2>
    34ec:	1c43      	adds	r3, r0, #1
    34ee:	0018      	movs	r0, r3
    34f0:	bd10      	pop	{r4, pc}
    34f2:	46c0      	nop			; (mov r8, r8)

000034f4 <__ctzsi2>:
    34f4:	4241      	negs	r1, r0
    34f6:	4008      	ands	r0, r1
    34f8:	211c      	movs	r1, #28
    34fa:	2301      	movs	r3, #1
    34fc:	041b      	lsls	r3, r3, #16
    34fe:	4298      	cmp	r0, r3
    3500:	d301      	bcc.n	3506 <__ctzsi2+0x12>
    3502:	0c00      	lsrs	r0, r0, #16
    3504:	3910      	subs	r1, #16
    3506:	0a1b      	lsrs	r3, r3, #8
    3508:	4298      	cmp	r0, r3
    350a:	d301      	bcc.n	3510 <__ctzsi2+0x1c>
    350c:	0a00      	lsrs	r0, r0, #8
    350e:	3908      	subs	r1, #8
    3510:	091b      	lsrs	r3, r3, #4
    3512:	4298      	cmp	r0, r3
    3514:	d301      	bcc.n	351a <__ctzsi2+0x26>
    3516:	0900      	lsrs	r0, r0, #4
    3518:	3904      	subs	r1, #4
    351a:	a202      	add	r2, pc, #8	; (adr r2, 3524 <__ctzsi2+0x30>)
    351c:	5c10      	ldrb	r0, [r2, r0]
    351e:	1a40      	subs	r0, r0, r1
    3520:	4770      	bx	lr
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	1d1d1c1b 	.word	0x1d1d1c1b
    3528:	1e1e1e1e 	.word	0x1e1e1e1e
    352c:	1f1f1f1f 	.word	0x1f1f1f1f
    3530:	1f1f1f1f 	.word	0x1f1f1f1f

00003534 <__libc_init_array>:
    3534:	b570      	push	{r4, r5, r6, lr}
    3536:	2600      	movs	r6, #0
    3538:	4d0c      	ldr	r5, [pc, #48]	; (356c <__libc_init_array+0x38>)
    353a:	4c0d      	ldr	r4, [pc, #52]	; (3570 <__libc_init_array+0x3c>)
    353c:	1b64      	subs	r4, r4, r5
    353e:	10a4      	asrs	r4, r4, #2
    3540:	42a6      	cmp	r6, r4
    3542:	d109      	bne.n	3558 <__libc_init_array+0x24>
    3544:	2600      	movs	r6, #0
    3546:	f000 f981 	bl	384c <_init>
    354a:	4d0a      	ldr	r5, [pc, #40]	; (3574 <__libc_init_array+0x40>)
    354c:	4c0a      	ldr	r4, [pc, #40]	; (3578 <__libc_init_array+0x44>)
    354e:	1b64      	subs	r4, r4, r5
    3550:	10a4      	asrs	r4, r4, #2
    3552:	42a6      	cmp	r6, r4
    3554:	d105      	bne.n	3562 <__libc_init_array+0x2e>
    3556:	bd70      	pop	{r4, r5, r6, pc}
    3558:	00b3      	lsls	r3, r6, #2
    355a:	58eb      	ldr	r3, [r5, r3]
    355c:	4798      	blx	r3
    355e:	3601      	adds	r6, #1
    3560:	e7ee      	b.n	3540 <__libc_init_array+0xc>
    3562:	00b3      	lsls	r3, r6, #2
    3564:	58eb      	ldr	r3, [r5, r3]
    3566:	4798      	blx	r3
    3568:	3601      	adds	r6, #1
    356a:	e7f2      	b.n	3552 <__libc_init_array+0x1e>
    356c:	00003858 	.word	0x00003858
    3570:	00003858 	.word	0x00003858
    3574:	00003858 	.word	0x00003858
    3578:	0000385c 	.word	0x0000385c

0000357c <memcpy>:
    357c:	2300      	movs	r3, #0
    357e:	b510      	push	{r4, lr}
    3580:	429a      	cmp	r2, r3
    3582:	d100      	bne.n	3586 <memcpy+0xa>
    3584:	bd10      	pop	{r4, pc}
    3586:	5ccc      	ldrb	r4, [r1, r3]
    3588:	54c4      	strb	r4, [r0, r3]
    358a:	3301      	adds	r3, #1
    358c:	e7f8      	b.n	3580 <memcpy+0x4>

0000358e <memset>:
    358e:	0003      	movs	r3, r0
    3590:	1882      	adds	r2, r0, r2
    3592:	4293      	cmp	r3, r2
    3594:	d100      	bne.n	3598 <memset+0xa>
    3596:	4770      	bx	lr
    3598:	7019      	strb	r1, [r3, #0]
    359a:	3301      	adds	r3, #1
    359c:	e7f9      	b.n	3592 <memset+0x4>
    359e:	0000      	movs	r0, r0
    35a0:	682f2e2e 	.word	0x682f2e2e
    35a4:	732f6c61 	.word	0x732f6c61
    35a8:	682f6372 	.word	0x682f6372
    35ac:	615f6c61 	.word	0x615f6c61
    35b0:	79735f63 	.word	0x79735f63
    35b4:	632e636e 	.word	0x632e636e
    35b8:	00000000 	.word	0x00000000
    35bc:	682f2e2e 	.word	0x682f2e2e
    35c0:	732f6c61 	.word	0x732f6c61
    35c4:	682f6372 	.word	0x682f6372
    35c8:	615f6c61 	.word	0x615f6c61
    35cc:	735f6364 	.word	0x735f6364
    35d0:	2e636e79 	.word	0x2e636e79
    35d4:	00000063 	.word	0x00000063
    35d8:	682f2e2e 	.word	0x682f2e2e
    35dc:	732f6c61 	.word	0x732f6c61
    35e0:	682f6372 	.word	0x682f6372
    35e4:	645f6c61 	.word	0x645f6c61
    35e8:	735f6361 	.word	0x735f6361
    35ec:	2e636e79 	.word	0x2e636e79
    35f0:	00000063 	.word	0x00000063
    35f4:	682f2e2e 	.word	0x682f2e2e
    35f8:	732f6c61 	.word	0x732f6c61
    35fc:	682f6372 	.word	0x682f6372
    3600:	665f6c61 	.word	0x665f6c61
    3604:	6873616c 	.word	0x6873616c
    3608:	0000632e 	.word	0x0000632e
    360c:	682f2e2e 	.word	0x682f2e2e
    3610:	732f6c61 	.word	0x732f6c61
    3614:	682f6372 	.word	0x682f6372
    3618:	695f6c61 	.word	0x695f6c61
    361c:	00632e6f 	.word	0x00632e6f
    3620:	682f2e2e 	.word	0x682f2e2e
    3624:	732f6c61 	.word	0x732f6c61
    3628:	682f6372 	.word	0x682f6372
    362c:	705f6c61 	.word	0x705f6c61
    3630:	632e6d77 	.word	0x632e6d77
    3634:	00000000 	.word	0x00000000
    3638:	682f2e2e 	.word	0x682f2e2e
    363c:	732f6c61 	.word	0x732f6c61
    3640:	682f6372 	.word	0x682f6372
    3644:	735f6c61 	.word	0x735f6c61
    3648:	6d5f6970 	.word	0x6d5f6970
    364c:	6e79735f 	.word	0x6e79735f
    3650:	00632e63 	.word	0x00632e63
    3654:	682f2e2e 	.word	0x682f2e2e
    3658:	732f6c61 	.word	0x732f6c61
    365c:	682f6372 	.word	0x682f6372
    3660:	745f6c61 	.word	0x745f6c61
    3664:	72656d69 	.word	0x72656d69
    3668:	0000632e 	.word	0x0000632e
    366c:	682f2e2e 	.word	0x682f2e2e
    3670:	732f6c61 	.word	0x732f6c61
    3674:	682f6372 	.word	0x682f6372
    3678:	755f6c61 	.word	0x755f6c61
    367c:	74726173 	.word	0x74726173
    3680:	7973615f 	.word	0x7973615f
    3684:	632e636e 	.word	0x632e636e
    3688:	00000000 	.word	0x00000000
    368c:	682f2e2e 	.word	0x682f2e2e
    3690:	752f6c61 	.word	0x752f6c61
    3694:	736c6974 	.word	0x736c6974
    3698:	6372732f 	.word	0x6372732f
    369c:	6974752f 	.word	0x6974752f
    36a0:	6c5f736c 	.word	0x6c5f736c
    36a4:	2e747369 	.word	0x2e747369
    36a8:	00000063 	.word	0x00000063
    36ac:	682f2e2e 	.word	0x682f2e2e
    36b0:	752f6c61 	.word	0x752f6c61
    36b4:	736c6974 	.word	0x736c6974
    36b8:	6372732f 	.word	0x6372732f
    36bc:	6974752f 	.word	0x6974752f
    36c0:	725f736c 	.word	0x725f736c
    36c4:	62676e69 	.word	0x62676e69
    36c8:	65666675 	.word	0x65666675
    36cc:	00632e72 	.word	0x00632e72

000036d0 <_cfgs>:
    36d0:	42004400 00000016 00000600 00000600     .D.B............
    36e0:	00000000 682f2e2e 612f6c70 70682f63     ....../hpl/ac/hp
    36f0:	63615f6c 0000632e                       l_ac.c..

000036f8 <_adcs>:
    36f8:	00000200 00000000 00000000 00000000     ................
	...
    3714:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    3724:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    3734:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00003744 <_map>:
    3744:	000000ff ffffffff 682f2e2e 652f6c70     ........../hpl/e
    3754:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    3764:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    3774:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....

00003784 <_usarts>:
    3784:	00000003 40310004 00030000 0000d8ad     ......1@........

00003794 <_i2cms>:
	...

000037ac <_i2css>:
	...

000037bc <sercomspi_regs>:
    37bc:	0020000c 00020000 00000000 01000009     .. .............
    37cc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    37dc:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    37ec:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    37fc:	65707073 00000000 454c4449 00000000     sppe....IDLE....
    380c:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    381c:	00003434 00003434 00003434 000033fc     44..44..44...3..
    382c:	00003476 00003490 00003434 00003434     v4...4..44..44..
    383c:	000033fc 00003476 20726d54 00637653     .3..v4..Tmr Svc.

0000384c <_init>:
    384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3852:	bc08      	pop	{r3}
    3854:	469e      	mov	lr, r3
    3856:	4770      	bx	lr

00003858 <__init_array_start>:
    3858:	000000cd 	.word	0x000000cd

0000385c <_fini>:
    385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3862:	bc08      	pop	{r3}
    3864:	469e      	mov	lr, r3
    3866:	4770      	bx	lr

00003868 <__fini_array_start>:
    3868:	000000a5 	.word	0x000000a5
